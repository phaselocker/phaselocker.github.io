
var Module;

if (typeof Module === 'undefined') Module = {};

if (!Module.expectedDataFileDownloads) {
  Module.expectedDataFileDownloads = 0;
  Module.finishedDataFileDownloads = 0;
}
Module.expectedDataFileDownloads++;
(function() {
 var loadPackage = function(metadata) {

    var PACKAGE_PATH;
    if (typeof window === 'object') {
      PACKAGE_PATH = window['encodeURIComponent'](window.location.pathname.toString().substring(0, window.location.pathname.toString().lastIndexOf('/')) + '/');
    } else if (typeof location !== 'undefined') {
      // worker
      PACKAGE_PATH = encodeURIComponent(location.pathname.toString().substring(0, location.pathname.toString().lastIndexOf('/')) + '/');
    } else {
      throw 'using preloaded data can only be done on a web page or in a web worker';
    }
    var PACKAGE_NAME = 'evosim.data';
    var REMOTE_PACKAGE_BASE = 'evosim.data';
    if (typeof Module['locateFilePackage'] === 'function' && !Module['locateFile']) {
      Module['locateFile'] = Module['locateFilePackage'];
      Module.printErr('warning: you defined Module.locateFilePackage, that has been renamed to Module.locateFile (using your locateFilePackage for now)');
    }
    var REMOTE_PACKAGE_NAME = typeof Module['locateFile'] === 'function' ?
                              Module['locateFile'](REMOTE_PACKAGE_BASE) :
                              ((Module['filePackagePrefixURL'] || '') + REMOTE_PACKAGE_BASE);
  
    var REMOTE_PACKAGE_SIZE = metadata.remote_package_size;
    var PACKAGE_UUID = metadata.package_uuid;
  
    function fetchRemotePackage(packageName, packageSize, callback, errback) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', packageName, true);
      xhr.responseType = 'arraybuffer';
      xhr.onprogress = function(event) {
        var url = packageName;
        var size = packageSize;
        if (event.total) size = event.total;
        if (event.loaded) {
          if (!xhr.addedTotal) {
            xhr.addedTotal = true;
            if (!Module.dataFileDownloads) Module.dataFileDownloads = {};
            Module.dataFileDownloads[url] = {
              loaded: event.loaded,
              total: size
            };
          } else {
            Module.dataFileDownloads[url].loaded = event.loaded;
          }
          var total = 0;
          var loaded = 0;
          var num = 0;
          for (var download in Module.dataFileDownloads) {
          var data = Module.dataFileDownloads[download];
            total += data.total;
            loaded += data.loaded;
            num++;
          }
          total = Math.ceil(total * Module.expectedDataFileDownloads/num);
          if (Module['setStatus']) Module['setStatus']('Downloading data... (' + loaded + '/' + total + ')');
        } else if (!Module.dataFileDownloads) {
          if (Module['setStatus']) Module['setStatus']('Downloading data...');
        }
      };
      xhr.onload = function(event) {
        var packageData = xhr.response;
        callback(packageData);
      };
      xhr.send(null);
    };

    function handleError(error) {
      console.error('package error:', error);
    };
  
      var fetched = null, fetchedCallback = null;
      fetchRemotePackage(REMOTE_PACKAGE_NAME, REMOTE_PACKAGE_SIZE, function(data) {
        if (fetchedCallback) {
          fetchedCallback(data);
          fetchedCallback = null;
        } else {
          fetched = data;
        }
      }, handleError);
    
  function runWithFS() {

    function assert(check, msg) {
      if (!check) throw msg + new Error().stack;
    }
Module['FS_createPath']('/', 'content', true, true);

    function DataRequest(start, end, crunched, audio) {
      this.start = start;
      this.end = end;
      this.crunched = crunched;
      this.audio = audio;
    }
    DataRequest.prototype = {
      requests: {},
      open: function(mode, name) {
        this.name = name;
        this.requests[name] = this;
        Module['addRunDependency']('fp ' + this.name);
      },
      send: function() {},
      onload: function() {
        var byteArray = this.byteArray.subarray(this.start, this.end);

          this.finish(byteArray);

      },
      finish: function(byteArray) {
        var that = this;

        Module['FS_createDataFile'](this.name, null, byteArray, true, true, true); // canOwn this data in the filesystem, it is a slide into the heap that will never change
        Module['removeRunDependency']('fp ' + that.name);

        this.requests[this.name] = null;
      },
    };

        var files = metadata.files;
        for (i = 0; i < files.length; ++i) {
          new DataRequest(files[i].start, files[i].end, files[i].crunched, files[i].audio).open('GET', files[i].filename);
        }

  
    function processPackageData(arrayBuffer) {
      Module.finishedDataFileDownloads++;
      assert(arrayBuffer, 'Loading data file failed.');
      assert(arrayBuffer instanceof ArrayBuffer, 'bad input to processPackageData');
      var byteArray = new Uint8Array(arrayBuffer);
      var curr;
      
        // copy the entire loaded file into a spot in the heap. Files will refer to slices in that. They cannot be freed though
        // (we may be allocating before malloc is ready, during startup).
        if (Module['SPLIT_MEMORY']) Module.printErr('warning: you should run the file packager with --no-heap-copy when SPLIT_MEMORY is used, otherwise copying into the heap may fail due to the splitting');
        var ptr = Module['getMemory'](byteArray.length);
        Module['HEAPU8'].set(byteArray, ptr);
        DataRequest.prototype.byteArray = Module['HEAPU8'].subarray(ptr, ptr+byteArray.length);
  
          var files = metadata.files;
          for (i = 0; i < files.length; ++i) {
            DataRequest.prototype.requests[files[i].filename].onload();
          }
              Module['removeRunDependency']('datafile_evosim.data');

    };
    Module['addRunDependency']('datafile_evosim.data');
  
    if (!Module.preloadResults) Module.preloadResults = {};
  
      Module.preloadResults[PACKAGE_NAME] = {fromCache: false};
      if (fetched) {
        processPackageData(fetched);
        fetched = null;
      } else {
        fetchedCallback = processPackageData;
      }
    
  }
  if (Module['calledRun']) {
    runWithFS();
  } else {
    if (!Module['preRun']) Module['preRun'] = [];
    Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
  }

 }
 loadPackage({"files": [{"audio": 0, "start": 0, "crunched": 0, "end": 45218, "filename": "/content/unicorn.svg"}], "remote_package_size": 45218, "package_uuid": "382d5a56-23d4-478e-8d00-023b79eeb622"});

})();

// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module["UTF16ToString"] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF16"] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module["lengthBytesUTF16"] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module["UTF32ToString"] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module["stringToUTF32"] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module["lengthBytesUTF32"] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 536870912;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;



buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [function($0, $1) { { Module.printErr('bad name in getProcAddress: ' + [Pointer_stringify($0), Pointer_stringify($1)]); } }];

function _emscripten_asm_const_2(code, a0, a1) {
 return ASM_CONSTS[code](a0, a1);
}



STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 22118528;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([75,85,81,1,255,0,0,0,79,85,81,1,0,128,0,0,85,85,81,1,0,0,255,0,90,85,81,1,255,255,0,0,97,85,81,1,0,255,255,0,102,85,81,1,255,0,255,0,110,85,81,1,0,0,0,0,116,85,81,1,128,128,128,0,121,85,81,1,128,128,128,0,126,85,81,1,255,255,255], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+21548316);
/* memory initializer */ allocate([2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,120,79,81,1,232,79,81,1,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,111,126,81,1,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,103,122,81,1,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,101,118,111,115,105,109,0,35,99,97,110,118,97,115,0,114,98,0,99,111,110,116,101,110,116,47,117,110,105,99,111,114,110,46,115,118,103,0,112,120,0,118,111,105,100,32,109,97,105,110,40,41,32,123,32,118,101,99,52,32,102,44,32,99,44,32,99,49,44,32,99,50,44,32,99,51,44,32,99,52,59,32,102,108,111,97,116,32,100,44,32,100,100,44,32,100,114,44,32,100,103,44,32,100,98,44,32,100,97,59,32,102,32,61,32,116,101,120,116,117,114,101,40,117,116,101,120,116,117,114,101,44,32,118,116,101,120,99,111,111,114,100,46,120,121,41,59,32,100,32,61,32,109,105,110,40,109,105,110,40,102,46,114,44,32,102,46,103,41,44,32,109,105,110,40,102,46,98,44,32,102,46,97,41,41,59,32,100,100,32,61,32,109,97,120,40,97,98,115,40,100,70,100,120,40,100,41,41,44,32,97,98,115,40,100,70,100,121,40,100,41,41,41,59,32,100,114,32,61,32,109,97,120,40,97,98,115,40,100,70,100,120,40,102,46,114,41,41,44,32,97,98,115,40,100,70,100,121,40,102,46,114,41,41,41,59,32,100,103,32,61,32,109,97,120,40,97,98,115,40,100,70,100,120,40,102,46,103,41,41,44,32,97,98,115,40,100,70,100,121,40,102,46,103,41,41,41,59,32,100,98,32,61,32,109,97,120,40,97,98,115,40,100,70,100,120,40,102,46,98,41,41,44,32,97,98,115,40,100,70,100,121,40,102,46,98,41,41,41,59,32,100,97,32,61,32,109,97,120,40,97,98,115,40,100,70,100,120,40,102,46,97,41,41,44,32,97,98,115,40,100,70,100,121,40,102,46,97,41,41,41,59,32,99,49,32,61,32,118,101,99,52,40,48,46,48,54,44,32,48,46,50,54,44,32,48,46,51,50,44,32,48,41,32,42,32,115,109,111,111,116,104,115,116,101,112,40,48,46,53,32,45,32,100,114,44,32,48,46,53,44,32,49,46,48,32,45,32,102,46,114,41,59,32,99,50,32,61,32,118,101,99,52,40,48,46,54,53,44,32,48,46,55,55,44,32,48,46,50,55,44,32,48,41,32,42,32,115,109,111,111,116,104,115,116,101,112,40,48,46,53,32,45,32,100,103,44,32,48,46,53,44,32,49,46,48,32,45,32,102,46,103,41,59,32,99,51,32,61,32,118,101,99,52,40,48,46,56,53,44,32,48,46,50,56,44,32,48,46,51,54,44,32,48,41,32,42,32,115,109,111,111,116,104,115,116,101,112,40,48,46,53,32,45,32,100,98,44,32,48,46,53,44,32,49,46,48,32,45,32,102,46,98,41,59,32,99,52,32,61,32,118,101,99,52,40,48,46,48,48,44,32,48,46,55,55,44,32,48,46,54,53,44,32,48,41,32,42,32,115,109,111,111,116,104,115,116,101,112,40,48,46,53,32,45,32,100,97,44,32,48,46,53,44,32,49,46,48,32,45,32,102,46,97,41,59,32,99,32,61,32,109,97,120,40,109,97,120,40,99,49,44,32,99,50,41,44,32,109,97,120,40,99,51,44,32,99,52,41,41,59,32,99,46,97,32,61,32,115,109,111,111,116,104,115,116,101,112,40,48,46,53,32,45,32,100,100,44,32,48,46,53,44,32,49,46,48,32,45,32,100,41,59,32,102,114,97,103,99,111,108,111,114,32,61,32,99,59,32,125,0,114,101,100,0,103,114,101,101,110,0,98,108,117,101,0,121,101,108,108,111,119,0,99,121,97,110,0,109,97,103,101,110,116,97,0,98,108,97,99,107,0,103,114,101,121,0,103,114,97,121,0,119,104,105,116,101,0,103,0,112,97,116,104,0,100,101,102,115,0,108,105,110,101,97,114,71,114,97,100,105,101,110,116,0,114,97,100,105,97,108,71,114,97,100,105,101,110,116,0,115,116,111,112,0,114,101,99,116,0,99,105,114,99,108,101,0,101,108,108,105,112,115,101,0,108,105,110,101,0,112,111,108,121,108,105,110,101,0,112,111,108,121,103,111,110,0,115,118,103,0,119,105,100,116,104,0,104,101,105,103,104,116,0,118,105,101,119,66,111,120,0,37,102,37,42,91,37,37,44,32,9,93,37,102,37,42,91,37,37,44,32,9,93,37,102,37,42,91,37,37,44,32,9,93,37,102,0,112,114,101,115,101,114,118,101,65,115,112,101,99,116,82,97,116,105,111,0,110,111,110,101,0,120,77,105,110,0,120,77,105,100,0,120,77,97,120,0,121,77,105,110,0,121,77,105,100,0,121,77,97,120,0,115,108,105,99,101,0,37,102,37,51,49,115,0,115,116,121,108,101,0,100,105,115,112,108,97,121,0,102,105,108,108,0,117,114,108,40,0,111,112,97,99,105,116,121,0,102,105,108,108,45,111,112,97,99,105,116,121,0,115,116,114,111,107,101,0,115,116,114,111,107,101,45,119,105,100,116,104,0,115,116,114,111,107,101,45,100,97,115,104,97,114,114,97,121,0,115,116,114,111,107,101,45,100,97,115,104,111,102,102,115,101,116,0,115,116,114,111,107,101,45,111,112,97,99,105,116,121,0,115,116,114,111,107,101,45,108,105,110,101,99,97,112,0,115,116,114,111,107,101,45,108,105,110,101,106,111,105,110,0,115,116,114,111,107,101,45,109,105,116,101,114,108,105,109,105,116,0,102,105,108,108,45,114,117,108,101,0,102,111,110,116,45,115,105,122,101,0,116,114,97,110,115,102,111,114,109,0,115,116,111,112,45,99,111,108,111,114,0,115,116,111,112,45,111,112,97,99,105,116,121,0,111,102,102,115,101,116,0,105,100,0,109,97,116,114,105,120,0,116,114,97,110,115,108,97,116,101,0,115,99,97,108,101,0,114,111,116,97,116,101,0,115,107,101,119,88,0,115,107,101,119,89,0,110,111,110,122,101,114,111,0,101,118,101,110,111,100,100,0,37,102,0,109,105,116,101,114,0,114,111,117,110,100,0,98,101,118,101,108,0,98,117,116,116,0,115,113,117,97,114,101,0,32,9,10,11,12,13,0,37,100,37,91,37,37,44,32,9,93,37,100,37,91,37,37,44,32,9,93,37,100,0,37,120,0,112,111,105,110,116,115,0,120,49,0,121,49,0,120,50,0,121,50,0,99,120,0,99,121,0,114,120,0,114,121,0,114,0,120,0,121,0,100,0,48,49,50,51,52,53,54,55,56,57,43,45,46,101,69,0,103,114,97,100,105,101,110,116,85,110,105,116,115,0,111,98,106,101,99,116,66,111,117,110,100,105,110,103,66,111,120,0,103,114,97,100,105,101,110,116,84,114,97,110,115,102,111,114,109,0,102,120,0,102,121,0,115,112,114,101,97,100,77,101,116,104,111,100,0,112,97,100,0,114,101,102,108,101,99,116,0,114,101,112,101,97,116,0,120,108,105,110,107,58,104,114,101,102,0,35,118,101,114,115,105,111,110,32,51,48,48,32,101,115,10,112,114,101,99,105,115,105,111,110,32,109,101,100,105,117,109,112,32,102,108,111,97,116,59,112,114,101,99,105,115,105,111,110,32,109,101,100,105,117,109,112,32,105,110,116,59,117,110,105,102,111,114,109,32,32,32,109,97,116,52,32,32,117,116,114,97,110,115,102,111,114,109,59,105,110,32,32,32,32,32,32,32,32,118,101,99,51,32,32,105,112,111,115,105,116,105,111,110,59,105,110,32,32,32,32,32,32,32,32,118,101,99,51,32,32,105,116,101,120,99,111,111,114,100,59,105,110,32,32,32,32,32,32,32,32,118,101,99,52,32,32,105,99,111,108,111,114,59,111,117,116,32,32,32,32,32,32,32,118,101,99,51,32,32,118,112,111,115,105,116,105,111,110,59,111,117,116,32,32,32,32,32,32,32,118,101,99,52,32,32,118,99,111,108,111,114,59,111,117,116,32,32,32,32,32,32,32,118,101,99,51,32,32,118,116,101,120,99,111,111,114,100,59,0,118,111,105,100,32,109,97,105,110,40,41,32,123,9,118,112,111,115,105,116,105,111,110,32,32,32,61,32,105,112,111,115,105,116,105,111,110,46,120,121,122,59,9,118,99,111,108,111,114,32,32,32,32,32,32,61,32,105,99,111,108,111,114,59,9,118,116,101,120,99,111,111,114,100,32,32,32,61,32,105,116,101,120,99,111,111,114,100,59,9,103,108,95,80,111,115,105,116,105,111,110,32,61,32,117,116,114,97,110,115,102,111,114,109,32,42,32,118,101,99,52,40,105,112,111,115,105,116,105,111,110,44,32,49,41,59,125,0,35,118,101,114,115,105,111,110,32,51,48,48,32,101,115,10,112,114,101,99,105,115,105,111,110,32,109,101,100,105,117,109,112,32,32,32,102,108,111,97,116,59,112,114,101,99,105,115,105,111,110,32,109,101,100,105,117,109,112,32,32,32,105,110,116,59,117,110,105,102,111,114,109,32,32,32,115,97,109,112,108,101,114,50,68,32,117,116,101,120,116,117,114,101,59,117,110,105,102,111,114,109,32,32,32,118,101,99,52,32,32,32,32,32,32,117,99,108,105,112,59,117,110,105,102,111,114,109,32,32,32,118,101,99,51,32,32,32,32,32,32,117,114,101,115,111,108,117,116,105,111,110,59,105,110,32,32,32,32,32,32,32,32,118,101,99,51,32,32,32,32,32,32,118,112,111,115,105,116,105,111,110,59,105,110,32,32,32,32,32,32,32,32,118,101,99,52,32,32,32,32,32,32,118,99,111,108,111,114,59,105,110,32,32,32,32,32,32,32,32,118,101,99,51,32,32,32,32,32,32,118,116,101,120,99,111,111,114,100,59,111,117,116,32,32,32,32,32,32,32,118,101,99,52,32,32,32,32,32,32,102,114,97,103,99,111,108,111,114,59,118,101,99,51,32,114,103,98,50,104,115,118,40,118,101,99,51,32,99,41,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,32,32,123,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,32,32,9,118,101,99,52,32,75,32,61,32,118,101,99,52,40,48,46,48,44,32,45,49,46,48,32,47,32,51,46,48,44,32,50,46,48,32,47,32,51,46,48,44,32,45,49,46,48,41,59,9,9,9,9,9,9,9,32,32,9,118,101,99,52,32,112,32,61,32,109,105,120,40,118,101,99,52,40,99,46,98,103,44,32,75,46,119,122,41,44,32,118,101,99,52,40,99,46,103,98,44,32,75,46,120,121,41,44,32,115,116,101,112,40,99,46,98,44,32,99,46,103,41,41,59,9,9,9,32,32,9,118,101,99,52,32,113,32,61,32,109,105,120,40,118,101,99,52,40,112,46,120,121,119,44,32,99,46,114,41,44,32,118,101,99,52,40,99,46,114,44,32,112,46,121,122,120,41,44,32,115,116,101,112,40,112,46,120,44,32,99,46,114,41,41,59,9,9,9,32,32,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,32,32,9,102,108,111,97,116,32,100,32,61,32,113,46,120,32,45,32,109,105,110,40,113,46,119,44,32,113,46,121,41,59,9,9,9,9,9,9,9,9,9,9,9,9,32,32,9,102,108,111,97,116,32,101,32,61,32,49,46,48,101,45,49,48,59,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,32,32,9,114,101,116,117,114,110,32,118,101,99,51,40,97,98,115,40,113,46,122,32,43,32,40,113,46,119,32,45,32,113,46,121,41,32,47,32,40,54,46,48,32,42,32,100,32,43,32,101,41,41,44,32,100,32,47,32,40,113,46,120,32,43,32,101,41,44,32,113,46,120,41,59,9,32,32,125,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,32,32,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,32,32,118,101,99,51,32,104,115,118,50,114,103,98,40,118,101,99,51,32,99,41,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,32,32,123,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,32,32,9,118,101,99,52,32,75,32,61,32,118,101,99,52,40,49,46,48,44,32,50,46,48,32,47,32,51,46,48,44,32,49,46,48,32,47,32,51,46,48,44,32,51,46,48,41,59,9,9,9,9,9,9,9,9,32,32,9,118,101,99,51,32,112,32,61,32,97,98,115,40,102,114,97,99,116,40,99,46,120,120,120,32,43,32,75,46,120,121,122,41,32,42,32,54,46,48,32,45,32,75,46,119,119,119,41,59,9,9,9,9,9,9,9,32,32,9,114,101,116,117,114,110,32,99,46,122,32,42,32,109,105,120,40,75,46,120,120,120,44,32,99,108,97,109,112,40,112,32,45,32,75,46,120,120,120,44,32,48,46,48,44,32,49,46,48,41,44,32,99,46,121,41,59,9,9,9,9,9,32,32,125,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,99,111,110,115,116,32,102,108,111,97,116,32,80,73,32,61,32,51,46,49,52,49,53,57,50,54,53,51,53,57,59,99,111,110,115,116,32,102,108,111,97,116,32,68,69,71,95,84,79,95,82,65,68,32,61,32,80,73,32,47,32,49,56,48,46,48,59,118,101,99,52,32,100,101,102,97,117,108,116,95,115,104,97,100,101,114,40,41,32,123,32,32,32,105,102,32,40,118,112,111,115,105,116,105,111,110,46,120,32,60,32,117,99,108,105,112,46,120,32,124,124,32,118,112,111,115,105,116,105,111,110,46,120,32,62,32,117,99,108,105,112,46,122,32,124,124,32,32,32,32,32,32,32,32,118,112,111,115,105,116,105,111,110,46,121,32,60,32,117,99,108,105,112,46,121,32,124,124,32,118,112,111,115,105,116,105,111,110,46,121,32,62,32,117,99,108,105,112,46,119,41,32,32,32,32,32,32,32,100,105,115,99,97,114,100,59,32,32,32,118,101,99,52,32,116,101,120,32,61,32,109,105,120,40,118,101,99,52,40,49,44,32,49,44,32,49,44,32,49,41,44,32,116,101,120,116,117,114,101,40,117,116,101,120,116,117,114,101,44,32,118,116,101,120,99,111,111,114,100,46,120,121,41,44,32,118,116,101,120,99,111,111,114,100,46,122,41,59,32,32,32,118,101,99,51,32,114,103,98,32,61,32,116,101,120,46,114,103,98,32,42,32,118,99,111,108,111,114,46,114,103,98,32,42,32,118,99,111,108,111,114,46,97,59,32,32,32,102,108,111,97,116,32,32,97,32,61,32,116,101,120,46,97,32,42,32,118,99,111,108,111,114,46,97,59,9,114,101,116,117,114,110,32,118,101,99,52,40,114,103,98,44,32,97,41,59,125,0,117,116,114,97,110,115,102,111,114,109,0,117,116,101,120,116,117,114,101,0,117,99,108,105,112,0,117,114,101,115,111,108,117,116,105,111,110,0,105,112,111,115,105,116,105,111,110,0,105,116,101,120,99,111,111,114,100,0,105,99,111,108,111,114], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+22105716);
/* memory initializer */ allocate([37,115,10,0,71,101,110,70,114,97,109,101,98,117,102,102,101,114,115,0,66,105,110,100,70,114,97,109,101,98,117,102,102,101,114,0,70,114,97,109,101,98,117,102,102,101,114,84,101,120,116,117,114,101,50,68,0,67,114,101,97,116,101,80,114,111,103,114,97,109,0,67,114,101,97,116,101,83,104,97,100,101,114,0,76,105,110,107,80,114,111,103,114,97,109,0,83,104,97,100,101,114,83,111,117,114,99,101,0,85,115,101,80,114,111,103,114,97,109,0,68,101,108,101,116,101,80,114,111,103,114,97,109,0,68,101,108,101,116,101,83,104,97,100,101,114,0,67,111,109,112,105,108,101,83,104,97,100,101,114,0,65,116,116,97,99,104,83,104,97,100,101,114,0,71,101,116,83,104,97,100,101,114,105,118,0,71,101,116,80,114,111,103,114,97,109,105,118,0,71,101,116,80,114,111,103,114,97,109,73,110,102,111,76,111,103,0,71,101,116,83,104,97,100,101,114,73,110,102,111,76,111,103,0,71,101,116,65,116,116,114,105,98,76,111,99,97,116,105,111,110,0,71,101,116,85,110,105,102,111,114,109,76,111,99,97,116,105,111,110,0,85,110,105,102,111,114,109,49,102,118,0,85,110,105,102,111,114,109,50,102,118,0,85,110,105,102,111,114,109,51,102,118,0,85,110,105,102,111,114,109,52,102,118,0,85,110,105,102,111,114,109,49,105,118,0,85,110,105,102,111,114,109,50,105,118,0,85,110,105,102,111,114,109,51,105,118,0,85,110,105,102,111,114,109,52,105,118,0,85,110,105,102,111,114,109,77,97,116,114,105,120,52,102,118,0,66,105,110,100,66,117,102,102,101,114,0,71,101,110,66,117,102,102,101,114,115,0,68,101,108,101,116,101,66,117,102,102,101,114,115,0,66,117,102,102,101,114,68,97,116,97,0,66,117,102,102,101,114,83,117,98,68,97,116,97,0,86,101,114,116,101,120,65,116,116,114,105,98,80,111,105,110,116,101,114,0,68,105,115,97,98,108,101,86,101,114,116,101,120,65,116,116,114,105,98,65,114,114,97,121,0,69,110,97,98,108,101,86,101,114,116,101,120,65,116,116,114,105,98,65,114,114,97,121,0,66,108,101,110,100,69,113,117,97,116,105,111,110,0,71,101,110,101,114,97,116,101,77,105,112,109,97,112,0,118,111,105,100,32,109,97,105,110,40,41,32,123,9,102,114,97,103,99,111,108,111,114,32,61,32,100,101,102,97,117,108,116,95,115,104,97,100,101,114,40,41,59,9,105,102,32,40,102,114,97,103,99,111,108,111,114,46,97,32,61,61,32,48,46,48,41,32,100,105,115,99,97,114,100,59,125,0,77,105,115,115,105,110,103,32,79,112,101,110,71,76,32,69,120,116,101,110,115,105,111,110,58,32,37,115,10,0,69,88,84,0,65,82,66,0,79,69,83,0,65,78,71,76,69,0,103,108,67,114,101,97,116,101,80,114,111,103,114,97,109,79,98,106,101,99,116,0,103,108,67,114,101,97,116,101,80,114,111,103,114,97,109,0,103,108,85,115,101,80,114,111,103,114,97,109,79,98,106,101,99,116,0,103,108,85,115,101,80,114,111,103,114,97,109,0,103,108,67,114,101,97,116,101,83,104,97,100,101,114,79,98,106,101,99,116,0,103,108,67,114,101,97,116,101,83,104,97,100,101,114,0,103,108,65,116,116,97,99,104,79,98,106,101,99,116,0,103,108,65,116,116,97,99,104,83,104,97,100,101,114,0,103,108,68,101,116,97,99,104,79,98,106,101,99,116,0,103,108,68,101,116,97,99,104,83,104,97,100,101,114,0,103,108,80,105,120,101,108,83,116,111,114,101,105,0,103,108,71,101,116,83,116,114,105,110,103,0,103,108,71,101,116,73,110,116,101,103,101,114,118,0,103,108,71,101,116,70,108,111,97,116,118,0,103,108,71,101,116,66,111,111,108,101,97,110,118,0,103,108,71,101,110,84,101,120,116,117,114,101,115,0,103,108,68,101,108,101,116,101,84,101,120,116,117,114,101,115,0,103,108,67,111,109,112,114,101,115,115,101,100,84,101,120,73,109,97,103,101,50,68,0,103,108,67,111,109,112,114,101,115,115,101,100,84,101,120,83,117,98,73,109,97,103,101,50,68,0,103,108,84,101,120,73,109,97,103,101,50,68,0,103,108,84,101,120,83,117,98,73,109,97,103,101,50,68,0,103,108,82,101,97,100,80,105,120,101,108,115,0,103,108,66,105,110,100,84,101,120,116,117,114,101,0,103,108,71,101,116,84,101,120,80,97,114,97,109,101,116,101,114,102,118,0,103,108,71,101,116,84,101,120,80,97,114,97,109,101,116,101,114,105,118,0,103,108,84,101,120,80,97,114,97,109,101,116,101,114,102,118,0,103,108,84,101,120,80,97,114,97,109,101,116,101,114,105,118,0,103,108,73,115,84,101,120,116,117,114,101,0,103,108,71,101,110,66,117,102,102,101,114,115,0,103,108,68,101,108,101,116,101,66,117,102,102,101,114,115,0,103,108,71,101,116,66,117,102,102,101,114,80,97,114,97,109,101,116,101,114,105,118,0,103,108,66,117,102,102,101,114,68,97,116,97,0,103,108,66,117,102,102,101,114,83,117,98,68,97,116,97,0,103,108,73,115,66,117,102,102,101,114,0,103,108,71,101,110,82,101,110,100,101,114,98,117,102,102,101,114,115,0,103,108,68,101,108,101,116,101,82,101,110,100,101,114,98,117,102,102,101,114,115,0,103,108,66,105,110,100,82,101,110,100,101,114,98,117,102,102,101,114,0,103,108,71,101,116,82,101,110,100,101,114,98,117,102,102,101,114,80,97,114,97,109,101,116,101,114,105,118,0,103,108,73,115,82,101,110,100,101,114,98,117,102,102,101,114,0,103,108,71,101,116,85,110,105,102,111,114,109,102,118,0,103,108,71,101,116,85,110,105,102,111,114,109,105,118,0,103,108,71,101,116,85,110,105,102,111,114,109,76,111,99,97,116,105,111,110,0,103,108,71,101,116,86,101,114,116,101,120,65,116,116,114,105,98,102,118,0,103,108,71,101,116,86,101,114,116,101,120,65,116,116,114,105,98,105,118,0,103,108,71,101,116,86,101,114,116,101,120,65,116,116,114,105,98,80,111,105,110,116,101,114,118,0,103,108,71,101,116,65,99,116,105,118,101,85,110,105,102,111,114,109,0,103,108,85,110,105,102,111,114,109,49,102,0,103,108,85,110,105,102,111,114,109,50,102,0,103,108,85,110,105,102,111,114,109,51,102,0,103,108,85,110,105,102,111,114,109,52,102,0,103,108,85,110,105,102,111,114,109,49,105,0,103,108,85,110,105,102,111,114,109,50,105,0,103,108,85,110,105,102,111,114,109,51,105,0,103,108,85,110,105,102,111,114,109,52,105,0,103,108,85,110,105,102,111,114,109,49,105,118,0,103,108,85,110,105,102,111,114,109,50,105,118,0,103,108,85,110,105,102,111,114,109,51,105,118,0,103,108,85,110,105,102,111,114,109,52,105,118,0,103,108,85,110,105,102,111,114,109,49,102,118,0,103,108,85,110,105,102,111,114,109,50,102,118,0,103,108,85,110,105,102,111,114,109,51,102,118,0,103,108,85,110,105,102,111,114,109,52,102,118,0,103,108,85,110,105,102,111,114,109,77,97,116,114,105,120,50,102,118,0,103,108,85,110,105,102,111,114,109,77,97,116,114,105,120,51,102,118,0,103,108,85,110,105,102,111,114,109,77,97,116,114,105,120,52,102,118,0,103,108,66,105,110,100,66,117,102,102,101,114,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,49,102,118,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,50,102,118,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,51,102,118,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,52,102,118,0,103,108,71,101,116,65,116,116,114,105,98,76,111,99,97,116,105,111,110,0,103,108,71,101,116,65,99,116,105,118,101,65,116,116,114,105,98,0,103,108,68,101,108,101,116,101,83,104,97,100,101,114,0,103,108,71,101,116,65,116,116,97,99,104,101,100,83,104,97,100,101,114,115,0,103,108,83,104,97,100,101,114,83,111,117,114,99,101,0,103,108,71,101,116,83,104,97,100,101,114,83,111,117,114,99,101,0,103,108,67,111,109,112,105,108,101,83,104,97,100,101,114,0,103,108,71,101,116,83,104,97,100,101,114,73,110,102,111,76,111,103,0,103,108,71,101,116,83,104,97,100,101,114,105,118,0,103,108,71,101,116,80,114,111,103,114,97,109,105,118,0,103,108,73,115,83,104,97,100,101,114,0,103,108,68,101,108,101,116,101,80,114,111,103,114,97,109,0,103,108,71,101,116,83,104,97,100,101,114,80,114,101,99,105,115,105,111,110,70,111,114,109,97,116,0,103,108,76,105,110,107,80,114,111,103,114,97,109,0,103,108,71,101,116,80,114,111,103,114,97,109,73,110,102,111,76,111,103,0,103,108,86,97,108,105,100,97,116,101,80,114,111,103,114,97,109,0,103,108,73,115,80,114,111,103,114,97,109,0,103,108,66,105,110,100,65,116,116,114,105,98,76,111,99,97,116,105,111,110,0,103,108,66,105,110,100,70,114,97,109,101,98,117,102,102,101,114,0,103,108,71,101,110,70,114,97,109,101,98,117,102,102,101,114,115,0,103,108,68,101,108,101,116,101,70,114,97,109,101,98,117,102,102,101,114,115,0,103,108,70,114,97,109,101,98,117,102,102,101,114,82,101,110,100,101,114,98,117,102,102,101,114,0,103,108,70,114,97,109,101,98,117,102,102,101,114,84,101,120,116,117,114,101,50,68,0,103,108,71,101,116,70,114,97,109,101,98,117,102,102,101,114,65,116,116,97,99,104,109,101,110,116,80,97,114,97,109,101,116,101,114,105,118,0,103,108,73,115,70,114,97,109,101,98,117,102,102,101,114,0,103,108,68,101,108,101,116,101,79,98,106,101,99,116,0,103,108,71,101,116,79,98,106,101,99,116,80,97,114,97,109,101,116,101,114,105,118,0,103,108,71,101,116,73,110,102,111,76,111,103,0,103,108,66,105,110,100,80,114,111,103,114,97,109,0,103,108,71,101,116,80,111,105,110,116,101,114,118,0,103,108,68,114,97,119,82,97,110,103,101,69,108,101,109,101,110,116,115,0,103,108,69,110,97,98,108,101,67,108,105,101,110,116,83,116,97,116,101,0,103,108,86,101,114,116,101,120,80,111,105,110,116,101,114,0,103,108,84,101,120,67,111,111,114,100,80,111,105,110,116,101,114,0,103,108,78,111,114,109,97,108,80,111,105,110,116,101,114,0,103,108,67,111,108,111,114,80,111,105,110,116,101,114,0,103,108,67,108,105,101,110,116,65,99,116,105,118,101,84,101,120,116,117,114,101,0,103,108,71,101,110,86,101,114,116,101,120,65,114,114,97,121,115,0,103,108,68,101,108,101,116,101,86,101,114,116,101,120,65,114,114,97,121,115,0,103,108,66,105,110,100,86,101,114,116,101,120,65,114,114,97,121,0,103,108,77,97,116,114,105,120,77,111,100,101,0,103,108,76,111,97,100,73,100,101,110,116,105,116,121,0,103,108,76,111,97,100,77,97,116,114,105,120,102,0,103,108,70,114,117,115,116,117,109,0,103,108,82,111,116,97,116,101,102,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,80,111,105,110,116,101,114,0,103,108,69,110,97,98,108,101,86,101,114,116,101,120,65,116,116,114,105,98,65,114,114,97,121,0,103,108,68,105,115,97,98,108,101,86,101,114,116,101,120,65,116,116,114,105,98,65,114,114,97,121,0,103,108,68,114,97,119,65,114,114,97,121,115,0,103,108,68,114,97,119,69,108,101,109,101,110,116,115,0,103,108,83,104,97,100,101,114,66,105,110,97,114,121,0,103,108,82,101,108,101,97,115,101,83,104,97,100,101,114,67,111,109,112,105,108,101,114,0,103,108,71,101,116,69,114,114,111,114,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,68,105,118,105,115,111,114,0,103,108,68,114,97,119,65,114,114,97,121,115,73,110,115,116,97,110,99,101,100,0,103,108,68,114,97,119,69,108,101,109,101,110,116,115,73,110,115,116,97,110,99,101,100,0,103,108,70,105,110,105,115,104,0,103,108,70,108,117,115,104,0,103,108,67,108,101,97,114,68,101,112,116,104,0,103,108,67,108,101,97,114,68,101,112,116,104,102,0,103,108,68,101,112,116,104,70,117,110,99,0,103,108,69,110,97,98,108,101,0,103,108,68,105,115,97,98,108,101,0,103,108,70,114,111,110,116,70,97,99,101,0,103,108,67,117,108,108,70,97,99,101,0,103,108,67,108,101,97,114,0,103,108,76,105,110,101,87,105,100,116,104,0,103,108,67,108,101,97,114,83,116,101,110,99,105,108,0,103,108,68,101,112,116,104,77,97,115,107,0,103,108,83,116,101,110,99,105,108,77,97,115,107,0,103,108,67,104,101,99,107,70,114,97,109,101,98,117,102,102,101,114,83,116,97,116,117,115,0,103,108,71,101,110,101,114,97,116,101,77,105,112,109,97,112,0,103,108,65,99,116,105,118,101,84,101,120,116,117,114,101,0,103,108,66,108,101,110,100,69,113,117,97,116,105,111,110,0,103,108,73,115,69,110,97,98,108,101,100,0,103,108,66,108,101,110,100,70,117,110,99,0,103,108,66,108,101,110,100,69,113,117,97,116,105,111,110,83,101,112,97,114,97,116,101,0,103,108,68,101,112,116,104,82,97,110,103,101,0,103,108,68,101,112,116,104,82,97,110,103,101,102,0,103,108,83,116,101,110,99,105,108,77,97,115,107,83,101,112,97,114,97,116,101,0,103,108,72,105,110,116,0,103,108,80,111,108,121,103,111,110,79,102,102,115,101,116,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,49,102,0,103,108,83,97,109,112,108,101,67,111,118,101,114,97,103,101,0,103,108,84,101,120,80,97,114,97,109,101,116,101,114,105,0,103,108,84,101,120,80,97,114,97,109,101,116,101,114,102,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,50,102,0,103,108,83,116,101,110,99,105,108,70,117,110,99,0,103,108,83,116,101,110,99,105,108,79,112,0,103,108,86,105,101,119,112,111,114,116,0,103,108,67,108,101,97,114,67,111,108,111,114,0,103,108,83,99,105,115,115,111,114,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,51,102,0,103,108,67,111,108,111,114,77,97,115,107,0,103,108,82,101,110,100,101,114,98,117,102,102,101,114,83,116,111,114,97,103,101,0,103,108,66,108,101,110,100,70,117,110,99,83,101,112,97,114,97,116,101,0,103,108,66,108,101,110,100,67,111,108,111,114,0,103,108,83,116,101,110,99,105,108,70,117,110,99,83,101,112,97,114,97,116,101,0,103,108,83,116,101,110,99,105,108,79,112,83,101,112,97,114,97,116,101,0,103,108,86,101,114,116,101,120,65,116,116,114,105,98,52,102,0,103,108,67,111,112,121,84,101,120,73,109,97,103,101,50,68,0,103,108,67,111,112,121,84,101,120,83,117,98,73,109,97,103,101,50,68,0,103,108,68,114,97,119,66,117,102,102,101,114,115,0,123,32,77,111,100,117,108,101,46,112,114,105,110,116,69,114,114,40,39,98,97,100,32,110,97,109,101,32,105,110,32,103,101,116,80,114,111,99,65,100,100,114,101,115,115,58,32,39,32,43,32,91,80,111,105,110,116,101,114,95,115,116,114,105,110,103,105,102,121,40,36,48,41,44,32,80,111,105,110,116,101,114,95,115,116,114,105,110,103,105,102,121,40,36,49,41,93,41,59,32,125,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,105,110,102,105,110,105,116,121,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,114,119,97], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+22111181);
/* memory initializer */ allocate([17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+22117991);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  var GL={counter:1,lastError:0,buffers:[],mappedBuffers:{},programs:[],framebuffers:[],renderbuffers:[],textures:[],uniforms:[],shaders:[],vaos:[],contexts:[],currentContext:null,queries:[],samplers:[],transformFeedbacks:[],syncs:[],byteSizeByTypeRoot:5120,byteSizeByType:[1,1,2,2,4,4,4,2,3,4,8],programInfos:{},stringCache:{},stringiCache:{},packAlignment:4,unpackAlignment:4,init:function () {
        GL.miniTempBuffer = new Float32Array(GL.MINI_TEMP_BUFFER_SIZE);
        for (var i = 0; i < GL.MINI_TEMP_BUFFER_SIZE; i++) {
          GL.miniTempBufferViews[i] = GL.miniTempBuffer.subarray(0, i+1);
        }
      },recordError:function recordError(errorCode) {
        if (!GL.lastError) {
          GL.lastError = errorCode;
        }
      },getNewId:function (table) {
        var ret = GL.counter++;
        for (var i = table.length; i < ret; i++) {
          table[i] = null;
        }
        return ret;
      },MINI_TEMP_BUFFER_SIZE:16,miniTempBuffer:null,miniTempBufferViews:[0],getSource:function (shader, count, string, length) {
        var source = '';
        for (var i = 0; i < count; ++i) {
          var frag;
          if (length) {
            var len = HEAP32[(((length)+(i*4))>>2)];
            if (len < 0) {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
            } else {
              frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)], len);
            }
          } else {
            frag = Pointer_stringify(HEAP32[(((string)+(i*4))>>2)]);
          }
          source += frag;
        }
        return source;
      },createContext:function (canvas, webGLContextAttributes) {
        if (typeof webGLContextAttributes.majorVersion === 'undefined' && typeof webGLContextAttributes.minorVersion === 'undefined') {
          webGLContextAttributes.majorVersion = 2;
          webGLContextAttributes.minorVersion = 0;
        }
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
          try {
            if (webGLContextAttributes.majorVersion == 1 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl", webGLContextAttributes) || canvas.getContext("experimental-webgl", webGLContextAttributes);
            } else if (webGLContextAttributes.majorVersion == 2 && webGLContextAttributes.minorVersion == 0) {
              ctx = canvas.getContext("webgl2", webGLContextAttributes) || canvas.getContext("experimental-webgl2", webGLContextAttributes);
            } else {
              throw 'Unsupported WebGL context version ' + majorVersion + '.' + minorVersion + '!'
            }
          } finally {
            canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e, JSON.stringify(webGLContextAttributes)]);
          return 0;
        }
        // possible GL_DEBUG entry point: ctx = wrapDebugGL(ctx);
  
        if (!ctx) return 0;
        return GL.registerContext(ctx, webGLContextAttributes);
      },registerContext:function (ctx, webGLContextAttributes) {
        var handle = GL.getNewId(GL.contexts);
        var context = {
          handle: handle,
          version: webGLContextAttributes.majorVersion,
          GLctx: ctx
        };
        // Store the created context object so that we can access the context given a canvas without having to pass the parameters again.
        if (ctx.canvas) ctx.canvas.GLctxObject = context;
        GL.contexts[handle] = context;
        if (typeof webGLContextAttributes['enableExtensionsByDefault'] === 'undefined' || webGLContextAttributes.enableExtensionsByDefault) {
          GL.initExtensions(context);
        }
        return handle;
      },makeContextCurrent:function (contextHandle) {
        var context = GL.contexts[contextHandle];
        if (!context) return false;
        GLctx = Module.ctx = context.GLctx; // Active WebGL context object.
        GL.currentContext = context; // Active Emscripten GL layer context object.
        return true;
      },getContext:function (contextHandle) {
        return GL.contexts[contextHandle];
      },deleteContext:function (contextHandle) {
        if (GL.currentContext === GL.contexts[contextHandle]) GL.currentContext = null;
        if (typeof JSEvents === 'object') JSEvents.removeAllHandlersOnTarget(GL.contexts[contextHandle].GLctx.canvas); // Release all JS event handlers on the DOM element that the GL context is associated with since the context is now deleted.
        if (GL.contexts[contextHandle] && GL.contexts[contextHandle].GLctx.canvas) GL.contexts[contextHandle].GLctx.canvas.GLctxObject = undefined; // Make sure the canvas object no longer refers to the context object so there are no GC surprises.
        GL.contexts[contextHandle] = null;
      },initExtensions:function (context) {
        // If this function is called without a specific context object, init the extensions of the currently active context.
        if (!context) context = GL.currentContext;
  
        if (context.initExtensionsDone) return;
        context.initExtensionsDone = true;
  
        var GLctx = context.GLctx;
  
        context.maxVertexAttribs = GLctx.getParameter(GLctx.MAX_VERTEX_ATTRIBS);
  
        // Detect the presence of a few extensions manually, this GL interop layer itself will need to know if they exist. 
  
        if (context.version < 2) {
          // Extension available from Firefox 26 and Google Chrome 30
          var instancedArraysExt = GLctx.getExtension('ANGLE_instanced_arrays');
          if (instancedArraysExt) {
            GLctx['vertexAttribDivisor'] = function(index, divisor) { instancedArraysExt['vertexAttribDivisorANGLE'](index, divisor); };
            GLctx['drawArraysInstanced'] = function(mode, first, count, primcount) { instancedArraysExt['drawArraysInstancedANGLE'](mode, first, count, primcount); };
            GLctx['drawElementsInstanced'] = function(mode, count, type, indices, primcount) { instancedArraysExt['drawElementsInstancedANGLE'](mode, count, type, indices, primcount); };
          }
  
          // Extension available from Firefox 25 and WebKit
          var vaoExt = GLctx.getExtension('OES_vertex_array_object');
          if (vaoExt) {
            GLctx['createVertexArray'] = function() { return vaoExt['createVertexArrayOES'](); };
            GLctx['deleteVertexArray'] = function(vao) { vaoExt['deleteVertexArrayOES'](vao); };
            GLctx['bindVertexArray'] = function(vao) { vaoExt['bindVertexArrayOES'](vao); };
            GLctx['isVertexArray'] = function(vao) { return vaoExt['isVertexArrayOES'](vao); };
          }
  
          var drawBuffersExt = GLctx.getExtension('WEBGL_draw_buffers');
          if (drawBuffersExt) {
            GLctx['drawBuffers'] = function(n, bufs) { drawBuffersExt['drawBuffersWEBGL'](n, bufs); };
          }
        }
  
        // These are the 'safe' feature-enabling extensions that don't add any performance impact related to e.g. debugging, and
        // should be enabled by default so that client GLES2/GL code will not need to go through extra hoops to get its stuff working.
        // As new extensions are ratified at http://www.khronos.org/registry/webgl/extensions/ , feel free to add your new extensions
        // here, as long as they don't produce a performance impact for users that might not be using those extensions.
        // E.g. debugging-related extensions should probably be off by default.
        var automaticallyEnabledExtensions = [ "OES_texture_float", "OES_texture_half_float", "OES_standard_derivatives",
                                               "OES_vertex_array_object", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture",
                                               "OES_element_index_uint", "EXT_texture_filter_anisotropic", "ANGLE_instanced_arrays",
                                               "OES_texture_float_linear", "OES_texture_half_float_linear", "WEBGL_compressed_texture_atc",
                                               "WEBGL_compressed_texture_pvrtc", "EXT_color_buffer_half_float", "WEBGL_color_buffer_float",
                                               "EXT_frag_depth", "EXT_sRGB", "WEBGL_draw_buffers", "WEBGL_shared_resources",
                                               "EXT_shader_texture_lod" ];
  
        function shouldEnableAutomatically(extension) {
          var ret = false;
          automaticallyEnabledExtensions.forEach(function(include) {
            if (ext.indexOf(include) != -1) {
              ret = true;
            }
          });
          return ret;
        }
  
        var exts = GLctx.getSupportedExtensions();
        if (exts && exts.length > 0) {
          GLctx.getSupportedExtensions().forEach(function(ext) {
            if (automaticallyEnabledExtensions.indexOf(ext) != -1) {
              GLctx.getExtension(ext); // Calling .getExtension enables that extension permanently, no need to store the return value to be enabled.
            }
          });
        }
      },populateUniformTable:function (program) {
        var p = GL.programs[program];
        GL.programInfos[program] = {
          uniforms: {},
          maxUniformLength: 0, // This is eagerly computed below, since we already enumerate all uniforms anyway.
          maxAttributeLength: -1 // This is lazily computed and cached, computed when/if first asked, "-1" meaning not computed yet.
        };
  
        var ptable = GL.programInfos[program];
        var utable = ptable.uniforms;
        // A program's uniform table maps the string name of an uniform to an integer location of that uniform.
        // The global GL.uniforms map maps integer locations to WebGLUniformLocations.
        var numUniforms = GLctx.getProgramParameter(p, GLctx.ACTIVE_UNIFORMS);
        for (var i = 0; i < numUniforms; ++i) {
          var u = GLctx.getActiveUniform(p, i);
  
          var name = u.name;
          ptable.maxUniformLength = Math.max(ptable.maxUniformLength, name.length+1);
  
          // Strip off any trailing array specifier we might have got, e.g. "[0]".
          if (name.indexOf(']', name.length-1) !== -1) {
            var ls = name.lastIndexOf('[');
            name = name.slice(0, ls);
          }
  
          // Optimize memory usage slightly: If we have an array of uniforms, e.g. 'vec3 colors[3];', then 
          // only store the string 'colors' in utable, and 'colors[0]', 'colors[1]' and 'colors[2]' will be parsed as 'colors'+i.
          // Note that for the GL.uniforms table, we still need to fetch the all WebGLUniformLocations for all the indices.
          var loc = GLctx.getUniformLocation(p, name);
          var id = GL.getNewId(GL.uniforms);
          utable[name] = [u.size, id];
          GL.uniforms[id] = loc;
  
          for (var j = 1; j < u.size; ++j) {
            var n = name + '['+j+']';
            loc = GLctx.getUniformLocation(p, n);
            id = GL.getNewId(GL.uniforms);
  
            GL.uniforms[id] = loc;
          }
        }
      }};function _emscripten_glIsRenderbuffer(renderbuffer) {
      var rb = GL.renderbuffers[renderbuffer];
      if (!rb) return 0;
      return GLctx.isRenderbuffer(rb);
    }

  function _glClearColor(x0, x1, x2, x3) { GLctx.clearColor(x0, x1, x2, x3) }

  function _emscripten_glGetActiveAttrib(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveAttrib(program, index);
      if (!info) return; // If an error occurs, nothing will be written to length, size and type and name.
  
      var infoname = info.name.slice(0, Math.max(0, bufSize - 1));
      if (bufSize > 0 && name) {
        writeStringToMemory(infoname, name);
        if (length) HEAP32[((length)>>2)]=infoname.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
  
      if (size) HEAP32[((size)>>2)]=info.size;
      if (type) HEAP32[((type)>>2)]=info.type;
    }

  function _emscripten_glVertexAttrib3fv(index, v) {
      v = HEAPF32.subarray((v)>>2,(v+12)>>2);
      GLctx.vertexAttrib3fv(index, v);
    }

  function _emscripten_glLineWidth(x0) { GLctx.lineWidth(x0) }

  function _emscripten_glGetString(name_) {
      if (GL.stringCache[name_]) return GL.stringCache[name_];
      var ret; 
      switch(name_) {
        case 0x1F00 /* GL_VENDOR */:
        case 0x1F01 /* GL_RENDERER */:
        case 0x1F02 /* GL_VERSION */:
          ret = allocate(intArrayFromString(GLctx.getParameter(name_)), 'i8', ALLOC_NORMAL);
          break;
        case 0x1F03 /* GL_EXTENSIONS */:
          var exts = GLctx.getSupportedExtensions();
          var gl_exts = [];
          for (var i in exts) {
            gl_exts.push(exts[i]);
            gl_exts.push("GL_" + exts[i]);
          }
          ret = allocate(intArrayFromString(gl_exts.join(' ')), 'i8', ALLOC_NORMAL);
          break;
        case 0x8B8C /* GL_SHADING_LANGUAGE_VERSION */:
          ret = allocate(intArrayFromString('OpenGL ES GLSL 1.00 (WebGL)'), 'i8', ALLOC_NORMAL);
          break;
        default:
          GL.recordError(0x0500/*GL_INVALID_ENUM*/);
          return 0;
      }
      GL.stringCache[name_] = ret;
      return ret;
    }

  var _ceilf=Math_ceil;

  var _sqrt=Math_sqrt;

  function _emscripten_glGetAttribLocation(program, name) {
      program = GL.programs[program];
      name = Pointer_stringify(name);
      return GLctx.getAttribLocation(program, name);
    }

  function _glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  var _acosf=Math_acos;

  function _emscripten_glStencilFunc(x0, x1, x2) { GLctx.stencilFunc(x0, x1, x2) }

  
  function emscriptenWebGLGet(name_, p, type) {
      // Guard against user passing a null pointer.
      // Note that GLES2 spec does not say anything about how passing a null pointer should be treated.
      // Testing on desktop core GL 3, the application crashes on glGetIntegerv to a null pointer, but
      // better to report an error instead of doing anything random.
      if (!p) {
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var ret = undefined;
      switch(name_) { // Handle a few trivial GLES values
        case 0x8DFA: // GL_SHADER_COMPILER
          ret = 1;
          break;
        case 0x8DF8: // GL_SHADER_BINARY_FORMATS
          if (type !== 'Integer' && type !== 'Integer64') {
            GL.recordError(0x0500); // GL_INVALID_ENUM
          }
          return; // Do not write anything to the out pointer, since no binary formats are supported.
        case 0x87FE: // GL_NUM_PROGRAM_BINARY_FORMATS
        case 0x8DF9: // GL_NUM_SHADER_BINARY_FORMATS
          ret = 0;
          break;
        case 0x86A2: // GL_NUM_COMPRESSED_TEXTURE_FORMATS
          // WebGL doesn't have GL_NUM_COMPRESSED_TEXTURE_FORMATS (it's obsolete since GL_COMPRESSED_TEXTURE_FORMATS returns a JS array that can be queried for length),
          // so implement it ourselves to allow C++ GLES2 code get the length.
          var formats = GLctx.getParameter(0x86A3 /*GL_COMPRESSED_TEXTURE_FORMATS*/);
          ret = formats.length;
          break;
        case 0x8B9A: // GL_IMPLEMENTATION_COLOR_READ_TYPE
          ret = 0x1401; // GL_UNSIGNED_BYTE
          break;
        case 0x8B9B: // GL_IMPLEMENTATION_COLOR_READ_FORMAT
          ret = 0x1908; // GL_RGBA
          break;
        case 0x821D: // GL_NUM_EXTENSIONS
          if (GLctx.canvas.GLctxObject.version < 2) {
            GL.recordError(0x0502 /* GL_INVALID_OPERATION */); // Calling GLES3/WebGL2 function with a GLES2/WebGL1 context
            return;
          }
          var exts = GLctx.getSupportedExtensions();
          ret = 2*exts.length; // each extension is duplicated, first in unprefixed WebGL form, and then a second time with "GL_" prefix.
          break;
      }
  
      if (ret === undefined) {
        var result = GLctx.getParameter(name_);
        switch (typeof(result)) {
          case "number":
            ret = result;
            break;
          case "boolean":
            ret = result ? 1 : 0;
            break;
          case "string":
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
          case "object":
            if (result === null) {
              // null is a valid result for some (e.g., which buffer is bound - perhaps nothing is bound), but otherwise
              // can mean an invalid name_, which we need to report as an error
              switch(name_) {
                case 0x8894: // ARRAY_BUFFER_BINDING
                case 0x8B8D: // CURRENT_PROGRAM
                case 0x8895: // ELEMENT_ARRAY_BUFFER_BINDING
                case 0x8CA6: // FRAMEBUFFER_BINDING
                case 0x8CA7: // RENDERBUFFER_BINDING
                case 0x8069: // TEXTURE_BINDING_2D
                case 0x8514: { // TEXTURE_BINDING_CUBE_MAP
                  ret = 0;
                  break;
                }
                default: {
                  GL.recordError(0x0500); // GL_INVALID_ENUM
                  return;
                }
              }
            } else if (result instanceof Float32Array ||
                       result instanceof Uint32Array ||
                       result instanceof Int32Array ||
                       result instanceof Array) {
              for (var i = 0; i < result.length; ++i) {
                switch (type) {
                  case 'Integer': HEAP32[(((p)+(i*4))>>2)]=result[i];   break;
                  case 'Float':   HEAPF32[(((p)+(i*4))>>2)]=result[i]; break;
                  case 'Boolean': HEAP8[(((p)+(i))>>0)]=result[i] ? 1 : 0;    break;
                  default: throw 'internal glGet error, bad type: ' + type;
                }
              }
              return;
            } else if (result instanceof WebGLBuffer ||
                       result instanceof WebGLProgram ||
                       result instanceof WebGLFramebuffer ||
                       result instanceof WebGLRenderbuffer ||
                       result instanceof WebGLTexture) {
              ret = result.name | 0;
            } else {
              GL.recordError(0x0500); // GL_INVALID_ENUM
              return;
            }
            break;
          default:
            GL.recordError(0x0500); // GL_INVALID_ENUM
            return;
        }
      }
  
      switch (type) {
        case 'Integer64': (tempI64 = [ret>>>0,(tempDouble=ret,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((p)>>2)]=tempI64[0],HEAP32[(((p)+(4))>>2)]=tempI64[1]);    break;
        case 'Integer': HEAP32[((p)>>2)]=ret;    break;
        case 'Float':   HEAPF32[((p)>>2)]=ret;  break;
        case 'Boolean': HEAP8[((p)>>0)]=ret ? 1 : 0; break;
        default: throw 'internal glGet error, bad type: ' + type;
      }
    }function _emscripten_glGetIntegerv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Integer');
    }

  function _emscripten_glGetFramebufferAttachmentParameteriv(target, attachment, pname, params) {
      var result = GLctx.getFramebufferAttachmentParameter(target, attachment, pname);
      HEAP32[((params)>>2)]=result;
    }

  
  var _emscripten_GetProcAddress=undefined;
  Module["_emscripten_GetProcAddress"] = _emscripten_GetProcAddress;
  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = '__emcc';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            window.postMessage(emscriptenMainLoopMessageId, "*");
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};
  
  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;
  
  function _free() {
  }
  Module["_free"] = _free;
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  var _environ=allocate(1, "i32*", ALLOC_STATIC);var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }
  
  function _putenv(string) {
      // int putenv(char *string);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/putenv.html
      // WARNING: According to the standard (and the glibc implementation), the
      //          string is taken by reference so future changes are reflected.
      //          We copy it instead, possibly breaking some uses.
      if (string === 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      string = Pointer_stringify(string);
      var splitPoint = string.indexOf('=')
      if (string === '' || string.indexOf('=') === -1) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      var name = string.slice(0, splitPoint);
      var value = string.slice(splitPoint + 1);
      if (!(name in ENV) || ENV[name] !== value) {
        ENV[name] = value;
        ___buildEnvironment(ENV);
      }
      return 0;
    }
  
  function _SDL_RWFromConstMem(mem, size) {
      var id = SDL.rwops.length; // TODO: recycle ids when they are null
      SDL.rwops.push({ bytes: mem, count: size });
      return id;
    }function _TTF_FontHeight(font) {
      var fontData = SDL.fonts[font];
      return fontData.size;
    }function _TTF_SizeText(font, text, w, h) {
      var fontData = SDL.fonts[font];
      if (w) {
        HEAP32[((w)>>2)]=SDL.estimateTextWidth(fontData, Pointer_stringify(text));
      }
      if (h) {
        HEAP32[((h)>>2)]=fontData.size;
      }
      return 0;
    }function _TTF_RenderText_Solid(font, text, color) {
      // XXX the font and color are ignored
      text = Pointer_stringify(text) || ' '; // if given an empty string, still return a valid surface
      var fontData = SDL.fonts[font];
      var w = SDL.estimateTextWidth(fontData, text);
      var h = fontData.size;
      var color = SDL.loadColorToCSSRGB(color); // XXX alpha breaks fonts?
      var fontString = h + 'px ' + fontData.name;
      var surf = SDL.makeSurface(w, h, 0, false, 'text:' + text); // bogus numbers..
      var surfData = SDL.surfaces[surf];
      surfData.ctx.save();
      surfData.ctx.fillStyle = color;
      surfData.ctx.font = fontString;
      surfData.ctx.textBaseline = 'top';
      surfData.ctx.fillText(text, 0, 0);
      surfData.ctx.restore();
      return surf;
    }function _Mix_HaltMusic() {
      var audio = SDL.music.audio;
      if (audio) {
        audio.src = audio.src; // rewind <media> element
        audio.currentPosition = 0; // rewind Web Audio graph playback.
        audio.pause();
      }
      SDL.music.audio = null;
      if (SDL.hookMusicFinished) {
        Runtime.dynCall('v', SDL.hookMusicFinished);
      }
      return 0;
    }function _Mix_PlayMusic(id, loops) {
      // Pause old music if it exists.
      if (SDL.music.audio) {
        if (!SDL.music.audio.paused) Module.printErr('Music is already playing. ' + SDL.music.source);
        SDL.music.audio.pause();
      }
      var info = SDL.audios[id];
      var audio;
      if (info.webAudio) { // Play via Web Audio API
        // Create an instance of the WebAudio object.
        audio = {};
        audio.resource = info; // This new webAudio object is an instance that refers to this existing resource.
        audio.paused = false;
        audio.currentPosition = 0;
        audio.play = function() { SDL.playWebAudio(this); }
        audio.pause = function() { SDL.pauseWebAudio(this); }
      } else if (info.audio) { // Play via the <audio> element
        audio = info.audio;
      }
      audio['onended'] = function() { if (SDL.music.audio == this) _Mix_HaltMusic(); } // will send callback
      audio.loop = loops != 0; // TODO: handle N loops for finite N
      audio.volume = SDL.music.volume;
      SDL.music.audio = audio;
      audio.play();
      return 0;
    }function _Mix_FreeChunk(id) {
      SDL.audios[id] = null;
    }function _Mix_LoadWAV_RW(rwopsID, freesrc) {
      var rwops = SDL.rwops[rwopsID];
  
  
      if (rwops === undefined)
        return 0;
  
      var filename = '';
      var audio;
      var webAudio;
      var bytes;
  
      if (rwops.filename !== undefined) {
        filename = PATH.resolve(rwops.filename);
        var raw = Module["preloadedAudios"][filename];
        if (!raw) {
          if (raw === null) Module.printErr('Trying to reuse preloaded audio, but freePreloadedMediaOnUse is set!');
          if (!Module.noAudioDecoding) Runtime.warnOnce('Cannot find preloaded audio ' + filename);
  
          // see if we can read the file-contents from the in-memory FS
          try {
            bytes = FS.readFile(filename);
          } catch (e) {
            Module.printErr('Couldn\'t find file for: ' + filename);
            return 0;
          }
        }
        if (Module['freePreloadedMediaOnUse']) {
          Module["preloadedAudios"][filename] = null;
        }
        audio = raw;
      }
      else if (rwops.bytes !== undefined) {
        // For Web Audio context buffer decoding, we must make a clone of the audio data, but for <media> element,
        // a view to existing data is sufficient.
        if (SDL.webAudioAvailable()) bytes = HEAPU8.buffer.slice(rwops.bytes, rwops.bytes + rwops.count);
        else bytes = HEAPU8.subarray(rwops.bytes, rwops.bytes + rwops.count);
      }
      else {
        return 0;
      }
  
      var arrayBuffer = bytes ? bytes.buffer || bytes : bytes;
  
      // To allow user code to work around browser bugs with audio playback on <audio> elements an Web Audio, enable
      // the user code to hook in a callback to decide on a file basis whether each file should use Web Audio or <audio> for decoding and playback.
      // In particular, see https://bugzilla.mozilla.org/show_bug.cgi?id=654787 and ?id=1012801 for tradeoffs.
      var canPlayWithWebAudio = Module['SDL_canPlayWithWebAudio'] === undefined || Module['SDL_canPlayWithWebAudio'](filename, arrayBuffer);
  
      if (bytes !== undefined && SDL.webAudioAvailable() && canPlayWithWebAudio) {
        audio = undefined;
        webAudio = {};
        // The audio decoding process is asynchronous, which gives trouble if user code plays the audio data back immediately
        // after loading. Therefore prepare an array of callback handlers to run when this audio decoding is complete, which
        // will then start the playback (with some delay).
        webAudio.onDecodeComplete = []; // While this member array exists, decoding hasn't finished yet.
        function onDecodeComplete(data) {
          webAudio.decodedBuffer = data;
          // Call all handlers that were waiting for this decode to finish, and clear the handler list.
          webAudio.onDecodeComplete.forEach(function(e) { e(); });
          webAudio.onDecodeComplete = undefined; // Don't allow more callback handlers since audio has finished decoding.
        }
  
        SDL.audioContext['decodeAudioData'](arrayBuffer, onDecodeComplete);
      } else if (audio === undefined && bytes) {
        // Here, we didn't find a preloaded audio but we either were passed a filepath for
        // which we loaded bytes, or we were passed some bytes
        var blob = new Blob([bytes], {type: rwops.mimetype});
        var url = URL.createObjectURL(blob);
        audio = new Audio();
        audio.src = url;
        audio.mozAudioChannelType = 'content'; // bugzilla 910340
      }
  
      var id = SDL.audios.length;
      // Keep the loaded audio in the audio arrays, ready for playback
      SDL.audios.push({
        source: filename,
        audio: audio, // Points to the <audio> element, if loaded
        webAudio: webAudio // Points to a Web Audio -specific resource object, if loaded
      });
      return id;
    }function _Mix_PlayChannel(channel, id, loops) {
      // TODO: handle fixed amount of N loops. Currently loops either 0 or infinite times.
  
      // Get the audio element associated with the ID
      var info = SDL.audios[id];
      if (!info) return -1;
      if (!info.audio && !info.webAudio) return -1;
  
      // If the user asks us to allocate a channel automatically, get the first
      // free one.
      if (channel == -1) {
        for (var i = SDL.channelMinimumNumber; i < SDL.numChannels; i++) {
          if (!SDL.channels[i].audio) {
            channel = i;
            break;
          }
        }
        if (channel == -1) {
          Module.printErr('All ' + SDL.numChannels + ' channels in use!');
          return -1;
        }
      }
      var channelInfo = SDL.channels[channel];
      var audio;
      if (info.webAudio) {
        // Create an instance of the WebAudio object.
        audio = {};
        audio.resource = info; // This new object is an instance that refers to this existing resource.
        audio.paused = false;
        audio.currentPosition = 0;
        // Make our instance look similar to the instance of a <media> to make api simple.
        audio.play = function() { SDL.playWebAudio(this); }
        audio.pause = function() { SDL.pauseWebAudio(this); }
      } else {
        // We clone the audio node to utilize the preloaded audio buffer, since
        // the browser has already preloaded the audio file.
        audio = info.audio.cloneNode(true);
        audio.numChannels = info.audio.numChannels;
        audio.frequency = info.audio.frequency;
      }
      audio['onended'] = function SDL_audio_onended() { // TODO: cache these
        if (channelInfo.audio == this) { channelInfo.audio.paused = true; channelInfo.audio = null; }
        if (SDL.channelFinished) Runtime.getFuncWrapper(SDL.channelFinished, 'vi')(channel);
      }
      channelInfo.audio = audio;
      // TODO: handle N loops. Behavior matches Mix_PlayMusic
      audio.loop = loops != 0;
      audio.volume = channelInfo.volume;
      audio.play();
      return channel;
    }function _SDL_PauseAudio(pauseOn) {
      if (!SDL.audio) {
        return;
      }
      if (pauseOn) {
        if (SDL.audio.timer !== undefined) {
          clearTimeout(SDL.audio.timer);
          SDL.audio.numAudioTimersPending = 0;
          SDL.audio.timer = undefined;
        }
      } else if (!SDL.audio.timer) {
        // Start the audio playback timer callback loop.
        SDL.audio.numAudioTimersPending = 1;
        SDL.audio.timer = Browser.safeSetTimeout(SDL.audio.caller, 1);
      }
      SDL.audio.paused = pauseOn;
    }function _SDL_CloseAudio() {
      if (SDL.audio) {
        _SDL_PauseAudio(1);
        _free(SDL.audio.buffer);
        SDL.audio = null;
        SDL.allocateChannels(0);
      }
    }function _SDL_LockSurface(surf) {
      var surfData = SDL.surfaces[surf];
  
      surfData.locked++;
      if (surfData.locked > 1) return 0;
  
      if (!surfData.buffer) {
        surfData.buffer = _malloc(surfData.width * surfData.height * 4);
        HEAP32[(((surf)+(20))>>2)]=surfData.buffer;
      }
  
      // Mark in C/C++-accessible SDL structure
      // SDL_Surface has the following fields: Uint32 flags, SDL_PixelFormat *format; int w, h; Uint16 pitch; void *pixels; ...
      // So we have fields all of the same size, and 5 of them before us.
      // TODO: Use macros like in library.js
      HEAP32[(((surf)+(20))>>2)]=surfData.buffer;
  
      if (surf == SDL.screen && Module.screenIsReadOnly && surfData.image) return 0;
  
      if (SDL.defaults.discardOnLock) {
        if (!surfData.image) {
          surfData.image = surfData.ctx.createImageData(surfData.width, surfData.height);
        }
        if (!SDL.defaults.opaqueFrontBuffer) return;
      } else {
        surfData.image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
      }
  
      // Emulate desktop behavior and kill alpha values on the locked surface. (very costly!) Set SDL.defaults.opaqueFrontBuffer = false
      // if you don't want this.
      if (surf == SDL.screen && SDL.defaults.opaqueFrontBuffer) {
        var data = surfData.image.data;
        var num = data.length;
        for (var i = 0; i < num/4; i++) {
          data[i*4+3] = 255; // opacity, as canvases blend alpha
        }
      }
  
      if (SDL.defaults.copyOnLock && !SDL.defaults.discardOnLock) {
        // Copy pixel data to somewhere accessible to 'C/C++'
        if (surfData.isFlagSet(0x00200000 /* SDL_HWPALETTE */)) {
          // If this is neaded then
          // we should compact the data from 32bpp to 8bpp index.
          // I think best way to implement this is use
          // additional colorMap hash (color->index).
          // Something like this:
          //
          // var size = surfData.width * surfData.height;
          // var data = '';
          // for (var i = 0; i<size; i++) {
          //   var color = SDL.translateRGBAToColor(
          //     surfData.image.data[i*4   ], 
          //     surfData.image.data[i*4 +1], 
          //     surfData.image.data[i*4 +2], 
          //     255);
          //   var index = surfData.colorMap[color];
          //   HEAP8[(((surfData.buffer)+(i))>>0)]=index;
          // }
          throw 'CopyOnLock is not supported for SDL_LockSurface with SDL_HWPALETTE flag set' + new Error().stack;
        } else {
          HEAPU8.set(surfData.image.data, surfData.buffer);
        }
      }
  
      return 0;
    }
  
  function _SDL_FreeRW(rwopsID) {
      SDL.rwops[rwopsID] = null;
      while (SDL.rwops.length > 0 && SDL.rwops[SDL.rwops.length-1] === null) {
        SDL.rwops.pop();
      }
    }function _IMG_Load_RW(rwopsID, freeSrc) {
      try {
        // stb_image integration support
        function cleanup() {
          if (rwops && freeSrc) _SDL_FreeRW(rwopsID);
        };
        function addCleanup(func) {
          var old = cleanup;
          cleanup = function added_cleanup() {
            old();
            func();
          }
        }
        function callStbImage(func, params) {
          var x = Module['_malloc'](4);
          var y = Module['_malloc'](4);
          var comp = Module['_malloc'](4);
          addCleanup(function() {
            Module['_free'](x);
            Module['_free'](y);
            Module['_free'](comp);
            if (data) Module['_stbi_image_free'](data);
          });
          var data = Module['_' + func].apply(null, params.concat([x, y, comp, 0]));
          if (!data) return null;
          return {
            rawData: true,
            data: data,
            width: HEAP32[((x)>>2)],
            height: HEAP32[((y)>>2)],
            size: HEAP32[((x)>>2)] * HEAP32[((y)>>2)] * HEAP32[((comp)>>2)],
            bpp: HEAP32[((comp)>>2)]
          };
        }
  
        var rwops = SDL.rwops[rwopsID];
        if (rwops === undefined) {
          return 0;
        }
  
        var filename = rwops.filename;
        if (filename === undefined) {
          Runtime.warnOnce('Only file names that have been preloaded are supported for IMG_Load_RW. Consider using STB_IMAGE=1 if you want synchronous image decoding (see settings.js), or package files with --use-preload-plugins');
          return 0;
        }
  
        if (!raw) {
          filename = PATH.resolve(filename);
          var raw = Module["preloadedImages"][filename];
          if (!raw) {
            if (raw === null) Module.printErr('Trying to reuse preloaded image, but freePreloadedMediaOnUse is set!');
            Runtime.warnOnce('Cannot find preloaded image ' + filename);
            Runtime.warnOnce('Cannot find preloaded image ' + filename + '. Consider using STB_IMAGE=1 if you want synchronous image decoding (see settings.js), or package files with --use-preload-plugins');
            return 0;
          } else if (Module['freePreloadedMediaOnUse']) {
            Module["preloadedImages"][filename] = null;
          }
        }
  
        var surf = SDL.makeSurface(raw.width, raw.height, 0, false, 'load:' + filename);
        var surfData = SDL.surfaces[surf];
        surfData.ctx.globalCompositeOperation = "copy";
        if (!raw.rawData) {
          surfData.ctx.drawImage(raw, 0, 0, raw.width, raw.height, 0, 0, raw.width, raw.height);
        } else {
          var imageData = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
          if (raw.bpp == 4) {
            // rgba
            imageData.data.set(HEAPU8.subarray((raw.data),(raw.data+raw.size)));
          } else if (raw.bpp == 3) {
            // rgb
            var pixels = raw.size/3;
            var data = imageData.data;
            var sourcePtr = raw.data;
            var destPtr = 0;
            for (var i = 0; i < pixels; i++) {
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = 255;
            }
          } else if (raw.bpp == 1) {
            // grayscale
            var pixels = raw.size;
            var data = imageData.data;
            var sourcePtr = raw.data;
            var destPtr = 0;
            for (var i = 0; i < pixels; i++) {
              var value = HEAPU8[((sourcePtr++)>>0)];
              data[destPtr++] = value;
              data[destPtr++] = value;
              data[destPtr++] = value;
              data[destPtr++] = 255;
            }
          } else {
            Module.printErr('cannot handle bpp ' + raw.bpp);
            return 0;
          }
          surfData.ctx.putImageData(imageData, 0, 0);
        }
        surfData.ctx.globalCompositeOperation = "source-over";
        // XXX SDL does not specify that loaded images must have available pixel data, in fact
        //     there are cases where you just want to blit them, so you just need the hardware
        //     accelerated version. However, code everywhere seems to assume that the pixels
        //     are in fact available, so we retrieve it here. This does add overhead though.
        _SDL_LockSurface(surf);
        surfData.locked--; // The surface is not actually locked in this hack
        if (SDL.GL) {
          // After getting the pixel data, we can free the canvas and context if we do not need to do 2D canvas blitting
          surfData.canvas = surfData.ctx = null;
        }
        return surf;
      } finally {
        cleanup();
      }
    }
  
  function _SDL_RWFromFile(_name, mode) {
      var id = SDL.rwops.length; // TODO: recycle ids when they are null
      var name = Pointer_stringify(_name)
      SDL.rwops.push({ filename: name, mimetype: Browser.getMimetype(name) });
      return id;
    }function _IMG_Load(filename){
      var rwops = _SDL_RWFromFile(filename);
      var result = _IMG_Load_RW(rwops, 1);
      return result;
    }function _SDL_UpperBlitScaled(src, srcrect, dst, dstrect) {
      return SDL.blitSurface(src, srcrect, dst, dstrect, true);
    }function _SDL_UpperBlit(src, srcrect, dst, dstrect) {
      return SDL.blitSurface(src, srcrect, dst, dstrect, false);
    }function _SDL_GetTicks() {
      return (Date.now() - SDL.startTime)|0;
    }var SDL={defaults:{width:320,height:200,copyOnLock:true,discardOnLock:false,opaqueFrontBuffer:true},version:null,surfaces:{},canvasPool:[],events:[],fonts:[null],audios:[null],rwops:[null],music:{audio:null,volume:1},mixerFrequency:22050,mixerFormat:32784,mixerNumChannels:2,mixerChunkSize:1024,channelMinimumNumber:0,GL:false,glAttributes:{0:3,1:3,2:2,3:0,4:0,5:1,6:16,7:0,8:0,9:0,10:0,11:0,12:0,13:0,14:0,15:1,16:0,17:0,18:0},keyboardState:null,keyboardMap:{},canRequestFullscreen:false,isRequestingFullscreen:false,textInput:false,startTime:null,initFlags:0,buttonState:0,modState:0,DOMButtons:[0,0,0],DOMEventToSDLEvent:{},TOUCH_DEFAULT_ID:0,eventHandler:null,eventHandlerContext:null,eventHandlerTemp:0,keyCodes:{16:1249,17:1248,18:1250,20:1081,33:1099,34:1102,35:1101,36:1098,37:1104,38:1106,39:1103,40:1105,44:316,45:1097,46:127,91:1251,93:1125,96:1122,97:1113,98:1114,99:1115,100:1116,101:1117,102:1118,103:1119,104:1120,105:1121,106:1109,107:1111,109:1110,110:1123,111:1108,112:1082,113:1083,114:1084,115:1085,116:1086,117:1087,118:1088,119:1089,120:1090,121:1091,122:1092,123:1093,124:1128,125:1129,126:1130,127:1131,128:1132,129:1133,130:1134,131:1135,132:1136,133:1137,134:1138,135:1139,144:1107,160:94,161:33,162:34,163:35,164:36,165:37,166:38,167:95,168:40,169:41,170:42,171:43,172:124,173:45,174:123,175:125,176:126,181:127,182:129,183:128,188:44,190:46,191:47,192:96,219:91,220:92,221:93,222:39,224:1251},scanCodes:{8:42,9:43,13:40,27:41,32:44,35:204,39:53,44:54,46:55,47:56,48:39,49:30,50:31,51:32,52:33,53:34,54:35,55:36,56:37,57:38,58:203,59:51,61:46,91:47,92:49,93:48,96:52,97:4,98:5,99:6,100:7,101:8,102:9,103:10,104:11,105:12,106:13,107:14,108:15,109:16,110:17,111:18,112:19,113:20,114:21,115:22,116:23,117:24,118:25,119:26,120:27,121:28,122:29,127:76,305:224,308:226,316:70},loadRect:function (rect) {
        return {
          x: HEAP32[((rect + 0)>>2)],
          y: HEAP32[((rect + 4)>>2)],
          w: HEAP32[((rect + 8)>>2)],
          h: HEAP32[((rect + 12)>>2)]
        };
      },updateRect:function (rect, r) {
        HEAP32[((rect)>>2)]=r.x;
        HEAP32[(((rect)+(4))>>2)]=r.y;
        HEAP32[(((rect)+(8))>>2)]=r.w;
        HEAP32[(((rect)+(12))>>2)]=r.h;
      },intersectionOfRects:function (first, second) {
        var leftX = Math.max(first.x, second.x);
        var leftY = Math.max(first.y, second.y);
        var rightX = Math.min(first.x + first.w, second.x + second.w);
        var rightY = Math.min(first.y + first.h, second.y + second.h);
  
        return {
          x: leftX,
          y: leftY,
          w: Math.max(leftX, rightX) - leftX,
          h: Math.max(leftY, rightY) - leftY
        }
      },checkPixelFormat:function (fmt) {
      },loadColorToCSSRGB:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgb(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ')';
      },loadColorToCSSRGBA:function (color) {
        var rgba = HEAP32[((color)>>2)];
        return 'rgba(' + (rgba&255) + ',' + ((rgba >> 8)&255) + ',' + ((rgba >> 16)&255) + ',' + (((rgba >> 24)&255)/255) + ')';
      },translateColorToCSSRGBA:function (rgba) {
        return 'rgba(' + (rgba&0xff) + ',' + (rgba>>8 & 0xff) + ',' + (rgba>>16 & 0xff) + ',' + (rgba>>>24)/0xff + ')';
      },translateRGBAToCSSRGBA:function (r, g, b, a) {
        return 'rgba(' + (r&0xff) + ',' + (g&0xff) + ',' + (b&0xff) + ',' + (a&0xff)/255 + ')';
      },translateRGBAToColor:function (r, g, b, a) {
        return r | g << 8 | b << 16 | a << 24;
      },makeSurface:function (width, height, flags, usePageCanvas, source, rmask, gmask, bmask, amask) {
        flags = flags || 0;
        var is_SDL_HWSURFACE = flags & 0x00000001;
        var is_SDL_HWPALETTE = flags & 0x00200000;
        var is_SDL_OPENGL = flags & 0x04000000;
  
        var surf = _malloc(60);
        var pixelFormat = _malloc(44);
        //surface with SDL_HWPALETTE flag is 8bpp surface (1 byte)
        var bpp = is_SDL_HWPALETTE ? 1 : 4;
        var buffer = 0;
  
        // preemptively initialize this for software surfaces,
        // otherwise it will be lazily initialized inside of SDL_LockSurface
        if (!is_SDL_HWSURFACE && !is_SDL_OPENGL) {
          buffer = _malloc(width * height * 4);
        }
  
        HEAP32[((surf)>>2)]=flags;
        HEAP32[(((surf)+(4))>>2)]=pixelFormat;
        HEAP32[(((surf)+(8))>>2)]=width;
        HEAP32[(((surf)+(12))>>2)]=height;
        HEAP32[(((surf)+(16))>>2)]=width * bpp;  // assuming RGBA or indexed for now,
                                                                                          // since that is what ImageData gives us in browsers
        HEAP32[(((surf)+(20))>>2)]=buffer;
  
        HEAP32[(((surf)+(36))>>2)]=0;
        HEAP32[(((surf)+(40))>>2)]=0;
        HEAP32[(((surf)+(44))>>2)]=Module["canvas"].width;
        HEAP32[(((surf)+(48))>>2)]=Module["canvas"].height;
  
        HEAP32[(((surf)+(56))>>2)]=1;
  
        HEAP32[((pixelFormat)>>2)]=-2042224636;
        HEAP32[(((pixelFormat)+(4))>>2)]=0;// TODO
        HEAP8[(((pixelFormat)+(8))>>0)]=bpp * 8;
        HEAP8[(((pixelFormat)+(9))>>0)]=bpp;
  
        HEAP32[(((pixelFormat)+(12))>>2)]=rmask || 0x000000ff;
        HEAP32[(((pixelFormat)+(16))>>2)]=gmask || 0x0000ff00;
        HEAP32[(((pixelFormat)+(20))>>2)]=bmask || 0x00ff0000;
        HEAP32[(((pixelFormat)+(24))>>2)]=amask || 0xff000000;
  
        // Decide if we want to use WebGL or not
        SDL.GL = SDL.GL || is_SDL_OPENGL;
        var canvas;
        if (!usePageCanvas) {
          if (SDL.canvasPool.length > 0) {
            canvas = SDL.canvasPool.pop();
          } else {
            canvas = document.createElement('canvas');
          }
          canvas.width = width;
          canvas.height = height;
        } else {
          canvas = Module['canvas'];
        }
  
        var webGLContextAttributes = {
          antialias: ((SDL.glAttributes[13 /*SDL_GL_MULTISAMPLEBUFFERS*/] != 0) && (SDL.glAttributes[14 /*SDL_GL_MULTISAMPLESAMPLES*/] > 1)),
          depth: (SDL.glAttributes[6 /*SDL_GL_DEPTH_SIZE*/] > 0),
          stencil: (SDL.glAttributes[7 /*SDL_GL_STENCIL_SIZE*/] > 0)
        };
        
        var ctx = Browser.createContext(canvas, is_SDL_OPENGL, usePageCanvas, webGLContextAttributes);
              
        SDL.surfaces[surf] = {
          width: width,
          height: height,
          canvas: canvas,
          ctx: ctx,
          surf: surf,
          buffer: buffer,
          pixelFormat: pixelFormat,
          alpha: 255,
          flags: flags,
          locked: 0,
          usePageCanvas: usePageCanvas,
          source: source,
  
          isFlagSet: function(flag) {
            return flags & flag;
          }
        };
  
        return surf;
      },copyIndexedColorData:function (surfData, rX, rY, rW, rH) {
        // HWPALETTE works with palette
        // setted by SDL_SetColors
        if (!surfData.colors) {
          return;
        }
        
        var fullWidth  = Module['canvas'].width;
        var fullHeight = Module['canvas'].height;
  
        var startX  = rX || 0;
        var startY  = rY || 0;
        var endX    = (rW || (fullWidth - startX)) + startX;
        var endY    = (rH || (fullHeight - startY)) + startY;
        
        var buffer  = surfData.buffer;
  
        if (!surfData.image.data32) {
          surfData.image.data32 = new Uint32Array(surfData.image.data.buffer);
        }
        var data32   = surfData.image.data32;
  
        var colors32 = surfData.colors32;
  
        for (var y = startY; y < endY; ++y) {
          var base = y * fullWidth;
          for (var x = startX; x < endX; ++x) {
            data32[base + x] = colors32[HEAPU8[((buffer + base + x)>>0)]];
          }
        }
      },freeSurface:function (surf) {
        var refcountPointer = surf + 56;
        var refcount = HEAP32[((refcountPointer)>>2)];
        if (refcount > 1) {
          HEAP32[((refcountPointer)>>2)]=refcount - 1;
          return;
        }
  
        var info = SDL.surfaces[surf];
        if (!info.usePageCanvas && info.canvas) SDL.canvasPool.push(info.canvas);
        if (info.buffer) _free(info.buffer);
        _free(info.pixelFormat);
        _free(surf);
        SDL.surfaces[surf] = null;
  
        if (surf === SDL.screen) {
          SDL.screen = null;
        }
      },blitSurface__deps:["SDL_LockSurface"],blitSurface:function (src, srcrect, dst, dstrect, scale) {
        var srcData = SDL.surfaces[src];
        var dstData = SDL.surfaces[dst];
        var sr, dr;
        if (srcrect) {
          sr = SDL.loadRect(srcrect);
        } else {
          sr = { x: 0, y: 0, w: srcData.width, h: srcData.height };
        }
        if (dstrect) {
          dr = SDL.loadRect(dstrect);
        } else {
          dr = { x: 0, y: 0, w: srcData.width, h: srcData.height };
        }
        if (dstData.clipRect) {
          var widthScale = (!scale || sr.w === 0) ? 1 : sr.w / dr.w;
          var heightScale = (!scale || sr.h === 0) ? 1 : sr.h / dr.h;
          
          dr = SDL.intersectionOfRects(dstData.clipRect, dr);
          
          sr.w = dr.w * widthScale;
          sr.h = dr.h * heightScale;
          
          if (dstrect) {
            SDL.updateRect(dstrect, dr);
          }
        }
        var blitw, blith;
        if (scale) {
          blitw = dr.w; blith = dr.h;
        } else {
          blitw = sr.w; blith = sr.h;
        }
        if (sr.w === 0 || sr.h === 0 || blitw === 0 || blith === 0) {
          return 0;
        }
        var oldAlpha = dstData.ctx.globalAlpha;
        dstData.ctx.globalAlpha = srcData.alpha/255;
        dstData.ctx.drawImage(srcData.canvas, sr.x, sr.y, sr.w, sr.h, dr.x, dr.y, blitw, blith);
        dstData.ctx.globalAlpha = oldAlpha;
        if (dst != SDL.screen) {
          // XXX As in IMG_Load, for compatibility we write out |pixels|
          Runtime.warnOnce('WARNING: copying canvas data to memory for compatibility');
          _SDL_LockSurface(dst);
          dstData.locked--; // The surface is not actually locked in this hack
        }
        return 0;
      },downFingers:{},savedKeydown:null,receiveEvent:function (event) {
        function unpressAllPressedKeys() {
          // Un-press all pressed keys: TODO
          for (var code in SDL.keyboardMap) {
            SDL.events.push({
              type: 'keyup',
              keyCode: SDL.keyboardMap[code]
            });
          }
        };
        switch(event.type) {
          case 'touchstart': case 'touchmove': {
            event.preventDefault();
  
            var touches = [];
            
            // Clear out any touchstart events that we've already processed
            if (event.type === 'touchstart') {
              for (var i = 0; i < event.touches.length; i++) {
                var touch = event.touches[i];
                if (SDL.downFingers[touch.identifier] != true) {
                  SDL.downFingers[touch.identifier] = true;
                  touches.push(touch);
                }
              }
            } else {
              touches = event.touches;
            }
            
            var firstTouch = touches[0];
            if (event.type == 'touchstart') {
              SDL.DOMButtons[0] = 1;
            }
            var mouseEventType;
            switch(event.type) {
              case 'touchstart': mouseEventType = 'mousedown'; break;
              case 'touchmove': mouseEventType = 'mousemove'; break;
            }
            var mouseEvent = {
              type: mouseEventType,
              button: 0,
              pageX: firstTouch.clientX,
              pageY: firstTouch.clientY
            };
            SDL.events.push(mouseEvent);
  
            for (var i = 0; i < touches.length; i++) {
              var touch = touches[i];
              SDL.events.push({
                type: event.type,
                touch: touch
              });
            };
            break;
          }
          case 'touchend': {
            event.preventDefault();
            
            // Remove the entry in the SDL.downFingers hash
            // because the finger is no longer down.
            for(var i = 0; i < event.changedTouches.length; i++) {
              var touch = event.changedTouches[i];
              if (SDL.downFingers[touch.identifier] === true) {
                delete SDL.downFingers[touch.identifier];
              }
            }
  
            var mouseEvent = {
              type: 'mouseup',
              button: 0,
              pageX: event.changedTouches[0].clientX,
              pageY: event.changedTouches[0].clientY
            };
            SDL.DOMButtons[0] = 0;
            SDL.events.push(mouseEvent);
            
            for (var i = 0; i < event.changedTouches.length; i++) {
              var touch = event.changedTouches[i];
              SDL.events.push({
                type: 'touchend',
                touch: touch
              });
            };
            break;
          }
          case 'DOMMouseScroll': case 'mousewheel': case 'wheel':
            var delta = -Browser.getMouseWheelDelta(event); // Flip the wheel direction to translate from browser wheel direction (+:down) to SDL direction (+:up)
            delta = (delta == 0) ? 0 : (delta > 0 ? Math.max(delta, 1) : Math.min(delta, -1)); // Quantize to integer so that minimum scroll is at least +/- 1.
  
            // Simulate old-style SDL events representing mouse wheel input as buttons
            var button = delta > 0 ? 3 /*SDL_BUTTON_WHEELUP-1*/ : 4 /*SDL_BUTTON_WHEELDOWN-1*/; // Subtract one since JS->C marshalling is defined to add one back.
            SDL.events.push({ type: 'mousedown', button: button, pageX: event.pageX, pageY: event.pageY });
            SDL.events.push({ type: 'mouseup', button: button, pageX: event.pageX, pageY: event.pageY });
  
            // Pass a delta motion event.
            SDL.events.push({ type: 'wheel', deltaX: 0, deltaY: delta });
            event.preventDefault(); // If we don't prevent this, then 'wheel' event will be sent again by the browser as 'DOMMouseScroll' and we will receive this same event the second time.
            break;
          case 'mousemove':
            if (SDL.DOMButtons[0] === 1) {
              SDL.events.push({
                type: 'touchmove',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
            }
            if (Browser.pointerLock) {
              // workaround for firefox bug 750111
              if ('mozMovementX' in event) {
                event['movementX'] = event['mozMovementX'];
                event['movementY'] = event['mozMovementY'];
              }
              // workaround for Firefox bug 782777
              if (event['movementX'] == 0 && event['movementY'] == 0) {
                // ignore a mousemove event if it doesn't contain any movement info
                // (without pointer lock, we infer movement from pageX/pageY, so this check is unnecessary)
                event.preventDefault();
                return;
              }
            }
            // fall through
          case 'keydown': case 'keyup': case 'keypress': case 'mousedown': case 'mouseup':
            // If we preventDefault on keydown events, the subsequent keypress events
            // won't fire. However, it's fine (and in some cases necessary) to
            // preventDefault for keys that don't generate a character. Otherwise,
            // preventDefault is the right thing to do in general.
            if (event.type !== 'keydown' || (!SDL.unicode && !SDL.textInput) || (event.keyCode === 8 /* backspace */ || event.keyCode === 9 /* tab */)) {
              event.preventDefault();
            }
  
            if (event.type == 'mousedown') {
              SDL.DOMButtons[event.button] = 1;
              SDL.events.push({
                type: 'touchstart',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
            } else if (event.type == 'mouseup') {
              // ignore extra ups, can happen if we leave the canvas while pressing down, then return,
              // since we add a mouseup in that case
              if (!SDL.DOMButtons[event.button]) {
                return;
              }
  
              SDL.events.push({
                type: 'touchend',
                touch: {
                  identifier: 0,
                  deviceID: -1,
                  pageX: event.pageX,
                  pageY: event.pageY
                }
              });
              SDL.DOMButtons[event.button] = 0;
            }
  
            // We can only request fullscreen as the result of user input.
            // Due to this limitation, we toggle a boolean on keydown which
            // SDL_WM_ToggleFullScreen will check and subsequently set another
            // flag indicating for us to request fullscreen on the following
            // keyup. This isn't perfect, but it enables SDL_WM_ToggleFullScreen
            // to work as the result of a keypress (which is an extremely
            // common use case).
            if (event.type === 'keydown' || event.type === 'mousedown') {
              SDL.canRequestFullscreen = true;
            } else if (event.type === 'keyup' || event.type === 'mouseup') {
              if (SDL.isRequestingFullscreen) {
                Module['requestFullScreen'](true, true);
                SDL.isRequestingFullscreen = false;
              }
              SDL.canRequestFullscreen = false;
            }
  
            // SDL expects a unicode character to be passed to its keydown events.
            // Unfortunately, the browser APIs only provide a charCode property on
            // keypress events, so we must backfill in keydown events with their
            // subsequent keypress event's charCode.
            if (event.type === 'keypress' && SDL.savedKeydown) {
              // charCode is read-only
              SDL.savedKeydown.keypressCharCode = event.charCode;
              SDL.savedKeydown = null;
            } else if (event.type === 'keydown') {
              SDL.savedKeydown = event;
            }
  
            // Don't push keypress events unless SDL_StartTextInput has been called.
            if (event.type !== 'keypress' || SDL.textInput) {
              SDL.events.push(event);
            }
            break;
          case 'mouseout':
            // Un-press all pressed mouse buttons, because we might miss the release outside of the canvas
            for (var i = 0; i < 3; i++) {
              if (SDL.DOMButtons[i]) {
                SDL.events.push({
                  type: 'mouseup',
                  button: i,
                  pageX: event.pageX,
                  pageY: event.pageY
                });
                SDL.DOMButtons[i] = 0;
              }
            }
            event.preventDefault();
            break;
          case 'focus':
            SDL.events.push(event);
            event.preventDefault();
            break;
          case 'blur':
            SDL.events.push(event);
            unpressAllPressedKeys();
            event.preventDefault();
            break;
          case 'visibilitychange':
            SDL.events.push({
              type: 'visibilitychange',
              visible: !document.hidden
            });
            unpressAllPressedKeys();
            event.preventDefault();
            break;
          case 'unload':
            if (Browser.mainLoop.runner) {
              SDL.events.push(event);
              // Force-run a main event loop, since otherwise this event will never be caught!
              Browser.mainLoop.runner();
            }
            return;
          case 'resize':
            SDL.events.push(event);
            // manually triggered resize event doesn't have a preventDefault member
            if (event.preventDefault) {
              event.preventDefault();
            }
            break;
        }
        if (SDL.events.length >= 10000) {
          Module.printErr('SDL event queue full, dropping events');
          SDL.events = SDL.events.slice(0, 10000);
        }
        // If we have a handler installed, this will push the events to the app
        // instead of the app polling for them.
        SDL.flushEventsToHandler();
        return;
      },lookupKeyCodeForEvent:function (event) {
          var code = event.keyCode;
          if (code >= 65 && code <= 90) {
            code += 32; // make lowercase for SDL
          } else {
            code = SDL.keyCodes[event.keyCode] || event.keyCode;
            // If this is one of the modifier keys (224 | 1<<10 - 227 | 1<<10), and the event specifies that it is
            // a right key, add 4 to get the right key SDL key code.
            if (event.location === KeyboardEvent.DOM_KEY_LOCATION_RIGHT && code >= (224 | 1<<10) && code <= (227 | 1<<10)) {
              code += 4;
            }
          }
          return code;
      },handleEvent:function (event) {
        if (event.handled) return;
        event.handled = true;
  
        switch (event.type) {
          case 'touchstart': case 'touchend': case 'touchmove': {
            Browser.calculateMouseEvent(event);
            break;
          }
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            var code = SDL.lookupKeyCodeForEvent(event);
            HEAP8[(((SDL.keyboardState)+(code))>>0)]=down;
            // TODO: lmeta, rmeta, numlock, capslock, KMOD_MODE, KMOD_RESERVED
            SDL.modState = (HEAP8[(((SDL.keyboardState)+(1248))>>0)] ? 0x0040 : 0) | // KMOD_LCTRL
              (HEAP8[(((SDL.keyboardState)+(1249))>>0)] ? 0x0001 : 0) | // KMOD_LSHIFT
              (HEAP8[(((SDL.keyboardState)+(1250))>>0)] ? 0x0100 : 0) | // KMOD_LALT
              (HEAP8[(((SDL.keyboardState)+(1252))>>0)] ? 0x0080 : 0) | // KMOD_RCTRL
              (HEAP8[(((SDL.keyboardState)+(1253))>>0)] ? 0x0002 : 0) | // KMOD_RSHIFT
              (HEAP8[(((SDL.keyboardState)+(1254))>>0)] ? 0x0200 : 0); //  KMOD_RALT
            if (down) {
              SDL.keyboardMap[code] = event.keyCode; // save the DOM input, which we can use to unpress it during blur
            } else {
              delete SDL.keyboardMap[code];
            }
  
            break;
          }
          case 'mousedown': case 'mouseup':
            if (event.type == 'mousedown') {
              // SDL_BUTTON(x) is defined as (1 << ((x)-1)).  SDL buttons are 1-3,
              // and DOM buttons are 0-2, so this means that the below formula is
              // correct.
              SDL.buttonState |= 1 << event.button;
            } else if (event.type == 'mouseup') {
              SDL.buttonState &= ~(1 << event.button);
            }
            // fall through
          case 'mousemove': {
            Browser.calculateMouseEvent(event);
            break;
          }
        }
      },flushEventsToHandler:function () {
        if (!SDL.eventHandler) return;
  
        while (SDL.pollEvent(SDL.eventHandlerTemp)) {
          Runtime.dynCall('iii', SDL.eventHandler, [SDL.eventHandlerContext, SDL.eventHandlerTemp]);
        }
      },pollEvent:function (ptr) {
        if (SDL.initFlags & 0x200 && SDL.joystickEventState) {
          // If SDL_INIT_JOYSTICK was supplied AND the joystick system is configured
          // to automatically query for events, query for joystick events.
          SDL.queryJoysticks();
        }
        if (ptr) {
          while (SDL.events.length > 0) {
            if (SDL.makeCEvent(SDL.events.shift(), ptr) !== false) return 1;
          }
          return 0;
        } else {
          // XXX: somewhat risky in that we do not check if the event is real or not (makeCEvent returns false) if no pointer supplied
          return SDL.events.length > 0;
        }
      },makeCEvent:function (event, ptr) {
        if (typeof event === 'number') {
          // This is a pointer to a copy of a native C event that was SDL_PushEvent'ed
          _memcpy(ptr, event, 28);
          _free(event); // the copy is no longer needed
          return;
        }
  
        SDL.handleEvent(event);
  
        switch (event.type) {
          case 'keydown': case 'keyup': {
            var down = event.type === 'keydown';
            //Module.print('Received key event: ' + event.keyCode);
            var key = SDL.lookupKeyCodeForEvent(event);
            var scan;
            if (key >= 1024) {
              scan = key - 1024;
            } else {
              scan = SDL.scanCodes[key] || key;
            }
  
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(8))>>0)]=down ? 1 : 0;
            HEAP8[(((ptr)+(9))>>0)]=0; // TODO
            HEAP32[(((ptr)+(12))>>2)]=scan;
            HEAP32[(((ptr)+(16))>>2)]=key;
            HEAP16[(((ptr)+(20))>>1)]=SDL.modState;
            // some non-character keys (e.g. backspace and tab) won't have keypressCharCode set, fill in with the keyCode.
            HEAP32[(((ptr)+(24))>>2)]=event.keypressCharCode || key;
  
            break;
          }
          case 'keypress': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            // Not filling in windowID for now
            var cStr = intArrayFromString(String.fromCharCode(event.charCode));
            for (var i = 0; i < cStr.length; ++i) {
              HEAP8[(((ptr)+(8 + i))>>0)]=cStr[i];
            }
            break;
          }
          case 'mousedown': case 'mouseup': case 'mousemove': {
            if (event.type != 'mousemove') {
              var down = event.type === 'mousedown';
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP32[(((ptr)+(4))>>2)]=0;
              HEAP32[(((ptr)+(8))>>2)]=0;
              HEAP32[(((ptr)+(12))>>2)]=0;
              HEAP8[(((ptr)+(16))>>0)]=event.button+1; // DOM buttons are 0-2, SDL 1-3
              HEAP8[(((ptr)+(17))>>0)]=down ? 1 : 0;
              HEAP32[(((ptr)+(20))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(24))>>2)]=Browser.mouseY;
            } else {
              HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
              HEAP32[(((ptr)+(4))>>2)]=0;
              HEAP32[(((ptr)+(8))>>2)]=0;
              HEAP32[(((ptr)+(12))>>2)]=0;
              HEAP32[(((ptr)+(16))>>2)]=SDL.buttonState;
              HEAP32[(((ptr)+(20))>>2)]=Browser.mouseX;
              HEAP32[(((ptr)+(24))>>2)]=Browser.mouseY;
              HEAP32[(((ptr)+(28))>>2)]=Browser.mouseMovementX;
              HEAP32[(((ptr)+(32))>>2)]=Browser.mouseMovementY;
            }
            break;
          }
          case 'wheel': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(16))>>2)]=event.deltaX;
            HEAP32[(((ptr)+(20))>>2)]=event.deltaY; 
            break;       
          }
          case 'touchstart': case 'touchend': case 'touchmove': {
            var touch = event.touch;
            if (!Browser.touches[touch.identifier]) break;
            var w = Module['canvas'].width;
            var h = Module['canvas'].height;
            var x = Browser.touches[touch.identifier].x / w;
            var y = Browser.touches[touch.identifier].y / h;
            var lx = Browser.lastTouches[touch.identifier].x / w;
            var ly = Browser.lastTouches[touch.identifier].y / h;
            var dx = x - lx;
            var dy = y - ly;
            if (touch['deviceID'] === undefined) touch.deviceID = SDL.TOUCH_DEFAULT_ID;
            if (dx === 0 && dy === 0 && event.type === 'touchmove') return false; // don't send these if nothing happened
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=_SDL_GetTicks();
            (tempI64 = [touch.deviceID>>>0,(tempDouble=touch.deviceID,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((ptr)+(8))>>2)]=tempI64[0],HEAP32[(((ptr)+(12))>>2)]=tempI64[1]);
            (tempI64 = [touch.identifier>>>0,(tempDouble=touch.identifier,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((ptr)+(16))>>2)]=tempI64[0],HEAP32[(((ptr)+(20))>>2)]=tempI64[1]);
            HEAPF32[(((ptr)+(24))>>2)]=x;
            HEAPF32[(((ptr)+(28))>>2)]=y;
            HEAPF32[(((ptr)+(32))>>2)]=dx;
            HEAPF32[(((ptr)+(36))>>2)]=dy;
            if (touch.force !== undefined) {
              HEAPF32[(((ptr)+(40))>>2)]=touch.force;
            } else { // No pressure data, send a digital 0/1 pressure.
              HEAPF32[(((ptr)+(40))>>2)]=event.type == "touchend" ? 0 : 1;
            }
            break;
          }
          case 'unload': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            break;
          }
          case 'resize': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=event.w;
            HEAP32[(((ptr)+(8))>>2)]=event.h;
            break;
          }
          case 'joystick_button_up': case 'joystick_button_down': {
            var state = event.type === 'joystick_button_up' ? 0 : 1;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))>>0)]=event.index;
            HEAP8[(((ptr)+(5))>>0)]=event.button;
            HEAP8[(((ptr)+(6))>>0)]=state;
            break;
          }
          case 'joystick_axis_motion': {
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP8[(((ptr)+(4))>>0)]=event.index;
            HEAP8[(((ptr)+(5))>>0)]=event.axis;
            HEAP32[(((ptr)+(8))>>2)]=SDL.joystickAxisValueConversion(event.value);
            break;
          }
          case 'focus': {
            var SDL_WINDOWEVENT_FOCUS_GAINED = 12 /* SDL_WINDOWEVENT_FOCUS_GAINED */;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=SDL_WINDOWEVENT_FOCUS_GAINED;
            break;
          }
          case 'blur': {
            var SDL_WINDOWEVENT_FOCUS_LOST = 13 /* SDL_WINDOWEVENT_FOCUS_LOST */;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=SDL_WINDOWEVENT_FOCUS_LOST;
            break;
          }
          case 'visibilitychange': {
            var SDL_WINDOWEVENT_SHOWN  = 1 /* SDL_WINDOWEVENT_SHOWN */;
            var SDL_WINDOWEVENT_HIDDEN = 2 /* SDL_WINDOWEVENT_HIDDEN */;
            var visibilityEventID = event.visible ? SDL_WINDOWEVENT_SHOWN : SDL_WINDOWEVENT_HIDDEN;
            HEAP32[((ptr)>>2)]=SDL.DOMEventToSDLEvent[event.type];
            HEAP32[(((ptr)+(4))>>2)]=0;
            HEAP8[(((ptr)+(8))>>0)]=visibilityEventID;
            break;
          }
          default: throw 'Unhandled SDL event: ' + event.type;
        }
      },estimateTextWidth:function (fontData, text) {
        var h = fontData.size;
        var fontString = h + 'px ' + fontData.name;
        var tempCtx = SDL.ttfContext;
        tempCtx.save();
        tempCtx.font = fontString;
        var ret = tempCtx.measureText(text).width | 0;
        tempCtx.restore();
        return ret;
      },allocateChannels:function (num) { // called from Mix_AllocateChannels and init
        if (SDL.numChannels && SDL.numChannels >= num && num != 0) return;
        SDL.numChannels = num;
        SDL.channels = [];
        for (var i = 0; i < num; i++) {
          SDL.channels[i] = {
            audio: null,
            volume: 1.0
          };
        }
      },setGetVolume:function (info, volume) {
        if (!info) return 0;
        var ret = info.volume * 128; // MIX_MAX_VOLUME
        if (volume != -1) {
          info.volume = Math.min(Math.max(volume, 0), 128) / 128;
          if (info.audio) {
            try {
              info.audio.volume = info.volume; // For <audio> element
              if (info.audio.webAudioGainNode) info.audio.webAudioGainNode['gain']['value'] = info.volume; // For WebAudio playback
            } catch(e) {
              Module.printErr('setGetVolume failed to set audio volume: ' + e);
            }
          }
        }
        return ret;
      },setPannerPosition:function (info, x, y, z) {
        if (!info) return;
        if (info.audio) {
          if (info.audio.webAudioPannerNode) {
            info.audio.webAudioPannerNode['setPosition'](x, y, z);
          }
        }
      },playWebAudio:function (audio) {
        if (!audio) return;
        if (audio.webAudioNode) return; // This instance is already playing, don't start again.
        if (!SDL.webAudioAvailable()) return;
        try {
          var webAudio = audio.resource.webAudio;
          audio.paused = false;
          if (!webAudio.decodedBuffer) {
            if (webAudio.onDecodeComplete === undefined) abort("Cannot play back audio object that was not loaded");
            webAudio.onDecodeComplete.push(function() { if (!audio.paused) SDL.playWebAudio(audio); });
            return;
          }
          audio.webAudioNode = SDL.audioContext['createBufferSource']();
          audio.webAudioNode['buffer'] = webAudio.decodedBuffer;
          audio.webAudioNode['loop'] = audio.loop;
          audio.webAudioNode['onended'] = function() { audio['onended'](); } // For <media> element compatibility, route the onended signal to the instance.
  
          audio.webAudioPannerNode = SDL.audioContext['createPanner']();
          audio.webAudioPannerNode['panningModel'] = 'equalpower';
  
          // Add an intermediate gain node to control volume.
          audio.webAudioGainNode = SDL.audioContext['createGain']();
          audio.webAudioGainNode['gain']['value'] = audio.volume;
  
          audio.webAudioNode['connect'](audio.webAudioPannerNode);
          audio.webAudioPannerNode['connect'](audio.webAudioGainNode);
          audio.webAudioGainNode['connect'](SDL.audioContext['destination']);
  
          audio.webAudioNode['start'](0, audio.currentPosition);
          audio.startTime = SDL.audioContext['currentTime'] - audio.currentPosition;
        } catch(e) {
          Module.printErr('playWebAudio failed: ' + e);
        }
      },pauseWebAudio:function (audio) {
        if (!audio) return;
        if (audio.webAudioNode) {
          try {
            // Remember where we left off, so that if/when we resume, we can restart the playback at a proper place.
            audio.currentPosition = (SDL.audioContext['currentTime'] - audio.startTime) % audio.resource.webAudio.decodedBuffer.duration;
            // Important: When we reach here, the audio playback is stopped by the user. But when calling .stop() below, the Web Audio
            // graph will send the onended signal, but we don't want to process that, since pausing should not clear/destroy the audio
            // channel.
            audio.webAudioNode['onended'] = undefined;
            audio.webAudioNode.stop();
            audio.webAudioNode = undefined;
          } catch(e) {
            Module.printErr('pauseWebAudio failed: ' + e);
          }
        }
        audio.paused = true;
      },openAudioContext:function () {
        // Initialize Web Audio API if we haven't done so yet. Note: Only initialize Web Audio context ever once on the web page,
        // since initializing multiple times fails on Chrome saying 'audio resources have been exhausted'.
        if (!SDL.audioContext) {
          if (typeof(AudioContext) !== 'undefined') SDL.audioContext = new AudioContext();
          else if (typeof(webkitAudioContext) !== 'undefined') SDL.audioContext = new webkitAudioContext();
        }
      },webAudioAvailable:function () { return !!SDL.audioContext; },fillWebAudioBufferFromHeap:function (heapPtr, sizeSamplesPerChannel, dstAudioBuffer) {
        // The input audio data is interleaved across the channels, i.e. [L, R, L, R, L, R, ...] and is either 8-bit or 16-bit as
        // supported by the SDL API. The output audio wave data for Web Audio API must be in planar buffers of [-1,1]-normalized Float32 data,
        // so perform a buffer conversion for the data.
        var numChannels = SDL.audio.channels;
        for(var c = 0; c < numChannels; ++c) {
          var channelData = dstAudioBuffer['getChannelData'](c);
          if (channelData.length != sizeSamplesPerChannel) {
            throw 'Web Audio output buffer length mismatch! Destination size: ' + channelData.length + ' samples vs expected ' + sizeSamplesPerChannel + ' samples!';
          }
          if (SDL.audio.format == 0x8010 /*AUDIO_S16LSB*/) {
            for(var j = 0; j < sizeSamplesPerChannel; ++j) {
              channelData[j] = (HEAP16[(((heapPtr)+((j*numChannels + c)*2))>>1)]) / 0x8000;
            }
          } else if (SDL.audio.format == 0x0008 /*AUDIO_U8*/) {
            for(var j = 0; j < sizeSamplesPerChannel; ++j) {
              var v = (HEAP8[(((heapPtr)+(j*numChannels + c))>>0)]);
              channelData[j] = ((v >= 0) ? v-128 : v+128) /128;
            }
          }
        }
      },debugSurface:function (surfData) {
        console.log('dumping surface ' + [surfData.surf, surfData.source, surfData.width, surfData.height]);
        var image = surfData.ctx.getImageData(0, 0, surfData.width, surfData.height);
        var data = image.data;
        var num = Math.min(surfData.width, surfData.height);
        for (var i = 0; i < num; i++) {
          console.log('   diagonal ' + i + ':' + [data[i*surfData.width*4 + i*4 + 0], data[i*surfData.width*4 + i*4 + 1], data[i*surfData.width*4 + i*4 + 2], data[i*surfData.width*4 + i*4 + 3]]);
        }
      },joystickEventState:1,lastJoystickState:{},joystickNamePool:{},recordJoystickState:function (joystick, state) {
        // Standardize button state.
        var buttons = new Array(state.buttons.length);
        for (var i = 0; i < state.buttons.length; i++) {
          buttons[i] = SDL.getJoystickButtonState(state.buttons[i]);
        }
  
        SDL.lastJoystickState[joystick] = {
          buttons: buttons,
          axes: state.axes.slice(0),
          timestamp: state.timestamp,
          index: state.index,
          id: state.id
        };
      },getJoystickButtonState:function (button) {
        if (typeof button === 'object') {
          // Current gamepad API editor's draft (Firefox Nightly)
          // https://dvcs.w3.org/hg/gamepad/raw-file/default/gamepad.html#idl-def-GamepadButton
          return button.pressed;
        } else {
          // Current gamepad API working draft (Firefox / Chrome Stable)
          // http://www.w3.org/TR/2012/WD-gamepad-20120529/#gamepad-interface
          return button > 0;
        }
      },queryJoysticks:function () {
        for (var joystick in SDL.lastJoystickState) {
          var state = SDL.getGamepad(joystick - 1);
          var prevState = SDL.lastJoystickState[joystick];
          // Check only if the timestamp has differed.
          // NOTE: Timestamp is not available in Firefox.
          if (typeof state.timestamp !== 'number' || state.timestamp !== prevState.timestamp) {
            var i;
            for (i = 0; i < state.buttons.length; i++) {
              var buttonState = SDL.getJoystickButtonState(state.buttons[i]);
              // NOTE: The previous state already has a boolean representation of
              //       its button, so no need to standardize its button state here.
              if (buttonState !== prevState.buttons[i]) {
                // Insert button-press event.
                SDL.events.push({
                  type: buttonState ? 'joystick_button_down' : 'joystick_button_up',
                  joystick: joystick,
                  index: joystick - 1,
                  button: i
                });
              }
            }
            for (i = 0; i < state.axes.length; i++) {
              if (state.axes[i] !== prevState.axes[i]) {
                // Insert axes-change event.
                SDL.events.push({
                  type: 'joystick_axis_motion',
                  joystick: joystick,
                  index: joystick - 1,
                  axis: i,
                  value: state.axes[i]
                });
              }
            }
  
            SDL.recordJoystickState(joystick, state);
          }
        }
      },joystickAxisValueConversion:function (value) {
        // Ensures that 0 is 0, 1 is 32767, and -1 is 32768.
        return Math.ceil(((value+1) * 32767.5) - 32768);
      },getGamepads:function () {
        var fcn = navigator.getGamepads || navigator.webkitGamepads || navigator.mozGamepads || navigator.gamepads || navigator.webkitGetGamepads;
        if (fcn !== undefined) {
          // The function must be applied on the navigator object.
          return fcn.apply(navigator);
        } else {
          return [];
        }
      },getGamepad:function (deviceIndex) {
        var gamepads = SDL.getGamepads();
        if (gamepads.length > deviceIndex && deviceIndex >= 0) {
          return gamepads[deviceIndex];
        }
        return null;
      }};function _SDL_GL_GetProcAddress(name_) {
      return _emscripten_GetProcAddress(name_);
    }

  function _emscripten_glUniform3iv(location, count, value) {
      location = GL.uniforms[location];
      count *= 3;
      value = HEAP32.subarray((value)>>2,(value+count*4)>>2);
      GLctx.uniform3iv(location, value);
    }

  function _emscripten_glShaderSource(shader, count, string, length) {
      var source = GL.getSource(shader, count, string, length);
      GLctx.shaderSource(GL.shaders[shader], source);
    }

  function _SDL_SetVideoMode(width, height, depth, flags) {
      ['touchstart', 'touchend', 'touchmove', 'mousedown', 'mouseup', 'mousemove', 'DOMMouseScroll', 'mousewheel', 'wheel', 'mouseout'].forEach(function(event) {
        Module['canvas'].addEventListener(event, SDL.receiveEvent, true);
      });
  
      var canvas = Module['canvas'];
  
      // (0,0) means 'use fullscreen' in native; in Emscripten, use the current canvas size.
      if (width == 0 && height == 0) {
        width = canvas.width;
        height = canvas.height;
      }
  
      if (!SDL.addedResizeListener) {
        SDL.addedResizeListener = true;
        Browser.resizeListeners.push(function(w, h) {
          if (!SDL.settingVideoMode) {
            SDL.receiveEvent({
              type: 'resize',
              w: w,
              h: h
            });
          }
        });
      }
  
      if (width !== canvas.width || height !== canvas.height) {
        SDL.settingVideoMode = true; // SetVideoMode itself should not trigger resize events
        Browser.setCanvasSize(width, height);
        SDL.settingVideoMode = false;
      }
  
      // Free the old surface first if there is one
      if (SDL.screen) {
        SDL.freeSurface(SDL.screen);
        assert(!SDL.screen);
      }
  
      if (SDL.GL) flags = flags | 0x04000000; // SDL_OPENGL - if we are using GL, then later calls to SetVideoMode may not mention GL, but we do need it. Once in GL mode, we never leave it.
  
      SDL.screen = SDL.makeSurface(width, height, flags, true, 'screen');
  
      return SDL.screen;
    }

  function _emscripten_glIsFramebuffer(framebuffer) {
      var fb = GL.framebuffers[framebuffer];
      if (!fb) return 0;
      return GLctx.isFramebuffer(fb);
    }

  function _emscripten_glClientActiveTexture() {
  Module['printErr']('missing function: emscripten_glClientActiveTexture'); abort(-1);
  }

  function _emscripten_glReleaseShaderCompiler() {
      // NOP (as allowed by GLES 2.0 spec)
    }

  function _emscripten_glGetShaderInfoLog(shader, maxLength, length, infoLog) {
      var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
      if (log === null) log = '(unknown error)';
      log = log.substr(0, maxLength - 1);
      if (maxLength > 0 && infoLog) {
        writeStringToMemory(log, infoLog);
        if (length) HEAP32[((length)>>2)]=log.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _emscripten_glIsTexture(texture) {
      var texture = GL.textures[texture];
      if (!texture) return 0;
      return GLctx.isTexture(texture);
    }

  function _emscripten_glTexParameterf(x0, x1, x2) { GLctx.texParameterf(x0, x1, x2) }

  function _emscripten_glGetRenderbufferParameteriv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)]=GLctx.getRenderbufferParameter(target, pname);
    }

  function _emscripten_glStencilOpSeparate(x0, x1, x2, x3) { GLctx.stencilOpSeparate(x0, x1, x2, x3) }

  function _emscripten_glTexParameteri(x0, x1, x2) { GLctx.texParameteri(x0, x1, x2) }

  
  
  function emscriptenWebGLComputeImageSize(width, height, sizePerPixel, alignment) {
      function roundedToNextMultipleOf(x, y) {
        return Math.floor((x + y - 1) / y) * y
      }
      var plainRowSize = width * sizePerPixel;
      var alignedRowSize = roundedToNextMultipleOf(plainRowSize, alignment);
      return (height <= 0) ? 0 :
               ((height - 1) * alignedRowSize + plainRowSize);
    }function emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat) {
      var sizePerPixel;
      var numChannels;
      switch(format) {
        case 0x1906 /* GL_ALPHA */:
        case 0x1909 /* GL_LUMINANCE */:
        case 0x1902 /* GL_DEPTH_COMPONENT */:
        case 0x1903 /* GL_RED */:
          numChannels = 1;
          break;
        case 0x190A /* GL_LUMINANCE_ALPHA */:
        case 0x8227 /* GL_RG */:
          numChannels = 2;
          break;
        case 0x1907 /* GL_RGB */:
        case 0x8C40 /* GL_SRGB_EXT */:
          numChannels = 3;
          break;
        case 0x1908 /* GL_RGBA */:
        case 0x8C42 /* GL_SRGB_ALPHA_EXT */:
          numChannels = 4;
          break;
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return {
            pixels: null,
            internalFormat: 0x0
          };
      }
      switch (type) {
        case 0x1401 /* GL_UNSIGNED_BYTE */:
          sizePerPixel = numChannels*1;
          break;
        case 0x1403 /* GL_UNSIGNED_SHORT */:
        case 0x140B /* GL_HALF_FLOAT */:
        case 0x8D61 /* GL_HALF_FLOAT_OES */:
          sizePerPixel = numChannels*2;
          break;
        case 0x1405 /* GL_UNSIGNED_INT */:
        case 0x1406 /* GL_FLOAT */:
          sizePerPixel = numChannels*4;
          break;
        case 0x84FA /* UNSIGNED_INT_24_8_WEBGL/UNSIGNED_INT_24_8 */:
          sizePerPixel = 4;
          break;
        case 0x8363 /* GL_UNSIGNED_SHORT_5_6_5 */:
        case 0x8033 /* GL_UNSIGNED_SHORT_4_4_4_4 */:
        case 0x8034 /* GL_UNSIGNED_SHORT_5_5_5_1 */:
          sizePerPixel = 2;
          break;
        default:
          GL.recordError(0x0500); // GL_INVALID_ENUM
          return {
            pixels: null,
            internalFormat: 0x0
          };
      }
      var bytes = emscriptenWebGLComputeImageSize(width, height, sizePerPixel, GL.unpackAlignment);
      if (type == 0x1401 /* GL_UNSIGNED_BYTE */) {
        pixels = HEAPU8.subarray((pixels),(pixels+bytes));
      } else if (type == 0x1406 /* GL_FLOAT */) {
        pixels = HEAPF32.subarray((pixels)>>2,(pixels+bytes)>>2);
      } else if (type == 0x1405 /* GL_UNSIGNED_INT */ || type == 0x84FA /* UNSIGNED_INT_24_8_WEBGL */) {
        pixels = HEAPU32.subarray((pixels)>>2,(pixels+bytes)>>2);
      } else {
        pixels = HEAPU16.subarray((pixels)>>1,(pixels+bytes)>>1);
      }
      return {
        pixels: pixels,
        internalFormat: internalFormat
      };
    }function _emscripten_glReadPixels(x, y, width, height, format, type, pixels) {
      var data = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, format);
      if (!data.pixels) {
        GL.recordError(0x0500/*GL_INVALID_ENUM*/);
        return;
      }
      GLctx.readPixels(x, y, width, height, format, type, data.pixels);
    }

  function _emscripten_glCompressedTexSubImage2D(target, level, xoffset, yoffset, width, height, format, imageSize, data) {
      var heapView;
      if (data) {
        heapView = HEAPU8.subarray((data),(data+imageSize));
      } else {
        heapView = null;
      }
      GLctx['compressedTexSubImage2D'](target, level, xoffset, yoffset, width, height, format, heapView);
    }

  function _emscripten_glGetError() {
      // First return any GL error generated by the emscripten library_gl.js interop layer.
      if (GL.lastError) {
        var error = GL.lastError;
        GL.lastError = 0/*GL_NO_ERROR*/;
        return error;
      } else { // If there were none, return the GL error from the browser GL context.
        return GLctx.getError();
      }
    }

  function _emscripten_glUniform4f(location, v0, v1, v2, v3) {
      location = GL.uniforms[location];
      GLctx.uniform4f(location, v0, v1, v2, v3);
    }

  function _emscripten_glFramebufferTexture2D(target, attachment, textarget, texture, level) {
      GLctx.framebufferTexture2D(target, attachment, textarget,
                                      GL.textures[texture], level);
    }

  function _emscripten_glFrustum() {
  Module['printErr']('missing function: emscripten_glFrustum'); abort(-1);
  }

  function _emscripten_glHint(x0, x1) { GLctx.hint(x0, x1) }

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _emscripten_glGetTexParameterfv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAPF32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }

  function _emscripten_glUniform4i(location, v0, v1, v2, v3) {
      location = GL.uniforms[location];
      GLctx.uniform4i(location, v0, v1, v2, v3);
    }

  function _emscripten_glIsEnabled(x0) { return GLctx.isEnabled(x0) }

  function _emscripten_glBindRenderbuffer(target, renderbuffer) {
      GLctx.bindRenderbuffer(target, renderbuffer ? GL.renderbuffers[renderbuffer] : null);
    }

  function _glClearStencil(x0) { GLctx.clearStencil(x0) }

  function _emscripten_glViewport(x0, x1, x2, x3) { GLctx.viewport(x0, x1, x2, x3) }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  var _llvm_pow_f64=Math_pow;

  function _emscripten_glCopyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx.copyTexImage2D(x0, x1, x2, x3, x4, x5, x6, x7) }

  function _emscripten_glTexParameterfv(target, pname, params) {
      var param = HEAPF32[((params)>>2)];
      GLctx.texParameterf(target, pname, param);
    }

  function _glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var texture = GLctx.createTexture();
        if (!texture) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */); // GLES + EGL specs don't specify what should happen here, so best to issue an error and create IDs with 0.
          while(i < n) HEAP32[(((textures)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.textures);
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glVertexAttrib4f(x0, x1, x2, x3, x4) { GLctx.vertexAttrib4f(x0, x1, x2, x3, x4) }

  function _glDepthFunc(x0) { GLctx.depthFunc(x0) }

  function _emscripten_glLinkProgram(program) {
      GLctx.linkProgram(GL.programs[program]);
      GL.programInfos[program] = null; // uniforms no longer keep the same names after linking
      GL.populateUniformTable(program);
    }

  function _emscripten_glClearDepthf(x0) { GLctx.clearDepth(x0) }

  function _emscripten_glUniform3f(location, v0, v1, v2) {
      location = GL.uniforms[location];
      GLctx.uniform3f(location, v0, v1, v2);
    }

  function _emscripten_glGetObjectParameterivARB() {
  Module['printErr']('missing function: emscripten_glGetObjectParameterivARB'); abort(-1);
  }

  function _emscripten_glClear(x0) { GLctx.clear(x0) }

  function _emscripten_glUniform3i(location, v0, v1, v2) {
      location = GL.uniforms[location];
      GLctx.uniform3i(location, v0, v1, v2);
    }

  function _emscripten_glStencilOp(x0, x1, x2) { GLctx.stencilOp(x0, x1, x2) }

  function _emscripten_glBindAttribLocation(program, index, name) {
      name = Pointer_stringify(name);
      GLctx.bindAttribLocation(GL.programs[program], index, name);
    }

  var _cosf=Math_cos;

  function _emscripten_glBindBuffer(target, buffer) {
      var bufferObj = buffer ? GL.buffers[buffer] : null;
  
  
      GLctx.bindBuffer(target, bufferObj);
    }

  function _glDisable(x0) { GLctx.disable(x0) }

  function _emscripten_glEnableVertexAttribArray(index) {
      GLctx.enableVertexAttribArray(index);
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  
  function emscriptenWebGLGetUniform(program, location, params, type) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var data = GLctx.getUniform(GL.programs[program], GL.uniforms[location]);
      if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 'Integer': HEAP32[((params)>>2)]=data; break;
          case 'Float': HEAPF32[((params)>>2)]=data; break;
          default: throw 'internal emscriptenWebGLGetUniform() error, bad type: ' + type;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 'Integer': HEAP32[(((params)+(i))>>2)]=data[i]; break;
            case 'Float': HEAPF32[(((params)+(i))>>2)]=data[i]; break;
            default: throw 'internal emscriptenWebGLGetUniform() error, bad type: ' + type;
          }
        }
      }
    }function _emscripten_glGetUniformfv(program, location, params) {
      emscriptenWebGLGetUniform(program, location, params, 'Float');
    }

  function _emscripten_glUniform1i(location, v0) {
      location = GL.uniforms[location];
      GLctx.uniform1i(location, v0);
    }

  function _glColorMask(x0, x1, x2, x3) { GLctx.colorMask(x0, x1, x2, x3) }

  function _emscripten_glGetProgramiv(program, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getProgramInfoLog(GL.programs[program]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else if (pname == 0x8B87 /* GL_ACTIVE_UNIFORM_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          HEAP32[((p)>>2)]=ptable.maxUniformLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else if (pname == 0x8B8A /* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH */) {
        var ptable = GL.programInfos[program];
        if (ptable) {
          if (ptable.maxAttributeLength == -1) {
            var program = GL.programs[program];
            var numAttribs = GLctx.getProgramParameter(program, GLctx.ACTIVE_ATTRIBUTES);
            ptable.maxAttributeLength = 0; // Spec says if there are no active attribs, 0 must be returned.
            for(var i = 0; i < numAttribs; ++i) {
              var activeAttrib = GLctx.getActiveAttrib(program, i);
              ptable.maxAttributeLength = Math.max(ptable.maxAttributeLength, activeAttrib.name.length+1);
            }
          }
          HEAP32[((p)>>2)]=ptable.maxAttributeLength;
          return;
        } else if (program < GL.counter) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
        } else {
          GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        }
      } else {
        HEAP32[((p)>>2)]=GLctx.getProgramParameter(GL.programs[program], pname);
      }
    }

  function _emscripten_glGetBufferParameteriv(target, value, data) {
      if (!data) {
        // GLES2 specification does not specify how to behave if data is a null pointer. Since calling this function does not make sense
        // if data == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((data)>>2)]=GLctx.getBufferParameter(target, value);
    }

  
  function _emscripten_glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }function _emscripten_glDrawRangeElements(mode, start, end, count, type, indices) {
      // TODO: This should be a trivial pass-though function, but due to https://bugzilla.mozilla.org/show_bug.cgi?id=1202427,
      // we work around by ignoring the range.
      _emscripten_glDrawElements(mode, count, type, indices);
      GLctx.drawElements(mode, count, type, indices);
    }

  function _emscripten_glGetAttachedShaders(program, maxCount, count, shaders) {
      var result = GLctx.getAttachedShaders(GL.programs[program]);
      var len = result.length;
      if (len > maxCount) {
        len = maxCount;
      }
      HEAP32[((count)>>2)]=len;
      for (var i = 0; i < len; ++i) {
        var id = GL.shaders.indexOf(result[i]);
        HEAP32[(((shaders)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glGenRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var renderbuffer = GLctx.createRenderbuffer();
        if (!renderbuffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((renderbuffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.renderbuffers);
        renderbuffer.name = id;
        GL.renderbuffers[id] = renderbuffer;
        HEAP32[(((renderbuffers)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glBlendFuncSeparate(x0, x1, x2, x3) { GLctx.blendFuncSeparate(x0, x1, x2, x3) }

  function _emscripten_glFrontFace(x0) { GLctx.frontFace(x0) }

  function _emscripten_glGetVertexAttribPointerv(index, pname, pointer) {
      if (!pointer) {
        // GLES2 specification does not specify how to behave if pointer is a null pointer. Since calling this function does not make sense
        // if pointer == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((pointer)>>2)]=GLctx.getVertexAttribOffset(index, pname);
    }

  function _emscripten_glVertexAttrib3f(x0, x1, x2, x3) { GLctx.vertexAttrib3f(x0, x1, x2, x3) }

  function _emscripten_glUniform1iv(location, count, value) {
      location = GL.uniforms[location];
      value = HEAP32.subarray((value)>>2,(value+count*4)>>2);
      GLctx.uniform1iv(location, value);
    }

  function _emscripten_glTexCoordPointer() {
  Module['printErr']('missing function: emscripten_glTexCoordPointer'); abort(-1);
  }

  function _emscripten_glEnable(x0) { GLctx.enable(x0) }

  function _emscripten_glGetInfoLogARB() {
  Module['printErr']('missing function: emscripten_glGetInfoLogARB'); abort(-1);
  }

  function _emscripten_glNormalPointer() {
  Module['printErr']('missing function: emscripten_glNormalPointer'); abort(-1);
  }


  function _glViewport(x0, x1, x2, x3) { GLctx.viewport(x0, x1, x2, x3) }

  var _atan2f=Math_atan2;

  function _emscripten_glRenderbufferStorage(x0, x1, x2, x3) { GLctx.renderbufferStorage(x0, x1, x2, x3) }

  
  function emscriptenWebGLGetVertexAttrib(index, pname, params, type) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if params == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      var data = GLctx.getVertexAttrib(index, pname);
      if (typeof data == 'number' || typeof data == 'boolean') {
        switch (type) {
          case 'Integer': HEAP32[((params)>>2)]=data; break;
          case 'Float': HEAPF32[((params)>>2)]=data; break;
          case 'FloatToInteger': HEAP32[((params)>>2)]=Math.fround(data); break;
          default: throw 'internal emscriptenWebGLGetVertexAttrib() error, bad type: ' + type;
        }
      } else {
        for (var i = 0; i < data.length; i++) {
          switch (type) {
            case 'Integer': HEAP32[(((params)+(i))>>2)]=data[i]; break;
            case 'Float': HEAPF32[(((params)+(i))>>2)]=data[i]; break;
            case 'FloatToInteger': HEAP32[(((params)+(i))>>2)]=Math.fround(data[i]); break;
            default: throw 'internal emscriptenWebGLGetVertexAttrib() error, bad type: ' + type;
          }
        }
      }
    }function _emscripten_glGetVertexAttribfv(index, pname, params) {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttrib*f(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 'Float');
    }

  function _emscripten_glCopyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) { GLctx.copyTexSubImage2D(x0, x1, x2, x3, x4, x5, x6, x7) }

  function _emscripten_glDepthRange(x0, x1) { GLctx.depthRange(x0, x1) }

  function _emscripten_glTexParameteriv(target, pname, params) {
      var param = HEAP32[((params)>>2)];
      GLctx.texParameteri(target, pname, param);
    }

  function _emscripten_glDeleteShader(id) {
      if (!id) return;
      var shader = GL.shaders[id];
      if (!shader) { // glDeleteShader actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteShader(shader);
      GL.shaders[id] = null;
    }

  function _emscripten_glVertexPointer(){ throw 'Legacy GL function (glVertexPointer) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }

  function _emscripten_glDeleteBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((buffers)+(i*4))>>2)];
        var buffer = GL.buffers[id];
  
        // From spec: "glDeleteBuffers silently ignores 0's and names that do not
        // correspond to existing buffer objects."
        if (!buffer) continue;
  
        GLctx.deleteBuffer(buffer);
        buffer.name = 0;
        GL.buffers[id] = null;
  
        if (id == GL.currArrayBuffer) GL.currArrayBuffer = 0;
        if (id == GL.currElementArrayBuffer) GL.currElementArrayBuffer = 0;
      }
    }

  function _glDrawElements(mode, count, type, indices) {
  
      GLctx.drawElements(mode, count, type, indices);
  
    }

  function _emscripten_glBlendFunc(x0, x1) { GLctx.blendFunc(x0, x1) }

  var _sinf=Math_sin;

  function _emscripten_glUniformMatrix2fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform matrix
        view = GL.miniTempBufferViews[3];
        for (var i = 0; i < 4; i++) {
          view[i] = HEAPF32[(((value)+(i*4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniformMatrix2fv(location, transpose, view);
    }

  
  var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _emscripten_glBlendColor(x0, x1, x2, x3) { GLctx.blendColor(x0, x1, x2, x3) }

  function _emscripten_glGetShaderiv(shader, pname, p) {
      if (!p) {
        // GLES2 specification does not specify how to behave if p is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      if (pname == 0x8B84) { // GL_INFO_LOG_LENGTH
        var log = GLctx.getShaderInfoLog(GL.shaders[shader]);
        if (log === null) log = '(unknown error)';
        HEAP32[((p)>>2)]=log.length + 1;
      } else {
        HEAP32[((p)>>2)]=GLctx.getShaderParameter(GL.shaders[shader], pname);
      }
    }

  function _emscripten_glUniformMatrix3fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform matrix
        view = GL.miniTempBufferViews[8];
        for (var i = 0; i < 9; i++) {
          view[i] = HEAPF32[(((value)+(i*4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*36)>>2);
      }
      GLctx.uniformMatrix3fv(location, transpose, view);
    }

  function _emscripten_glVertexAttrib2f(x0, x1, x2) { GLctx.vertexAttrib2f(x0, x1, x2) }

  function _SDL_GL_SwapBuffers() {
      if (Browser.doSwapBuffers) Browser.doSwapBuffers(); // in workers, this is used to send out a buffered frame
    }

  function _emscripten_glUniform4fv(location, count, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform
        view = GL.miniTempBufferViews[3];
        view[0] = HEAPF32[((value)>>2)];
        view[1] = HEAPF32[(((value)+(4))>>2)];
        view[2] = HEAPF32[(((value)+(8))>>2)];
        view[3] = HEAPF32[(((value)+(12))>>2)];
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*16)>>2);
      }
      GLctx.uniform4fv(location, view);
    }

  function _SDL_Init(initFlags) {
      SDL.startTime = Date.now();
      SDL.initFlags = initFlags;
  
      // capture all key events. we just keep down and up, but also capture press to prevent default actions
      if (!Module['doNotCaptureKeyboard']) {
        var keyboardListeningElement = Module['keyboardListeningElement'] || document;
        keyboardListeningElement.addEventListener("keydown", SDL.receiveEvent);
        keyboardListeningElement.addEventListener("keyup", SDL.receiveEvent);
        keyboardListeningElement.addEventListener("keypress", SDL.receiveEvent);
        window.addEventListener("focus", SDL.receiveEvent);
        window.addEventListener("blur", SDL.receiveEvent);
        document.addEventListener("visibilitychange", SDL.receiveEvent);
      }
  
      if (initFlags & 0x200) {
        // SDL_INIT_JOYSTICK
        // Firefox will not give us Joystick data unless we register this NOP
        // callback.
        // https://bugzilla.mozilla.org/show_bug.cgi?id=936104
        addEventListener("gamepadconnected", function() {});
      }
  
      window.addEventListener("unload", SDL.receiveEvent);
      SDL.keyboardState = _malloc(0x10000); // Our SDL needs 512, but 64K is safe for older SDLs
      _memset(SDL.keyboardState, 0, 0x10000);
      // Initialize this structure carefully for closure
      SDL.DOMEventToSDLEvent['keydown']    = 0x300  /* SDL_KEYDOWN */;
      SDL.DOMEventToSDLEvent['keyup']      = 0x301  /* SDL_KEYUP */;
      SDL.DOMEventToSDLEvent['keypress']   = 0x303  /* SDL_TEXTINPUT */;
      SDL.DOMEventToSDLEvent['mousedown']  = 0x401  /* SDL_MOUSEBUTTONDOWN */;
      SDL.DOMEventToSDLEvent['mouseup']    = 0x402  /* SDL_MOUSEBUTTONUP */;
      SDL.DOMEventToSDLEvent['mousemove']  = 0x400  /* SDL_MOUSEMOTION */;
      SDL.DOMEventToSDLEvent['wheel']      = 0x403  /* SDL_MOUSEWHEEL */; 
      SDL.DOMEventToSDLEvent['touchstart'] = 0x700  /* SDL_FINGERDOWN */;
      SDL.DOMEventToSDLEvent['touchend']   = 0x701  /* SDL_FINGERUP */;
      SDL.DOMEventToSDLEvent['touchmove']  = 0x702  /* SDL_FINGERMOTION */;
      SDL.DOMEventToSDLEvent['unload']     = 0x100  /* SDL_QUIT */;
      SDL.DOMEventToSDLEvent['resize']     = 0x7001 /* SDL_VIDEORESIZE/SDL_EVENT_COMPAT2 */;
      SDL.DOMEventToSDLEvent['visibilitychange'] = 0x200 /* SDL_WINDOWEVENT */;
      SDL.DOMEventToSDLEvent['focus']      = 0x200 /* SDL_WINDOWEVENT */;
      SDL.DOMEventToSDLEvent['blur']       = 0x200 /* SDL_WINDOWEVENT */;
  
      // These are not technically DOM events; the HTML gamepad API is poll-based.
      // However, we define them here, as the rest of the SDL code assumes that
      // all SDL events originate as DOM events.
      SDL.DOMEventToSDLEvent['joystick_axis_motion'] = 0x600 /* SDL_JOYAXISMOTION */;
      SDL.DOMEventToSDLEvent['joystick_button_down'] = 0x603 /* SDL_JOYBUTTONDOWN */;
      SDL.DOMEventToSDLEvent['joystick_button_up'] = 0x604 /* SDL_JOYBUTTONUP */;
      return 0; // success
    }

  function _emscripten_glGetVertexAttribiv(index, pname, params) {
      // N.B. This function may only be called if the vertex attribute was specified using the function glVertexAttrib*f(),
      // otherwise the results are undefined. (GLES3 spec 6.1.12)
      emscriptenWebGLGetVertexAttrib(index, pname, params, 'FloatToInteger');
    }

  function _emscripten_glUniformMatrix4fv(location, count, transpose, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform matrix
        view = GL.miniTempBufferViews[15];
        for (var i = 0; i < 16; i++) {
          view[i] = HEAPF32[(((value)+(i*4))>>2)];
        }
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*64)>>2);
      }
      GLctx.uniformMatrix4fv(location, transpose, view);
    }

  function _emscripten_glGenFramebuffers(n, ids) {
      for (var i = 0; i < n; ++i) {
        var framebuffer = GLctx.createFramebuffer();
        if (!framebuffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((ids)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.framebuffers);
        framebuffer.name = id;
        GL.framebuffers[id] = framebuffer;
        HEAP32[(((ids)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glDrawArraysInstanced(mode, first, count, primcount) {
      GLctx['drawArraysInstanced'](mode, first, count, primcount);
    }

  function _emscripten_glEnableClientState() {
  Module['printErr']('missing function: emscripten_glEnableClientState'); abort(-1);
  }

  function _emscripten_glGetPointerv() {
  Module['printErr']('missing function: emscripten_glGetPointerv'); abort(-1);
  }

  function _emscripten_glBlendEquationSeparate(x0, x1) { GLctx.blendEquationSeparate(x0, x1) }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _emscripten_glBindTexture(target, texture) {
      GLctx.bindTexture(target, texture ? GL.textures[texture] : null);
    }

  function _emscripten_glShaderBinary() {
      GL.recordError(0x0500/*GL_INVALID_ENUM*/);
    }

  function _emscripten_glStencilMask(x0) { GLctx.stencilMask(x0) }

  function _emscripten_glStencilFuncSeparate(x0, x1, x2, x3) { GLctx.stencilFuncSeparate(x0, x1, x2, x3) }

  function _emscripten_glGenTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var texture = GLctx.createTexture();
        if (!texture) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */); // GLES + EGL specs don't specify what should happen here, so best to issue an error and create IDs with 0.
          while(i < n) HEAP32[(((textures)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.textures);
        texture.name = id;
        GL.textures[id] = texture;
        HEAP32[(((textures)+(i*4))>>2)]=id;
      }
    }

   
  Module["_i64Subtract"] = _i64Subtract;

  var _fabsf=Math_abs;

  var _floorf=Math_floor;

  function _emscripten_glGetActiveUniform(program, index, bufSize, length, size, type, name) {
      program = GL.programs[program];
      var info = GLctx.getActiveUniform(program, index);
      if (!info) return; // If an error occurs, nothing will be written to length, size, type and name.
  
      var infoname = info.name.slice(0, Math.max(0, bufSize - 1));
      if (bufSize > 0 && name) {
        writeStringToMemory(infoname, name);
        if (length) HEAP32[((length)>>2)]=infoname.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
  
      if (size) HEAP32[((size)>>2)]=info.size;
      if (type) HEAP32[((type)>>2)]=info.type;
    }

  function _emscripten_glDeleteObjectARB() {
  Module['printErr']('missing function: emscripten_glDeleteObjectARB'); abort(-1);
  }

  function _emscripten_glUniform1f(location, v0) {
      location = GL.uniforms[location];
      GLctx.uniform1f(location, v0);
    }

  function _emscripten_glDisableVertexAttribArray(index) {
      GLctx.disableVertexAttribArray(index);
    }

  function _emscripten_glVertexAttribPointer(index, size, type, normalized, stride, ptr) {
      GLctx.vertexAttribPointer(index, size, type, normalized, stride, ptr);
    }

  function _SDL_StartTextInput() {
      SDL.textInput = true;
    }

  function _emscripten_glVertexAttrib1f(x0, x1) { GLctx.vertexAttrib1f(x0, x1) }

  function _emscripten_glUseProgram(program) {
      GLctx.useProgram(program ? GL.programs[program] : null);
    }

  function _emscripten_glFinish() { GLctx.finish() }

  var _sqrtf=Math_sqrt;

  function _emscripten_glDepthFunc(x0) { GLctx.depthFunc(x0) }

  function _SDL_GL_SetAttribute(attr, value) {
      if (!(attr in SDL.glAttributes)) {
        abort('Unknown SDL GL attribute (' + attr + '). Please check if your SDL version is supported.');
      }
  
      SDL.glAttributes[attr] = value;
    }

  function _emscripten_glDrawArrays(mode, first, count) {
  
      GLctx.drawArrays(mode, first, count);
  
    }

  function _emscripten_glGenBuffers(n, buffers) {
      for (var i = 0; i < n; i++) {
        var buffer = GLctx.createBuffer();
        if (!buffer) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((buffers)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.buffers);
        buffer.name = id;
        GL.buffers[id] = buffer;
        HEAP32[(((buffers)+(i*4))>>2)]=id;
      }
    }

  function _emscripten_glClearDepth(x0) { GLctx.clearDepth(x0) }

  function _SDL_PollEvent(ptr) {
      return SDL.pollEvent(ptr);
    }

  function _emscripten_glUniform4iv(location, count, value) {
      location = GL.uniforms[location];
      count *= 4;
      value = HEAP32.subarray((value)>>2,(value+count*4)>>2);
      GLctx.uniform4iv(location, value);
    }

  function _glClear(x0) { GLctx.clear(x0) }

  function _emscripten_glUniform3fv(location, count, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform
        view = GL.miniTempBufferViews[2];
        view[0] = HEAPF32[((value)>>2)];
        view[1] = HEAPF32[(((value)+(4))>>2)];
        view[2] = HEAPF32[(((value)+(8))>>2)];
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*12)>>2);
      }
      GLctx.uniform3fv(location, view);
    }

  
  var JSEvents={keyEvent:0,mouseEvent:0,wheelEvent:0,uiEvent:0,focusEvent:0,deviceOrientationEvent:0,deviceMotionEvent:0,fullscreenChangeEvent:0,pointerlockChangeEvent:0,visibilityChangeEvent:0,touchEvent:0,previousFullscreenElement:null,previousScreenX:null,previousScreenY:null,removeEventListenersRegistered:false,registerRemoveEventListeners:function () {
        if (!JSEvents.removeEventListenersRegistered) {
        __ATEXIT__.push(function() {
            for(var i = JSEvents.eventHandlers.length-1; i >= 0; --i) {
              JSEvents._removeHandler(i);
            }
           });
          JSEvents.removeEventListenersRegistered = true;
        }
      },findEventTarget:function (target) {
        if (target) {
          if (typeof target == "number") {
            target = Pointer_stringify(target);
          }
          if (target == '#window') return window;
          else if (target == '#document') return document;
          else if (target == '#screen') return window.screen;
          else if (target == '#canvas') return Module['canvas'];
  
          if (typeof target == 'string') return document.getElementById(target);
          else return target;
        } else {
          // The sensible target varies between events, but use window as the default
          // since DOM events mostly can default to that. Specific callback registrations
          // override their own defaults.
          return window;
        }
      },deferredCalls:[],deferCall:function (targetFunction, precedence, argsList) {
        function arraysHaveEqualContent(arrA, arrB) {
          if (arrA.length != arrB.length) return false;
  
          for(var i in arrA) {
            if (arrA[i] != arrB[i]) return false;
          }
          return true;
        }
        // Test if the given call was already queued, and if so, don't add it again.
        for(var i in JSEvents.deferredCalls) {
          var call = JSEvents.deferredCalls[i];
          if (call.targetFunction == targetFunction && arraysHaveEqualContent(call.argsList, argsList)) {
            return;
          }
        }
        JSEvents.deferredCalls.push({
          targetFunction: targetFunction,
          precedence: precedence,
          argsList: argsList
        });
  
        JSEvents.deferredCalls.sort(function(x,y) { return x.precedence < y.precedence; });
      },removeDeferredCalls:function (targetFunction) {
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          if (JSEvents.deferredCalls[i].targetFunction == targetFunction) {
            JSEvents.deferredCalls.splice(i, 1);
            --i;
          }
        }
      },canPerformEventHandlerRequests:function () {
        return JSEvents.inEventHandler && JSEvents.currentEventHandler.allowsDeferredCalls;
      },runDeferredCalls:function () {
        if (!JSEvents.canPerformEventHandlerRequests()) {
          return;
        }
        for(var i = 0; i < JSEvents.deferredCalls.length; ++i) {
          var call = JSEvents.deferredCalls[i];
          JSEvents.deferredCalls.splice(i, 1);
          --i;
          call.targetFunction.apply(this, call.argsList);
        }
      },inEventHandler:0,currentEventHandler:null,eventHandlers:[],isInternetExplorer:function () { return navigator.userAgent.indexOf('MSIE') !== -1 || navigator.appVersion.indexOf('Trident/') > 0; },removeAllHandlersOnTarget:function (target, eventTypeString) {
        for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
          if (JSEvents.eventHandlers[i].target == target && 
            (!eventTypeString || eventTypeString == JSEvents.eventHandlers[i].eventTypeString)) {
             JSEvents._removeHandler(i--);
           }
        }
      },_removeHandler:function (i) {
        var h = JSEvents.eventHandlers[i];
        h.target.removeEventListener(h.eventTypeString, h.eventListenerFunc, h.useCapture);
        JSEvents.eventHandlers.splice(i, 1);
      },registerOrRemoveHandler:function (eventHandler) {
        var jsEventHandler = function jsEventHandler(event) {
          // Increment nesting count for the event handler.
          ++JSEvents.inEventHandler;
          JSEvents.currentEventHandler = eventHandler;
          // Process any old deferred calls the user has placed.
          JSEvents.runDeferredCalls();
          // Process the actual event, calls back to user C code handler.
          eventHandler.handlerFunc(event);
          // Process any new deferred calls that were placed right now from this event handler.
          JSEvents.runDeferredCalls();
          // Out of event handler - restore nesting count.
          --JSEvents.inEventHandler;
        }
        
        if (eventHandler.callbackfunc) {
          eventHandler.eventListenerFunc = jsEventHandler;
          eventHandler.target.addEventListener(eventHandler.eventTypeString, jsEventHandler, eventHandler.useCapture);
          JSEvents.eventHandlers.push(eventHandler);
          JSEvents.registerRemoveEventListeners();
        } else {
          for(var i = 0; i < JSEvents.eventHandlers.length; ++i) {
            if (JSEvents.eventHandlers[i].target == eventHandler.target
             && JSEvents.eventHandlers[i].eventTypeString == eventHandler.eventTypeString) {
               JSEvents._removeHandler(i--);
             }
          }
        }
      },registerKeyEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.keyEvent) {
          JSEvents.keyEvent = _malloc( 164 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
          writeStringToMemory(e.key ? e.key : "", JSEvents.keyEvent + 0 );
          writeStringToMemory(e.code ? e.code : "", JSEvents.keyEvent + 32 );
          HEAP32[(((JSEvents.keyEvent)+(64))>>2)]=e.location;
          HEAP32[(((JSEvents.keyEvent)+(68))>>2)]=e.ctrlKey;
          HEAP32[(((JSEvents.keyEvent)+(72))>>2)]=e.shiftKey;
          HEAP32[(((JSEvents.keyEvent)+(76))>>2)]=e.altKey;
          HEAP32[(((JSEvents.keyEvent)+(80))>>2)]=e.metaKey;
          HEAP32[(((JSEvents.keyEvent)+(84))>>2)]=e.repeat;
          writeStringToMemory(e.locale ? e.locale : "", JSEvents.keyEvent + 88 );
          writeStringToMemory(e.char ? e.char : "", JSEvents.keyEvent + 120 );
          HEAP32[(((JSEvents.keyEvent)+(152))>>2)]=e.charCode;
          HEAP32[(((JSEvents.keyEvent)+(156))>>2)]=e.keyCode;
          HEAP32[(((JSEvents.keyEvent)+(160))>>2)]=e.which;
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.keyEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: JSEvents.isInternetExplorer() ? false : true, // MSIE doesn't allow fullscreen and pointerlock requests from key handlers, others do.
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },getBoundingClientRectOrZeros:function (target) {
        return target.getBoundingClientRect ? target.getBoundingClientRect() : { left: 0, top: 0 };
      },fillMouseEventData:function (eventStruct, e, target) {
        HEAPF64[((eventStruct)>>3)]=JSEvents.tick();
        HEAP32[(((eventStruct)+(8))>>2)]=e.screenX;
        HEAP32[(((eventStruct)+(12))>>2)]=e.screenY;
        HEAP32[(((eventStruct)+(16))>>2)]=e.clientX;
        HEAP32[(((eventStruct)+(20))>>2)]=e.clientY;
        HEAP32[(((eventStruct)+(24))>>2)]=e.ctrlKey;
        HEAP32[(((eventStruct)+(28))>>2)]=e.shiftKey;
        HEAP32[(((eventStruct)+(32))>>2)]=e.altKey;
        HEAP32[(((eventStruct)+(36))>>2)]=e.metaKey;
        HEAP16[(((eventStruct)+(40))>>1)]=e.button;
        HEAP16[(((eventStruct)+(42))>>1)]=e.buttons;
        HEAP32[(((eventStruct)+(44))>>2)]=e["movementX"] || e["mozMovementX"] || e["webkitMovementX"] || (e.screenX-JSEvents.previousScreenX);
        HEAP32[(((eventStruct)+(48))>>2)]=e["movementY"] || e["mozMovementY"] || e["webkitMovementY"] || (e.screenY-JSEvents.previousScreenY);
  
        if (Module['canvas']) {
          var rect = Module['canvas'].getBoundingClientRect();
          HEAP32[(((eventStruct)+(60))>>2)]=e.clientX - rect.left;
          HEAP32[(((eventStruct)+(64))>>2)]=e.clientY - rect.top;
        } else { // Canvas is not initialized, return 0.
          HEAP32[(((eventStruct)+(60))>>2)]=0;
          HEAP32[(((eventStruct)+(64))>>2)]=0;
        }
        if (target) {
          var rect = JSEvents.getBoundingClientRectOrZeros(target);
          HEAP32[(((eventStruct)+(52))>>2)]=e.clientX - rect.left;
          HEAP32[(((eventStruct)+(56))>>2)]=e.clientY - rect.top;        
        } else { // No specific target passed, return 0.
          HEAP32[(((eventStruct)+(52))>>2)]=0;
          HEAP32[(((eventStruct)+(56))>>2)]=0;
        }
        JSEvents.previousScreenX = e.screenX;
        JSEvents.previousScreenY = e.screenY;
      },registerMouseEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.mouseEvent) {
          JSEvents.mouseEvent = _malloc( 72 );
        }
        target = JSEvents.findEventTarget(target);
        var handlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.mouseEvent, e, target);
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.mouseEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: eventTypeString != 'mousemove' && eventTypeString != 'mouseenter' && eventTypeString != 'mouseleave', // Mouse move events do not allow fullscreen/pointer lock requests to be handled in them!
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        // In IE, mousedown events don't either allow deferred calls to be run!
        if (JSEvents.isInternetExplorer() && eventTypeString == 'mousedown') eventHandler.allowsDeferredCalls = false;
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerWheelEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.wheelEvent) {
          JSEvents.wheelEvent = _malloc( 104 );
        }
        target = JSEvents.findEventTarget(target);
        // The DOM Level 3 events spec event 'wheel'
        var wheelHandlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.wheelEvent, e, target);
          HEAPF64[(((JSEvents.wheelEvent)+(72))>>3)]=e["deltaX"];
          HEAPF64[(((JSEvents.wheelEvent)+(80))>>3)]=e["deltaY"];
          HEAPF64[(((JSEvents.wheelEvent)+(88))>>3)]=e["deltaZ"];
          HEAP32[(((JSEvents.wheelEvent)+(96))>>2)]=e["deltaMode"];
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.wheelEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
        // The 'mousewheel' event as implemented in Safari 6.0.5
        var mouseWheelHandlerFunc = function(event) {
          var e = event || window.event;
          JSEvents.fillMouseEventData(JSEvents.wheelEvent, e, target);
          HEAPF64[(((JSEvents.wheelEvent)+(72))>>3)]=e["wheelDeltaX"];
          HEAPF64[(((JSEvents.wheelEvent)+(80))>>3)]=-e["wheelDeltaY"] /* Invert to unify direction with the DOM Level 3 wheel event. */;
          HEAPF64[(((JSEvents.wheelEvent)+(88))>>3)]=0 /* Not available */;
          HEAP32[(((JSEvents.wheelEvent)+(96))>>2)]=0 /* DOM_DELTA_PIXEL */;
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.wheelEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: true,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: (eventTypeString == 'wheel') ? wheelHandlerFunc : mouseWheelHandlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },pageScrollPos:function () {
        if (window.pageXOffset > 0 || window.pageYOffset > 0) {
          return [window.pageXOffset, window.pageYOffset];
        }
        if (typeof document.documentElement.scrollLeft !== 'undefined' || typeof document.documentElement.scrollTop !== 'undefined') {
          return [document.documentElement.scrollLeft, document.documentElement.scrollTop];
        }
        return [document.body.scrollLeft|0, document.body.scrollTop|0];
      },registerUiEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.uiEvent) {
          JSEvents.uiEvent = _malloc( 36 );
        }
  
        if (eventTypeString == "scroll" && !target) {
          target = document; // By default read scroll events on document rather than window.
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
          if (e.target != target) {
            // Never take ui events such as scroll via a 'bubbled' route, but always from the direct element that
            // was targeted. Otherwise e.g. if app logs a message in response to a page scroll, the Emscripten log
            // message box could cause to scroll, generating a new (bubbled) scroll message, causing a new log print,
            // causing a new scroll, etc..
            return;
          }
          var scrollPos = JSEvents.pageScrollPos();
          HEAP32[((JSEvents.uiEvent)>>2)]=e.detail;
          HEAP32[(((JSEvents.uiEvent)+(4))>>2)]=document.body.clientWidth;
          HEAP32[(((JSEvents.uiEvent)+(8))>>2)]=document.body.clientHeight;
          HEAP32[(((JSEvents.uiEvent)+(12))>>2)]=window.innerWidth;
          HEAP32[(((JSEvents.uiEvent)+(16))>>2)]=window.innerHeight;
          HEAP32[(((JSEvents.uiEvent)+(20))>>2)]=window.outerWidth;
          HEAP32[(((JSEvents.uiEvent)+(24))>>2)]=window.outerHeight;
          HEAP32[(((JSEvents.uiEvent)+(28))>>2)]=scrollPos[0];
          HEAP32[(((JSEvents.uiEvent)+(32))>>2)]=scrollPos[1];
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.uiEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false, // Neither scroll or resize events allow running requests inside them.
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },getNodeNameForTarget:function (target) {
        if (!target) return '';
        if (target == window) return '#window';
        if (target == window.screen) return '#screen';
        return (target && target.nodeName) ? target.nodeName : '';
      },registerFocusEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.focusEvent) {
          JSEvents.focusEvent = _malloc( 256 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var nodeName = JSEvents.getNodeNameForTarget(e.target);
          var id = e.target.id ? e.target.id : '';
          writeStringToMemory(nodeName, JSEvents.focusEvent + 0 );
          writeStringToMemory(id, JSEvents.focusEvent + 128 );
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.focusEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },tick:function () {
        if (window['performance'] && window['performance']['now']) return window['performance']['now']();
        else return Date.now();
      },registerDeviceOrientationEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.deviceOrientationEvent) {
          JSEvents.deviceOrientationEvent = _malloc( 40 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          HEAPF64[((JSEvents.deviceOrientationEvent)>>3)]=JSEvents.tick();
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(8))>>3)]=e.alpha;
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(16))>>3)]=e.beta;
          HEAPF64[(((JSEvents.deviceOrientationEvent)+(24))>>3)]=e.gamma;
          HEAP32[(((JSEvents.deviceOrientationEvent)+(32))>>2)]=e.absolute;
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.deviceOrientationEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerDeviceMotionEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.deviceMotionEvent) {
          JSEvents.deviceMotionEvent = _malloc( 80 );
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          HEAPF64[((JSEvents.deviceOrientationEvent)>>3)]=JSEvents.tick();
          HEAPF64[(((JSEvents.deviceMotionEvent)+(8))>>3)]=e.acceleration.x;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(16))>>3)]=e.acceleration.y;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(24))>>3)]=e.acceleration.z;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(32))>>3)]=e.accelerationIncludingGravity.x;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(40))>>3)]=e.accelerationIncludingGravity.y;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(48))>>3)]=e.accelerationIncludingGravity.z;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(56))>>3)]=e.rotationRate.alpha;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(64))>>3)]=e.rotationRate.beta;
          HEAPF64[(((JSEvents.deviceMotionEvent)+(72))>>3)]=e.rotationRate.gamma;
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.deviceMotionEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },screenOrientation:function () {
        if (!window.screen) return undefined;
        return window.screen.orientation || window.screen.mozOrientation || window.screen.webkitOrientation || window.screen.msOrientation;
      },fillOrientationChangeEventData:function (eventStruct, e) {
        var orientations  = ["portrait-primary", "portrait-secondary", "landscape-primary", "landscape-secondary"];
        var orientations2 = ["portrait",         "portrait",           "landscape",         "landscape"];
  
        var orientationString = JSEvents.screenOrientation();
        var orientation = orientations.indexOf(orientationString);
        if (orientation == -1) {
          orientation = orientations2.indexOf(orientationString);
        }
  
        HEAP32[((eventStruct)>>2)]=1 << orientation;
        HEAP32[(((eventStruct)+(4))>>2)]=window.orientation;
      },registerOrientationChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.orientationChangeEvent) {
          JSEvents.orientationChangeEvent = _malloc( 8 );
        }
  
        if (!target) {
          target = window.screen; // Orientation events need to be captured from 'window.screen' instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillOrientationChangeEventData(JSEvents.orientationChangeEvent, e);
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.orientationChangeEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        if (eventTypeString == "orientationchange" && window.screen.mozOrientation !== undefined) {
          eventTypeString = "mozorientationchange";
        }
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },fullscreenEnabled:function () {
        return document.fullscreenEnabled || document.mozFullscreenEnabled || document.mozFullScreenEnabled || document.webkitFullscreenEnabled || document.msFullscreenEnabled;
      },fillFullscreenChangeEventData:function (eventStruct, e) {
        var fullscreenElement = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement || document.msFullscreenElement;
        var isFullscreen = !!fullscreenElement;
        HEAP32[((eventStruct)>>2)]=isFullscreen;
        HEAP32[(((eventStruct)+(4))>>2)]=JSEvents.fullscreenEnabled();
        // If transitioning to fullscreen, report info about the element that is now fullscreen.
        // If transitioning to windowed mode, report info about the element that just was fullscreen.
        var reportedElement = isFullscreen ? fullscreenElement : JSEvents.previousFullscreenElement;
        var nodeName = JSEvents.getNodeNameForTarget(reportedElement);
        var id = (reportedElement && reportedElement.id) ? reportedElement.id : '';
        writeStringToMemory(nodeName, eventStruct + 8 );
        writeStringToMemory(id, eventStruct + 136 );
        HEAP32[(((eventStruct)+(264))>>2)]=reportedElement ? reportedElement.clientWidth : 0;
        HEAP32[(((eventStruct)+(268))>>2)]=reportedElement ? reportedElement.clientHeight : 0;
        HEAP32[(((eventStruct)+(272))>>2)]=screen.width;
        HEAP32[(((eventStruct)+(276))>>2)]=screen.height;
        if (isFullscreen) {
          JSEvents.previousFullscreenElement = fullscreenElement;
        }
      },registerFullscreenChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.fullscreenChangeEvent) {
          JSEvents.fullscreenChangeEvent = _malloc( 280 );
        }
  
        if (!target) {
          target = document; // Fullscreen change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillFullscreenChangeEventData(JSEvents.fullscreenChangeEvent, e);
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.fullscreenChangeEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },resizeCanvasForFullscreen:function (target, strategy) {
        var restoreOldStyle = __registerRestoreOldStyle(target);
        var cssWidth = strategy.softFullscreen ? window.innerWidth : screen.width;
        var cssHeight = strategy.softFullscreen ? window.innerHeight : screen.height;
        var rect = target.getBoundingClientRect();
        var windowedCssWidth = rect.right - rect.left;
        var windowedCssHeight = rect.bottom - rect.top;
        var windowedRttWidth = target.width;
        var windowedRttHeight = target.height;
  
        if (strategy.scaleMode == 3) {
          __setLetterbox(target, (cssHeight - windowedCssHeight) / 2, (cssWidth - windowedCssWidth) / 2);
          cssWidth = windowedCssWidth;
          cssHeight = windowedCssHeight;
        } else if (strategy.scaleMode == 2) {
          if (cssWidth*windowedRttHeight < windowedRttWidth*cssHeight) {
            var desiredCssHeight = windowedRttHeight * cssWidth / windowedRttWidth;
            __setLetterbox(target, (cssHeight - desiredCssHeight) / 2, 0);
            cssHeight = desiredCssHeight;
          } else {
            var desiredCssWidth = windowedRttWidth * cssHeight / windowedRttHeight;
            __setLetterbox(target, 0, (cssWidth - desiredCssWidth) / 2);
            cssWidth = desiredCssWidth;
          }
        }
  
        // If we are adding padding, must choose a background color or otherwise Chrome will give the
        // padding a default white color. Do it only if user has not customized their own background color.
        if (!target.style.backgroundColor) target.style.backgroundColor = 'black';
        // IE11 does the same, but requires the color to be set in the document body.
        if (!document.body.style.backgroundColor) document.body.style.backgroundColor = 'black'; // IE11
        // Firefox always shows black letterboxes independent of style color.
  
        target.style.width = cssWidth + 'px';
        target.style.height = cssHeight + 'px';
  
        if (strategy.filteringMode == 1) {
          target.style.imageRendering = 'optimizeSpeed';
          target.style.imageRendering = '-moz-crisp-edges';
          target.style.imageRendering = '-o-crisp-edges';
          target.style.imageRendering = '-webkit-optimize-contrast';
          target.style.imageRendering = 'optimize-contrast';
          target.style.imageRendering = 'crisp-edges';
          target.style.imageRendering = 'pixelated';
        }
  
        var dpiScale = (strategy.canvasResolutionScaleMode == 2) ? window.devicePixelRatio : 1;
        if (strategy.canvasResolutionScaleMode != 0) {
          target.width = cssWidth * dpiScale;
          target.height = cssHeight * dpiScale;
          if (target.GLctxObject) target.GLctxObject.GLctx.viewport(0, 0, target.width, target.height);
        }
        return restoreOldStyle;
      },requestFullscreen:function (target, strategy) {
        // EMSCRIPTEN_FULLSCREEN_SCALE_DEFAULT + EMSCRIPTEN_FULLSCREEN_CANVAS_SCALE_NONE is a mode where no extra logic is performed to the DOM elements.
        if (strategy.scaleMode != 0 || strategy.canvasResolutionScaleMode != 0) {
          JSEvents.resizeCanvasForFullscreen(target, strategy);
        }
  
        if (target.requestFullscreen) {
          target.requestFullscreen();
        } else if (target.msRequestFullscreen) {
          target.msRequestFullscreen();
        } else if (target.mozRequestFullScreen) {
          target.mozRequestFullScreen();
        } else if (target.mozRequestFullscreen) {
          target.mozRequestFullscreen();
        } else if (target.webkitRequestFullscreen) {
          target.webkitRequestFullscreen(Element.ALLOW_KEYBOARD_INPUT);
        } else {
          if (typeof JSEvents.fullscreenEnabled() === 'undefined') {
            return -1;
          } else {
            return -3;
          }
        }
  
        if (strategy.canvasResizedCallback) {
          Runtime.dynCall('iiii', strategy.canvasResizedCallback, [37, 0, strategy.canvasResizedCallbackUserData]);
        }
  
        return 0;
      },fillPointerlockChangeEventData:function (eventStruct, e) {
        var pointerLockElement = document.pointerLockElement || document.mozPointerLockElement || document.webkitPointerLockElement || document.msPointerLockElement;
        var isPointerlocked = !!pointerLockElement;
        HEAP32[((eventStruct)>>2)]=isPointerlocked;
        var nodeName = JSEvents.getNodeNameForTarget(pointerLockElement);
        var id = (pointerLockElement && pointerLockElement.id) ? pointerLockElement.id : '';
        writeStringToMemory(nodeName, eventStruct + 4 );
        writeStringToMemory(id, eventStruct + 132);
      },registerPointerlockChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.pointerlockChangeEvent) {
          JSEvents.pointerlockChangeEvent = _malloc( 260 );
        }
  
        if (!target) {
          target = document; // Pointer lock change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillPointerlockChangeEventData(JSEvents.pointerlockChangeEvent, e);
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.pointerlockChangeEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },requestPointerLock:function (target) {
        if (target.requestPointerLock) {
          target.requestPointerLock();
        } else if (target.mozRequestPointerLock) {
          target.mozRequestPointerLock();
        } else if (target.webkitRequestPointerLock) {
          target.webkitRequestPointerLock();
        } else if (target.msRequestPointerLock) {
          target.msRequestPointerLock();
        } else {
          // document.body is known to accept pointer lock, so use that to differentiate if the user passed a bad element,
          // or if the whole browser just doesn't support the feature.
          if (document.body.requestPointerLock || document.body.mozRequestPointerLock || document.body.webkitRequestPointerLock || document.body.msRequestPointerLock) {
            return -3;
          } else {
            return -1;
          }
        }
        return 0;
      },fillVisibilityChangeEventData:function (eventStruct, e) {
        var visibilityStates = [ "hidden", "visible", "prerender", "unloaded" ];
        var visibilityState = visibilityStates.indexOf(document.visibilityState);
  
        HEAP32[((eventStruct)>>2)]=document.hidden;
        HEAP32[(((eventStruct)+(4))>>2)]=visibilityState;
      },registerVisibilityChangeEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.visibilityChangeEvent) {
          JSEvents.visibilityChangeEvent = _malloc( 8 );
        }
  
        if (!target) {
          target = document; // Visibility change events need to be captured from 'document' by default instead of 'window'
        } else {
          target = JSEvents.findEventTarget(target);
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillVisibilityChangeEventData(JSEvents.visibilityChangeEvent, e);
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.visibilityChangeEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerTouchEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.touchEvent) {
          JSEvents.touchEvent = _malloc( 1684 );
        }
  
        target = JSEvents.findEventTarget(target);
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var touches = {};
          for(var i = 0; i < e.touches.length; ++i) {
            var touch = e.touches[i];
            touches[touch.identifier] = touch;
          }
          for(var i = 0; i < e.changedTouches.length; ++i) {
            var touch = e.changedTouches[i];
            touches[touch.identifier] = touch;
            touch.changed = true;
          }
          for(var i = 0; i < e.targetTouches.length; ++i) {
            var touch = e.targetTouches[i];
            touches[touch.identifier].onTarget = true;
          }
          
          var ptr = JSEvents.touchEvent;
          HEAP32[(((ptr)+(4))>>2)]=e.ctrlKey;
          HEAP32[(((ptr)+(8))>>2)]=e.shiftKey;
          HEAP32[(((ptr)+(12))>>2)]=e.altKey;
          HEAP32[(((ptr)+(16))>>2)]=e.metaKey;
          ptr += 20; // Advance to the start of the touch array.
          var canvasRect = Module['canvas'] ? Module['canvas'].getBoundingClientRect() : undefined;
          var targetRect = JSEvents.getBoundingClientRectOrZeros(target);
          var numTouches = 0;
          for(var i in touches) {
            var t = touches[i];
            HEAP32[((ptr)>>2)]=t.identifier;
            HEAP32[(((ptr)+(4))>>2)]=t.screenX;
            HEAP32[(((ptr)+(8))>>2)]=t.screenY;
            HEAP32[(((ptr)+(12))>>2)]=t.clientX;
            HEAP32[(((ptr)+(16))>>2)]=t.clientY;
            HEAP32[(((ptr)+(20))>>2)]=t.pageX;
            HEAP32[(((ptr)+(24))>>2)]=t.pageY;
            HEAP32[(((ptr)+(28))>>2)]=t.changed;
            HEAP32[(((ptr)+(32))>>2)]=t.onTarget;
            if (canvasRect) {
              HEAP32[(((ptr)+(44))>>2)]=t.clientX - canvasRect.left;
              HEAP32[(((ptr)+(48))>>2)]=t.clientY - canvasRect.top;
            } else {
              HEAP32[(((ptr)+(44))>>2)]=0;
              HEAP32[(((ptr)+(48))>>2)]=0;            
            }
            HEAP32[(((ptr)+(36))>>2)]=t.clientX - targetRect.left;
            HEAP32[(((ptr)+(40))>>2)]=t.clientY - targetRect.top;
            
            ptr += 52;
  
            if (++numTouches >= 32) {
              break;
            }
          }
          HEAP32[((JSEvents.touchEvent)>>2)]=numTouches;
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.touchEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: target,
          allowsDeferredCalls: false, // XXX Currently disabled, see bug https://bugzilla.mozilla.org/show_bug.cgi?id=966493
          // Once the above bug is resolved, enable the following condition if possible:
          // allowsDeferredCalls: eventTypeString == 'touchstart',
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },fillGamepadEventData:function (eventStruct, e) {
        HEAPF64[((eventStruct)>>3)]=e.timestamp;
        for(var i = 0; i < e.axes.length; ++i) {
          HEAPF64[(((eventStruct+i*8)+(16))>>3)]=e.axes[i];
        }
        for(var i = 0; i < e.buttons.length; ++i) {
          if (typeof(e.buttons[i]) === 'object') {
            HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i].value;
          } else {
            HEAPF64[(((eventStruct+i*8)+(528))>>3)]=e.buttons[i];
          }
        }
        for(var i = 0; i < e.buttons.length; ++i) {
          if (typeof(e.buttons[i]) === 'object') {
            HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i].pressed;
          } else {
            HEAP32[(((eventStruct+i*4)+(1040))>>2)]=e.buttons[i] == 1.0;
          }
        }
        HEAP32[(((eventStruct)+(1296))>>2)]=e.connected;
        HEAP32[(((eventStruct)+(1300))>>2)]=e.index;
        HEAP32[(((eventStruct)+(8))>>2)]=e.axes.length;
        HEAP32[(((eventStruct)+(12))>>2)]=e.buttons.length;
        writeStringToMemory(e.id, eventStruct + 1304 );
        writeStringToMemory(e.mapping, eventStruct + 1368 );
      },registerGamepadEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.gamepadEvent) {
          JSEvents.gamepadEvent = _malloc( 1432 );
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillGamepadEventData(JSEvents.gamepadEvent, e.gamepad);
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.gamepadEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: true,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerBeforeUnloadEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var confirmationMessage = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, 0, userData]);
          
          if (confirmationMessage) {
            confirmationMessage = Pointer_stringify(confirmationMessage);
          }
          if (confirmationMessage) {
            e.preventDefault();
            e.returnValue = confirmationMessage;
            return confirmationMessage;
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },battery:function () { return navigator.battery || navigator.mozBattery || navigator.webkitBattery; },fillBatteryEventData:function (eventStruct, e) {
        HEAPF64[((eventStruct)>>3)]=e.chargingTime;
        HEAPF64[(((eventStruct)+(8))>>3)]=e.dischargingTime;
        HEAPF64[(((eventStruct)+(16))>>3)]=e.level;
        HEAP32[(((eventStruct)+(24))>>2)]=e.charging;
      },registerBatteryEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!JSEvents.batteryEvent) {
          JSEvents.batteryEvent = _malloc( 32 );
        }
  
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          JSEvents.fillBatteryEventData(JSEvents.batteryEvent, JSEvents.battery());
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, JSEvents.batteryEvent, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      },registerWebGlEventCallback:function (target, userData, useCapture, callbackfunc, eventTypeId, eventTypeString) {
        if (!target) {
          target = Module['canvas'];
        }
        var handlerFunc = function(event) {
          var e = event || window.event;
  
          var shouldCancel = Runtime.dynCall('iiii', callbackfunc, [eventTypeId, 0, userData]);
          if (shouldCancel) {
            e.preventDefault();
          }
        };
  
        var eventHandler = {
          target: JSEvents.findEventTarget(target),
          allowsDeferredCalls: false,
          eventTypeString: eventTypeString,
          callbackfunc: callbackfunc,
          handlerFunc: handlerFunc,
          useCapture: useCapture
        };
        JSEvents.registerOrRemoveHandler(eventHandler);
      }};function _emscripten_set_resize_callback(target, userData, useCapture, callbackfunc) {
      JSEvents.registerUiEventCallback(target, userData, useCapture, callbackfunc, 10, "resize");
      return 0;
    }

  function _emscripten_glLoadIdentity(){ throw 'Legacy GL function (glLoadIdentity) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }

  function _emscripten_glIsProgram(program) {
      var program = GL.programs[program];
      if (!program) return 0;
      return GLctx.isProgram(program);
    }

  var _SItoD=true;

  function _emscripten_glGetUniformLocation(program, name) {
      name = Pointer_stringify(name);
  
      var arrayOffset = 0;
      // If user passed an array accessor "[index]", parse the array index off the accessor.
      if (name.indexOf(']', name.length-1) !== -1) {
        var ls = name.lastIndexOf('[');
        var arrayIndex = name.slice(ls+1, -1);
        if (arrayIndex.length > 0) {
          arrayOffset = parseInt(arrayIndex);
          if (arrayOffset < 0) {
            return -1;
          }
        }
        name = name.slice(0, ls);
      }
  
      var ptable = GL.programInfos[program];
      if (!ptable) {
        return -1;
      }
      var utable = ptable.uniforms;
      var uniformInfo = utable[name]; // returns pair [ dimension_of_uniform_array, uniform_location ]
      if (uniformInfo && arrayOffset < uniformInfo[0]) { // Check if user asked for an out-of-bounds element, i.e. for 'vec4 colors[3];' user could ask for 'colors[10]' which should return -1.
        return uniformInfo[1]+arrayOffset;
      } else {
        return -1;
      }
    }

  function _emscripten_glAttachShader(program, shader) {
      GLctx.attachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _emscripten_glVertexAttrib2fv(index, v) {
      v = HEAPF32.subarray((v)>>2,(v+8)>>2);
      GLctx.vertexAttrib2fv(index, v);
    }

  function _SDL_InitSubSystem(flags) { return 0 }

  function _glStencilOp(x0, x1, x2) { GLctx.stencilOp(x0, x1, x2) }

  function _emscripten_glVertexAttrib4fv(index, v) {
      v = HEAPF32.subarray((v)>>2,(v+16)>>2);
      GLctx.vertexAttrib4fv(index, v);
    }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _glStencilMask(x0) { GLctx.stencilMask(x0) }

  function _emscripten_glScissor(x0, x1, x2, x3) { GLctx.scissor(x0, x1, x2, x3) }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function _emscripten_glColorPointer() {
  Module['printErr']('missing function: emscripten_glColorPointer'); abort(-1);
  }

  var _BDtoIHigh=true;

  function _emscripten_glIsShader(shader) {
      var s = GL.shaders[shader];
      if (!s) return 0;
      return GLctx.isShader(s);
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _emscripten_glDrawBuffers(n, bufs) {
      var bufArray = [];
      for (var i = 0; i < n; i++)
        bufArray.push(HEAP32[(((bufs)+(i*4))>>2)]);
  
      GLctx['drawBuffers'](bufArray);
    }

  function _emscripten_glClearStencil(x0) { GLctx.clearStencil(x0) }

  function _emscripten_glBindFramebuffer(target, framebuffer) {
      GLctx.bindFramebuffer(target, framebuffer ? GL.framebuffers[framebuffer] : null);
    }

  function _emscripten_glDetachShader(program, shader) {
      GLctx.detachShader(GL.programs[program],
                              GL.shaders[shader]);
    }

  function _emscripten_glBlendEquation(x0) { GLctx.blendEquation(x0) }

  function _emscripten_glBufferSubData(target, offset, size, data) {
      GLctx.bufferSubData(target, offset, HEAPU8.subarray(data, data+size));
    }

  function _emscripten_glBufferData(target, size, data, usage) {
      switch (usage) { // fix usages, WebGL only has *_DRAW
        case 0x88E1: // GL_STREAM_READ
        case 0x88E2: // GL_STREAM_COPY
          usage = 0x88E0; // GL_STREAM_DRAW
          break;
        case 0x88E5: // GL_STATIC_READ
        case 0x88E6: // GL_STATIC_COPY
          usage = 0x88E4; // GL_STATIC_DRAW
          break;
        case 0x88E9: // GL_DYNAMIC_READ
        case 0x88EA: // GL_DYNAMIC_COPY
          usage = 0x88E8; // GL_DYNAMIC_DRAW
          break;
      }
      if (!data) {
        GLctx.bufferData(target, size, usage);
      } else {
        GLctx.bufferData(target, HEAPU8.subarray(data, data+size), usage);
      }
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  var _tanf=Math_tan;

  function _emscripten_get_element_css_size(target, width, height) {
      if (!target) {
        target = Module['canvas'];
      } else {
        target = JSEvents.findEventTarget(target);
      }
  
      if (!target) return -4;
  
      if (target.getBoundingClientRect) {
        var rect = target.getBoundingClientRect();
        HEAPF64[((width)>>3)]=rect.right - rect.left;
        HEAPF64[((height)>>3)]=rect.bottom - rect.top;
      } else {
        HEAPF64[((width)>>3)]=target.clientWidth;
        HEAPF64[((height)>>3)]=target.clientHeight;
      }
  
      return 0;
    }

  function _glStencilFunc(x0, x1, x2) { GLctx.stencilFunc(x0, x1, x2) }

  var _BItoD=true;

  function _emscripten_glGetTexParameteriv(target, pname, params) {
      if (!params) {
        // GLES2 specification does not specify how to behave if params is a null pointer. Since calling this function does not make sense
        // if p == null, issue a GL error to notify user about it. 
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      HEAP32[((params)>>2)]=GLctx.getTexParameter(target, pname);
    }

  function _emscripten_glGetShaderSource(shader, bufSize, length, source) {
      var result = GLctx.getShaderSource(GL.shaders[shader]);
      if (!result) return; // If an error occurs, nothing will be written to length or source.
      result = result.slice(0, Math.max(0, bufSize - 1));
      if (bufSize > 0 && source) {
        writeStringToMemory(result, source);
        if (length) HEAP32[((length)>>2)]=result.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _glTexParameteri(x0, x1, x2) { GLctx.texParameteri(x0, x1, x2) }

  function _emscripten_glGenerateMipmap(x0) { GLctx.generateMipmap(x0) }

  function _emscripten_glSampleCoverage(x0, x1) { GLctx.sampleCoverage(x0, x1) }

  function _emscripten_glCullFace(x0) { GLctx.cullFace(x0) }

  function _emscripten_glGetFloatv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Float');
    }

  function _emscripten_glRotatef() {
  Module['printErr']('missing function: emscripten_glRotatef'); abort(-1);
  }

  function _glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      var pixelData;
      if (pixels) {
        var data = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat);
        pixelData = data.pixels;
        internalFormat = data.internalFormat;
      } else {
        pixelData = null;
      }
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixelData);
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _emscripten_glVertexAttribDivisor(index, divisor) {
      GLctx['vertexAttribDivisor'](index, divisor);
    }

  function _emscripten_glDrawElementsInstanced(mode, count, type, indices, primcount) {
      GLctx['drawElementsInstanced'](mode, count, type, indices, primcount);
    }


  function _emscripten_glUniform2fv(location, count, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform
        view = GL.miniTempBufferViews[1];
        view[0] = HEAPF32[((value)>>2)];
        view[1] = HEAPF32[(((value)+(4))>>2)];
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*8)>>2);
      }
      GLctx.uniform2fv(location, view);
    }

  function _emscripten_glMatrixMode(){ throw 'Legacy GL function (glMatrixMode) called. If you want legacy GL emulation, you need to compile with -s LEGACY_GL_EMULATION=1 to enable legacy GL emulation.'; }

  function _abort() {
      Module['abort']();
    }

  function _emscripten_glCreateProgram() {
      var id = GL.getNewId(GL.programs);
      var program = GLctx.createProgram();
      program.name = id;
      GL.programs[id] = program;
      return id;
    }

  function _emscripten_glFramebufferRenderbuffer(target, attachment, renderbuffertarget, renderbuffer) {
      GLctx.framebufferRenderbuffer(target, attachment, renderbuffertarget,
                                         GL.renderbuffers[renderbuffer]);
    }

  function _emscripten_glCompressedTexImage2D(target, level, internalFormat, width, height, border, imageSize, data) {
      var heapView;
      if (data) {
        heapView = HEAPU8.subarray((data),(data+imageSize));
      } else {
        heapView = null;
      }
      GLctx['compressedTexImage2D'](target, level, internalFormat, width, height, border, heapView);
    }

  function _emscripten_glClearColor(x0, x1, x2, x3) { GLctx.clearColor(x0, x1, x2, x3) }

  function _emscripten_glDeleteFramebuffers(n, framebuffers) {
      for (var i = 0; i < n; ++i) {
        var id = HEAP32[(((framebuffers)+(i*4))>>2)];
        var framebuffer = GL.framebuffers[id];
        if (!framebuffer) continue; // GL spec: "glDeleteFramebuffers silently ignores 0s and names that do not correspond to existing framebuffer objects".
        GLctx.deleteFramebuffer(framebuffer);
        framebuffer.name = 0;
        GL.framebuffers[id] = null;
      }
    }

  function _emscripten_glBindVertexArray(vao) {
      GLctx['bindVertexArray'](GL.vaos[vao]);
    }

  function _emscripten_glIsBuffer(buffer) {
      var b = GL.buffers[buffer];
      if (!b) return 0;
      return GLctx.isBuffer(b);
    }

  function _emscripten_glUniform2iv(location, count, value) {
      location = GL.uniforms[location];
      count *= 2;
      value = HEAP32.subarray((value)>>2,(value+count*4)>>2);
      GLctx.uniform2iv(location, value);
    }

   
  Module["_i64Add"] = _i64Add;

  function _emscripten_glVertexAttrib1fv(index, v) {
      v = HEAPF32.subarray((v)>>2,(v+4)>>2);
      GLctx.vertexAttrib1fv(index, v);
    }

  function _glEnable(x0) { GLctx.enable(x0) }

  var _fabs=Math_abs;

  function _emscripten_glTexSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixels) {
      var pixelData;
      if (pixels) {
        pixelData = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, -1).pixels;
      } else {
        pixelData = null;
      }
      GLctx.texSubImage2D(target, level, xoffset, yoffset, width, height, format, type, pixelData);
    }

  function _emscripten_glPolygonOffset(x0, x1) { GLctx.polygonOffset(x0, x1) }

  var _emscripten_asm_const_int=true;

  function _emscripten_glUniform2f(location, v0, v1) {
      location = GL.uniforms[location];
      GLctx.uniform2f(location, v0, v1);
    }

  function ___unlock() {}

  function _emscripten_glLoadMatrixf() {
  Module['printErr']('missing function: emscripten_glLoadMatrixf'); abort(-1);
  }

  function _emscripten_glUniform2i(location, v0, v1) {
      location = GL.uniforms[location];
      GLctx.uniform2i(location, v0, v1);
    }

  function _glBlendFunc(x0, x1) { GLctx.blendFunc(x0, x1) }

  function _emscripten_glGetProgramInfoLog(program, maxLength, length, infoLog) {
      var log = GLctx.getProgramInfoLog(GL.programs[program]);
      if (log === null) log = '(unknown error)';
  
      log = log.substr(0, maxLength - 1);
      if (maxLength > 0 && infoLog) {
        writeStringToMemory(log, infoLog);
        if (length) HEAP32[((length)>>2)]=log.length;
      } else {
        if (length) HEAP32[((length)>>2)]=0;
      }
    }

  function _emscripten_glDeleteRenderbuffers(n, renderbuffers) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((renderbuffers)+(i*4))>>2)];
        var renderbuffer = GL.renderbuffers[id];
        if (!renderbuffer) continue; // GL spec: "glDeleteRenderbuffers silently ignores 0s and names that do not correspond to existing renderbuffer objects".
        GLctx.deleteRenderbuffer(renderbuffer);
        renderbuffer.name = 0;
        GL.renderbuffers[id] = null;
      }
    }

  function _emscripten_glTexImage2D(target, level, internalFormat, width, height, border, format, type, pixels) {
      var pixelData;
      if (pixels) {
        var data = emscriptenWebGLGetTexPixelData(type, format, width, height, pixels, internalFormat);
        pixelData = data.pixels;
        internalFormat = data.internalFormat;
      } else {
        pixelData = null;
      }
      GLctx.texImage2D(target, level, internalFormat, width, height, border, format, type, pixelData);
    }

  function _emscripten_glGetUniformiv(program, location, params) {
      emscriptenWebGLGetUniform(program, location, params, 'Integer');
    }

  function _emscripten_glActiveTexture(x0) { GLctx.activeTexture(x0) }

  function _emscripten_glDepthMask(x0) { GLctx.depthMask(x0) }


  function _emscripten_glDepthRangef(x0, x1) { GLctx.depthRange(x0, x1) }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _emscripten_glFlush() { GLctx.flush() }

  function _emscripten_glDeleteProgram(id) {
      if (!id) return;
      var program = GL.programs[id];
      if (!program) { // glDeleteProgram actually signals an error when deleting a nonexisting object, unlike some other GL delete functions.
        GL.recordError(0x0501 /* GL_INVALID_VALUE */);
        return;
      }
      GLctx.deleteProgram(program);
      program.name = 0;
      GL.programs[id] = null;
      GL.programInfos[id] = null;
    }

  function _emscripten_glStencilMaskSeparate(x0, x1) { GLctx.stencilMaskSeparate(x0, x1) }

  function _emscripten_glCreateShader(shaderType) {
      var id = GL.getNewId(GL.shaders);
      GL.shaders[id] = GLctx.createShader(shaderType);
      return id;
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _glClearDepth(x0) { GLctx.clearDepth(x0) }

  function _emscripten_glValidateProgram(program) {
      GLctx.validateProgram(GL.programs[program]);
    }

  function _emscripten_glGetShaderPrecisionFormat(shaderType, precisionType, range, precision) {
      var result = GLctx.getShaderPrecisionFormat(shaderType, precisionType);
      HEAP32[((range)>>2)]=result.rangeMin;
      HEAP32[(((range)+(4))>>2)]=result.rangeMax;
      HEAP32[((precision)>>2)]=result.precision;
    }

  function _emscripten_glUniform1fv(location, count, value) {
      location = GL.uniforms[location];
      var view;
      if (count === 1) {
        // avoid allocation for the common case of uploading one uniform
        view = GL.miniTempBufferViews[0];
        view[0] = HEAPF32[((value)>>2)];
      } else {
        view = HEAPF32.subarray((value)>>2,(value+count*4)>>2);
      }
      GLctx.uniform1fv(location, view);
    }

  function _emscripten_glColorMask(x0, x1, x2, x3) { GLctx.colorMask(x0, x1, x2, x3) }

  function _emscripten_glPixelStorei(pname, param) {
      if (pname == 0x0D05 /* GL_PACK_ALIGNMENT */) {
        GL.packAlignment = param;
      } else if (pname == 0x0cf5 /* GL_UNPACK_ALIGNMENT */) {
        GL.unpackAlignment = param;
      }
      GLctx.pixelStorei(pname, param);
    }

  function _emscripten_glDeleteTextures(n, textures) {
      for (var i = 0; i < n; i++) {
        var id = HEAP32[(((textures)+(i*4))>>2)];
        var texture = GL.textures[id];
        if (!texture) continue; // GL spec: "glDeleteTextures silently ignores 0s and names that do not correspond to existing textures".
        GLctx.deleteTexture(texture);
        texture.name = 0;
        GL.textures[id] = null;
      }
    }

  function _glScissor(x0, x1, x2, x3) { GLctx.scissor(x0, x1, x2, x3) }

  function ___lock() {}

  function _emscripten_glBindProgramARB() {
  Module['printErr']('missing function: emscripten_glBindProgramARB'); abort(-1);
  }

  function _emscripten_glDeleteVertexArrays(n, vaos) {
      for(var i = 0; i < n; i++) {
        var id = HEAP32[(((vaos)+(i*4))>>2)];
        GLctx['deleteVertexArray'](GL.vaos[id]);
        GL.vaos[id] = null;
      }
    }

  function _emscripten_glCompileShader(shader) {
      GLctx.compileShader(GL.shaders[shader]);
    }

  function _emscripten_glGenVertexArrays(n, arrays) {
  
      for(var i = 0; i < n; i++) {
        var vao = GLctx['createVertexArray']();
        if (!vao) {
          GL.recordError(0x0502 /* GL_INVALID_OPERATION */);
          while(i < n) HEAP32[(((arrays)+(i++*4))>>2)]=0;
          return;
        }
        var id = GL.getNewId(GL.vaos);
        vao.name = id;
        GL.vaos[id] = vao;
        HEAP32[(((arrays)+(i*4))>>2)]=id;
      }
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _emscripten_glCheckFramebufferStatus(x0) { return GLctx.checkFramebufferStatus(x0) }

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  function _emscripten_glGetBooleanv(name_, p) {
      emscriptenWebGLGet(name_, p, 'Boolean');
    }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _emscripten_glDisable(x0) { GLctx.disable(x0) }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
var GLctx; GL.init()
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
___buildEnvironment(ENV);
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vd(index,a1) {
  try {
    Module["dynCall_vd"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viddd(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viddd"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidd(index,a1,a2,a3) {
  try {
    Module["dynCall_vidd"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidddd(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_vidddd"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vdi(index,a1,a2) {
  try {
    Module["dynCall_vdi"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vdddddd(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_vdddddd"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vdddd(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_vdddd"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vdd(index,a1,a2) {
  try {
    Module["dynCall_vdd"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viid(index,a1,a2,a3) {
  try {
    Module["dynCall_viid"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "invoke_viiiii": invoke_viiiii, "invoke_vd": invoke_vd, "invoke_vid": invoke_vid, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viddd": invoke_viddd, "invoke_vidd": invoke_vidd, "invoke_iiii": invoke_iiii, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viii": invoke_viii, "invoke_vidddd": invoke_vidddd, "invoke_vdi": invoke_vdi, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_iii": invoke_iii, "invoke_i": invoke_i, "invoke_vdddddd": invoke_vdddddd, "invoke_vdddd": invoke_vdddd, "invoke_vdd": invoke_vdd, "invoke_v": invoke_v, "invoke_viid": invoke_viid, "invoke_viiii": invoke_viiii, "_emscripten_glGetTexParameterfv": _emscripten_glGetTexParameterfv, "_glClearStencil": _glClearStencil, "_emscripten_glGetRenderbufferParameteriv": _emscripten_glGetRenderbufferParameteriv, "_emscripten_glShaderSource": _emscripten_glShaderSource, "_emscripten_glReleaseShaderCompiler": _emscripten_glReleaseShaderCompiler, "_emscripten_glBlendFuncSeparate": _emscripten_glBlendFuncSeparate, "_glStencilFunc": _glStencilFunc, "_emscripten_glGetShaderPrecisionFormat": _emscripten_glGetShaderPrecisionFormat, "_SDL_StartTextInput": _SDL_StartTextInput, "_emscripten_glGetIntegerv": _emscripten_glGetIntegerv, "_emscripten_glCullFace": _emscripten_glCullFace, "_glClearColor": _glClearColor, "_TTF_SizeText": _TTF_SizeText, "_SDL_RWFromFile": _SDL_RWFromFile, "_emscripten_glViewport": _emscripten_glViewport, "_emscripten_glFrontFace": _emscripten_glFrontFace, "_emscripten_glDrawArrays": _emscripten_glDrawArrays, "_emscripten_glUniform3fv": _emscripten_glUniform3fv, "_emscripten_glPolygonOffset": _emscripten_glPolygonOffset, "_SDL_UpperBlit": _SDL_UpperBlit, "_emscripten_glUseProgram": _emscripten_glUseProgram, "_emscripten_glBlendColor": _emscripten_glBlendColor, "_emscripten_glDepthFunc": _emscripten_glDepthFunc, "_SDL_GL_SwapBuffers": _SDL_GL_SwapBuffers, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_SDL_GL_GetProcAddress": _SDL_GL_GetProcAddress, "_ceilf": _ceilf, "_glBlendFunc": _glBlendFunc, "_emscripten_glDisableVertexAttribArray": _emscripten_glDisableVertexAttribArray, "_emscripten_glUniform3iv": _emscripten_glUniform3iv, "_Mix_PlayChannel": _Mix_PlayChannel, "_TTF_RenderText_Solid": _TTF_RenderText_Solid, "_sysconf": _sysconf, "_glClear": _glClear, "_emscripten_glVertexPointer": _emscripten_glVertexPointer, "_emscripten_glUniform1f": _emscripten_glUniform1f, "_SDL_InitSubSystem": _SDL_InitSubSystem, "_Mix_PlayMusic": _Mix_PlayMusic, "_emscripten_glGetBooleanv": _emscripten_glGetBooleanv, "___syscall221": ___syscall221, "_emscripten_glUniform1i": _emscripten_glUniform1i, "_emscripten_glGenBuffers": _emscripten_glGenBuffers, "_emscripten_glDeleteObjectARB": _emscripten_glDeleteObjectARB, "_IMG_Load": _IMG_Load, "_emscripten_glVertexAttribPointer": _emscripten_glVertexAttribPointer, "_emscripten_glIsProgram": _emscripten_glIsProgram, "_emscripten_glGetPointerv": _emscripten_glGetPointerv, "_Mix_LoadWAV_RW": _Mix_LoadWAV_RW, "_emscripten_glBlendEquationSeparate": _emscripten_glBlendEquationSeparate, "_emscripten_glGetString": _emscripten_glGetString, "_emscripten_glIsFramebuffer": _emscripten_glIsFramebuffer, "_emscripten_glIsEnabled": _emscripten_glIsEnabled, "_emscripten_glScissor": _emscripten_glScissor, "_emscripten_glVertexAttrib4fv": _emscripten_glVertexAttrib4fv, "_emscripten_glTexParameteriv": _emscripten_glTexParameteriv, "_pthread_cleanup_push": _pthread_cleanup_push, "_emscripten_glBindProgramARB": _emscripten_glBindProgramARB, "_emscripten_glStencilOpSeparate": _emscripten_glStencilOpSeparate, "_emscripten_glHint": _emscripten_glHint, "___syscall140": ___syscall140, "_emscripten_glIsBuffer": _emscripten_glIsBuffer, "___syscall146": ___syscall146, "_emscripten_glStencilMaskSeparate": _emscripten_glStencilMaskSeparate, "_emscripten_glGetActiveAttrib": _emscripten_glGetActiveAttrib, "_emscripten_glAttachShader": _emscripten_glAttachShader, "_emscripten_glDrawRangeElements": _emscripten_glDrawRangeElements, "_SDL_SetVideoMode": _SDL_SetVideoMode, "_emscripten_glCompressedTexSubImage2D": _emscripten_glCompressedTexSubImage2D, "_emscripten_glUniform2f": _emscripten_glUniform2f, "_SDL_GL_SetAttribute": _SDL_GL_SetAttribute, "_emscripten_glTexParameterfv": _emscripten_glTexParameterfv, "_emscripten_glUniformMatrix2fv": _emscripten_glUniformMatrix2fv, "_emscripten_glTexParameterf": _emscripten_glTexParameterf, "_emscripten_glGetAttachedShaders": _emscripten_glGetAttachedShaders, "_emscripten_glGenTextures": _emscripten_glGenTextures, "_emscripten_glTexParameteri": _emscripten_glTexParameteri, "_atan2f": _atan2f, "emscriptenWebGLComputeImageSize": emscriptenWebGLComputeImageSize, "_emscripten_glClear": _emscripten_glClear, "_glDrawElements": _glDrawElements, "_emscripten_glValidateProgram": _emscripten_glValidateProgram, "_SDL_LockSurface": _SDL_LockSurface, "_emscripten_glVertexAttrib2fv": _emscripten_glVertexAttrib2fv, "_glViewport": _glViewport, "_emscripten_glUniform4iv": _emscripten_glUniform4iv, "_emscripten_glGetTexParameteriv": _emscripten_glGetTexParameteriv, "___setErrNo": ___setErrNo, "_emscripten_glBindAttribLocation": _emscripten_glBindAttribLocation, "_glDepthFunc": _glDepthFunc, "_Mix_HaltMusic": _Mix_HaltMusic, "_emscripten_glClientActiveTexture": _emscripten_glClientActiveTexture, "_emscripten_glVertexAttrib2f": _emscripten_glVertexAttrib2f, "_emscripten_glFlush": _emscripten_glFlush, "_emscripten_glUniform4i": _emscripten_glUniform4i, "_emscripten_glCheckFramebufferStatus": _emscripten_glCheckFramebufferStatus, "_emscripten_glGetError": _emscripten_glGetError, "_emscripten_glClearDepthf": _emscripten_glClearDepthf, "_emscripten_glBufferData": _emscripten_glBufferData, "_emscripten_glUniform3i": _emscripten_glUniform3i, "_emscripten_glRotatef": _emscripten_glRotatef, "_emscripten_glDeleteShader": _emscripten_glDeleteShader, "_glEnable": _glEnable, "_glClearDepth": _glClearDepth, "_fabs": _fabs, "_emscripten_glReadPixels": _emscripten_glReadPixels, "_emscripten_glMatrixMode": _emscripten_glMatrixMode, "_sqrt": _sqrt, "_emscripten_glClearStencil": _emscripten_glClearStencil, "_emscripten_glGetInfoLogARB": _emscripten_glGetInfoLogARB, "_emscripten_glGetUniformLocation": _emscripten_glGetUniformLocation, "emscriptenWebGLGet": emscriptenWebGLGet, "_emscripten_glEnableVertexAttribArray": _emscripten_glEnableVertexAttribArray, "_emscripten_glGetAttribLocation": _emscripten_glGetAttribLocation, "_emscripten_glNormalPointer": _emscripten_glNormalPointer, "_emscripten_glBindVertexArray": _emscripten_glBindVertexArray, "_emscripten_glTexCoordPointer": _emscripten_glTexCoordPointer, "_emscripten_glEnable": _emscripten_glEnable, "_emscripten_glClearDepth": _emscripten_glClearDepth, "_glDisable": _glDisable, "___lock": ___lock, "_emscripten_glBindFramebuffer": _emscripten_glBindFramebuffer, "_glGenTextures": _glGenTextures, "___syscall5": ___syscall5, "___syscall145": ___syscall145, "_emscripten_glBindRenderbuffer": _emscripten_glBindRenderbuffer, "_time": _time, "_emscripten_glVertexAttrib1f": _emscripten_glVertexAttrib1f, "_emscripten_glGetFramebufferAttachmentParameteriv": _emscripten_glGetFramebufferAttachmentParameteriv, "_emscripten_set_resize_callback": _emscripten_set_resize_callback, "_emscripten_asm_const_2": _emscripten_asm_const_2, "_emscripten_glEnableClientState": _emscripten_glEnableClientState, "_pthread_cleanup_pop": _pthread_cleanup_pop, "_putenv": _putenv, "_emscripten_glDeleteBuffers": _emscripten_glDeleteBuffers, "_llvm_pow_f64": _llvm_pow_f64, "_emscripten_glUniform4f": _emscripten_glUniform4f, "_emscripten_glGetObjectParameterivARB": _emscripten_glGetObjectParameterivARB, "_TTF_FontHeight": _TTF_FontHeight, "_emscripten_glShaderBinary": _emscripten_glShaderBinary, "_emscripten_glDrawElements": _emscripten_glDrawElements, "_emscripten_glBlendFunc": _emscripten_glBlendFunc, "_emscripten_glGetShaderInfoLog": _emscripten_glGetShaderInfoLog, "_sbrk": _sbrk, "_emscripten_glStencilMask": _emscripten_glStencilMask, "_emscripten_glUniform1iv": _emscripten_glUniform1iv, "_emscripten_glGetVertexAttribPointerv": _emscripten_glGetVertexAttribPointerv, "_emscripten_glUniform2i": _emscripten_glUniform2i, "emscriptenWebGLGetUniform": emscriptenWebGLGetUniform, "_glBindTexture": _glBindTexture, "_emscripten_glDeleteVertexArrays": _emscripten_glDeleteVertexArrays, "_fabsf": _fabsf, "_emscripten_glGetActiveUniform": _emscripten_glGetActiveUniform, "_SDL_Init": _SDL_Init, "emscriptenWebGLGetVertexAttrib": emscriptenWebGLGetVertexAttrib, "_emscripten_glUniform2iv": _emscripten_glUniform2iv, "_emscripten_glDisable": _emscripten_glDisable, "_emscripten_glGetBufferParameteriv": _emscripten_glGetBufferParameteriv, "_emscripten_glDeleteProgram": _emscripten_glDeleteProgram, "_emscripten_glDeleteRenderbuffers": _emscripten_glDeleteRenderbuffers, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_glDrawElementsInstanced": _emscripten_glDrawElementsInstanced, "_emscripten_glVertexAttrib4f": _emscripten_glVertexAttrib4f, "___syscall6": ___syscall6, "_emscripten_glTexSubImage2D": _emscripten_glTexSubImage2D, "_emscripten_glGetProgramiv": _emscripten_glGetProgramiv, "_emscripten_glPixelStorei": _emscripten_glPixelStorei, "_emscripten_glUniformMatrix3fv": _emscripten_glUniformMatrix3fv, "_emscripten_glColorPointer": _emscripten_glColorPointer, "_getenv": _getenv, "_floorf": _floorf, "emscriptenWebGLGetTexPixelData": emscriptenWebGLGetTexPixelData, "_sqrtf": _sqrtf, "_emscripten_glFinish": _emscripten_glFinish, "_emscripten_glRenderbufferStorage": _emscripten_glRenderbufferStorage, "_emscripten_glDepthMask": _emscripten_glDepthMask, "_emscripten_glDrawBuffers": _emscripten_glDrawBuffers, "_emscripten_glLineWidth": _emscripten_glLineWidth, "_emscripten_glCopyTexImage2D": _emscripten_glCopyTexImage2D, "_emscripten_glFramebufferTexture2D": _emscripten_glFramebufferTexture2D, "_emscripten_glFramebufferRenderbuffer": _emscripten_glFramebufferRenderbuffer, "_emscripten_glStencilFunc": _emscripten_glStencilFunc, "_abort": _abort, "_emscripten_glGetUniformiv": _emscripten_glGetUniformiv, "_glTexImage2D": _glTexImage2D, "_emscripten_glGetShaderiv": _emscripten_glGetShaderiv, "_emscripten_glGenFramebuffers": _emscripten_glGenFramebuffers, "_emscripten_glUniformMatrix4fv": _emscripten_glUniformMatrix4fv, "_tanf": _tanf, "_emscripten_glLoadIdentity": _emscripten_glLoadIdentity, "_SDL_GetTicks": _SDL_GetTicks, "_acosf": _acosf, "_emscripten_glUniform1fv": _emscripten_glUniform1fv, "_emscripten_glIsRenderbuffer": _emscripten_glIsRenderbuffer, "___buildEnvironment": ___buildEnvironment, "_glScissor": _glScissor, "_emscripten_glLoadMatrixf": _emscripten_glLoadMatrixf, "_emscripten_glGetVertexAttribiv": _emscripten_glGetVertexAttribiv, "_glStencilOp": _glStencilOp, "_SDL_CloseAudio": _SDL_CloseAudio, "_emscripten_glDrawArraysInstanced": _emscripten_glDrawArraysInstanced, "_emscripten_glCreateShader": _emscripten_glCreateShader, "_emscripten_glStencilFuncSeparate": _emscripten_glStencilFuncSeparate, "_emscripten_glCopyTexSubImage2D": _emscripten_glCopyTexSubImage2D, "_emscripten_glDeleteTextures": _emscripten_glDeleteTextures, "_emscripten_glVertexAttrib3f": _emscripten_glVertexAttrib3f, "_emscripten_glBufferSubData": _emscripten_glBufferSubData, "_emscripten_glVertexAttribDivisor": _emscripten_glVertexAttribDivisor, "_emscripten_glGetUniformfv": _emscripten_glGetUniformfv, "_SDL_FreeRW": _SDL_FreeRW, "_emscripten_glGetVertexAttribfv": _emscripten_glGetVertexAttribfv, "_emscripten_get_element_css_size": _emscripten_get_element_css_size, "_SDL_PauseAudio": _SDL_PauseAudio, "_emscripten_glVertexAttrib3fv": _emscripten_glVertexAttrib3fv, "_SDL_PollEvent": _SDL_PollEvent, "_glTexParameteri": _glTexParameteri, "_emscripten_glCompileShader": _emscripten_glCompileShader, "_emscripten_glSampleCoverage": _emscripten_glSampleCoverage, "_emscripten_glFrustum": _emscripten_glFrustum, "_Mix_FreeChunk": _Mix_FreeChunk, "_emscripten_glDepthRangef": _emscripten_glDepthRangef, "_sinf": _sinf, "_emscripten_glUniform3f": _emscripten_glUniform3f, "_IMG_Load_RW": _IMG_Load_RW, "_emscripten_glStencilOp": _emscripten_glStencilOp, "_emscripten_glGenerateMipmap": _emscripten_glGenerateMipmap, "_emscripten_glColorMask": _emscripten_glColorMask, "_emscripten_glLinkProgram": _emscripten_glLinkProgram, "_emscripten_glBlendEquation": _emscripten_glBlendEquation, "_emscripten_glIsTexture": _emscripten_glIsTexture, "_pthread_self": _pthread_self, "_emscripten_glVertexAttrib1fv": _emscripten_glVertexAttrib1fv, "_emscripten_glBindTexture": _emscripten_glBindTexture, "_SDL_UpperBlitScaled": _SDL_UpperBlitScaled, "_emscripten_glActiveTexture": _emscripten_glActiveTexture, "_glStencilMask": _glStencilMask, "_emscripten_glGenRenderbuffers": _emscripten_glGenRenderbuffers, "___syscall54": ___syscall54, "___unlock": ___unlock, "_emscripten_glDepthRange": _emscripten_glDepthRange, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_glIsShader": _emscripten_glIsShader, "_emscripten_glGetProgramInfoLog": _emscripten_glGetProgramInfoLog, "_emscripten_glDeleteFramebuffers": _emscripten_glDeleteFramebuffers, "_emscripten_glUniform4fv": _emscripten_glUniform4fv, "_cosf": _cosf, "_glColorMask": _glColorMask, "_emscripten_glCompressedTexImage2D": _emscripten_glCompressedTexImage2D, "_emscripten_glClearColor": _emscripten_glClearColor, "_emscripten_glGetShaderSource": _emscripten_glGetShaderSource, "_emscripten_glCreateProgram": _emscripten_glCreateProgram, "_emscripten_glGenVertexArrays": _emscripten_glGenVertexArrays, "_emscripten_glUniform2fv": _emscripten_glUniform2fv, "_emscripten_glBindBuffer": _emscripten_glBindBuffer, "_emscripten_glGetFloatv": _emscripten_glGetFloatv, "_emscripten_glDetachShader": _emscripten_glDetachShader, "_SDL_RWFromConstMem": _SDL_RWFromConstMem, "_emscripten_glTexImage2D": _emscripten_glTexImage2D, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vd=env.invoke_vd;
  var invoke_vid=env.invoke_vid;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viddd=env.invoke_viddd;
  var invoke_vidd=env.invoke_vidd;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viii=env.invoke_viii;
  var invoke_vidddd=env.invoke_vidddd;
  var invoke_vdi=env.invoke_vdi;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_i=env.invoke_i;
  var invoke_vdddddd=env.invoke_vdddddd;
  var invoke_vdddd=env.invoke_vdddd;
  var invoke_vdd=env.invoke_vdd;
  var invoke_v=env.invoke_v;
  var invoke_viid=env.invoke_viid;
  var invoke_viiii=env.invoke_viiii;
  var _emscripten_glGetTexParameterfv=env._emscripten_glGetTexParameterfv;
  var _glClearStencil=env._glClearStencil;
  var _emscripten_glGetRenderbufferParameteriv=env._emscripten_glGetRenderbufferParameteriv;
  var _emscripten_glShaderSource=env._emscripten_glShaderSource;
  var _emscripten_glReleaseShaderCompiler=env._emscripten_glReleaseShaderCompiler;
  var _emscripten_glBlendFuncSeparate=env._emscripten_glBlendFuncSeparate;
  var _glStencilFunc=env._glStencilFunc;
  var _emscripten_glGetShaderPrecisionFormat=env._emscripten_glGetShaderPrecisionFormat;
  var _SDL_StartTextInput=env._SDL_StartTextInput;
  var _emscripten_glGetIntegerv=env._emscripten_glGetIntegerv;
  var _emscripten_glCullFace=env._emscripten_glCullFace;
  var _glClearColor=env._glClearColor;
  var _TTF_SizeText=env._TTF_SizeText;
  var _SDL_RWFromFile=env._SDL_RWFromFile;
  var _emscripten_glViewport=env._emscripten_glViewport;
  var _emscripten_glFrontFace=env._emscripten_glFrontFace;
  var _emscripten_glDrawArrays=env._emscripten_glDrawArrays;
  var _emscripten_glUniform3fv=env._emscripten_glUniform3fv;
  var _emscripten_glPolygonOffset=env._emscripten_glPolygonOffset;
  var _SDL_UpperBlit=env._SDL_UpperBlit;
  var _emscripten_glUseProgram=env._emscripten_glUseProgram;
  var _emscripten_glBlendColor=env._emscripten_glBlendColor;
  var _emscripten_glDepthFunc=env._emscripten_glDepthFunc;
  var _SDL_GL_SwapBuffers=env._SDL_GL_SwapBuffers;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _SDL_GL_GetProcAddress=env._SDL_GL_GetProcAddress;
  var _ceilf=env._ceilf;
  var _glBlendFunc=env._glBlendFunc;
  var _emscripten_glDisableVertexAttribArray=env._emscripten_glDisableVertexAttribArray;
  var _emscripten_glUniform3iv=env._emscripten_glUniform3iv;
  var _Mix_PlayChannel=env._Mix_PlayChannel;
  var _TTF_RenderText_Solid=env._TTF_RenderText_Solid;
  var _sysconf=env._sysconf;
  var _glClear=env._glClear;
  var _emscripten_glVertexPointer=env._emscripten_glVertexPointer;
  var _emscripten_glUniform1f=env._emscripten_glUniform1f;
  var _SDL_InitSubSystem=env._SDL_InitSubSystem;
  var _Mix_PlayMusic=env._Mix_PlayMusic;
  var _emscripten_glGetBooleanv=env._emscripten_glGetBooleanv;
  var ___syscall221=env.___syscall221;
  var _emscripten_glUniform1i=env._emscripten_glUniform1i;
  var _emscripten_glGenBuffers=env._emscripten_glGenBuffers;
  var _emscripten_glDeleteObjectARB=env._emscripten_glDeleteObjectARB;
  var _IMG_Load=env._IMG_Load;
  var _emscripten_glVertexAttribPointer=env._emscripten_glVertexAttribPointer;
  var _emscripten_glIsProgram=env._emscripten_glIsProgram;
  var _emscripten_glGetPointerv=env._emscripten_glGetPointerv;
  var _Mix_LoadWAV_RW=env._Mix_LoadWAV_RW;
  var _emscripten_glBlendEquationSeparate=env._emscripten_glBlendEquationSeparate;
  var _emscripten_glGetString=env._emscripten_glGetString;
  var _emscripten_glIsFramebuffer=env._emscripten_glIsFramebuffer;
  var _emscripten_glIsEnabled=env._emscripten_glIsEnabled;
  var _emscripten_glScissor=env._emscripten_glScissor;
  var _emscripten_glVertexAttrib4fv=env._emscripten_glVertexAttrib4fv;
  var _emscripten_glTexParameteriv=env._emscripten_glTexParameteriv;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var _emscripten_glBindProgramARB=env._emscripten_glBindProgramARB;
  var _emscripten_glStencilOpSeparate=env._emscripten_glStencilOpSeparate;
  var _emscripten_glHint=env._emscripten_glHint;
  var ___syscall140=env.___syscall140;
  var _emscripten_glIsBuffer=env._emscripten_glIsBuffer;
  var ___syscall146=env.___syscall146;
  var _emscripten_glStencilMaskSeparate=env._emscripten_glStencilMaskSeparate;
  var _emscripten_glGetActiveAttrib=env._emscripten_glGetActiveAttrib;
  var _emscripten_glAttachShader=env._emscripten_glAttachShader;
  var _emscripten_glDrawRangeElements=env._emscripten_glDrawRangeElements;
  var _SDL_SetVideoMode=env._SDL_SetVideoMode;
  var _emscripten_glCompressedTexSubImage2D=env._emscripten_glCompressedTexSubImage2D;
  var _emscripten_glUniform2f=env._emscripten_glUniform2f;
  var _SDL_GL_SetAttribute=env._SDL_GL_SetAttribute;
  var _emscripten_glTexParameterfv=env._emscripten_glTexParameterfv;
  var _emscripten_glUniformMatrix2fv=env._emscripten_glUniformMatrix2fv;
  var _emscripten_glTexParameterf=env._emscripten_glTexParameterf;
  var _emscripten_glGetAttachedShaders=env._emscripten_glGetAttachedShaders;
  var _emscripten_glGenTextures=env._emscripten_glGenTextures;
  var _emscripten_glTexParameteri=env._emscripten_glTexParameteri;
  var _atan2f=env._atan2f;
  var emscriptenWebGLComputeImageSize=env.emscriptenWebGLComputeImageSize;
  var _emscripten_glClear=env._emscripten_glClear;
  var _glDrawElements=env._glDrawElements;
  var _emscripten_glValidateProgram=env._emscripten_glValidateProgram;
  var _SDL_LockSurface=env._SDL_LockSurface;
  var _emscripten_glVertexAttrib2fv=env._emscripten_glVertexAttrib2fv;
  var _glViewport=env._glViewport;
  var _emscripten_glUniform4iv=env._emscripten_glUniform4iv;
  var _emscripten_glGetTexParameteriv=env._emscripten_glGetTexParameteriv;
  var ___setErrNo=env.___setErrNo;
  var _emscripten_glBindAttribLocation=env._emscripten_glBindAttribLocation;
  var _glDepthFunc=env._glDepthFunc;
  var _Mix_HaltMusic=env._Mix_HaltMusic;
  var _emscripten_glClientActiveTexture=env._emscripten_glClientActiveTexture;
  var _emscripten_glVertexAttrib2f=env._emscripten_glVertexAttrib2f;
  var _emscripten_glFlush=env._emscripten_glFlush;
  var _emscripten_glUniform4i=env._emscripten_glUniform4i;
  var _emscripten_glCheckFramebufferStatus=env._emscripten_glCheckFramebufferStatus;
  var _emscripten_glGetError=env._emscripten_glGetError;
  var _emscripten_glClearDepthf=env._emscripten_glClearDepthf;
  var _emscripten_glBufferData=env._emscripten_glBufferData;
  var _emscripten_glUniform3i=env._emscripten_glUniform3i;
  var _emscripten_glRotatef=env._emscripten_glRotatef;
  var _emscripten_glDeleteShader=env._emscripten_glDeleteShader;
  var _glEnable=env._glEnable;
  var _glClearDepth=env._glClearDepth;
  var _fabs=env._fabs;
  var _emscripten_glReadPixels=env._emscripten_glReadPixels;
  var _emscripten_glMatrixMode=env._emscripten_glMatrixMode;
  var _sqrt=env._sqrt;
  var _emscripten_glClearStencil=env._emscripten_glClearStencil;
  var _emscripten_glGetInfoLogARB=env._emscripten_glGetInfoLogARB;
  var _emscripten_glGetUniformLocation=env._emscripten_glGetUniformLocation;
  var emscriptenWebGLGet=env.emscriptenWebGLGet;
  var _emscripten_glEnableVertexAttribArray=env._emscripten_glEnableVertexAttribArray;
  var _emscripten_glGetAttribLocation=env._emscripten_glGetAttribLocation;
  var _emscripten_glNormalPointer=env._emscripten_glNormalPointer;
  var _emscripten_glBindVertexArray=env._emscripten_glBindVertexArray;
  var _emscripten_glTexCoordPointer=env._emscripten_glTexCoordPointer;
  var _emscripten_glEnable=env._emscripten_glEnable;
  var _emscripten_glClearDepth=env._emscripten_glClearDepth;
  var _glDisable=env._glDisable;
  var ___lock=env.___lock;
  var _emscripten_glBindFramebuffer=env._emscripten_glBindFramebuffer;
  var _glGenTextures=env._glGenTextures;
  var ___syscall5=env.___syscall5;
  var ___syscall145=env.___syscall145;
  var _emscripten_glBindRenderbuffer=env._emscripten_glBindRenderbuffer;
  var _time=env._time;
  var _emscripten_glVertexAttrib1f=env._emscripten_glVertexAttrib1f;
  var _emscripten_glGetFramebufferAttachmentParameteriv=env._emscripten_glGetFramebufferAttachmentParameteriv;
  var _emscripten_set_resize_callback=env._emscripten_set_resize_callback;
  var _emscripten_asm_const_2=env._emscripten_asm_const_2;
  var _emscripten_glEnableClientState=env._emscripten_glEnableClientState;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var _putenv=env._putenv;
  var _emscripten_glDeleteBuffers=env._emscripten_glDeleteBuffers;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _emscripten_glUniform4f=env._emscripten_glUniform4f;
  var _emscripten_glGetObjectParameterivARB=env._emscripten_glGetObjectParameterivARB;
  var _TTF_FontHeight=env._TTF_FontHeight;
  var _emscripten_glShaderBinary=env._emscripten_glShaderBinary;
  var _emscripten_glDrawElements=env._emscripten_glDrawElements;
  var _emscripten_glBlendFunc=env._emscripten_glBlendFunc;
  var _emscripten_glGetShaderInfoLog=env._emscripten_glGetShaderInfoLog;
  var _sbrk=env._sbrk;
  var _emscripten_glStencilMask=env._emscripten_glStencilMask;
  var _emscripten_glUniform1iv=env._emscripten_glUniform1iv;
  var _emscripten_glGetVertexAttribPointerv=env._emscripten_glGetVertexAttribPointerv;
  var _emscripten_glUniform2i=env._emscripten_glUniform2i;
  var emscriptenWebGLGetUniform=env.emscriptenWebGLGetUniform;
  var _glBindTexture=env._glBindTexture;
  var _emscripten_glDeleteVertexArrays=env._emscripten_glDeleteVertexArrays;
  var _fabsf=env._fabsf;
  var _emscripten_glGetActiveUniform=env._emscripten_glGetActiveUniform;
  var _SDL_Init=env._SDL_Init;
  var emscriptenWebGLGetVertexAttrib=env.emscriptenWebGLGetVertexAttrib;
  var _emscripten_glUniform2iv=env._emscripten_glUniform2iv;
  var _emscripten_glDisable=env._emscripten_glDisable;
  var _emscripten_glGetBufferParameteriv=env._emscripten_glGetBufferParameteriv;
  var _emscripten_glDeleteProgram=env._emscripten_glDeleteProgram;
  var _emscripten_glDeleteRenderbuffers=env._emscripten_glDeleteRenderbuffers;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_glDrawElementsInstanced=env._emscripten_glDrawElementsInstanced;
  var _emscripten_glVertexAttrib4f=env._emscripten_glVertexAttrib4f;
  var ___syscall6=env.___syscall6;
  var _emscripten_glTexSubImage2D=env._emscripten_glTexSubImage2D;
  var _emscripten_glGetProgramiv=env._emscripten_glGetProgramiv;
  var _emscripten_glPixelStorei=env._emscripten_glPixelStorei;
  var _emscripten_glUniformMatrix3fv=env._emscripten_glUniformMatrix3fv;
  var _emscripten_glColorPointer=env._emscripten_glColorPointer;
  var _getenv=env._getenv;
  var _floorf=env._floorf;
  var emscriptenWebGLGetTexPixelData=env.emscriptenWebGLGetTexPixelData;
  var _sqrtf=env._sqrtf;
  var _emscripten_glFinish=env._emscripten_glFinish;
  var _emscripten_glRenderbufferStorage=env._emscripten_glRenderbufferStorage;
  var _emscripten_glDepthMask=env._emscripten_glDepthMask;
  var _emscripten_glDrawBuffers=env._emscripten_glDrawBuffers;
  var _emscripten_glLineWidth=env._emscripten_glLineWidth;
  var _emscripten_glCopyTexImage2D=env._emscripten_glCopyTexImage2D;
  var _emscripten_glFramebufferTexture2D=env._emscripten_glFramebufferTexture2D;
  var _emscripten_glFramebufferRenderbuffer=env._emscripten_glFramebufferRenderbuffer;
  var _emscripten_glStencilFunc=env._emscripten_glStencilFunc;
  var _abort=env._abort;
  var _emscripten_glGetUniformiv=env._emscripten_glGetUniformiv;
  var _glTexImage2D=env._glTexImage2D;
  var _emscripten_glGetShaderiv=env._emscripten_glGetShaderiv;
  var _emscripten_glGenFramebuffers=env._emscripten_glGenFramebuffers;
  var _emscripten_glUniformMatrix4fv=env._emscripten_glUniformMatrix4fv;
  var _tanf=env._tanf;
  var _emscripten_glLoadIdentity=env._emscripten_glLoadIdentity;
  var _SDL_GetTicks=env._SDL_GetTicks;
  var _acosf=env._acosf;
  var _emscripten_glUniform1fv=env._emscripten_glUniform1fv;
  var _emscripten_glIsRenderbuffer=env._emscripten_glIsRenderbuffer;
  var ___buildEnvironment=env.___buildEnvironment;
  var _glScissor=env._glScissor;
  var _emscripten_glLoadMatrixf=env._emscripten_glLoadMatrixf;
  var _emscripten_glGetVertexAttribiv=env._emscripten_glGetVertexAttribiv;
  var _glStencilOp=env._glStencilOp;
  var _SDL_CloseAudio=env._SDL_CloseAudio;
  var _emscripten_glDrawArraysInstanced=env._emscripten_glDrawArraysInstanced;
  var _emscripten_glCreateShader=env._emscripten_glCreateShader;
  var _emscripten_glStencilFuncSeparate=env._emscripten_glStencilFuncSeparate;
  var _emscripten_glCopyTexSubImage2D=env._emscripten_glCopyTexSubImage2D;
  var _emscripten_glDeleteTextures=env._emscripten_glDeleteTextures;
  var _emscripten_glVertexAttrib3f=env._emscripten_glVertexAttrib3f;
  var _emscripten_glBufferSubData=env._emscripten_glBufferSubData;
  var _emscripten_glVertexAttribDivisor=env._emscripten_glVertexAttribDivisor;
  var _emscripten_glGetUniformfv=env._emscripten_glGetUniformfv;
  var _SDL_FreeRW=env._SDL_FreeRW;
  var _emscripten_glGetVertexAttribfv=env._emscripten_glGetVertexAttribfv;
  var _emscripten_get_element_css_size=env._emscripten_get_element_css_size;
  var _SDL_PauseAudio=env._SDL_PauseAudio;
  var _emscripten_glVertexAttrib3fv=env._emscripten_glVertexAttrib3fv;
  var _SDL_PollEvent=env._SDL_PollEvent;
  var _glTexParameteri=env._glTexParameteri;
  var _emscripten_glCompileShader=env._emscripten_glCompileShader;
  var _emscripten_glSampleCoverage=env._emscripten_glSampleCoverage;
  var _emscripten_glFrustum=env._emscripten_glFrustum;
  var _Mix_FreeChunk=env._Mix_FreeChunk;
  var _emscripten_glDepthRangef=env._emscripten_glDepthRangef;
  var _sinf=env._sinf;
  var _emscripten_glUniform3f=env._emscripten_glUniform3f;
  var _IMG_Load_RW=env._IMG_Load_RW;
  var _emscripten_glStencilOp=env._emscripten_glStencilOp;
  var _emscripten_glGenerateMipmap=env._emscripten_glGenerateMipmap;
  var _emscripten_glColorMask=env._emscripten_glColorMask;
  var _emscripten_glLinkProgram=env._emscripten_glLinkProgram;
  var _emscripten_glBlendEquation=env._emscripten_glBlendEquation;
  var _emscripten_glIsTexture=env._emscripten_glIsTexture;
  var _pthread_self=env._pthread_self;
  var _emscripten_glVertexAttrib1fv=env._emscripten_glVertexAttrib1fv;
  var _emscripten_glBindTexture=env._emscripten_glBindTexture;
  var _SDL_UpperBlitScaled=env._SDL_UpperBlitScaled;
  var _emscripten_glActiveTexture=env._emscripten_glActiveTexture;
  var _glStencilMask=env._glStencilMask;
  var _emscripten_glGenRenderbuffers=env._emscripten_glGenRenderbuffers;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _emscripten_glDepthRange=env._emscripten_glDepthRange;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_glIsShader=env._emscripten_glIsShader;
  var _emscripten_glGetProgramInfoLog=env._emscripten_glGetProgramInfoLog;
  var _emscripten_glDeleteFramebuffers=env._emscripten_glDeleteFramebuffers;
  var _emscripten_glUniform4fv=env._emscripten_glUniform4fv;
  var _cosf=env._cosf;
  var _glColorMask=env._glColorMask;
  var _emscripten_glCompressedTexImage2D=env._emscripten_glCompressedTexImage2D;
  var _emscripten_glClearColor=env._emscripten_glClearColor;
  var _emscripten_glGetShaderSource=env._emscripten_glGetShaderSource;
  var _emscripten_glCreateProgram=env._emscripten_glCreateProgram;
  var _emscripten_glGenVertexArrays=env._emscripten_glGenVertexArrays;
  var _emscripten_glUniform2fv=env._emscripten_glUniform2fv;
  var _emscripten_glBindBuffer=env._emscripten_glBindBuffer;
  var _emscripten_glGetFloatv=env._emscripten_glGetFloatv;
  var _emscripten_glDetachShader=env._emscripten_glDetachShader;
  var _SDL_RWFromConstMem=env._SDL_RWFromConstMem;
  var _emscripten_glTexImage2D=env._emscripten_glTexImage2D;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _main($argc,$argv) {
 $argc = $argc|0;
 $argv = $argv|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_SDL_Init(544)|0);
 (_SDL_GL_SetAttribute(5,1)|0);
 (_SDL_InitSubSystem(16)|0);
 _app_emscripten_pull_size();
 (_emscripten_set_resize_callback((0|0),(0|0),0,(4|0))|0);
 $0 = HEAP32[(12)>>2]|0;
 $1 = HEAP32[(16)>>2]|0;
 (_SDL_SetVideoMode(($0|0),($1|0),32,84934656)|0);
 _SDL_StartTextInput();
 HEAP32[5224>>2] = 1;
 _app_setup();
 _emscripten_set_main_loop((1|0),0,1);
 return 0;
}
function _app_emscripten_resize($eventType,$uiEvent,$userData) {
 $eventType = $eventType|0;
 $uiEvent = $uiEvent|0;
 $userData = $userData|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($uiEvent)) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[(12)>>2] = $1;
 $2 = ((($uiEvent)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 HEAP32[(16)>>2] = $3;
 $4 = HEAP32[5224>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  return 0;
 }
 $6 = HEAP32[(12)>>2]|0;
 (_SDL_SetVideoMode(($6|0),($3|0),32,84934656)|0);
 return 0;
}
function _app_setup() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[8>>2] = 22106696;
 _video_init();
 return;
}
function _app_draw() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _video_draw();
 return;
}
function _app_emscripten_pull_size() {
 var $0 = 0.0, $1 = 0, $2 = 0.0, $3 = 0, $canvash = 0, $canvasw = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $canvasw = sp + 8|0;
 $canvash = sp;
 (_emscripten_get_element_css_size((22106703|0),($canvasw|0),($canvash|0))|0);
 $0 = +HEAPF64[$canvasw>>3];
 $1 = (~~(($0)));
 HEAP32[(12)>>2] = $1;
 $2 = +HEAPF64[$canvash>>3];
 $3 = (~~(($2)));
 HEAP32[(16)>>2] = $3;
 STACKTOP = sp;return;
}
function _app_emscripten_draw() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $event = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $event = sp;
 while(1) {
  $0 = (_SDL_PollEvent(($event|0))|0);
  $1 = ($0|0)==(0);
  if ($1) {
   break;
  }
 }
 $2 = HEAP32[(12)>>2]|0;
 $3 = HEAP32[(16)>>2]|0;
 _glViewport(0,0,($2|0),($3|0));
 _app_draw();
 _SDL_GL_SwapBuffers();
 STACKTOP = sp;return;
}
function _gfx_reset() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(52344)>>2]|0;
 $1 = (5240 + (($0*92)|0)|0);
 HEAP32[$1>>2] = 0;
 $2 = (((5240 + (($0*92)|0)|0)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = (((5240 + (($0*92)|0)|0)) + 16|0);
 HEAP32[$3>>2] = -1;
 $4 = (((5240 + (($0*92)|0)|0)) + 28|0);
 HEAPF32[$4>>2] = 1.0;
 $5 = (((5240 + (($0*92)|0)|0)) + 20|0);
 HEAPF32[$5>>2] = 1.0;
 $6 = (((5240 + (($0*92)|0)|0)) + 8|0);
 HEAP32[$6>>2] = 0;
 $7 = (((5240 + (($0*92)|0)|0)) + 32|0);
 HEAP32[$7>>2] = 1;
 $8 = (((5240 + (($0*92)|0)|0)) + 36|0);
 HEAP32[$8>>2] = 1;
 $9 = (((5240 + (($0*92)|0)|0)) + 40|0);
 ;HEAP32[$9>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;HEAP32[$9+12>>2]=0|0;HEAP32[$9+16>>2]=0|0;
 $10 = HEAP32[5228>>2]|0;
 $11 = (((5240 + (($0*92)|0)|0)) + 60|0);
 HEAP32[$11>>2] = $10;
 $12 = HEAP32[(5232)>>2]|0;
 $13 = (((5240 + (($0*92)|0)|0)) + 64|0);
 HEAP32[$13>>2] = $12;
 $14 = (((5240 + (($0*92)|0)|0)) + 68|0);
 _gfx__matrix_identity($14);
 _gfx__matrix_invalidate();
 return;
}
function _gfx_translate($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $m = sp;
 _gfx__matrix_translate($m,$x,$y);
 $0 = HEAP32[(52344)>>2]|0;
 $1 = (((5240 + (($0*92)|0)|0)) + 68|0);
 _gfx__matrix_premultiply($1,$m);
 _gfx__matrix_invalidate();
 STACKTOP = sp;return;
}
function _gfx_rotate_rads($angle) {
 $angle = +$angle;
 var $0 = 0, $1 = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $m = sp;
 _gfx__matrix_rotate($m,$angle);
 $0 = HEAP32[(52344)>>2]|0;
 $1 = (((5240 + (($0*92)|0)|0)) + 68|0);
 _gfx__matrix_premultiply($1,$m);
 _gfx__matrix_invalidate();
 STACKTOP = sp;return;
}
function _gfx_rotate_degs($angle) {
 $angle = +$angle;
 var $0 = 0.0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $angle * 3.1415927410125732;
 $1 = $0 / 180.0;
 _gfx_rotate_rads($1);
 return;
}
function _gfx_rotate($angle) {
 $angle = +$angle;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _gfx_rotate_degs($angle);
 return;
}
function _gfx_scale($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $m = sp;
 _gfx__matrix_scale($m,$x,$y);
 $0 = HEAP32[(52344)>>2]|0;
 $1 = (((5240 + (($0*92)|0)|0)) + 68|0);
 _gfx__matrix_premultiply($1,$m);
 _gfx__matrix_invalidate();
 STACKTOP = sp;return;
}
function _gfx_get_texture_width($id) {
 $id = $id|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($id|0)==(0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = (_gfx__get_texture($id)|0);
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $$0 = $3;
 return ($$0|0);
}
function _gfx_get_texture_height($id) {
 $id = $id|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($id|0)==(0);
 if ($0) {
  $$0 = 0;
  return ($$0|0);
 }
 $1 = (_gfx__get_texture($id)|0);
 $2 = ((($1)) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $$0 = $3;
 return ($$0|0);
}
function _gfx_texture($texture) {
 $texture = $texture|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($texture|0)==(0);
 $1 = HEAP32[(52344)>>2]|0;
 if ($0) {
  $5 = (((5240 + (($1*92)|0)|0)) + 12|0);
  HEAP32[$5>>2] = 0;
  return;
 } else {
  $2 = (((5240 + (($1*92)|0)|0)) + 8|0);
  HEAP32[$2>>2] = $texture;
  $3 = HEAP32[(52344)>>2]|0;
  $4 = (((5240 + (($3*92)|0)|0)) + 12|0);
  HEAP32[$4>>2] = 1;
  return;
 }
}
function _gfx_shader($shader) {
 $shader = $shader|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(52344)>>2]|0;
 $1 = (5240 + (($0*92)|0)|0);
 HEAP32[$1>>2] = $shader;
 return;
}
function _gfx_blend($mode) {
 $mode = $mode|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(52344)>>2]|0;
 $1 = (((5240 + (($0*92)|0)|0)) + 32|0);
 HEAP32[$1>>2] = $mode;
 return;
}
function _gfx_sampler($mode) {
 $mode = $mode|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(52344)>>2]|0;
 $1 = (((5240 + (($0*92)|0)|0)) + 36|0);
 HEAP32[$1>>2] = $mode;
 return;
}
function _gfx_get_width() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(52344)>>2]|0;
 $1 = (((5240 + (($0*92)|0)|0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $5 = HEAP32[5228>>2]|0;
  $6 = $5;
  return ($6|0);
 } else {
  $4 = (_gfx_get_texture_width($2)|0);
  $6 = $4;
  return ($6|0);
 }
 return (0)|0;
}
function _gfx_get_height() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(52344)>>2]|0;
 $1 = (((5240 + (($0*92)|0)|0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $5 = HEAP32[(5232)>>2]|0;
  $6 = $5;
  return ($6|0);
 } else {
  $4 = (_gfx_get_texture_height($2)|0);
  $6 = $4;
  return ($6|0);
 }
 return (0)|0;
}
function _gfx_get_target() {
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(52344)>>2]|0;
 $1 = (((5240 + (($0*92)|0)|0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 return ($2|0);
}
function _gfx_get_texture() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(52344)>>2]|0;
 $1 = (((5240 + (($0*92)|0)|0)) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  $6 = 0;
  return ($6|0);
 }
 $4 = (((5240 + (($0*92)|0)|0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5;
 return ($6|0);
}
function _gfx_get_clip() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(52344)>>2]|0;
 $1 = (((5240 + (($0*92)|0)|0)) + 52|0);
 return ($1|0);
}
function _gfx_frame($width,$height) {
 $width = $width|0;
 $height = $height|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(5236)>>2] = 1;
 HEAP32[5228>>2] = $width;
 HEAP32[(5232)>>2] = $height;
 _gfx_reset();
 return;
}
function _gfx_flush() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmd = 0, $or$cond = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $cmd = sp;
 $0 = HEAP32[(21548164)>>2]|0;
 $1 = ($0|0)>(0);
 $2 = HEAP32[(18402432)>>2]|0;
 $3 = ($2|0)>(0);
 $or$cond = $1 & $3;
 if (!($or$cond)) {
  HEAP32[(18402432)>>2] = 0;
  HEAP32[(21548164)>>2] = 0;
  $30 = HEAP32[(52344)>>2]|0;
  $31 = (5240 + (($30*92)|0)|0);
  dest=(21548200); src=$31; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  STACKTOP = sp;return;
 }
 HEAP32[$cmd>>2] = $0;
 $4 = HEAP32[(21548204)>>2]|0;
 $5 = ((($cmd)) + 8|0);
 HEAP32[$5>>2] = $4;
 $6 = HEAP32[(21548208)>>2]|0;
 $7 = ((($cmd)) + 12|0);
 HEAP32[$7>>2] = $6;
 $8 = HEAP32[(21548200)>>2]|0;
 $9 = ((($cmd)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = HEAP32[(21548232)>>2]|0;
 $11 = ((($cmd)) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = HEAP32[(21548236)>>2]|0;
 $13 = ((($cmd)) + 20|0);
 HEAP32[$13>>2] = $12;
 $14 = HEAP32[(21548240)>>2]|0;
 $15 = ((($cmd)) + 32|0);
 HEAP32[$15>>2] = $14;
 $16 = HEAP32[(21548244)>>2]|0;
 $17 = ((($cmd)) + 24|0);
 HEAP32[$17>>2] = $16;
 $18 = HEAP32[(21548248)>>2]|0;
 $19 = ((($cmd)) + 28|0);
 HEAP32[$19>>2] = $18;
 $20 = HEAP32[(21548252)>>2]|0;
 $21 = ((($cmd)) + 36|0);
 HEAP32[$21>>2] = $20;
 $22 = HEAP32[(21548256)>>2]|0;
 $23 = ((($cmd)) + 40|0);
 HEAP32[$23>>2] = $22;
 $24 = HEAP32[(21548260)>>2]|0;
 $25 = ((($cmd)) + 44|0);
 HEAP32[$25>>2] = $24;
 $26 = HEAP32[(21548264)>>2]|0;
 $27 = ((($cmd)) + 48|0);
 HEAP32[$27>>2] = $26;
 $28 = HEAP32[(18402432)>>2]|0;
 $29 = HEAP32[(21548164)>>2]|0;
 _gfx_draw($cmd,1,(3722368),$28,(18402436),$29);
 HEAP32[(18402432)>>2] = 0;
 HEAP32[(21548164)>>2] = 0;
 $30 = HEAP32[(52344)>>2]|0;
 $31 = (5240 + (($30*92)|0)|0);
 dest=(21548200); src=$31; stop=dest+92|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function _gfx_draw($commands,$ncommands,$vertices,$nvertices,$indices,$nindices) {
 $commands = $commands|0;
 $ncommands = $ncommands|0;
 $vertices = $vertices|0;
 $nvertices = $nvertices|0;
 $indices = $indices|0;
 $nindices = $nindices|0;
 var $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $exitcond = 0;
 var $i$02 = 0, $index$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _gfx__get_opengl();
 _glEnable(3042);
 _glDisable(2884);
 _glEnable(3089);
 $0 = HEAP32[(22105636)>>2]|0;
 $1 = HEAP32[(21548416)>>2]|0;
 FUNCTION_TABLE_vii[$0 & 63](34963,$1);
 $2 = HEAP32[(22105648)>>2]|0;
 $3 = $nindices << 2;
 FUNCTION_TABLE_viiii[$2 & 31](34963,$3,$indices,35040);
 $4 = HEAP32[(22105636)>>2]|0;
 $5 = HEAP32[(21548412)>>2]|0;
 FUNCTION_TABLE_vii[$4 & 63](34962,$5);
 $6 = HEAP32[(22105648)>>2]|0;
 $7 = ($nvertices*28)|0;
 FUNCTION_TABLE_viiii[$6 & 31](34962,$7,$vertices,35040);
 $8 = HEAP32[(22105664)>>2]|0;
 FUNCTION_TABLE_vi[$8 & 31](0);
 $9 = HEAP32[(22105664)>>2]|0;
 FUNCTION_TABLE_vi[$9 & 31](1);
 $10 = HEAP32[(22105664)>>2]|0;
 FUNCTION_TABLE_vi[$10 & 31](2);
 $11 = HEAP32[(22105656)>>2]|0;
 $12 = HEAP32[(22105512)>>2]|0;
 FUNCTION_TABLE_viiiiii[$11 & 3]($12,3,5126,0,28,0);
 $13 = HEAP32[(22105656)>>2]|0;
 $14 = HEAP32[(22105516)>>2]|0;
 FUNCTION_TABLE_viiiiii[$13 & 3]($14,3,5126,0,28,(12));
 $15 = HEAP32[(22105656)>>2]|0;
 $16 = HEAP32[(22105520)>>2]|0;
 FUNCTION_TABLE_viiiiii[$15 & 3]($16,4,5121,1,28,(24));
 $17 = ($ncommands|0)>(0);
 if ($17) {
  $$03 = $commands;$i$02 = 0;$index$01 = 0;
 } else {
  $72 = HEAP32[(22105660)>>2]|0;
  FUNCTION_TABLE_vi[$72 & 31](0);
  $73 = HEAP32[(22105660)>>2]|0;
  FUNCTION_TABLE_vi[$73 & 31](1);
  $74 = HEAP32[(22105660)>>2]|0;
  FUNCTION_TABLE_vi[$74 & 31](2);
  $75 = HEAP32[(22105636)>>2]|0;
  FUNCTION_TABLE_vii[$75 & 63](34962,0);
  $76 = HEAP32[(22105636)>>2]|0;
  FUNCTION_TABLE_vii[$76 & 63](34963,0);
  _glDisable(3089);
  _glBindTexture(3553,0);
  $77 = HEAP32[(22105556)>>2]|0;
  FUNCTION_TABLE_vi[$77 & 31](0);
  return;
 }
 while(1) {
  $18 = (((($$03) + (($i$02*52)|0)|0)) + 12|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (_gfx__get_texture($19)|0);
  $21 = (((($$03) + (($i$02*52)|0)|0)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (((($$03) + (($i$02*52)|0)|0)) + 36|0);
  $24 = (((($$03) + (($i$02*52)|0)|0)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  _gfx__bind_target($22,$23,$25);
  $26 = ($20|0)!=(0|0);
  L5: do {
   if ($26) {
    $27 = HEAP32[$20>>2]|0;
    $28 = $27 & 4;
    $29 = ($28|0)==(0);
    if ($29) {
     label = 12;
    } else {
     $30 = (((($$03) + (($i$02*52)|0)|0)) + 16|0);
     $31 = HEAP32[$30>>2]|0;
     switch ($31|0) {
     case 0:  {
      $32 = HEAP32[(22105668)>>2]|0;
      FUNCTION_TABLE_vi[$32 & 31](32774);
      _glBlendFunc(1,0);
      break L5;
      break;
     }
     case 1:  {
      $33 = HEAP32[(22105668)>>2]|0;
      FUNCTION_TABLE_vi[$33 & 31](32774);
      _glBlendFunc(1,771);
      break L5;
      break;
     }
     case 2:  {
      $34 = HEAP32[(22105668)>>2]|0;
      FUNCTION_TABLE_vi[$34 & 31](32774);
      _glBlendFunc(775,1);
      break L5;
      break;
     }
     case 3:  {
      $35 = HEAP32[(22105668)>>2]|0;
      FUNCTION_TABLE_vi[$35 & 31](32774);
      _glBlendFunc(774,771);
      break L5;
      break;
     }
     case 4:  {
      $36 = HEAP32[(22105668)>>2]|0;
      FUNCTION_TABLE_vi[$36 & 31](32774);
      _glBlendFunc(1,1);
      break L5;
      break;
     }
     case 5:  {
      $37 = HEAP32[(22105668)>>2]|0;
      FUNCTION_TABLE_vi[$37 & 31](32775);
      _glBlendFunc(1,1);
      break L5;
      break;
     }
     case 6:  {
      $38 = HEAP32[(22105668)>>2]|0;
      FUNCTION_TABLE_vi[$38 & 31](32776);
      _glBlendFunc(1,1);
      break L5;
      break;
     }
     default: {
      break L5;
     }
     }
    }
   } else {
    label = 12;
   }
  } while(0);
  L16: do {
   if ((label|0) == 12) {
    label = 0;
    $39 = (((($$03) + (($i$02*52)|0)|0)) + 16|0);
    $40 = HEAP32[$39>>2]|0;
    switch ($40|0) {
    case 0:  {
     $41 = HEAP32[(22105668)>>2]|0;
     FUNCTION_TABLE_vi[$41 & 31](32774);
     _glBlendFunc(1,0);
     break L16;
     break;
    }
    case 1:  {
     $42 = HEAP32[(22105668)>>2]|0;
     FUNCTION_TABLE_vi[$42 & 31](32774);
     _glBlendFunc(770,771);
     break L16;
     break;
    }
    case 2:  {
     $43 = HEAP32[(22105668)>>2]|0;
     FUNCTION_TABLE_vi[$43 & 31](32774);
     _glBlendFunc(775,1);
     break L16;
     break;
    }
    case 3:  {
     $44 = HEAP32[(22105668)>>2]|0;
     FUNCTION_TABLE_vi[$44 & 31](32774);
     _glBlendFunc(774,771);
     break L16;
     break;
    }
    case 4:  {
     $45 = HEAP32[(22105668)>>2]|0;
     FUNCTION_TABLE_vi[$45 & 31](32774);
     _glBlendFunc(1,1);
     break L16;
     break;
    }
    case 5:  {
     $46 = HEAP32[(22105668)>>2]|0;
     FUNCTION_TABLE_vi[$46 & 31](32775);
     _glBlendFunc(1,1);
     break L16;
     break;
    }
    case 6:  {
     $47 = HEAP32[(22105668)>>2]|0;
     FUNCTION_TABLE_vi[$47 & 31](32776);
     _glBlendFunc(1,1);
     break L16;
     break;
    }
    default: {
     break L16;
    }
    }
   }
  } while(0);
  $48 = (((($$03) + (($i$02*52)|0)|0)) + 24|0);
  $49 = HEAP32[$48>>2]|0;
  switch ($49|0) {
  case 0:  {
   _glDisable(2960);
   _glColorMask(1,1,1,1);
   break;
  }
  case 1:  {
   _glEnable(2960);
   $50 = (((($$03) + (($i$02*52)|0)|0)) + 28|0);
   $51 = HEAP32[$50>>2]|0;
   _glStencilFunc(514,($51|0),255);
   _glStencilOp(7680,7680,7680);
   _glStencilMask(0);
   _glColorMask(1,1,1,1);
   break;
  }
  case 2:  {
   _glEnable(2960);
   $52 = (((($$03) + (($i$02*52)|0)|0)) + 28|0);
   $53 = HEAP32[$52>>2]|0;
   _glStencilFunc(519,($53|0),255);
   _glStencilOp(7680,7680,7681);
   _glStencilMask(255);
   _glColorMask(0,0,0,0);
   break;
  }
  case 3:  {
   _glEnable(2960);
   $54 = (((($$03) + (($i$02*52)|0)|0)) + 28|0);
   $55 = HEAP32[$54>>2]|0;
   _glStencilFunc(517,($55|0),255);
   _glStencilOp(7680,7680,7681);
   _glStencilMask(255);
   _glColorMask(1,1,1,1);
   break;
  }
  default: {
  }
  }
  if ($26) {
   $56 = ((($20)) + 4|0);
   $57 = HEAP32[$56>>2]|0;
   _glBindTexture(3553,($57|0));
  } else {
   $58 = HEAP32[(21548420)>>2]|0;
   _glBindTexture(3553,($58|0));
  }
  $59 = HEAP32[$18>>2]|0;
  $60 = ($59|0)==(0);
  L37: do {
   if (!($60)) {
    $61 = (((($$03) + (($i$02*52)|0)|0)) + 20|0);
    $62 = HEAP32[$61>>2]|0;
    switch ($62|0) {
    case 1:  {
     _glTexParameteri(3553,10241,9728);
     _glTexParameteri(3553,10240,9728);
     break;
    }
    case 0:  {
     _glTexParameteri(3553,10241,9729);
     _glTexParameteri(3553,10240,9729);
     break;
    }
    default: {
    }
    }
    $63 = (((($$03) + (($i$02*52)|0)|0)) + 32|0);
    $64 = HEAP32[$63>>2]|0;
    switch ($64|0) {
    case 0:  {
     _glTexParameteri(3553,10242,33071);
     _glTexParameteri(3553,10243,33071);
     break L37;
     break;
    }
    case 1:  {
     _glTexParameteri(3553,10242,10497);
     _glTexParameteri(3553,10243,10497);
     break L37;
     break;
    }
    case 2:  {
     _glTexParameteri(3553,10242,33648);
     _glTexParameteri(3553,10243,33648);
     break L37;
     break;
    }
    default: {
     break L37;
    }
    }
   }
  } while(0);
  $65 = (($$03) + (($i$02*52)|0)|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $index$01;
  _glDrawElements(4,($66|0),5125,($67|0));
  $68 = HEAP32[$65>>2]|0;
  $69 = (($68) + ($index$01))|0;
  $70 = ((($$03)) + 52|0);
  $71 = (($i$02) + 1)|0;
  $exitcond = ($71|0)==($ncommands|0);
  if ($exitcond) {
   break;
  } else {
   $$03 = $70;$i$02 = $71;$index$01 = $69;
  }
 }
 $72 = HEAP32[(22105660)>>2]|0;
 FUNCTION_TABLE_vi[$72 & 31](0);
 $73 = HEAP32[(22105660)>>2]|0;
 FUNCTION_TABLE_vi[$73 & 31](1);
 $74 = HEAP32[(22105660)>>2]|0;
 FUNCTION_TABLE_vi[$74 & 31](2);
 $75 = HEAP32[(22105636)>>2]|0;
 FUNCTION_TABLE_vii[$75 & 63](34962,0);
 $76 = HEAP32[(22105636)>>2]|0;
 FUNCTION_TABLE_vii[$76 & 63](34963,0);
 _glDisable(3089);
 _glBindTexture(3553,0);
 $77 = HEAP32[(22105556)>>2]|0;
 FUNCTION_TABLE_vi[$77 & 31](0);
 return;
}
function _gfx_begin($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(5236)>>2]|0;
 $1 = (($0) + 1)|0;
 HEAP32[(5236)>>2] = $1;
 HEAP32[(21548168)>>2] = $type;
 HEAP32[(3722364)>>2] = 0;
 $2 = HEAP32[(21548204)>>2]|0;
 $3 = HEAP32[(52344)>>2]|0;
 $4 = (((5240 + (($3*92)|0)|0)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($2|0)==($5|0);
 if ($6) {
  $7 = HEAP32[(21548208)>>2]|0;
  $8 = (((5240 + (($3*92)|0)|0)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7|0)==($9|0);
  if ($10) {
   $11 = HEAP32[(21548236)>>2]|0;
   $12 = (((5240 + (($3*92)|0)|0)) + 36|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($11|0)==($13|0);
   if ($14) {
    $15 = HEAP32[(21548232)>>2]|0;
    $16 = (((5240 + (($3*92)|0)|0)) + 32|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($15|0)==($17|0);
    if ($18) {
     $19 = HEAP32[(21548244)>>2]|0;
     $20 = (((5240 + (($3*92)|0)|0)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19|0)==($21|0);
     if ($22) {
      $23 = HEAP32[(21548248)>>2]|0;
      $24 = (((5240 + (($3*92)|0)|0)) + 48|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = ($23|0)==($25|0);
      if ($26) {
       $27 = HEAP32[(21548252)>>2]|0;
       $28 = (((5240 + (($3*92)|0)|0)) + 52|0);
       $29 = HEAP32[$28>>2]|0;
       $30 = ($27|0)==($29|0);
       if ($30) {
        $31 = HEAP32[(21548256)>>2]|0;
        $32 = (((5240 + (($3*92)|0)|0)) + 56|0);
        $33 = HEAP32[$32>>2]|0;
        $34 = ($31|0)==($33|0);
        if ($34) {
         $35 = HEAP32[(21548260)>>2]|0;
         $36 = (((5240 + (($3*92)|0)|0)) + 60|0);
         $37 = HEAP32[$36>>2]|0;
         $38 = ($35|0)==($37|0);
         if ($38) {
          $39 = HEAP32[(21548264)>>2]|0;
          $40 = (((5240 + (($3*92)|0)|0)) + 64|0);
          $41 = HEAP32[$40>>2]|0;
          $42 = ($39|0)==($41|0);
          if ($42) {
           return;
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 _gfx_flush();
 return;
}
function _gfx_vertextc($x,$y,$tx,$ty,$color) {
 $x = +$x;
 $y = +$y;
 $tx = +$tx;
 $ty = +$ty;
 $color = $color|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(3722364)>>2]|0;
 $1 = ($0|0)>(131071);
 if ($1) {
  return;
 }
 $2 = (52348 + (($0*28)|0)|0);
 HEAPF32[$2>>2] = $x;
 $3 = (((52348 + (($0*28)|0)|0)) + 4|0);
 HEAPF32[$3>>2] = $y;
 $4 = (((52348 + (($0*28)|0)|0)) + 12|0);
 HEAPF32[$4>>2] = $tx;
 $5 = (((52348 + (($0*28)|0)|0)) + 16|0);
 HEAPF32[$5>>2] = $ty;
 $6 = (((52348 + (($0*28)|0)|0)) + 24|0);
 HEAP32[$6>>2] = $color;
 $7 = HEAP32[(52344)>>2]|0;
 $8 = (((5240 + (($7*92)|0)|0)) + 24|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (((52348 + (($0*28)|0)|0)) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = HEAP32[(3722364)>>2]|0;
 $12 = (($11) + 1)|0;
 HEAP32[(3722364)>>2] = $12;
 return;
}
function _gfx_end() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(5236)>>2]|0;
 $1 = ($0|0)==(1);
 if ($1) {
  _gfx_flush();
  $5 = HEAP32[(5236)>>2]|0;
  $6 = (($5) + -1)|0;
  HEAP32[(5236)>>2] = $6;
  return;
 }
 $2 = HEAP32[(21548168)>>2]|0;
 _gfx__transform_points($2);
 $3 = HEAP32[(21548168)>>2]|0;
 $4 = $3 & 16777215;
 switch ($4|0) {
 case 4:  {
  _gfx__emit_line();
  break;
 }
 case 5:  {
  _gfx__emit_lines();
  break;
 }
 case 0:  {
  _gfx__emit_triangles();
  break;
 }
 case 1:  {
  _gfx__emit_quads();
  break;
 }
 case 2:  {
  _gfx__emit_strip();
  break;
 }
 case 3:  {
  _gfx__emit_fan();
  break;
 }
 case 6:  {
  _gfx__emit_points();
  break;
 }
 default: {
 }
 }
 HEAP32[(3722364)>>2] = 0;
 $5 = HEAP32[(5236)>>2]|0;
 $6 = (($5) + -1)|0;
 HEAP32[(5236)>>2] = $6;
 return;
}
function _gfx_draw_sprite($texture,$x,$y,$w,$h,$tx,$ty,$tw,$th,$color) {
 $texture = $texture|0;
 $x = +$x;
 $y = +$y;
 $w = +$w;
 $h = +$h;
 $tx = $tx|0;
 $ty = $ty|0;
 $tw = $tw|0;
 $th = $th|0;
 $color = $color|0;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $prev_texture$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($texture|0)!=(0);
 if ($0) {
  $1 = (_gfx_get_texture()|0);
  _gfx_texture($texture);
  $prev_texture$0 = $1;
 } else {
  $prev_texture$0 = 0;
 }
 _gfx_begin(1);
 $2 = (+($tx|0));
 $3 = (+($ty|0));
 _gfx_vertextc($x,$y,$2,$3,$color);
 $4 = $x + $w;
 $5 = (+($tw|0));
 $6 = $2 + $5;
 _gfx_vertextc($4,$y,$6,$3,$color);
 $7 = $y + $h;
 $8 = (+($th|0));
 $9 = $3 + $8;
 _gfx_vertextc($4,$7,$6,$9,$color);
 _gfx_vertextc($x,$7,$2,$9,$color);
 _gfx_end();
 if (!($0)) {
  return;
 }
 _gfx_texture($prev_texture$0);
 return;
}
function _gfx_draw_texture($texture,$x,$y,$color) {
 $texture = $texture|0;
 $x = +$x;
 $y = +$y;
 $color = $color|0;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_gfx_get_texture_width($texture)|0);
 $1 = (_gfx_get_texture_height($texture)|0);
 $2 = (+($0|0));
 $3 = (+($1|0));
 _gfx_draw_sprite($texture,$x,$y,$2,$3,0,0,$0,$1,$color);
 return;
}
function _gfx_create_texture($id,$width,$height,$pixels,$flags) {
 $id = $id|0;
 $width = $width|0;
 $height = $height|0;
 $pixels = $pixels|0;
 $flags = $flags|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _gfx__get_opengl();
 $0 = $width << 2;
 $1 = Math_imul($0, $height)|0;
 $2 = (_gfx__push_texture($id)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = $flags | 4096;
 HEAP32[$2>>2] = $4;
 $5 = ((($2)) + 16|0);
 HEAP32[$5>>2] = $width;
 $6 = ((($2)) + 20|0);
 HEAP32[$6>>2] = $height;
 $7 = ($pixels|0)==(0|0);
 $8 = $flags & 4;
 $9 = ($8|0)==(0);
 $or$cond = $7 | $9;
 if ($or$cond) {
  $$01 = $pixels;
 } else {
  $10 = (_malloc($1)|0);
  $11 = ((($2)) + 24|0);
  HEAP32[$11>>2] = $10;
  _gfx_premultiply_alpha($pixels,$10,$width,$width,$width,$height);
  $12 = HEAP32[$11>>2]|0;
  $$01 = $12;
 }
 $13 = ((($2)) + 4|0);
 _glGenTextures(1,($13|0));
 $14 = HEAP32[$13>>2]|0;
 _glBindTexture(3553,($14|0));
 _glTexParameteri(3553,10241,9728);
 _glTexParameteri(3553,10240,9728);
 _glTexParameteri(3553,10242,33071);
 _glTexParameteri(3553,10243,33071);
 _glTexImage2D(3553,0,6408,($width|0),($height|0),0,6408,5121,($$01|0));
 _glBindTexture(3553,0);
 $15 = $flags & 1;
 $16 = ($15|0)==(0);
 if ($16) {
  $$0 = 1;
  return ($$0|0);
 }
 $17 = HEAP32[$13>>2]|0;
 _glBindTexture(3553,($17|0));
 $18 = HEAP32[(22105528)>>2]|0;
 $19 = ((($2)) + 12|0);
 FUNCTION_TABLE_vii[$18 & 63](1,$19);
 $20 = HEAP32[(22105532)>>2]|0;
 $21 = HEAP32[$19>>2]|0;
 FUNCTION_TABLE_vii[$20 & 63](36160,$21);
 $22 = HEAP32[(22105536)>>2]|0;
 $23 = HEAP32[$13>>2]|0;
 FUNCTION_TABLE_viiiii[$22 & 7](36160,36064,3553,$23,0);
 _glBindTexture(3553,0);
 $24 = $flags & 2;
 $25 = ($24|0)==(0);
 if ($25) {
  $$0 = 1;
  return ($$0|0);
 }
 $26 = ((($2)) + 8|0);
 _glGenTextures(1,($26|0));
 $27 = HEAP32[$26>>2]|0;
 _glBindTexture(3553,($27|0));
 _glTexParameteri(3553,10242,10496);
 _glTexParameteri(3553,10243,10496);
 _glTexParameteri(3553,10241,9729);
 _glTexParameteri(3553,10240,9729);
 _glTexImage2D(3553,0,35056,($width|0),($height|0),0,34041,34042,(0|0));
 $28 = HEAP32[(22105536)>>2]|0;
 $29 = HEAP32[$26>>2]|0;
 FUNCTION_TABLE_viiiii[$28 & 7](36160,36096,3553,$29,0);
 $30 = HEAP32[(22105536)>>2]|0;
 $31 = HEAP32[$26>>2]|0;
 FUNCTION_TABLE_viiiii[$30 & 7](36160,36128,3553,$31,0);
 _glBindTexture(3553,0);
 $$0 = 1;
 return ($$0|0);
}
function _gfx_premultiply_alpha($src,$dst,$srcstride,$dststride,$width,$height) {
 $src = $src|0;
 $dst = $dst|0;
 $srcstride = $srcstride|0;
 $dststride = $dststride|0;
 $width = $width|0;
 $height = $height|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond7 = 0, $x$02 = 0, $y$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($height|0)==(0);
 if ($0) {
  return;
 }
 $1 = ($width|0)==(0);
 $y$03 = 0;
 while(1) {
  $2 = Math_imul($y$03, $srcstride)|0;
  $3 = Math_imul($y$03, $dststride)|0;
  if (!($1)) {
   $x$02 = 0;
   while(1) {
    $$sum = (($x$02) + ($2))|0;
    $4 = (($src) + ($$sum<<2)|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = $5 >>> 24;
    $7 = $5 & 16711935;
    $8 = Math_imul($6, $7)|0;
    $9 = $8 >>> 8;
    $10 = $5 & 65280;
    $11 = Math_imul($6, $10)|0;
    $12 = $11 >>> 8;
    $13 = $9 & 16711935;
    $14 = $12 & 65280;
    $15 = $5 & -16777216;
    $16 = $14 | $15;
    $17 = $16 | $13;
    $$sum1 = (($x$02) + ($3))|0;
    $18 = (($dst) + ($$sum1<<2)|0);
    HEAP32[$18>>2] = $17;
    $19 = (($x$02) + 1)|0;
    $exitcond = ($19|0)==($width|0);
    if ($exitcond) {
     break;
    } else {
     $x$02 = $19;
    }
   }
  }
  $20 = (($y$03) + 1)|0;
  $exitcond7 = ($20|0)==($height|0);
  if ($exitcond7) {
   break;
  } else {
   $y$03 = $20;
  }
 }
 return;
}
function _gfx_clear($color) {
 $color = $color|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_gfx_get_target()|0);
 _gfx_clear_texture($0,$color);
 return;
}
function _gfx_clear_texture($id,$color) {
 $id = $id|0;
 $color = $color|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_gfx_get_clip()|0);
 _gfx__bind_target($id,$0,0);
 _glDisable(3089);
 _glStencilMask(-1);
 _glColorMask(1,1,1,1);
 _glClearDepth(0.0);
 _glClearStencil(0);
 $1 = $color >>> 16;
 $2 = $1 & 255;
 $3 = (+($2|0));
 $4 = $3 / 255.0;
 $5 = $color >>> 8;
 $6 = $5 & 255;
 $7 = (+($6|0));
 $8 = $7 / 255.0;
 $9 = $color & 255;
 $10 = (+($9|0));
 $11 = $10 / 255.0;
 $12 = $color >>> 24;
 $13 = (+($12|0));
 $14 = $13 / 255.0;
 _glClearColor((+$4),(+$8),(+$11),(+$14));
 _glClear(17664);
 return;
}
function _gfx_create_shader($id,$source) {
 $id = $id|0;
 $source = $source|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $result$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$id>>2] = 0;
 _gfx__get_opengl();
 $0 = (_gfx__push_shader($id)|0);
 $1 = (_strlen($source)|0);
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = $3;
 (_strcpy($3,$source)|0);
 $5 = ($0|0)==(0|0);
 if ($5) {
  $result$0 = 0;
  return ($result$0|0);
 }
 _gfx__load_shader($0,$source);
 $result$0 = 1;
 return ($result$0|0);
}
function _video_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 _video_image_init();
 _video_image_load(21548292,22106714,256,256,16);
 return;
}
function _video_image_load($image,$filename,$sizex,$sizey,$upscale) {
 $image = $image|0;
 $filename = $filename|0;
 $sizex = $sizex|0;
 $sizey = $sizey|0;
 $upscale = $upscale|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_nsvgParseFromFile($filename,22106734,96.0)|0);
 _video_image_build($image,$0,$sizex,$sizey,$upscale);
 _nsvgDelete($0);
 return;
}
function _video_draw() {
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $3 = 0.0;
 var $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[22105676>>2];
 $1 = $0 + 0.01666666753590107;
 HEAPF32[22105676>>2] = $1;
 $2 = $1 * 3.5;
 $3 = (+Math_sin((+$2)));
 $4 = $3 * 25.0;
 $5 = $1 * 1.5;
 $6 = (+Math_sin((+$5)));
 $7 = $6 * 0.89999997615814208;
 $8 = $7 + 1.0;
 $9 = $8 * 4.0;
 $10 = HEAP32[(12)>>2]|0;
 $11 = HEAP32[(16)>>2]|0;
 _gfx_frame($10,$11);
 _gfx_clear(1122867);
 $12 = HEAP32[(12)>>2]|0;
 $13 = (+($12|0));
 $14 = $13 * 0.5;
 $15 = HEAP32[(16)>>2]|0;
 $16 = (+($15|0));
 $17 = $16 * 0.5;
 _gfx_translate($14,$17);
 _gfx_scale($9,$9);
 _gfx_rotate($4);
 _gfx_blend(1);
 _gfx_sampler(0);
 $18 = HEAP32[21548320>>2]|0;
 _gfx_shader($18);
 $19 = HEAP32[(21548300)>>2]|0;
 $20 = HEAP32[21548292>>2]|0;
 $21 = (+($20|0));
 $22 = $21 * -0.5;
 $23 = HEAP32[(21548296)>>2]|0;
 $24 = (+($23|0));
 $25 = $24 * -0.5;
 _gfx_draw_texture($19,$22,$25,-1);
 _gfx_end();
 return;
}
function _sdf_create($width,$height) {
 $width = $width|0;
 $height = $height|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $width&65535;
 $1 = $0 << 3;
 $2 = $height&65535;
 $3 = Math_imul($1, $2)|0;
 $4 = (($3) + 8)|0;
 $5 = (_malloc($4)|0);
 HEAP16[$5>>1] = $width;
 $6 = ((($5)) + 2|0);
 HEAP16[$6>>1] = $height;
 $7 = ((($5)) + 8|0);
 $8 = ((($5)) + 4|0);
 HEAP32[$8>>2] = $7;
 return ($5|0);
}
function _sdf_delete($sdf) {
 $sdf = $sdf|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($sdf);
 return;
}
function _sdf_build($sdf,$mask,$maxdist) {
 $sdf = $sdf|0;
 $mask = $mask|0;
 $maxdist = $maxdist|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0.0, $202 = 0.0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0.0;
 var $224 = 0.0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0.0, $246 = 0.0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0.0, $264 = 0.0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0.0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0.0, $308 = 0.0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $OFFSET0 = 0, $OFFSET1 = 0, $exitcond = 0, $exitcond32 = 0, $exitcond35 = 0, $exitcond36 = 0, $exitcond37 = 0, $exitcond38 = 0;
 var $exitcond39 = 0, $exitcond40 = 0, $px$028 = 0, $px$124 = 0, $px$219 = 0, $px$311 = 0, $px$47 = 0, $py$031 = 0, $py$127 = 0, $py$222 = 0, $py$315 = 0, $py$48 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $OFFSET0 = sp + 16|0;
 $OFFSET1 = sp;
 $0 = HEAP16[$sdf>>1]|0;
 $1 = $0&65535;
 $2 = ((($sdf)) + 2|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = (0 - ($1))|0;
 $6 = $1 ^ -1;
 HEAP32[$OFFSET0>>2] = $6;
 $7 = ((($OFFSET0)) + 4|0);
 HEAP32[$7>>2] = $5;
 $8 = ((($OFFSET0)) + 8|0);
 $9 = (1 - ($1))|0;
 HEAP32[$8>>2] = $9;
 $10 = ((($OFFSET0)) + 12|0);
 HEAP32[$10>>2] = -1;
 $11 = (($1) + 1)|0;
 HEAP32[$OFFSET1>>2] = $11;
 $12 = ((($OFFSET1)) + 4|0);
 HEAP32[$12>>2] = $1;
 $13 = ((($OFFSET1)) + 8|0);
 $14 = (($1) + -1)|0;
 HEAP32[$13>>2] = $14;
 $15 = ((($OFFSET1)) + 12|0);
 HEAP32[$15>>2] = 1;
 $16 = ((($sdf)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($3<<16>>16)==(0);
 if (!($18)) {
  $19 = ($maxdist*3)|0;
  $20 = ($0<<16>>16)==(0);
  $21 = $19 & 65535;
  $22 = $0&65535;
  $23 = $3&65535;
  $py$031 = 0;
  while(1) {
   if (!($20)) {
    $24 = Math_imul($py$031, $1)|0;
    $25 = $py$031&65535;
    $px$028 = 0;
    while(1) {
     $33 = (($px$028) + ($24))|0;
     $34 = $px$028&65535;
     $35 = (($17) + ($33<<3)|0);
     HEAP16[$35>>1] = $34;
     $36 = (((($17) + ($33<<3)|0)) + 2|0);
     HEAP16[$36>>1] = $25;
     $37 = (((($17) + ($33<<3)|0)) + 4|0);
     HEAP32[$37>>2] = $21;
     $38 = (($px$028) + 1)|0;
     $exitcond39 = ($38|0)==($22|0);
     if ($exitcond39) {
      break;
     } else {
      $px$028 = $38;
     }
    }
   }
   $39 = (($py$031) + 1)|0;
   $exitcond40 = ($39|0)==($23|0);
   if ($exitcond40) {
    break;
   } else {
    $py$031 = $39;
   }
  }
 }
 $26 = (($4) + -1)|0;
 $27 = ($26|0)>(1);
 if ($27) {
  $28 = ($14|0)>(1);
  $29 = $0&65535;
  $30 = (($29) + -1)|0;
  $31 = $3&65535;
  $32 = (($31) + -1)|0;
  $py$127 = 1;
  while(1) {
   if ($28) {
    $40 = Math_imul($py$127, $1)|0;
    $px$124 = 1;
    while(1) {
     $54 = (($px$124) + ($40))|0;
     $55 = (($mask) + ($54)|0);
     $56 = HEAP8[$55>>0]|0;
     $57 = ($56<<24>>24)==(0);
     do {
      if ($57) {
       $58 = (($54) - ($1))|0;
       $59 = (($58) + -1)|0;
       $60 = (($mask) + ($59)|0);
       $61 = HEAP8[$60>>0]|0;
       $62 = ($61<<24>>24)==(0);
       if ($62) {
        $63 = (($mask) + ($58)|0);
        $64 = HEAP8[$63>>0]|0;
        $65 = ($64<<24>>24)==(0);
        if ($65) {
         $66 = (($58) + 1)|0;
         $67 = (($mask) + ($66)|0);
         $68 = HEAP8[$67>>0]|0;
         $69 = ($68<<24>>24)==(0);
         if ($69) {
          $70 = (($54) + -1)|0;
          $71 = (($mask) + ($70)|0);
          $72 = HEAP8[$71>>0]|0;
          $73 = ($72<<24>>24)==(0);
          if ($73) {
           $74 = (($54) + 1)|0;
           $75 = (($mask) + ($74)|0);
           $76 = HEAP8[$75>>0]|0;
           $77 = ($76<<24>>24)==(0);
           if ($77) {
            $78 = (($54) + ($1))|0;
            $79 = (($78) + -1)|0;
            $80 = (($mask) + ($79)|0);
            $81 = HEAP8[$80>>0]|0;
            $82 = ($81<<24>>24)==(0);
            if ($82) {
             $83 = (($mask) + ($78)|0);
             $84 = HEAP8[$83>>0]|0;
             $85 = ($84<<24>>24)==(0);
             if ($85) {
              $86 = (($78) + 1)|0;
              $87 = (($mask) + ($86)|0);
              $88 = HEAP8[$87>>0]|0;
              $89 = ($88<<24>>24)==(0);
              if ($89) {
               break;
              }
             }
            }
           }
          }
         }
        }
       }
       $90 = (((($17) + ($54<<3)|0)) + 4|0);
       HEAP32[$90>>2] = 0;
      }
     } while(0);
     $91 = (($px$124) + 1)|0;
     $exitcond37 = ($91|0)==($30|0);
     if ($exitcond37) {
      break;
     } else {
      $px$124 = $91;
     }
    }
   }
   $92 = (($py$127) + 1)|0;
   $exitcond38 = ($92|0)==($32|0);
   if ($exitcond38) {
    break;
   } else {
    $py$127 = $92;
   }
  }
  $41 = ($26|0)>(1);
  if ($41) {
   $42 = ($14|0)>(1);
   $43 = $0&65535;
   $44 = (($43) + -1)|0;
   $45 = $3&65535;
   $46 = (($45) + -1)|0;
   $47 = HEAP32[$OFFSET0>>2]|0;
   $48 = ((($OFFSET0)) + 4|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ((($OFFSET0)) + 8|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ((($OFFSET0)) + 12|0);
   $53 = HEAP32[$52>>2]|0;
   $py$222 = 1;
   while(1) {
    if ($42) {
     $93 = Math_imul($py$222, $1)|0;
     $px$219 = 1;
     while(1) {
      $94 = (($px$219) + ($93))|0;
      $95 = (((($17) + ($94<<3)|0)) + 4|0);
      $96 = (($17) + ($94<<3)|0);
      $97 = (((($17) + ($94<<3)|0)) + 2|0);
      $98 = (($47) + ($94))|0;
      $99 = (((($17) + ($98<<3)|0)) + 4|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = (($100) + 4)|0;
      $102 = HEAP32[$95>>2]|0;
      $103 = ($101|0)>($102|0);
      if (!($103)) {
       $104 = (($17) + ($98<<3)|0);
       $105 = HEAP16[$104>>1]|0;
       $106 = $105&65535;
       $107 = (($px$219) - ($106))|0;
       $108 = (((($17) + ($98<<3)|0)) + 2|0);
       $109 = HEAP16[$108>>1]|0;
       $110 = $109&65535;
       $111 = (($py$222) - ($110))|0;
       HEAP16[$96>>1] = $105;
       $112 = HEAP16[$108>>1]|0;
       HEAP16[$97>>1] = $112;
       $113 = Math_imul($107, $107)|0;
       $114 = Math_imul($111, $111)|0;
       $115 = (($114) + ($113))|0;
       $116 = (+($115|0));
       $117 = (+Math_sqrt((+$116)));
       $118 = (~~(($117)));
       $119 = ($118*3)|0;
       HEAP32[$95>>2] = $119;
      }
      $120 = (($49) + ($94))|0;
      $121 = (((($17) + ($120<<3)|0)) + 4|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = (($122) + 3)|0;
      $124 = HEAP32[$95>>2]|0;
      $125 = ($123|0)>($124|0);
      if (!($125)) {
       $251 = (($17) + ($120<<3)|0);
       $252 = HEAP16[$251>>1]|0;
       $253 = $252&65535;
       $254 = (($px$219) - ($253))|0;
       $255 = (((($17) + ($120<<3)|0)) + 2|0);
       $256 = HEAP16[$255>>1]|0;
       $257 = $256&65535;
       $258 = (($py$222) - ($257))|0;
       HEAP16[$96>>1] = $252;
       $259 = HEAP16[$255>>1]|0;
       HEAP16[$97>>1] = $259;
       $260 = Math_imul($254, $254)|0;
       $261 = Math_imul($258, $258)|0;
       $262 = (($261) + ($260))|0;
       $263 = (+($262|0));
       $264 = (+Math_sqrt((+$263)));
       $265 = (~~(($264)));
       $266 = ($265*3)|0;
       HEAP32[$95>>2] = $266;
      }
      $267 = (($51) + ($94))|0;
      $268 = (((($17) + ($267<<3)|0)) + 4|0);
      $269 = HEAP32[$268>>2]|0;
      $270 = (($269) + 4)|0;
      $271 = HEAP32[$95>>2]|0;
      $272 = ($270|0)>($271|0);
      if (!($272)) {
       $273 = (($17) + ($267<<3)|0);
       $274 = HEAP16[$273>>1]|0;
       $275 = $274&65535;
       $276 = (($px$219) - ($275))|0;
       $277 = (((($17) + ($267<<3)|0)) + 2|0);
       $278 = HEAP16[$277>>1]|0;
       $279 = $278&65535;
       $280 = (($py$222) - ($279))|0;
       HEAP16[$96>>1] = $274;
       $281 = HEAP16[$277>>1]|0;
       HEAP16[$97>>1] = $281;
       $282 = Math_imul($276, $276)|0;
       $283 = Math_imul($280, $280)|0;
       $284 = (($283) + ($282))|0;
       $285 = (+($284|0));
       $286 = (+Math_sqrt((+$285)));
       $287 = (~~(($286)));
       $288 = ($287*3)|0;
       HEAP32[$95>>2] = $288;
      }
      $289 = (($53) + ($94))|0;
      $290 = (((($17) + ($289<<3)|0)) + 4|0);
      $291 = HEAP32[$290>>2]|0;
      $292 = (($291) + 3)|0;
      $293 = HEAP32[$95>>2]|0;
      $294 = ($292|0)>($293|0);
      if (!($294)) {
       $295 = (($17) + ($289<<3)|0);
       $296 = HEAP16[$295>>1]|0;
       $297 = $296&65535;
       $298 = (($px$219) - ($297))|0;
       $299 = (((($17) + ($289<<3)|0)) + 2|0);
       $300 = HEAP16[$299>>1]|0;
       $301 = $300&65535;
       $302 = (($py$222) - ($301))|0;
       HEAP16[$96>>1] = $296;
       $303 = HEAP16[$299>>1]|0;
       HEAP16[$97>>1] = $303;
       $304 = Math_imul($298, $298)|0;
       $305 = Math_imul($302, $302)|0;
       $306 = (($305) + ($304))|0;
       $307 = (+($306|0));
       $308 = (+Math_sqrt((+$307)));
       $309 = (~~(($308)));
       $310 = ($309*3)|0;
       HEAP32[$95>>2] = $310;
      }
      $311 = (($px$219) + 1)|0;
      $exitcond35 = ($311|0)==($44|0);
      if ($exitcond35) {
       break;
      } else {
       $px$219 = $311;
      }
     }
    }
    $126 = (($py$222) + 1)|0;
    $exitcond36 = ($126|0)==($46|0);
    if ($exitcond36) {
     break;
    } else {
     $py$222 = $126;
    }
   }
  }
 }
 $127 = ($3&65535)>(2);
 if ($127) {
  $128 = (($4) + -2)|0;
  $129 = (($1) + -2)|0;
  $130 = ($0&65535)>(2);
  $131 = HEAP32[$OFFSET1>>2]|0;
  $132 = ((($OFFSET1)) + 4|0);
  $133 = HEAP32[$132>>2]|0;
  $134 = ((($OFFSET1)) + 8|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = ((($OFFSET1)) + 12|0);
  $137 = HEAP32[$136>>2]|0;
  $py$315 = $128;
  while(1) {
   if ($130) {
    $142 = Math_imul($py$315, $1)|0;
    $px$311 = $129;
    while(1) {
     $143 = (($px$311) + ($142))|0;
     $144 = (((($17) + ($143<<3)|0)) + 4|0);
     $145 = (($17) + ($143<<3)|0);
     $146 = (((($17) + ($143<<3)|0)) + 2|0);
     $147 = (($131) + ($143))|0;
     $148 = (((($17) + ($147<<3)|0)) + 4|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = (($149) + 4)|0;
     $151 = HEAP32[$144>>2]|0;
     $152 = ($150|0)>($151|0);
     if (!($152)) {
      $153 = (($17) + ($147<<3)|0);
      $154 = HEAP16[$153>>1]|0;
      $155 = $154&65535;
      $156 = (($px$311) - ($155))|0;
      $157 = (((($17) + ($147<<3)|0)) + 2|0);
      $158 = HEAP16[$157>>1]|0;
      $159 = $158&65535;
      $160 = (($py$315) - ($159))|0;
      HEAP16[$145>>1] = $154;
      $161 = HEAP16[$157>>1]|0;
      HEAP16[$146>>1] = $161;
      $162 = Math_imul($156, $156)|0;
      $163 = Math_imul($160, $160)|0;
      $164 = (($163) + ($162))|0;
      $165 = (+($164|0));
      $166 = (+Math_sqrt((+$165)));
      $167 = (~~(($166)));
      $168 = ($167*3)|0;
      HEAP32[$144>>2] = $168;
     }
     $169 = (($133) + ($143))|0;
     $170 = (((($17) + ($169<<3)|0)) + 4|0);
     $171 = HEAP32[$170>>2]|0;
     $172 = (($171) + 3)|0;
     $173 = HEAP32[$144>>2]|0;
     $174 = ($172|0)>($173|0);
     if (!($174)) {
      $189 = (($17) + ($169<<3)|0);
      $190 = HEAP16[$189>>1]|0;
      $191 = $190&65535;
      $192 = (($px$311) - ($191))|0;
      $193 = (((($17) + ($169<<3)|0)) + 2|0);
      $194 = HEAP16[$193>>1]|0;
      $195 = $194&65535;
      $196 = (($py$315) - ($195))|0;
      HEAP16[$145>>1] = $190;
      $197 = HEAP16[$193>>1]|0;
      HEAP16[$146>>1] = $197;
      $198 = Math_imul($192, $192)|0;
      $199 = Math_imul($196, $196)|0;
      $200 = (($199) + ($198))|0;
      $201 = (+($200|0));
      $202 = (+Math_sqrt((+$201)));
      $203 = (~~(($202)));
      $204 = ($203*3)|0;
      HEAP32[$144>>2] = $204;
     }
     $205 = (($135) + ($143))|0;
     $206 = (((($17) + ($205<<3)|0)) + 4|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = (($207) + 4)|0;
     $209 = HEAP32[$144>>2]|0;
     $210 = ($208|0)>($209|0);
     if (!($210)) {
      $211 = (($17) + ($205<<3)|0);
      $212 = HEAP16[$211>>1]|0;
      $213 = $212&65535;
      $214 = (($px$311) - ($213))|0;
      $215 = (((($17) + ($205<<3)|0)) + 2|0);
      $216 = HEAP16[$215>>1]|0;
      $217 = $216&65535;
      $218 = (($py$315) - ($217))|0;
      HEAP16[$145>>1] = $212;
      $219 = HEAP16[$215>>1]|0;
      HEAP16[$146>>1] = $219;
      $220 = Math_imul($214, $214)|0;
      $221 = Math_imul($218, $218)|0;
      $222 = (($221) + ($220))|0;
      $223 = (+($222|0));
      $224 = (+Math_sqrt((+$223)));
      $225 = (~~(($224)));
      $226 = ($225*3)|0;
      HEAP32[$144>>2] = $226;
     }
     $227 = (($137) + ($143))|0;
     $228 = (((($17) + ($227<<3)|0)) + 4|0);
     $229 = HEAP32[$228>>2]|0;
     $230 = (($229) + 3)|0;
     $231 = HEAP32[$144>>2]|0;
     $232 = ($230|0)>($231|0);
     if (!($232)) {
      $233 = (($17) + ($227<<3)|0);
      $234 = HEAP16[$233>>1]|0;
      $235 = $234&65535;
      $236 = (($px$311) - ($235))|0;
      $237 = (((($17) + ($227<<3)|0)) + 2|0);
      $238 = HEAP16[$237>>1]|0;
      $239 = $238&65535;
      $240 = (($py$315) - ($239))|0;
      HEAP16[$145>>1] = $234;
      $241 = HEAP16[$237>>1]|0;
      HEAP16[$146>>1] = $241;
      $242 = Math_imul($236, $236)|0;
      $243 = Math_imul($240, $240)|0;
      $244 = (($243) + ($242))|0;
      $245 = (+($244|0));
      $246 = (+Math_sqrt((+$245)));
      $247 = (~~(($246)));
      $248 = ($247*3)|0;
      HEAP32[$144>>2] = $248;
     }
     $249 = (($px$311) + -1)|0;
     $250 = ($px$311|0)>(1);
     if ($250) {
      $px$311 = $249;
     } else {
      break;
     }
    }
   }
   $175 = (($py$315) + -1)|0;
   $176 = ($py$315|0)>(1);
   if ($176) {
    $py$315 = $175;
   } else {
    break;
   }
  }
 }
 $138 = ($3<<16>>16)==(0);
 if ($138) {
  STACKTOP = sp;return;
 }
 $139 = ($0<<16>>16)==(0);
 $140 = $0&65535;
 $141 = $3&65535;
 $py$48 = 0;
 while(1) {
  if (!($139)) {
   $177 = Math_imul($py$48, $1)|0;
   $px$47 = 0;
   while(1) {
    $178 = (($px$47) + ($177))|0;
    $179 = (($mask) + ($178)|0);
    $180 = HEAP8[$179>>0]|0;
    $181 = ($180<<24>>24)!=(0);
    $182 = (((($17) + ($178<<3)|0)) + 4|0);
    $183 = HEAP32[$182>>2]|0;
    $184 = (0 - ($183))|0;
    $185 = $181 ? $184 : $183;
    $186 = (($185|0) / 3)&-1;
    HEAP32[$182>>2] = $186;
    $187 = (($px$47) + 1)|0;
    $exitcond = ($187|0)==($140|0);
    if ($exitcond) {
     break;
    } else {
     $px$47 = $187;
    }
   }
  }
  $188 = (($py$48) + 1)|0;
  $exitcond32 = ($188|0)==($141|0);
  if ($exitcond32) {
   break;
  } else {
   $py$48 = $188;
  }
 }
 STACKTOP = sp;return;
}
function _sdf_blit($sdf,$bitmap,$stride,$channel,$downscale) {
 $sdf = $sdf|0;
 $bitmap = $bitmap|0;
 $stride = $stride|0;
 $channel = $channel|0;
 $downscale = $downscale|0;
 var $$ = 0, $$$ = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $bx$09 = 0, $by$012 = 0, $dist$0$lcssa = 0, $dist$06 = 0, $dist$1$lcssa = 0, $dist$14 = 0, $exitcond = 0, $exitcond14 = 0, $exitcond15 = 0, $exitcond16 = 0, $fx$03 = 0, $fy$05 = 0, $tmp = 0, $tmp1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP16[$sdf>>1]|0;
 $1 = $0&65535;
 $2 = ((($sdf)) + 2|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = (($1|0) / ($downscale|0))&-1;
 $6 = (($4|0) / ($downscale|0))&-1;
 $7 = Math_imul($downscale, $downscale)|0;
 $8 = $channel << 3;
 $9 = ((($sdf)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($6|0)>(0);
 if (!($11)) {
  return;
 }
 $12 = ($5|0)>(0);
 $13 = ($downscale|0)>(0);
 $14 = 255 << $8;
 $15 = $14 ^ -1;
 $16 = ($downscale|0)>(0);
 $by$012 = 0;
 while(1) {
  if ($12) {
   $17 = Math_imul($by$012, $1)|0;
   $18 = Math_imul($by$012, $stride)|0;
   $bx$09 = 0;
   while(1) {
    $19 = (($bx$09) + ($18))|0;
    $20 = (($bitmap) + ($19<<2)|0);
    if ($13) {
     $tmp = (($bx$09) + ($17))|0;
     $tmp1 = Math_imul($tmp, $downscale)|0;
     $dist$06 = 0;$fy$05 = 0;
     while(1) {
      if ($16) {
       $21 = Math_imul($fy$05, $1)|0;
       $dist$14 = $dist$06;$fx$03 = 0;
       while(1) {
        $22 = (($fx$03) + ($21))|0;
        $$sum = (($22) + ($tmp1))|0;
        $23 = (((($10) + ($$sum<<3)|0)) + 4|0);
        $24 = HEAP32[$23>>2]|0;
        $25 = (($24) + ($dist$14))|0;
        $26 = (($fx$03) + 1)|0;
        $exitcond = ($26|0)==($downscale|0);
        if ($exitcond) {
         $dist$1$lcssa = $25;
         break;
        } else {
         $dist$14 = $25;$fx$03 = $26;
        }
       }
      } else {
       $dist$1$lcssa = $dist$06;
      }
      $27 = (($fy$05) + 1)|0;
      $exitcond14 = ($27|0)==($downscale|0);
      if ($exitcond14) {
       $dist$0$lcssa = $dist$1$lcssa;
       break;
      } else {
       $dist$06 = $dist$1$lcssa;$fy$05 = $27;
      }
     }
    } else {
     $dist$0$lcssa = 0;
    }
    $28 = (($dist$0$lcssa|0) / ($7|0))&-1;
    $29 = (($28) + 127)|0;
    $30 = ($29|0)<(0);
    $$ = $30 ? 0 : $29;
    $31 = ($$|0)>(255);
    $$$ = $31 ? 255 : $$;
    $32 = HEAP32[$20>>2]|0;
    $33 = $32 & $15;
    $34 = $$$ << $8;
    $35 = $34 | $33;
    HEAP32[$20>>2] = $35;
    $36 = (($bx$09) + 1)|0;
    $exitcond15 = ($36|0)==($5|0);
    if ($exitcond15) {
     break;
    } else {
     $bx$09 = $36;
    }
   }
  }
  $37 = (($by$012) + 1)|0;
  $exitcond16 = ($37|0)==($6|0);
  if ($exitcond16) {
   break;
  } else {
   $by$012 = $37;
  }
 }
 return;
}
function _nsvg__parseXML($input,$startelCb,$endelCb,$contentCb,$ud) {
 $input = $input|0;
 $startelCb = $startelCb|0;
 $endelCb = $endelCb|0;
 $contentCb = $contentCb|0;
 $ud = $ud|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, $or$cond3 = 0, $s$0 = 0, $s$0$lcssa14 = 0, $s$0$lcssa15 = 0, $s$0$ph = 0, $state$0$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $s$0$ph = $input;$state$0$ph = 2;
 L1: while(1) {
  $0 = ($state$0$ph|0)==(2);
  $1 = ($state$0$ph|0)==(1);
  $s$0 = $s$0$ph;
  while(1) {
   $2 = HEAP8[$s$0>>0]|0;
   $3 = ($2<<24>>24)==(0);
   if ($3) {
    break L1;
   }
   $4 = ($2<<24>>24)==(60);
   $or$cond = $0 & $4;
   if ($or$cond) {
    $s$0$lcssa14 = $s$0;
    label = 5;
    break;
   }
   $6 = ($2<<24>>24)==(62);
   $or$cond3 = $1 & $6;
   $7 = ((($s$0)) + 1|0);
   if ($or$cond3) {
    $$lcssa = $7;$s$0$lcssa15 = $s$0;
    label = 7;
    break;
   } else {
    $s$0 = $7;
   }
  }
  if ((label|0) == 5) {
   label = 0;
   $5 = ((($s$0$lcssa14)) + 1|0);
   HEAP8[$s$0$lcssa14>>0] = 0;
   _nsvg__parseContent($s$0$ph,$contentCb,$ud);
   $s$0$ph = $5;$state$0$ph = 1;
   continue;
  }
  else if ((label|0) == 7) {
   label = 0;
   HEAP8[$s$0$lcssa15>>0] = 0;
   _nsvg__parseElement($s$0$ph,$startelCb,$endelCb,$ud);
   $s$0$ph = $$lcssa;$state$0$ph = 2;
   continue;
  }
 }
 return 1;
}
function _nsvgParse($input,$units,$dpi) {
 $input = $input|0;
 $units = $units|0;
 $dpi = +$dpi;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_nsvg__createParser()|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($0)) + 39996|0);
 HEAPF32[$2>>2] = $dpi;
 (_nsvg__parseXML($input,1,1,2,$0)|0);
 _nsvg__scaleToViewbox($0,$units);
 $3 = ((($0)) + 39956|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 _nsvg__deleteParser($0);
 $$0 = $4;
 return ($$0|0);
}
function _nsvgParseFromFile($filename,$units,$dpi) {
 $filename = $filename|0;
 $units = $units|0;
 $dpi = +$dpi;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_fopen($filename,22106711)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 (_fseek($0,0,2)|0);
 $2 = (_ftell($0)|0);
 (_fseek($0,0,0)|0);
 $3 = (($2) + 1)|0;
 $4 = (_malloc($3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  (_fclose($0)|0);
  $$0 = 0;
  return ($$0|0);
 }
 $6 = (_fread($4,1,$2,$0)|0);
 $7 = ($6|0)==($2|0);
 if ($7) {
  $8 = (($4) + ($2)|0);
  HEAP8[$8>>0] = 0;
  (_fclose($0)|0);
  $9 = (_nsvgParse($4,$units,$dpi)|0);
  _free($4);
  $$0 = $9;
  return ($$0|0);
 } else {
  (_fclose($0)|0);
  _free($4);
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _nsvgDelete($image) {
 $image = $image|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $shape$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($image|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($image)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $shape$01 = $2;
  while(1) {
   $4 = ((($shape$01)) + 156|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ((($shape$01)) + 152|0);
   $7 = HEAP32[$6>>2]|0;
   _nsvg__deletePaths($7);
   $8 = ((($shape$01)) + 64|0);
   _nsvg__deletePaint($8);
   $9 = ((($shape$01)) + 72|0);
   _nsvg__deletePaint($9);
   _free($shape$01);
   $10 = ($5|0)==(0|0);
   if ($10) {
    break;
   } else {
    $shape$01 = $5;
   }
  }
 }
 _free($image);
 return;
}
function _nsvgCreateRasterizer() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (_malloc(88)|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _nsvgDeleteRasterizer($0);
  $$0 = 0;
  return ($$0|0);
 } else {
  dest=$0; stop=dest+88|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
  $2 = ((($0)) + 8|0);
  HEAPF32[$2>>2] = 0.25;
  $3 = ((($0)) + 12|0);
  HEAPF32[$3>>2] = 0.0099999997764825821;
  $$0 = $0;
  return ($$0|0);
 }
 return (0)|0;
}
function _nsvgDeleteRasterizer($r) {
 $r = $r|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$01 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($r)) + 56|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $p$01 = $2;
  while(1) {
   $4 = ((($p$01)) + 1028|0);
   $5 = HEAP32[$4>>2]|0;
   _free($p$01);
   $6 = ($5|0)==(0|0);
   if ($6) {
    break;
   } else {
    $p$01 = $5;
   }
  }
 }
 $7 = ((($r)) + 16|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  _free($8);
 }
 $10 = ((($r)) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  _free($11);
 }
 $13 = ((($r)) + 40|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if (!($15)) {
  _free($14);
 }
 $16 = ((($r)) + 64|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if (!($18)) {
  _free($17);
 }
 _free($r);
 return;
}
function _nsvgRasterizeBegin($r,$dst,$w,$h,$stride) {
 $r = $r|0;
 $dst = $dst|0;
 $w = $w|0;
 $h = $h|0;
 $stride = $stride|0;
 var $$old = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($r)) + 72|0);
 HEAP32[$0>>2] = $dst;
 $1 = ((($r)) + 76|0);
 HEAP32[$1>>2] = $w;
 $2 = ((($r)) + 80|0);
 HEAP32[$2>>2] = $h;
 $3 = ((($r)) + 84|0);
 HEAP32[$3>>2] = $stride;
 $4 = ((($r)) + 68|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)<($w|0);
 if ($6) {
  HEAP32[$4>>2] = $w;
  $7 = ((($r)) + 64|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (_realloc($8,$w)|0);
  HEAP32[$7>>2] = $9;
  $10 = ($9|0)!=(0|0);
  $11 = ($h|0)>(0);
  $or$cond = $10 & $11;
  if (!($or$cond)) {
   return;
  }
 } else {
  $$old = ($h|0)>(0);
  if (!($$old)) {
   return;
  }
 }
 $12 = $w << 2;
 $i$01 = 0;
 while(1) {
  $13 = Math_imul($i$01, $stride)|0;
  $14 = (($dst) + ($13)|0);
  _memset(($14|0),0,($12|0))|0;
  $15 = (($i$01) + 1)|0;
  $exitcond = ($15|0)==($h|0);
  if ($exitcond) {
   break;
  } else {
   $i$01 = $15;
  }
 }
 return;
}
function _nsvgRasterizeShape($r,$shape,$tx,$ty,$scale) {
 $r = $r|0;
 $shape = $shape|0;
 $tx = +$tx;
 $ty = +$ty;
 $scale = +$scale;
 var $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0;
 var $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0.0;
 var $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $7 = 0, $8 = 0, $9 = 0, $cache = 0, $i$06 = 0, $i$14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0;
 $cache = sp;
 $0 = ((($shape)) + 133|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = ((($shape)) + 64|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if (!($6)) {
  _nsvg__resetPool($r);
  $7 = ((($r)) + 52|0);
  HEAP32[$7>>2] = 0;
  $8 = ((($r)) + 20|0);
  HEAP32[$8>>2] = 0;
  _nsvg__flattenShape($r,$shape,$scale);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)>(0);
  $11 = ((($r)) + 16|0);
  if ($10) {
   $12 = HEAP32[$11>>2]|0;
   $13 = HEAP32[$8>>2]|0;
   $i$06 = 0;
   while(1) {
    $14 = (($12) + (($i$06*24)|0)|0);
    $15 = +HEAPF32[$14>>2];
    $16 = $15 + $tx;
    HEAPF32[$14>>2] = $16;
    $17 = (((($12) + (($i$06*24)|0)|0)) + 4|0);
    $18 = +HEAPF32[$17>>2];
    $19 = $18 + $ty;
    $20 = $19 * 5.0;
    HEAPF32[$17>>2] = $20;
    $21 = (((($12) + (($i$06*24)|0)|0)) + 8|0);
    $22 = +HEAPF32[$21>>2];
    $23 = $22 + $tx;
    HEAPF32[$21>>2] = $23;
    $24 = (((($12) + (($i$06*24)|0)|0)) + 12|0);
    $25 = +HEAPF32[$24>>2];
    $26 = $25 + $ty;
    $27 = $26 * 5.0;
    HEAPF32[$24>>2] = $27;
    $28 = (($i$06) + 1)|0;
    $29 = ($28|0)<($13|0);
    if ($29) {
     $i$06 = $28;
    } else {
     $$lcssa2 = $13;
     break;
    }
   }
  } else {
   $$lcssa2 = $9;
  }
  $30 = HEAP32[$11>>2]|0;
  _qsort($30,$$lcssa2,24,1);
  $31 = ((($shape)) + 80|0);
  $32 = +HEAPF32[$31>>2];
  _nsvg__initPaint($cache,$4,$32);
  $33 = ((($shape)) + 132|0);
  $34 = HEAP8[$33>>0]|0;
  _nsvg__rasterizeSortedEdges($r,$tx,$ty,$scale,$cache,$34);
 }
 $35 = ((($shape)) + 72|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = ($36<<24>>24)==(0);
 if ($37) {
  STACKTOP = sp;return;
 }
 $38 = ((($shape)) + 84|0);
 $39 = +HEAPF32[$38>>2];
 $40 = $39 * $scale;
 $41 = $40 > 0.0099999997764825821;
 if (!($41)) {
  STACKTOP = sp;return;
 }
 _nsvg__resetPool($r);
 $42 = ((($r)) + 52|0);
 HEAP32[$42>>2] = 0;
 $43 = ((($r)) + 20|0);
 HEAP32[$43>>2] = 0;
 _nsvg__flattenShapeStroke($r,$shape,$scale);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)>(0);
 $46 = ((($r)) + 16|0);
 if ($45) {
  $47 = HEAP32[$46>>2]|0;
  $48 = HEAP32[$43>>2]|0;
  $i$14 = 0;
  while(1) {
   $49 = (($47) + (($i$14*24)|0)|0);
   $50 = +HEAPF32[$49>>2];
   $51 = $50 + $tx;
   HEAPF32[$49>>2] = $51;
   $52 = (((($47) + (($i$14*24)|0)|0)) + 4|0);
   $53 = +HEAPF32[$52>>2];
   $54 = $53 + $ty;
   $55 = $54 * 5.0;
   HEAPF32[$52>>2] = $55;
   $56 = (((($47) + (($i$14*24)|0)|0)) + 8|0);
   $57 = +HEAPF32[$56>>2];
   $58 = $57 + $tx;
   HEAPF32[$56>>2] = $58;
   $59 = (((($47) + (($i$14*24)|0)|0)) + 12|0);
   $60 = +HEAPF32[$59>>2];
   $61 = $60 + $ty;
   $62 = $61 * 5.0;
   HEAPF32[$59>>2] = $62;
   $63 = (($i$14) + 1)|0;
   $64 = ($63|0)<($48|0);
   if ($64) {
    $i$14 = $63;
   } else {
    $$lcssa = $48;
    break;
   }
  }
 } else {
  $$lcssa = $44;
 }
 $65 = HEAP32[$46>>2]|0;
 _qsort($65,$$lcssa,24,1);
 $66 = ((($shape)) + 80|0);
 $67 = +HEAPF32[$66>>2];
 _nsvg__initPaint($cache,$35,$67);
 _nsvg__rasterizeSortedEdges($r,$tx,$ty,$scale,$cache,0);
 STACKTOP = sp;return;
}
function _video_image_init() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 (_gfx_create_shader(21548320,22106737)|0);
 return;
}
function _video_image_build($image,$svg,$width,$height,$upscale) {
 $image = $image|0;
 $svg = $svg|0;
 $width = $width|0;
 $height = $height|0;
 $upscale = $upscale|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0;
 var $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0;
 var $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $colors = 0, $exitcond = 0, $exitcond38 = 0, $i$0$lcssa = 0, $i$014 = 0, $i$110 = 0, $j$07 = 0, $maxx$0$lcssa = 0, $maxx$021 = 0, $maxx$1 = 0, $maxy$0$lcssa = 0, $maxy$020 = 0, $maxy$1 = 0, $minx$0$lcssa = 0, $minx$024 = 0, $minx$1 = 0;
 var $miny$0$lcssa = 0, $miny$023 = 0, $miny$1 = 0, $ncolors$0$lcssa = 0, $ncolors$022 = 0, $ncolors$1 = 0, $scevgep = 0, $shape$0 = 0, $shape$019 = 0, $shape$025 = 0, $shape$1 = 0, $shape$13 = 0, $shape$14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $colors = sp;
 $0 = Math_imul($upscale, $width)|0;
 $1 = Math_imul($upscale, $height)|0;
 $2 = $width << 2;
 $3 = Math_imul($2, $height)|0;
 $4 = (_malloc($3)|0);
 $5 = Math_imul($0, $1)|0;
 $6 = $5 << 2;
 $7 = (_malloc($6)|0);
 $8 = (_malloc($5)|0);
 $9 = ((($svg)) + 8|0);
 $shape$019 = HEAP32[$9>>2]|0;
 $10 = ($shape$019|0)==(0|0);
 if ($10) {
  $maxx$0$lcssa = -2147483647;$maxy$0$lcssa = -2147483647;$minx$0$lcssa = 2147483647;$miny$0$lcssa = 2147483647;$ncolors$0$lcssa = 0;
 } else {
  $maxx$021 = -2147483647;$maxy$020 = -2147483647;$minx$024 = 2147483647;$miny$023 = 2147483647;$ncolors$022 = 0;$shape$025 = $shape$019;
  while(1) {
   $11 = (+($minx$024|0));
   $12 = ((($shape$025)) + 136|0);
   $13 = +HEAPF32[$12>>2];
   $14 = $11 > $13;
   $15 = (~~(($13)));
   $minx$1 = $14 ? $15 : $minx$024;
   $16 = (+($miny$023|0));
   $17 = ((($shape$025)) + 140|0);
   $18 = +HEAPF32[$17>>2];
   $19 = $16 > $18;
   $20 = (~~(($18)));
   $miny$1 = $19 ? $20 : $miny$023;
   $21 = (+($maxx$021|0));
   $22 = ((($shape$025)) + 144|0);
   $23 = +HEAPF32[$22>>2];
   $24 = $21 < $23;
   $25 = (~~(($23)));
   $maxx$1 = $24 ? $25 : $maxx$021;
   $26 = (+($maxy$020|0));
   $27 = ((($shape$025)) + 148|0);
   $28 = +HEAPF32[$27>>2];
   $29 = $26 < $28;
   $30 = (~~(($28)));
   $maxy$1 = $29 ? $30 : $maxy$020;
   $31 = ($ncolors$022|0)<(4);
   if ($31) {
    $32 = ($ncolors$022|0)>(0);
    L6: do {
     if ($32) {
      $33 = ((($shape$025)) + 68|0);
      $34 = HEAP32[$33>>2]|0;
      $i$014 = 0;
      while(1) {
       $35 = (($colors) + ($i$014<<2)|0);
       $36 = HEAP32[$35>>2]|0;
       $37 = ($36|0)==($34|0);
       if ($37) {
        $i$0$lcssa = $i$014;
        break L6;
       }
       $38 = (($i$014) + 1)|0;
       $39 = ($38|0)<($ncolors$022|0);
       if ($39) {
        $i$014 = $38;
       } else {
        $i$0$lcssa = $38;
        break;
       }
      }
     } else {
      $i$0$lcssa = 0;
     }
    } while(0);
    $40 = ($i$0$lcssa|0)==($ncolors$022|0);
    if ($40) {
     $41 = ((($shape$025)) + 68|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = (($ncolors$022) + 1)|0;
     $44 = (($colors) + ($ncolors$022<<2)|0);
     HEAP32[$44>>2] = $42;
     $ncolors$1 = $43;
    } else {
     $ncolors$1 = $ncolors$022;
    }
   } else {
    $ncolors$1 = $ncolors$022;
   }
   $45 = ((($shape$025)) + 156|0);
   $shape$0 = HEAP32[$45>>2]|0;
   $46 = ($shape$0|0)==(0|0);
   if ($46) {
    $maxx$0$lcssa = $maxx$1;$maxy$0$lcssa = $maxy$1;$minx$0$lcssa = $minx$1;$miny$0$lcssa = $miny$1;$ncolors$0$lcssa = $ncolors$1;
    break;
   } else {
    $maxx$021 = $maxx$1;$maxy$020 = $maxy$1;$minx$024 = $minx$1;$miny$023 = $miny$1;$ncolors$022 = $ncolors$1;$shape$025 = $shape$0;
   }
  }
 }
 $47 = (($maxx$0$lcssa) - ($minx$0$lcssa))|0;
 $48 = (($maxy$0$lcssa) - ($miny$0$lcssa))|0;
 $49 = ($47|0)>($48|0);
 $50 = $49 ? $47 : $48;
 $51 = ($0|0)>($1|0);
 $52 = $51 ? $0 : $1;
 $53 = (($52) + -128)|0;
 $54 = (+($53|0));
 $55 = (+($50|0));
 $56 = $54 / $55;
 $57 = (0 - ($minx$0$lcssa))|0;
 $58 = (+($57|0));
 $59 = $58 * $56;
 $60 = (+($0|0));
 $61 = (+($47|0));
 $62 = $61 * $56;
 $63 = $60 - $62;
 $64 = $63 * 0.5;
 $65 = $59 + $64;
 $66 = (0 - ($miny$0$lcssa))|0;
 $67 = (+($66|0));
 $68 = $67 * $56;
 $69 = (+($1|0));
 $70 = (+($48|0));
 $71 = $70 * $56;
 $72 = $69 - $71;
 $73 = $72 * 0.5;
 $74 = $68 + $73;
 $75 = $0&65535;
 $76 = $1&65535;
 $77 = (_sdf_create($75,$76)|0);
 $78 = (_nsvgCreateRasterizer()|0);
 _memset(($4|0),0,($3|0))|0;
 $79 = ($ncolors$0$lcssa|0)>(0);
 if ($79) {
  $80 = $0 << 2;
  $81 = ($5|0)>(0);
  $82 = Math_imul($upscale, $upscale)|0;
  $83 = Math_imul($82, $height)|0;
  $84 = Math_imul($83, $width)|0;
  $i$110 = 0;
  while(1) {
   _nsvgRasterizeBegin($78,$7,$0,$1,$80);
   $shape$13 = HEAP32[$9>>2]|0;
   $85 = ($shape$13|0)==(0|0);
   if (!($85)) {
    $86 = (($colors) + ($i$110<<2)|0);
    $87 = HEAP32[$86>>2]|0;
    $shape$14 = $shape$13;
    while(1) {
     $88 = ((($shape$14)) + 68|0);
     $89 = HEAP32[$88>>2]|0;
     $90 = ($89|0)==($87|0);
     if ($90) {
      _nsvgRasterizeShape($78,$shape$14,$65,$74,$56);
     }
     $91 = ((($shape$14)) + 156|0);
     $shape$1 = HEAP32[$91>>2]|0;
     $92 = ($shape$1|0)==(0|0);
     if ($92) {
      break;
     } else {
      $shape$14 = $shape$1;
     }
    }
   }
   if ($81) {
    $j$07 = 0;
    while(1) {
     $93 = (($7) + ($j$07<<2)|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = ($94>>>0)>(16777215);
     $96 = $95&1;
     $97 = (($8) + ($j$07)|0);
     HEAP8[$97>>0] = $96;
     $98 = (($j$07) + 1)|0;
     $exitcond = ($98|0)==($84|0);
     if ($exitcond) {
      break;
     } else {
      $j$07 = $98;
     }
    }
   }
   _sdf_build($77,$8,127);
   _sdf_blit($77,$4,$width,$i$110,$upscale);
   $99 = (($i$110) + 1)|0;
   $exitcond38 = ($99|0)==($ncolors$0$lcssa|0);
   if ($exitcond38) {
    break;
   } else {
    $i$110 = $99;
   }
  }
 }
 _nsvgDeleteRasterizer($78);
 _sdf_delete($77);
 HEAP32[$image>>2] = $width;
 $100 = ((($image)) + 4|0);
 HEAP32[$100>>2] = $height;
 $101 = ($ncolors$0$lcssa|0)>(0);
 if (!($101)) {
  $103 = ((($image)) + 8|0);
  (_gfx_create_texture($103,$width,$height,$4,0)|0);
  _free($4);
  _free($7);
  _free($8);
  STACKTOP = sp;return;
 }
 $scevgep = ((($image)) + 12|0);
 $102 = $ncolors$0$lcssa << 2;
 _memcpy(($scevgep|0),($colors|0),($102|0))|0;
 $103 = ((($image)) + 8|0);
 (_gfx_create_texture($103,$width,$height,$4,0)|0);
 _free($4);
 _free($7);
 _free($8);
 STACKTOP = sp;return;
}
function _gfx__matrix_identity($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF32[$m>>2] = 1.0;
 $0 = ((($m)) + 4|0);
 HEAPF32[$0>>2] = 0.0;
 $1 = ((($m)) + 8|0);
 HEAPF32[$1>>2] = 0.0;
 $2 = ((($m)) + 12|0);
 HEAPF32[$2>>2] = 1.0;
 $3 = ((($m)) + 16|0);
 HEAPF32[$3>>2] = 0.0;
 $4 = ((($m)) + 20|0);
 HEAPF32[$4>>2] = 0.0;
 return;
}
function _gfx__matrix_invalidate() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[(21548196)>>2] = 0;
 return;
}
function _gfx__matrix_premultiply($dst,$src) {
 $dst = $dst|0;
 $src = $src|0;
 var $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $tmp = sp;
 ;HEAP32[$tmp>>2]=HEAP32[$src>>2]|0;HEAP32[$tmp+4>>2]=HEAP32[$src+4>>2]|0;HEAP32[$tmp+8>>2]=HEAP32[$src+8>>2]|0;HEAP32[$tmp+12>>2]=HEAP32[$src+12>>2]|0;HEAP32[$tmp+16>>2]=HEAP32[$src+16>>2]|0;HEAP32[$tmp+20>>2]=HEAP32[$src+20>>2]|0;
 _gfx__matrix_multiply($tmp,$dst);
 ;HEAP32[$dst>>2]=HEAP32[$tmp>>2]|0;HEAP32[$dst+4>>2]=HEAP32[$tmp+4>>2]|0;HEAP32[$dst+8>>2]=HEAP32[$tmp+8>>2]|0;HEAP32[$dst+12>>2]=HEAP32[$tmp+12>>2]|0;HEAP32[$dst+16>>2]=HEAP32[$tmp+16>>2]|0;HEAP32[$dst+20>>2]=HEAP32[$tmp+20>>2]|0;
 STACKTOP = sp;return;
}
function _gfx__matrix_translate($m,$x,$y) {
 $m = $m|0;
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF32[$m>>2] = 1.0;
 $0 = ((($m)) + 4|0);
 HEAPF32[$0>>2] = 0.0;
 $1 = ((($m)) + 8|0);
 HEAPF32[$1>>2] = 0.0;
 $2 = ((($m)) + 12|0);
 HEAPF32[$2>>2] = 1.0;
 $3 = ((($m)) + 16|0);
 HEAPF32[$3>>2] = $x;
 $4 = ((($m)) + 20|0);
 HEAPF32[$4>>2] = $y;
 return;
}
function _gfx__matrix_rotate($m,$a) {
 $m = $m|0;
 $a = +$a;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+Math_cos((+$a)));
 $1 = (+Math_sin((+$a)));
 HEAPF32[$m>>2] = $0;
 $2 = ((($m)) + 4|0);
 HEAPF32[$2>>2] = $1;
 $3 = -$1;
 $4 = ((($m)) + 8|0);
 HEAPF32[$4>>2] = $3;
 $5 = ((($m)) + 12|0);
 HEAPF32[$5>>2] = $0;
 $6 = ((($m)) + 16|0);
 HEAPF32[$6>>2] = 0.0;
 $7 = ((($m)) + 20|0);
 HEAPF32[$7>>2] = 0.0;
 return;
}
function _gfx__matrix_scale($m,$x,$y) {
 $m = $m|0;
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF32[$m>>2] = $x;
 $0 = ((($m)) + 4|0);
 HEAPF32[$0>>2] = 0.0;
 $1 = ((($m)) + 8|0);
 HEAPF32[$1>>2] = 0.0;
 $2 = ((($m)) + 12|0);
 HEAPF32[$2>>2] = $y;
 $3 = ((($m)) + 16|0);
 HEAPF32[$3>>2] = 0.0;
 $4 = ((($m)) + 20|0);
 HEAPF32[$4>>2] = 0.0;
 return;
}
function _gfx__get_texture($id) {
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($id|0)==(0);
 if ($0) {
  $3 = 0;
  return ($3|0);
 }
 $1 = (($id) + -1)|0;
 _gfx__get_opengl();
 $2 = (21548424 + (($1*28)|0)|0);
 $3 = $2;
 return ($3|0);
}
function _gfx__get_opengl() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $pixel = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $pixel = sp;
 $0 = HEAP8[(21548408)>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return;
 }
 HEAP8[(21548408)>>0] = 1;
 $2 = (_gfx__get_proc_address(22113308)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  _gfx__missing_extension(22111193);
 } else {
  HEAP32[(22105528)>>2] = $2;
 }
 $4 = (_gfx__get_proc_address(22113308)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  _gfx__missing_extension(22111193);
 } else {
  HEAP32[(22105528)>>2] = $4;
 }
 $6 = (_gfx__get_proc_address(22113290)|0);
 $7 = ($6|0)==(0|0);
 if ($7) {
  _gfx__missing_extension(22111209);
 } else {
  HEAP32[(22105532)>>2] = $6;
 }
 $8 = (_gfx__get_proc_address(22113373)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  _gfx__missing_extension(22111225);
 } else {
  HEAP32[(22105536)>>2] = $8;
 }
 $10 = (_gfx__get_proc_address(22111872)|0);
 $11 = ($10|0)==(0|0);
 if ($11) {
  _gfx__missing_extension(22111246);
 } else {
  HEAP32[(22105540)>>2] = $10;
 }
 $12 = (_gfx__get_proc_address(22111941)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  _gfx__missing_extension(22111260);
 } else {
  HEAP32[(22105544)>>2] = $12;
 }
 $14 = (_gfx__get_proc_address(22113205)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  _gfx__missing_extension(22111273);
 } else {
  HEAP32[(22105548)>>2] = $14;
 }
 $16 = (_gfx__get_proc_address(22113054)|0);
 $17 = ($16|0)==(0|0);
 if ($17) {
  _gfx__missing_extension(22111285);
 } else {
  HEAP32[(22105552)>>2] = $16;
 }
 $18 = (_gfx__get_proc_address(22111907)|0);
 $19 = ($18|0)==(0|0);
 if ($19) {
  _gfx__missing_extension(22111298);
 } else {
  HEAP32[(22105556)>>2] = $18;
 }
 $20 = (_gfx__get_proc_address(22113162)|0);
 $21 = ($20|0)==(0|0);
 if ($21) {
  _gfx__missing_extension(22111309);
 } else {
  HEAP32[(22105560)>>2] = $20;
 }
 $22 = (_gfx__get_proc_address(22113018)|0);
 $23 = ($22|0)==(0|0);
 if ($23) {
  _gfx__missing_extension(22111323);
 } else {
  HEAP32[(22105564)>>2] = $22;
 }
 $24 = (_gfx__get_proc_address(22113087)|0);
 $25 = ($24|0)==(0|0);
 if ($25) {
  _gfx__missing_extension(22111336);
 } else {
  HEAP32[(22105568)>>2] = $24;
 }
 $26 = (_gfx__get_proc_address(22111971)|0);
 $27 = ($26|0)==(0|0);
 if ($27) {
  _gfx__missing_extension(22111350);
 } else {
  HEAP32[(22105572)>>2] = $26;
 }
 $28 = (_gfx__get_proc_address(22113122)|0);
 $29 = ($28|0)==(0|0);
 if ($29) {
  _gfx__missing_extension(22111363);
 } else {
  HEAP32[(22105580)>>2] = $28;
 }
 $30 = (_gfx__get_proc_address(22113136)|0);
 $31 = ($30|0)==(0|0);
 if ($31) {
  _gfx__missing_extension(22111375);
 } else {
  HEAP32[(22105576)>>2] = $30;
 }
 $32 = (_gfx__get_proc_address(22113219)|0);
 $33 = ($32|0)==(0|0);
 if ($33) {
  _gfx__missing_extension(22111388);
 } else {
  HEAP32[(22105584)>>2] = $32;
 }
 $34 = (_gfx__get_proc_address(22113103)|0);
 $35 = ($34|0)==(0|0);
 if ($35) {
  _gfx__missing_extension(22111406);
 } else {
  HEAP32[(22105588)>>2] = $34;
 }
 $36 = (_gfx__get_proc_address(22112980)|0);
 $37 = ($36|0)==(0|0);
 if ($37) {
  _gfx__missing_extension(22111423);
 } else {
  HEAP32[(22105592)>>2] = $36;
 }
 $38 = (_gfx__get_proc_address(22112532)|0);
 $39 = ($38|0)==(0|0);
 if ($39) {
  _gfx__missing_extension(22111441);
 } else {
  HEAP32[(22105596)>>2] = $38;
 }
 $40 = (_gfx__get_proc_address(22112786)|0);
 $41 = ($40|0)==(0|0);
 if ($41) {
  _gfx__missing_extension(22111460);
 } else {
  HEAP32[(22105600)>>2] = $40;
 }
 $42 = (_gfx__get_proc_address(22112799)|0);
 $43 = ($42|0)==(0|0);
 if ($43) {
  _gfx__missing_extension(22111471);
 } else {
  HEAP32[(22105604)>>2] = $42;
 }
 $44 = (_gfx__get_proc_address(22112812)|0);
 $45 = ($44|0)==(0|0);
 if ($45) {
  _gfx__missing_extension(22111482);
 } else {
  HEAP32[(22105608)>>2] = $44;
 }
 $46 = (_gfx__get_proc_address(22112825)|0);
 $47 = ($46|0)==(0|0);
 if ($47) {
  _gfx__missing_extension(22111493);
 } else {
  HEAP32[(22105612)>>2] = $46;
 }
 $48 = (_gfx__get_proc_address(22112734)|0);
 $49 = ($48|0)==(0|0);
 if ($49) {
  _gfx__missing_extension(22111504);
 } else {
  HEAP32[(22105616)>>2] = $48;
 }
 $50 = (_gfx__get_proc_address(22112747)|0);
 $51 = ($50|0)==(0|0);
 if ($51) {
  _gfx__missing_extension(22111515);
 } else {
  HEAP32[(22105620)>>2] = $50;
 }
 $52 = (_gfx__get_proc_address(22112760)|0);
 $53 = ($52|0)==(0|0);
 if ($53) {
  _gfx__missing_extension(22111526);
 } else {
  HEAP32[(22105624)>>2] = $52;
 }
 $54 = (_gfx__get_proc_address(22112773)|0);
 $55 = ($54|0)==(0|0);
 if ($55) {
  _gfx__missing_extension(22111537);
 } else {
  HEAP32[(22105628)>>2] = $54;
 }
 $56 = (_gfx__get_proc_address(22112876)|0);
 $57 = ($56|0)==(0|0);
 if ($57) {
  _gfx__missing_extension(22111548);
 } else {
  HEAP32[(22105632)>>2] = $56;
 }
 $58 = (_gfx__get_proc_address(22112895)|0);
 $59 = ($58|0)==(0|0);
 if ($59) {
  _gfx__missing_extension(22111565);
 } else {
  HEAP32[(22105636)>>2] = $58;
 }
 $60 = (_gfx__get_proc_address(22112304)|0);
 $61 = ($60|0)==(0|0);
 if ($61) {
  _gfx__missing_extension(22111576);
 } else {
  HEAP32[(22105640)>>2] = $60;
 }
 $62 = (_gfx__get_proc_address(22112317)|0);
 $63 = ($62|0)==(0|0);
 if ($63) {
  _gfx__missing_extension(22111587);
 } else {
  HEAP32[(22105644)>>2] = $62;
 }
 $64 = (_gfx__get_proc_address(22112356)|0);
 $65 = ($64|0)==(0|0);
 if ($65) {
  _gfx__missing_extension(22111601);
 } else {
  HEAP32[(22105648)>>2] = $64;
 }
 $66 = (_gfx__get_proc_address(22112369)|0);
 $67 = ($66|0)==(0|0);
 if ($67) {
  _gfx__missing_extension(22111612);
 } else {
  HEAP32[(22105652)>>2] = $66;
 }
 $68 = (_gfx__get_proc_address(22113775)|0);
 $69 = ($68|0)==(0|0);
 if ($69) {
  _gfx__missing_extension(22111626);
 } else {
  HEAP32[(22105656)>>2] = $68;
 }
 $70 = (_gfx__get_proc_address(22113823)|0);
 $71 = ($70|0)==(0|0);
 if ($71) {
  _gfx__missing_extension(22111646);
 } else {
  HEAP32[(22105660)>>2] = $70;
 }
 $72 = (_gfx__get_proc_address(22113797)|0);
 $73 = ($72|0)==(0|0);
 if ($73) {
  _gfx__missing_extension(22111671);
 } else {
  HEAP32[(22105664)>>2] = $72;
 }
 $74 = (_gfx__get_proc_address(22114213)|0);
 $75 = ($74|0)==(0|0);
 if ($75) {
  _gfx__missing_extension(22111695);
 } else {
  HEAP32[(22105668)>>2] = $74;
 }
 $76 = (_gfx__get_proc_address(22114180)|0);
 $77 = ($76|0)==(0|0);
 if ($77) {
  _gfx__missing_extension(22111709);
 } else {
  HEAP32[(22105672)>>2] = $76;
 }
 _gfx__load_shader((22105488),22111724);
 HEAP32[$pixel>>2] = -1;
 _glGenTextures(1,((21548420)|0));
 $78 = HEAP32[(21548420)>>2]|0;
 _glBindTexture(3553,($78|0));
 _glTexParameteri(3553,10241,9728);
 _glTexParameteri(3553,10240,9728);
 _glTexParameteri(3553,10242,33071);
 _glTexParameteri(3553,10243,33071);
 _glTexImage2D(3553,0,6408,1,1,0,6408,5121,($pixel|0));
 _glBindTexture(3553,0);
 $79 = HEAP32[(22105640)>>2]|0;
 FUNCTION_TABLE_vii[$79 & 63](1,(21548412));
 $80 = HEAP32[(22105640)>>2]|0;
 FUNCTION_TABLE_vii[$80 & 63](1,(21548412));
 $81 = HEAP32[(22105636)>>2]|0;
 $82 = HEAP32[(21548412)>>2]|0;
 FUNCTION_TABLE_vii[$81 & 63](34962,$82);
 $83 = HEAP32[(22105648)>>2]|0;
 FUNCTION_TABLE_viiii[$83 & 31](34962,14680064,0,35040);
 $84 = HEAP32[(22105636)>>2]|0;
 FUNCTION_TABLE_vii[$84 & 63](34962,0);
 $85 = HEAP32[(22105640)>>2]|0;
 FUNCTION_TABLE_vii[$85 & 63](1,(21548416));
 $86 = HEAP32[(22105640)>>2]|0;
 FUNCTION_TABLE_vii[$86 & 63](1,(21548412));
 $87 = HEAP32[(22105636)>>2]|0;
 $88 = HEAP32[(21548416)>>2]|0;
 FUNCTION_TABLE_vii[$87 & 63](34963,$88);
 $89 = HEAP32[(22105648)>>2]|0;
 FUNCTION_TABLE_viiii[$89 & 31](34963,3145728,0,35040);
 $90 = HEAP32[(22105636)>>2]|0;
 FUNCTION_TABLE_vii[$90 & 63](34963,0);
 STACKTOP = sp;return;
}
function _gfx__bind_target($id,$clip,$shaderid) {
 $id = $id|0;
 $clip = $clip|0;
 $shaderid = $shaderid|0;
 var $$neg2 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fclip = 0, $flipy$0 = 0, $fresolution = 0, $height$0 = 0, $transform = 0, $width$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $fclip = sp + 80|0;
 $fresolution = sp;
 $transform = sp + 16|0;
 _gfx__get_opengl();
 $0 = ($shaderid|0)==(0);
 if ($0) {
  $37 = (22105488);
 } else {
  $1 = (_gfx__get_shader($shaderid)|0);
  $37 = $1;
 }
 $2 = (_gfx__get_texture($id)|0);
 $3 = ($2|0)!=(0|0);
 do {
  if ($3) {
   $4 = ((($2)) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ((($2)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = HEAP32[$2>>2]|0;
   $9 = $8 & 1;
   $10 = ($9|0)==(0);
   if ($10) {
    $11 = ((($2)) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    _glBindTexture(3553,($12|0));
    $13 = HEAP32[(22105528)>>2]|0;
    $14 = ((($2)) + 12|0);
    FUNCTION_TABLE_vii[$13 & 63](1,$14);
    $15 = HEAP32[(22105532)>>2]|0;
    $16 = HEAP32[$14>>2]|0;
    FUNCTION_TABLE_vii[$15 & 63](36160,$16);
    $17 = HEAP32[(22105536)>>2]|0;
    $18 = HEAP32[$11>>2]|0;
    FUNCTION_TABLE_viiiii[$17 & 7](36160,36064,3553,$18,0);
    _glBindTexture(3553,0);
    $19 = HEAP32[$2>>2]|0;
    $20 = $19 | 1;
    HEAP32[$2>>2] = $20;
    $flipy$0 = 0;$height$0 = $7;$width$0 = $5;
    break;
   } else {
    $21 = HEAP32[(22105532)>>2]|0;
    $22 = ((($2)) + 12|0);
    $23 = HEAP32[$22>>2]|0;
    FUNCTION_TABLE_vii[$21 & 63](36160,$23);
    $flipy$0 = 0;$height$0 = $7;$width$0 = $5;
    break;
   }
  } else {
   $24 = (_gfx_get_width()|0);
   $25 = (_gfx_get_height()|0);
   $26 = HEAP32[(22105532)>>2]|0;
   FUNCTION_TABLE_vii[$26 & 63](36160,0);
   $flipy$0 = 1;$height$0 = $25;$width$0 = $24;
  }
 } while(0);
 _glViewport(0,0,($width$0|0),($height$0|0));
 $27 = HEAP32[$clip>>2]|0;
 $28 = ((($clip)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($clip)) + 12|0);
 $31 = HEAP32[$30>>2]|0;
 $$neg2 = (($height$0) - ($29))|0;
 $32 = (($$neg2) - ($31))|0;
 $33 = ((($clip)) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 _glScissor(($27|0),($32|0),($34|0),($31|0));
 $35 = HEAP32[(22105556)>>2]|0;
 $36 = ((($37)) + 4|0);
 $38 = HEAP32[$36>>2]|0;
 FUNCTION_TABLE_vi[$35 & 31]($38);
 $39 = ((($37)) + 16|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)==(-1);
 if (!($41)) {
  $42 = HEAP32[$clip>>2]|0;
  $43 = (+($42|0));
  HEAPF32[$fclip>>2] = $43;
  $44 = ((($fclip)) + 4|0);
  $45 = HEAP32[$28>>2]|0;
  $46 = (+($45|0));
  HEAPF32[$44>>2] = $46;
  $47 = ((($fclip)) + 8|0);
  $48 = HEAP32[$clip>>2]|0;
  $49 = HEAP32[$33>>2]|0;
  $50 = (($49) + ($48))|0;
  $51 = (+($50|0));
  HEAPF32[$47>>2] = $51;
  $52 = ((($fclip)) + 12|0);
  $53 = HEAP32[$28>>2]|0;
  $54 = HEAP32[$30>>2]|0;
  $55 = (($54) + ($53))|0;
  $56 = (+($55|0));
  HEAPF32[$52>>2] = $56;
  $57 = HEAP32[(22105612)>>2]|0;
  $58 = HEAP32[$39>>2]|0;
  FUNCTION_TABLE_viii[$57 & 31]($58,1,$fclip);
 }
 $59 = ((($37)) + 20|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($60|0)==(-1);
 if (!($61)) {
  $62 = (+($width$0|0));
  HEAPF32[$fresolution>>2] = $62;
  $63 = ((($fresolution)) + 4|0);
  $64 = (+($height$0|0));
  HEAPF32[$63>>2] = $64;
  $65 = ((($fresolution)) + 8|0);
  $66 = $62 / $64;
  HEAPF32[$65>>2] = $66;
  $67 = HEAP32[(22105608)>>2]|0;
  $68 = HEAP32[$59>>2]|0;
  FUNCTION_TABLE_viii[$67 & 31]($68,1,$fresolution);
 }
 $69 = ($flipy$0|0)==(0);
 if ($69) {
  $86 = (+($width$0|0));
  $87 = 2.0 / $86;
  HEAPF32[$transform>>2] = $87;
  $88 = ((($transform)) + 4|0);
  $89 = ((($transform)) + 20|0);
  $90 = (+($height$0|0));
  $91 = 2.0 / $90;
  ;HEAP32[$88>>2]=0|0;HEAP32[$88+4>>2]=0|0;HEAP32[$88+8>>2]=0|0;HEAP32[$88+12>>2]=0|0;
  HEAPF32[$89>>2] = $91;
  $92 = ((($transform)) + 24|0);
  $93 = ((($transform)) + 40|0);
  ;HEAP32[$92>>2]=0|0;HEAP32[$92+4>>2]=0|0;HEAP32[$92+8>>2]=0|0;HEAP32[$92+12>>2]=0|0;
  HEAPF32[$93>>2] = -2.0;
  $94 = ((($transform)) + 44|0);
  HEAPF32[$94>>2] = 0.0;
  $95 = ((($transform)) + 48|0);
  HEAPF32[$95>>2] = -1.0;
  $96 = ((($transform)) + 52|0);
  HEAPF32[$96>>2] = -1.0;
  $97 = ((($transform)) + 56|0);
  HEAPF32[$97>>2] = 1.0;
  $98 = ((($transform)) + 60|0);
  HEAPF32[$98>>2] = 1.0;
  $99 = HEAP32[(22105632)>>2]|0;
  $100 = ((($37)) + 8|0);
  $101 = HEAP32[$100>>2]|0;
  FUNCTION_TABLE_viiii[$99 & 31]($101,1,0,$transform);
 } else {
  $70 = (+($width$0|0));
  $71 = 2.0 / $70;
  HEAPF32[$transform>>2] = $71;
  $72 = ((($transform)) + 4|0);
  $73 = ((($transform)) + 20|0);
  $74 = (+($height$0|0));
  $75 = -2.0 / $74;
  ;HEAP32[$72>>2]=0|0;HEAP32[$72+4>>2]=0|0;HEAP32[$72+8>>2]=0|0;HEAP32[$72+12>>2]=0|0;
  HEAPF32[$73>>2] = $75;
  $76 = ((($transform)) + 24|0);
  $77 = ((($transform)) + 40|0);
  ;HEAP32[$76>>2]=0|0;HEAP32[$76+4>>2]=0|0;HEAP32[$76+8>>2]=0|0;HEAP32[$76+12>>2]=0|0;
  HEAPF32[$77>>2] = -2.0;
  $78 = ((($transform)) + 44|0);
  HEAPF32[$78>>2] = 0.0;
  $79 = ((($transform)) + 48|0);
  HEAPF32[$79>>2] = -1.0;
  $80 = ((($transform)) + 52|0);
  HEAPF32[$80>>2] = 1.0;
  $81 = ((($transform)) + 56|0);
  HEAPF32[$81>>2] = 1.0;
  $82 = ((($transform)) + 60|0);
  HEAPF32[$82>>2] = 1.0;
  $83 = HEAP32[(22105632)>>2]|0;
  $84 = ((($37)) + 8|0);
  $85 = HEAP32[$84>>2]|0;
  FUNCTION_TABLE_viiii[$83 & 31]($85,1,0,$transform);
 }
 if ($3) {
  $102 = HEAP32[$2>>2]|0;
  $103 = $102 & 2;
  $104 = ($103|0)==(0);
  if ($104) {
   _glDisable(2929);
   STACKTOP = sp;return;
  }
 }
 _glEnable(2929);
 _glDepthFunc(518);
 STACKTOP = sp;return;
}
function _gfx__transform_points($path) {
 $path = $path|0;
 var $$ = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0;
 var $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0;
 var $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0;
 var $78 = 0.0, $79 = 0, $8 = 0.0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0;
 var $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $exitcond = 0, $exitcond16 = 0, $exitcond17 = 0, $exitcond18 = 0, $exitcond19 = 0, $index$014 = 0, $index$112 = 0, $index$210 = 0, $index$37 = 0, $index$48 = 0, $ith$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(52344)>>2]|0;
 $1 = (((5240 + (($0*92)|0)|0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (((5240 + (($0*92)|0)|0)) + 68|0);
 $4 = HEAP32[(3722364)>>2]|0;
 $5 = (((5240 + (($0*92)|0)|0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7 ? 1.0 : 0.0;
 $9 = $path & 16777216;
 $10 = ($9|0)==(0);
 do {
  if ($10) {
   $37 = ($2|0)==(0);
   if ($37) {
    $38 = ($4|0)>(0);
    if (!($38)) {
     break;
    }
    $39 = (((5240 + (($0*92)|0)|0)) + 76|0);
    $40 = (((5240 + (($0*92)|0)|0)) + 84|0);
    $41 = (((5240 + (($0*92)|0)|0)) + 72|0);
    $42 = (((5240 + (($0*92)|0)|0)) + 80|0);
    $43 = (((5240 + (($0*92)|0)|0)) + 88|0);
    $index$210 = 0;
    while(1) {
     $84 = (52348 + (($index$210*28)|0)|0);
     $85 = +HEAPF32[$84>>2];
     $86 = (((52348 + (($index$210*28)|0)|0)) + 4|0);
     $87 = +HEAPF32[$86>>2];
     $88 = +HEAPF32[$3>>2];
     $89 = $85 * $88;
     $90 = +HEAPF32[$39>>2];
     $91 = $87 * $90;
     $92 = $89 + $91;
     $93 = +HEAPF32[$40>>2];
     $94 = $93 + $92;
     HEAPF32[$84>>2] = $94;
     $95 = +HEAPF32[$41>>2];
     $96 = $85 * $95;
     $97 = +HEAPF32[$42>>2];
     $98 = $87 * $97;
     $99 = $96 + $98;
     $100 = +HEAPF32[$43>>2];
     $101 = $100 + $99;
     HEAPF32[$86>>2] = $101;
     $102 = (((52348 + (($index$210*28)|0)|0)) + 20|0);
     HEAPF32[$102>>2] = $8;
     $103 = (($index$210) + 1)|0;
     $exitcond17 = ($103|0)==($4|0);
     if ($exitcond17) {
      break;
     } else {
      $index$210 = $103;
     }
    }
   } else {
    $44 = (_gfx_get_texture_width($2)|0);
    $45 = (+($44|0));
    $46 = (_gfx_get_texture_height($2)|0);
    $47 = (+($46|0));
    $48 = ($44|0)>(0);
    $49 = 1.0 / $45;
    $$ = $48 ? $49 : $45;
    $50 = ($46|0)>(0);
    $51 = 1.0 / $47;
    $ith$0 = $50 ? $51 : $47;
    $52 = ($4|0)>(0);
    if (!($52)) {
     break;
    }
    $53 = (((5240 + (($0*92)|0)|0)) + 76|0);
    $54 = (((5240 + (($0*92)|0)|0)) + 84|0);
    $55 = (((5240 + (($0*92)|0)|0)) + 72|0);
    $56 = (((5240 + (($0*92)|0)|0)) + 80|0);
    $57 = (((5240 + (($0*92)|0)|0)) + 88|0);
    $index$112 = 0;
    while(1) {
     $58 = (52348 + (($index$112*28)|0)|0);
     $59 = +HEAPF32[$58>>2];
     $60 = (((52348 + (($index$112*28)|0)|0)) + 4|0);
     $61 = +HEAPF32[$60>>2];
     $62 = +HEAPF32[$3>>2];
     $63 = $59 * $62;
     $64 = +HEAPF32[$53>>2];
     $65 = $61 * $64;
     $66 = $63 + $65;
     $67 = +HEAPF32[$54>>2];
     $68 = $67 + $66;
     HEAPF32[$58>>2] = $68;
     $69 = +HEAPF32[$55>>2];
     $70 = $59 * $69;
     $71 = +HEAPF32[$56>>2];
     $72 = $61 * $71;
     $73 = $70 + $72;
     $74 = +HEAPF32[$57>>2];
     $75 = $74 + $73;
     HEAPF32[$60>>2] = $75;
     $76 = (((52348 + (($index$112*28)|0)|0)) + 12|0);
     $77 = +HEAPF32[$76>>2];
     $78 = $$ * $77;
     HEAPF32[$76>>2] = $78;
     $79 = (((52348 + (($index$112*28)|0)|0)) + 16|0);
     $80 = +HEAPF32[$79>>2];
     $81 = $ith$0 * $80;
     HEAPF32[$79>>2] = $81;
     $82 = (((52348 + (($index$112*28)|0)|0)) + 20|0);
     HEAPF32[$82>>2] = $8;
     $83 = (($index$112) + 1)|0;
     $exitcond18 = ($83|0)==($4|0);
     if ($exitcond18) {
      break;
     } else {
      $index$112 = $83;
     }
    }
   }
  } else {
   $11 = ($4|0)>(0);
   if ($11) {
    $12 = (((5240 + (($0*92)|0)|0)) + 76|0);
    $13 = (((5240 + (($0*92)|0)|0)) + 84|0);
    $14 = (((5240 + (($0*92)|0)|0)) + 72|0);
    $15 = (((5240 + (($0*92)|0)|0)) + 80|0);
    $16 = (((5240 + (($0*92)|0)|0)) + 88|0);
    $index$014 = 0;
    while(1) {
     $17 = (52348 + (($index$014*28)|0)|0);
     $18 = +HEAPF32[$17>>2];
     $19 = (((52348 + (($index$014*28)|0)|0)) + 4|0);
     $20 = +HEAPF32[$19>>2];
     $21 = +HEAPF32[$3>>2];
     $22 = $18 * $21;
     $23 = +HEAPF32[$12>>2];
     $24 = $20 * $23;
     $25 = $22 + $24;
     $26 = +HEAPF32[$13>>2];
     $27 = $26 + $25;
     HEAPF32[$17>>2] = $27;
     $28 = +HEAPF32[$14>>2];
     $29 = $18 * $28;
     $30 = +HEAPF32[$15>>2];
     $31 = $20 * $30;
     $32 = $29 + $31;
     $33 = +HEAPF32[$16>>2];
     $34 = $33 + $32;
     HEAPF32[$19>>2] = $34;
     $35 = (((52348 + (($index$014*28)|0)|0)) + 20|0);
     HEAPF32[$35>>2] = $8;
     $36 = (($index$014) + 1)|0;
     $exitcond19 = ($36|0)==($4|0);
     if ($exitcond19) {
      break;
     } else {
      $index$014 = $36;
     }
    }
   }
  }
 } while(0);
 $104 = HEAP32[(52344)>>2]|0;
 $105 = (((5240 + (($104*92)|0)|0)) + 16|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = ($106|0)==(-1);
 if ($107) {
  $108 = (((5240 + (($104*92)|0)|0)) + 20|0);
  $109 = +HEAPF32[$108>>2];
  $110 = $109 != 1.0;
  if (!($110)) {
   $111 = ($4|0)>(0);
   if ($111) {
    $index$48 = 0;
   } else {
    return;
   }
   while(1) {
    $153 = (((52348 + (($index$48*28)|0)|0)) + 24|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = $154 << 16;
    $156 = $155 & 16711680;
    $157 = $154 >>> 16;
    $158 = $157 & 255;
    $159 = $154 & -16711936;
    $160 = $159 | $156;
    $161 = $160 | $158;
    HEAP32[$153>>2] = $161;
    $162 = (($index$48) + 1)|0;
    $exitcond16 = ($162|0)==($4|0);
    if ($exitcond16) {
     break;
    } else {
     $index$48 = $162;
    }
   }
   return;
  }
 }
 $112 = HEAP32[(52344)>>2]|0;
 $113 = (((5240 + (($112*92)|0)|0)) + 16|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 255;
 $116 = (($115) + 1)|0;
 $117 = $114 >>> 8;
 $118 = $117 & 255;
 $119 = (($118) + 1)|0;
 $120 = $114 >>> 16;
 $121 = $120 & 255;
 $122 = (($121) + 1)|0;
 $123 = $114 >>> 24;
 $124 = (+($123|0));
 $125 = (((5240 + (($112*92)|0)|0)) + 20|0);
 $126 = +HEAPF32[$125>>2];
 $127 = $126 * $124;
 $128 = (~~(($127)));
 $129 = (($128) + 1)|0;
 $130 = ($4|0)>(0);
 if ($130) {
  $index$37 = 0;
 } else {
  return;
 }
 while(1) {
  $131 = (((52348 + (($index$37*28)|0)|0)) + 24|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = $132 & 255;
  $134 = Math_imul($133, $116)|0;
  $135 = $134 >>> 8;
  $136 = $135 << 16;
  $137 = $132 >>> 8;
  $138 = $137 & 255;
  $139 = Math_imul($138, $119)|0;
  $140 = $139 & 130816;
  $141 = $136 | $140;
  $142 = $132 >>> 16;
  $143 = $142 & 255;
  $144 = Math_imul($143, $122)|0;
  $145 = $144 >>> 8;
  $146 = $141 | $145;
  $147 = $132 >>> 24;
  $148 = Math_imul($147, $129)|0;
  $149 = $148 >>> 8;
  $150 = $149 << 24;
  $151 = $146 | $150;
  HEAP32[$131>>2] = $151;
  $152 = (($index$37) + 1)|0;
  $exitcond = ($152|0)==($4|0);
  if ($exitcond) {
   break;
  } else {
   $index$37 = $152;
  }
 }
 return;
}
function _gfx__emit_line() {
 var $$lcssa = 0, $$lcssa71 = 0.0, $$lcssa72 = 0.0, $$lcssa73 = 0.0, $$lcssa74 = 0.0, $$lcssa75 = 0.0, $$lcssa76 = 0.0, $$lcssa77 = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0.0;
 var $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0;
 var $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $index$0 = 0, $index$0$lcssa70 = 0;
 var $index$0$ph = 0, $ninds$0$ph = 0, $ninds$0$ph$lcssa = 0, $ninds$1 = 0, $ninds$2 = 0, $nlines$0$ph = 0, $nlines$0$ph$lcssa = 0, $nverts$0$ph = 0, $nverts$0$ph$lcssa = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(3722364)>>2]|0;
 $1 = (($0) + -1)|0;
 $2 = ($1*12)|0;
 $3 = $1 << 2;
 _gfx__allocate_batch($2,$3);
 $4 = HEAP32[(52344)>>2]|0;
 $5 = (((5240 + (($4*92)|0)|0)) + 28|0);
 $6 = +HEAPF32[$5>>2];
 $7 = $6 * 0.5;
 $8 = HEAP32[(3722364)>>2]|0;
 $9 = HEAP32[(21548164)>>2]|0;
 $10 = HEAP32[(18402432)>>2]|0;
 $11 = ($8|0)<(2);
 $12 = $7 <= 0.0;
 $or$cond = $11 | $12;
 if ($or$cond) {
  return;
 }
 $13 = (($8) + -1)|0;
 $14 = +HEAPF32[(52348)>>2];
 $15 = (52348 + (($13*28)|0)|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $14 == $16;
 if ($17) {
  $18 = +HEAPF32[(52352)>>2];
  $19 = (((52348 + (($13*28)|0)|0)) + 4|0);
  $20 = +HEAPF32[$19>>2];
  $21 = $18 == $20;
  $134 = $21;
 } else {
  $134 = 0;
 }
 $index$0$ph = 0;$ninds$0$ph = $9;$nlines$0$ph = 0;$nverts$0$ph = $10;
 L7: while(1) {
  $index$0 = $index$0$ph;
  while(1) {
   $22 = ($index$0|0)<($13|0);
   if (!($22)) {
    $ninds$0$ph$lcssa = $ninds$0$ph;$nlines$0$ph$lcssa = $nlines$0$ph;$nverts$0$ph$lcssa = $nverts$0$ph;
    break L7;
   }
   $23 = (($index$0) + 1)|0;
   $24 = (52348 + (($index$0*28)|0)|0);
   $25 = +HEAPF32[$24>>2];
   $26 = (((52348 + (($index$0*28)|0)|0)) + 4|0);
   $27 = +HEAPF32[$26>>2];
   $28 = (52348 + (($23*28)|0)|0);
   $29 = +HEAPF32[$28>>2];
   $30 = (((52348 + (($23*28)|0)|0)) + 4|0);
   $31 = +HEAPF32[$30>>2];
   $32 = $29 - $25;
   $33 = $31 - $27;
   $34 = $32 * $32;
   $35 = $33 * $33;
   $36 = $34 + $35;
   $37 = (+Math_sqrt((+$36)));
   $38 = $37 > 0.0;
   if ($38) {
    $$lcssa = $23;$$lcssa71 = $25;$$lcssa72 = $27;$$lcssa73 = $29;$$lcssa74 = $31;$$lcssa75 = $32;$$lcssa76 = $33;$$lcssa77 = $37;$index$0$lcssa70 = $index$0;
    break;
   } else {
    $index$0 = $23;
   }
  }
  $39 = (((52348 + (($index$0$lcssa70*28)|0)|0)) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = (((52348 + (($index$0$lcssa70*28)|0)|0)) + 12|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = (((52348 + (($index$0$lcssa70*28)|0)|0)) + 20|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (((52348 + (($index$0$lcssa70*28)|0)|0)) + 24|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (((52348 + (($$lcssa*28)|0)|0)) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (((52348 + (($$lcssa*28)|0)|0)) + 12|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (((52348 + (($$lcssa*28)|0)|0)) + 24|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($nlines$0$ph) + 1)|0;
  $54 = (($ninds$0$ph) + 1)|0;
  $55 = (18402436 + ($ninds$0$ph<<2)|0);
  HEAP32[$55>>2] = $nverts$0$ph;
  $56 = (($nverts$0$ph) + 1)|0;
  $57 = (($ninds$0$ph) + 2)|0;
  $58 = (18402436 + ($54<<2)|0);
  HEAP32[$58>>2] = $56;
  $59 = (($nverts$0$ph) + 3)|0;
  $60 = (($ninds$0$ph) + 3)|0;
  $61 = (18402436 + ($57<<2)|0);
  HEAP32[$61>>2] = $59;
  $62 = (($ninds$0$ph) + 4)|0;
  $63 = (18402436 + ($60<<2)|0);
  HEAP32[$63>>2] = $56;
  $64 = (($nverts$0$ph) + 2)|0;
  $65 = (($ninds$0$ph) + 5)|0;
  $66 = (18402436 + ($62<<2)|0);
  HEAP32[$66>>2] = $64;
  $67 = (($ninds$0$ph) + 6)|0;
  $68 = (18402436 + ($65<<2)|0);
  HEAP32[$68>>2] = $59;
  $69 = ($$lcssa|0)<($13|0);
  if ($69) {
   $70 = (($ninds$0$ph) + 7)|0;
   $71 = (18402436 + ($67<<2)|0);
   HEAP32[$71>>2] = $56;
   $72 = (($nverts$0$ph) + 4)|0;
   $73 = (($ninds$0$ph) + 8)|0;
   $74 = (18402436 + ($70<<2)|0);
   HEAP32[$74>>2] = $72;
   $75 = (($nverts$0$ph) + 7)|0;
   $76 = (($ninds$0$ph) + 9)|0;
   $77 = (18402436 + ($73<<2)|0);
   HEAP32[$77>>2] = $75;
   $78 = (($ninds$0$ph) + 10)|0;
   $79 = (18402436 + ($76<<2)|0);
   HEAP32[$79>>2] = $56;
   $80 = (($ninds$0$ph) + 11)|0;
   $81 = (18402436 + ($78<<2)|0);
   HEAP32[$81>>2] = $75;
   $82 = (($ninds$0$ph) + 12)|0;
   $83 = (18402436 + ($80<<2)|0);
   HEAP32[$83>>2] = $64;
   $ninds$1 = $82;
  } else {
   $ninds$1 = $67;
  }
  $84 = 1.0 / $$lcssa77;
  $85 = $7 * $84;
  $86 = $$lcssa75 * $85;
  $87 = $$lcssa76 * $85;
  $88 = (((3722368 + (($nverts$0$ph*28)|0)|0)) + 24|0);
  HEAP32[$88>>2] = $46;
  $89 = $$lcssa71 + $87;
  $90 = $89 + 0.5;
  $91 = (3722368 + (($nverts$0$ph*28)|0)|0);
  HEAPF32[$91>>2] = $90;
  $92 = $$lcssa72 - $86;
  $93 = $92 + 0.5;
  $94 = (((3722368 + (($nverts$0$ph*28)|0)|0)) + 4|0);
  HEAPF32[$94>>2] = $93;
  $95 = (((3722368 + (($nverts$0$ph*28)|0)|0)) + 8|0);
  HEAP32[$95>>2] = $40;
  $96 = (((3722368 + (($nverts$0$ph*28)|0)|0)) + 12|0);
  HEAP32[$96>>2] = $42;
  $97 = (((3722368 + (($nverts$0$ph*28)|0)|0)) + 16|0);
  HEAPF32[$97>>2] = 1.0;
  $98 = (((3722368 + (($nverts$0$ph*28)|0)|0)) + 20|0);
  HEAP32[$98>>2] = $44;
  $99 = (((3722368 + (($56*28)|0)|0)) + 24|0);
  HEAP32[$99>>2] = $52;
  $100 = $$lcssa73 + $87;
  $101 = $100 + 0.5;
  $102 = (3722368 + (($56*28)|0)|0);
  HEAPF32[$102>>2] = $101;
  $103 = $$lcssa74 - $86;
  $104 = $103 + 0.5;
  $105 = (((3722368 + (($56*28)|0)|0)) + 4|0);
  HEAPF32[$105>>2] = $104;
  $106 = (((3722368 + (($56*28)|0)|0)) + 8|0);
  HEAP32[$106>>2] = $48;
  $107 = (((3722368 + (($56*28)|0)|0)) + 12|0);
  HEAP32[$107>>2] = $50;
  $108 = (((3722368 + (($56*28)|0)|0)) + 16|0);
  HEAPF32[$108>>2] = 1.0;
  $109 = (((3722368 + (($56*28)|0)|0)) + 20|0);
  HEAP32[$109>>2] = $44;
  $110 = (((3722368 + (($64*28)|0)|0)) + 24|0);
  HEAP32[$110>>2] = $52;
  $111 = $$lcssa73 - $87;
  $112 = $111 + 0.5;
  $113 = (3722368 + (($64*28)|0)|0);
  HEAPF32[$113>>2] = $112;
  $114 = $$lcssa74 + $86;
  $115 = $114 + 0.5;
  $116 = (((3722368 + (($64*28)|0)|0)) + 4|0);
  HEAPF32[$116>>2] = $115;
  $117 = (((3722368 + (($64*28)|0)|0)) + 8|0);
  HEAP32[$117>>2] = $48;
  $118 = (((3722368 + (($64*28)|0)|0)) + 12|0);
  HEAP32[$118>>2] = $50;
  $119 = (((3722368 + (($64*28)|0)|0)) + 16|0);
  HEAPF32[$119>>2] = 0.0;
  $120 = (((3722368 + (($64*28)|0)|0)) + 20|0);
  HEAP32[$120>>2] = $44;
  $121 = (($nverts$0$ph) + 4)|0;
  $122 = (((3722368 + (($59*28)|0)|0)) + 24|0);
  HEAP32[$122>>2] = $46;
  $123 = $$lcssa71 - $87;
  $124 = $123 + 0.5;
  $125 = (3722368 + (($59*28)|0)|0);
  HEAPF32[$125>>2] = $124;
  $126 = $$lcssa72 + $86;
  $127 = $126 + 0.5;
  $128 = (((3722368 + (($59*28)|0)|0)) + 4|0);
  HEAPF32[$128>>2] = $127;
  $129 = (((3722368 + (($59*28)|0)|0)) + 8|0);
  HEAP32[$129>>2] = $40;
  $130 = (((3722368 + (($59*28)|0)|0)) + 12|0);
  HEAP32[$130>>2] = $42;
  $131 = (((3722368 + (($59*28)|0)|0)) + 16|0);
  HEAPF32[$131>>2] = 0.0;
  $132 = (((3722368 + (($59*28)|0)|0)) + 20|0);
  HEAP32[$132>>2] = $44;
  $index$0$ph = $$lcssa;$ninds$0$ph = $ninds$1;$nlines$0$ph = $53;$nverts$0$ph = $121;
 }
 $133 = ($nlines$0$ph$lcssa|0)>(2);
 $or$cond3 = $134 & $133;
 if ($or$cond3) {
  $135 = (($nverts$0$ph$lcssa) + -3)|0;
  $136 = (($ninds$0$ph$lcssa) + 1)|0;
  $137 = (18402436 + ($ninds$0$ph$lcssa<<2)|0);
  HEAP32[$137>>2] = $135;
  $138 = (($ninds$0$ph$lcssa) + 2)|0;
  $139 = (18402436 + ($136<<2)|0);
  HEAP32[$139>>2] = $10;
  $140 = (($10) + 3)|0;
  $141 = (($ninds$0$ph$lcssa) + 3)|0;
  $142 = (18402436 + ($138<<2)|0);
  HEAP32[$142>>2] = $140;
  $143 = (($ninds$0$ph$lcssa) + 4)|0;
  $144 = (18402436 + ($141<<2)|0);
  HEAP32[$144>>2] = $135;
  $145 = (($ninds$0$ph$lcssa) + 5)|0;
  $146 = (18402436 + ($143<<2)|0);
  HEAP32[$146>>2] = $140;
  $147 = (($nverts$0$ph$lcssa) + -2)|0;
  $148 = (($ninds$0$ph$lcssa) + 6)|0;
  $149 = (18402436 + ($145<<2)|0);
  HEAP32[$149>>2] = $147;
  $ninds$2 = $148;
 } else {
  $ninds$2 = $ninds$0$ph$lcssa;
 }
 HEAP32[(21548164)>>2] = $ninds$2;
 HEAP32[(18402432)>>2] = $nverts$0$ph$lcssa;
 return;
}
function _gfx__emit_lines() {
 var $$sum = 0, $$sum10 = 0, $$sum17 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0.0, $94 = 0.0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $index$043 = 0, $ninds$0$lcssa = 0, $ninds$045 = 0, $nverts$0$lcssa = 0, $nverts$044 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(3722364)>>2]|0;
 $1 = (($0) + -1)|0;
 $2 = ($1*12)|0;
 $3 = $1 << 2;
 _gfx__allocate_batch($2,$3);
 $4 = HEAP32[(52344)>>2]|0;
 $5 = (((5240 + (($4*92)|0)|0)) + 28|0);
 $6 = +HEAPF32[$5>>2];
 $7 = $6 * 0.5;
 $8 = HEAP32[(3722364)>>2]|0;
 $9 = ($8|0)<(2);
 $10 = $7 <= 0.0;
 $or$cond = $9 | $10;
 if ($or$cond) {
  return;
 }
 $11 = HEAP32[(18402432)>>2]|0;
 $12 = HEAP32[(21548164)>>2]|0;
 $13 = (($8) + -1)|0;
 $14 = ($8|0)>(1);
 if ($14) {
  $index$043 = 0;$ninds$045 = $12;$nverts$044 = $11;
  while(1) {
   $15 = $index$043 | 1;
   $16 = (52348 + (($index$043*28)|0)|0);
   $17 = +HEAPF32[$16>>2];
   $18 = (((52348 + (($index$043*28)|0)|0)) + 4|0);
   $19 = +HEAPF32[$18>>2];
   $20 = (((52348 + (($index$043*28)|0)|0)) + 8|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (((52348 + (($index$043*28)|0)|0)) + 12|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (((52348 + (($index$043*28)|0)|0)) + 16|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = (((52348 + (($index$043*28)|0)|0)) + 20|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (((52348 + (($index$043*28)|0)|0)) + 24|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = (($index$043) + 2)|0;
   $31 = (52348 + (($15*28)|0)|0);
   $32 = +HEAPF32[$31>>2];
   $33 = (((52348 + (($15*28)|0)|0)) + 4|0);
   $34 = +HEAPF32[$33>>2];
   $35 = (((52348 + (($15*28)|0)|0)) + 8|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (((52348 + (($15*28)|0)|0)) + 12|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (((52348 + (($15*28)|0)|0)) + 24|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $32 - $17;
   $42 = $34 - $19;
   $43 = $41 * $41;
   $44 = $42 * $42;
   $45 = $43 + $44;
   $46 = (+Math_sqrt((+$45)));
   $47 = $46 > $6;
   if ($47) {
    $48 = (($ninds$045) + 1)|0;
    $49 = (18402436 + ($ninds$045<<2)|0);
    HEAP32[$49>>2] = $nverts$044;
    $50 = (($nverts$044) + 1)|0;
    $51 = (($ninds$045) + 2)|0;
    $52 = (18402436 + ($48<<2)|0);
    HEAP32[$52>>2] = $50;
    $53 = (($nverts$044) + 3)|0;
    $54 = (($ninds$045) + 3)|0;
    $55 = (18402436 + ($51<<2)|0);
    HEAP32[$55>>2] = $53;
    $56 = (($ninds$045) + 4)|0;
    $57 = (18402436 + ($54<<2)|0);
    HEAP32[$57>>2] = $50;
    $58 = (($nverts$044) + 2)|0;
    $59 = (($ninds$045) + 5)|0;
    $60 = (18402436 + ($56<<2)|0);
    HEAP32[$60>>2] = $58;
    $61 = (($ninds$045) + 6)|0;
    $62 = (18402436 + ($59<<2)|0);
    HEAP32[$62>>2] = $53;
    $63 = 1.0 / $46;
    $64 = $7 * $63;
    $65 = $41 * $64;
    $66 = $42 * $64;
    $67 = (((3722368 + (($nverts$044*28)|0)|0)) + 24|0);
    HEAP32[$67>>2] = $29;
    $68 = $17 + $66;
    $69 = $68 + 0.5;
    $70 = (3722368 + (($nverts$044*28)|0)|0);
    HEAPF32[$70>>2] = $69;
    $71 = $19 - $65;
    $72 = $71 + 0.5;
    $73 = (((3722368 + (($nverts$044*28)|0)|0)) + 4|0);
    HEAPF32[$73>>2] = $72;
    $74 = (((3722368 + (($nverts$044*28)|0)|0)) + 8|0);
    HEAP32[$74>>2] = $21;
    $75 = (((3722368 + (($nverts$044*28)|0)|0)) + 12|0);
    HEAP32[$75>>2] = $23;
    $76 = (((3722368 + (($nverts$044*28)|0)|0)) + 16|0);
    HEAPF32[$76>>2] = 1.0;
    $77 = (((3722368 + (($nverts$044*28)|0)|0)) + 20|0);
    HEAP32[$77>>2] = $27;
    $78 = (((3722368 + (($50*28)|0)|0)) + 24|0);
    HEAP32[$78>>2] = $40;
    $79 = $32 + $66;
    $80 = $79 + 0.5;
    $81 = (3722368 + (($50*28)|0)|0);
    HEAPF32[$81>>2] = $80;
    $82 = $34 - $65;
    $83 = $82 + 0.5;
    $84 = (((3722368 + (($50*28)|0)|0)) + 4|0);
    HEAPF32[$84>>2] = $83;
    $85 = (((3722368 + (($50*28)|0)|0)) + 8|0);
    HEAP32[$85>>2] = $36;
    $86 = (((3722368 + (($50*28)|0)|0)) + 12|0);
    HEAP32[$86>>2] = $38;
    $87 = (((3722368 + (($50*28)|0)|0)) + 16|0);
    HEAPF32[$87>>2] = 1.0;
    $88 = (((3722368 + (($50*28)|0)|0)) + 20|0);
    HEAP32[$88>>2] = $27;
    $89 = (((3722368 + (($58*28)|0)|0)) + 24|0);
    HEAP32[$89>>2] = $40;
    $90 = $32 - $66;
    $91 = $90 + 0.5;
    $92 = (3722368 + (($58*28)|0)|0);
    HEAPF32[$92>>2] = $91;
    $93 = $34 + $65;
    $94 = $93 + 0.5;
    $95 = (((3722368 + (($58*28)|0)|0)) + 4|0);
    HEAPF32[$95>>2] = $94;
    $96 = (((3722368 + (($58*28)|0)|0)) + 8|0);
    HEAP32[$96>>2] = $36;
    $97 = (((3722368 + (($58*28)|0)|0)) + 12|0);
    HEAP32[$97>>2] = $38;
    $98 = (((3722368 + (($58*28)|0)|0)) + 16|0);
    HEAPF32[$98>>2] = 0.0;
    $99 = (((3722368 + (($58*28)|0)|0)) + 20|0);
    HEAP32[$99>>2] = $27;
    $100 = (($nverts$044) + 4)|0;
    $101 = (((3722368 + (($53*28)|0)|0)) + 24|0);
    HEAP32[$101>>2] = $29;
    $102 = $17 - $66;
    $103 = $102 + 0.5;
    $104 = (3722368 + (($53*28)|0)|0);
    HEAPF32[$104>>2] = $103;
    $105 = $19 + $65;
    $106 = $105 + 0.5;
    $107 = (((3722368 + (($53*28)|0)|0)) + 4|0);
    HEAPF32[$107>>2] = $106;
    $108 = (((3722368 + (($53*28)|0)|0)) + 8|0);
    HEAP32[$108>>2] = $21;
    $109 = (((3722368 + (($53*28)|0)|0)) + 12|0);
    HEAP32[$109>>2] = $23;
    $110 = (((3722368 + (($53*28)|0)|0)) + 16|0);
    HEAPF32[$110>>2] = 0.0;
    $111 = (((3722368 + (($53*28)|0)|0)) + 20|0);
    HEAP32[$111>>2] = $27;
    $112 = ($30|0)<($13|0);
    if ($112) {
     $index$043 = $30;$ninds$045 = $61;$nverts$044 = $100;
     continue;
    } else {
     $ninds$0$lcssa = $61;$nverts$0$lcssa = $100;
     break;
    }
   } else {
    $113 = (3722368 + (($nverts$044*28)|0)|0);
    $114 = (((3722368 + (($nverts$044*28)|0)|0)) + 4|0);
    $115 = (((3722368 + (($nverts$044*28)|0)|0)) + 8|0);
    HEAP32[$115>>2] = $21;
    $116 = (((3722368 + (($nverts$044*28)|0)|0)) + 12|0);
    HEAP32[$116>>2] = $23;
    $117 = (((3722368 + (($nverts$044*28)|0)|0)) + 16|0);
    HEAP32[$117>>2] = $25;
    $118 = (((3722368 + (($nverts$044*28)|0)|0)) + 20|0);
    HEAP32[$118>>2] = $27;
    $119 = (((3722368 + (($nverts$044*28)|0)|0)) + 24|0);
    HEAP32[$119>>2] = $29;
    $$sum = (($nverts$044) + 1)|0;
    $120 = (3722368 + (($$sum*28)|0)|0);
    $121 = (((3722368 + (($$sum*28)|0)|0)) + 4|0);
    $122 = (((3722368 + (($$sum*28)|0)|0)) + 8|0);
    HEAP32[$122>>2] = $21;
    $123 = (((3722368 + (($$sum*28)|0)|0)) + 12|0);
    HEAP32[$123>>2] = $23;
    $124 = (((3722368 + (($$sum*28)|0)|0)) + 16|0);
    HEAP32[$124>>2] = $25;
    $125 = (((3722368 + (($$sum*28)|0)|0)) + 20|0);
    HEAP32[$125>>2] = $27;
    $126 = (((3722368 + (($$sum*28)|0)|0)) + 24|0);
    HEAP32[$126>>2] = $29;
    $$sum10 = (($nverts$044) + 2)|0;
    $127 = (3722368 + (($$sum10*28)|0)|0);
    $128 = (((3722368 + (($$sum10*28)|0)|0)) + 4|0);
    $129 = (((3722368 + (($$sum10*28)|0)|0)) + 8|0);
    HEAP32[$129>>2] = $21;
    $130 = (((3722368 + (($$sum10*28)|0)|0)) + 12|0);
    HEAP32[$130>>2] = $23;
    $131 = (((3722368 + (($$sum10*28)|0)|0)) + 16|0);
    HEAP32[$131>>2] = $25;
    $132 = (((3722368 + (($$sum10*28)|0)|0)) + 20|0);
    HEAP32[$132>>2] = $27;
    $133 = (((3722368 + (($$sum10*28)|0)|0)) + 24|0);
    HEAP32[$133>>2] = $29;
    $$sum17 = (($nverts$044) + 3)|0;
    $134 = (3722368 + (($$sum17*28)|0)|0);
    $135 = (((3722368 + (($$sum17*28)|0)|0)) + 4|0);
    $136 = (((3722368 + (($$sum17*28)|0)|0)) + 8|0);
    HEAP32[$136>>2] = $21;
    $137 = (((3722368 + (($$sum17*28)|0)|0)) + 12|0);
    HEAP32[$137>>2] = $23;
    $138 = (((3722368 + (($$sum17*28)|0)|0)) + 16|0);
    HEAP32[$138>>2] = $25;
    $139 = (((3722368 + (($$sum17*28)|0)|0)) + 20|0);
    HEAP32[$139>>2] = $27;
    $140 = (((3722368 + (($$sum17*28)|0)|0)) + 24|0);
    HEAP32[$140>>2] = $29;
    $141 = $17 - $7;
    HEAPF32[$113>>2] = $141;
    $142 = $19 - $7;
    HEAPF32[$114>>2] = $142;
    $143 = $7 + $17;
    HEAPF32[$120>>2] = $143;
    HEAPF32[$121>>2] = $142;
    HEAPF32[$127>>2] = $141;
    $144 = $7 + $19;
    HEAPF32[$128>>2] = $144;
    HEAPF32[$134>>2] = $143;
    HEAPF32[$135>>2] = $144;
    $145 = (($ninds$045) + 1)|0;
    $146 = (18402436 + ($ninds$045<<2)|0);
    HEAP32[$146>>2] = $nverts$044;
    $147 = (($nverts$044) + 1)|0;
    $148 = (($ninds$045) + 2)|0;
    $149 = (18402436 + ($145<<2)|0);
    HEAP32[$149>>2] = $147;
    $150 = (($nverts$044) + 3)|0;
    $151 = (($ninds$045) + 3)|0;
    $152 = (18402436 + ($148<<2)|0);
    HEAP32[$152>>2] = $150;
    $153 = (($ninds$045) + 4)|0;
    $154 = (18402436 + ($151<<2)|0);
    HEAP32[$154>>2] = $147;
    $155 = (($nverts$044) + 2)|0;
    $156 = (($ninds$045) + 5)|0;
    $157 = (18402436 + ($153<<2)|0);
    HEAP32[$157>>2] = $155;
    $158 = (($ninds$045) + 6)|0;
    $159 = (18402436 + ($156<<2)|0);
    HEAP32[$159>>2] = $150;
    $160 = (($nverts$044) + 4)|0;
    $161 = ($30|0)<($13|0);
    if ($161) {
     $index$043 = $30;$ninds$045 = $158;$nverts$044 = $160;
     continue;
    } else {
     $ninds$0$lcssa = $158;$nverts$0$lcssa = $160;
     break;
    }
   }
  }
 } else {
  $ninds$0$lcssa = $12;$nverts$0$lcssa = $11;
 }
 HEAP32[(21548164)>>2] = $ninds$0$lcssa;
 HEAP32[(18402432)>>2] = $nverts$0$lcssa;
 return;
}
function _gfx__emit_triangles() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $index$01 = 0, $ninds$03 = 0, $nverts$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(3722364)>>2]|0;
 _gfx__allocate_batch($0,$0);
 $1 = HEAP32[(3722364)>>2]|0;
 $2 = ($1|0)<(3);
 if ($2) {
  return;
 }
 $3 = HEAP32[(18402432)>>2]|0;
 $4 = HEAP32[(21548164)>>2]|0;
 $5 = (($1) + -3)|0;
 $6 = (($1) + -3)|0;
 $7 = (($6>>>0) % 3)&-1;
 $8 = (($6) - ($7))|0;
 $9 = (($3) + ($8))|0;
 $10 = (($4) + ($8))|0;
 $index$01 = 0;$ninds$03 = $4;$nverts$02 = $3;
 while(1) {
  $11 = (($ninds$03) + 1)|0;
  $12 = (18402436 + ($ninds$03<<2)|0);
  HEAP32[$12>>2] = $nverts$02;
  $13 = (($nverts$02) + 1)|0;
  $14 = (($ninds$03) + 2)|0;
  $15 = (18402436 + ($11<<2)|0);
  HEAP32[$15>>2] = $13;
  $16 = (($nverts$02) + 2)|0;
  $17 = (($ninds$03) + 3)|0;
  $18 = (18402436 + ($14<<2)|0);
  HEAP32[$18>>2] = $16;
  $19 = (3722368 + (($nverts$02*28)|0)|0);
  $20 = (($index$01) + 1)|0;
  $21 = (52348 + (($index$01*28)|0)|0);
  ;HEAP32[$19>>2]=HEAP32[$21>>2]|0;HEAP32[$19+4>>2]=HEAP32[$21+4>>2]|0;HEAP32[$19+8>>2]=HEAP32[$21+8>>2]|0;HEAP32[$19+12>>2]=HEAP32[$21+12>>2]|0;HEAP32[$19+16>>2]=HEAP32[$21+16>>2]|0;HEAP32[$19+20>>2]=HEAP32[$21+20>>2]|0;HEAP32[$19+24>>2]=HEAP32[$21+24>>2]|0;
  $22 = (3722368 + (($13*28)|0)|0);
  $23 = (($index$01) + 2)|0;
  $24 = (52348 + (($20*28)|0)|0);
  ;HEAP32[$22>>2]=HEAP32[$24>>2]|0;HEAP32[$22+4>>2]=HEAP32[$24+4>>2]|0;HEAP32[$22+8>>2]=HEAP32[$24+8>>2]|0;HEAP32[$22+12>>2]=HEAP32[$24+12>>2]|0;HEAP32[$22+16>>2]=HEAP32[$24+16>>2]|0;HEAP32[$22+20>>2]=HEAP32[$24+20>>2]|0;HEAP32[$22+24>>2]=HEAP32[$24+24>>2]|0;
  $25 = (($nverts$02) + 3)|0;
  $26 = (3722368 + (($16*28)|0)|0);
  $27 = (($index$01) + 3)|0;
  $28 = (52348 + (($23*28)|0)|0);
  ;HEAP32[$26>>2]=HEAP32[$28>>2]|0;HEAP32[$26+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$26+8>>2]=HEAP32[$28+8>>2]|0;HEAP32[$26+12>>2]=HEAP32[$28+12>>2]|0;HEAP32[$26+16>>2]=HEAP32[$28+16>>2]|0;HEAP32[$26+20>>2]=HEAP32[$28+20>>2]|0;HEAP32[$26+24>>2]=HEAP32[$28+24>>2]|0;
  $29 = ($27|0)>($5|0);
  if ($29) {
   break;
  } else {
   $index$01 = $27;$ninds$03 = $17;$nverts$02 = $25;
  }
 }
 $30 = (($9) + 3)|0;
 $31 = (($10) + 3)|0;
 HEAP32[(21548164)>>2] = $31;
 HEAP32[(18402432)>>2] = $30;
 return;
}
function _gfx__emit_quads() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $index$01 = 0, $ninds$03 = 0, $nverts$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(3722364)>>2]|0;
 $1 = ($0*6)|0;
 $2 = (($1|0) / 4)&-1;
 _gfx__allocate_batch($2,$0);
 $3 = HEAP32[(3722364)>>2]|0;
 $4 = ($3|0)<(4);
 if ($4) {
  return;
 }
 $5 = HEAP32[(18402432)>>2]|0;
 $6 = HEAP32[(21548164)>>2]|0;
 $7 = (($3) + -4)|0;
 $8 = (($3) + -4)|0;
 $9 = $8 >>> 2;
 $10 = $9 << 2;
 $11 = (($5) + ($10))|0;
 $12 = ($9*6)|0;
 $13 = (($6) + ($12))|0;
 $index$01 = 0;$ninds$03 = $6;$nverts$02 = $5;
 while(1) {
  $14 = (($ninds$03) + 1)|0;
  $15 = (18402436 + ($ninds$03<<2)|0);
  HEAP32[$15>>2] = $nverts$02;
  $16 = (($nverts$02) + 1)|0;
  $17 = (($ninds$03) + 2)|0;
  $18 = (18402436 + ($14<<2)|0);
  HEAP32[$18>>2] = $16;
  $19 = (($nverts$02) + 2)|0;
  $20 = (($ninds$03) + 3)|0;
  $21 = (18402436 + ($17<<2)|0);
  HEAP32[$21>>2] = $19;
  $22 = (($ninds$03) + 4)|0;
  $23 = (18402436 + ($20<<2)|0);
  HEAP32[$23>>2] = $nverts$02;
  $24 = (($ninds$03) + 5)|0;
  $25 = (18402436 + ($22<<2)|0);
  HEAP32[$25>>2] = $19;
  $26 = (($nverts$02) + 3)|0;
  $27 = (($ninds$03) + 6)|0;
  $28 = (18402436 + ($24<<2)|0);
  HEAP32[$28>>2] = $26;
  $29 = (3722368 + (($nverts$02*28)|0)|0);
  $30 = $index$01 | 1;
  $31 = (52348 + (($index$01*28)|0)|0);
  ;HEAP32[$29>>2]=HEAP32[$31>>2]|0;HEAP32[$29+4>>2]=HEAP32[$31+4>>2]|0;HEAP32[$29+8>>2]=HEAP32[$31+8>>2]|0;HEAP32[$29+12>>2]=HEAP32[$31+12>>2]|0;HEAP32[$29+16>>2]=HEAP32[$31+16>>2]|0;HEAP32[$29+20>>2]=HEAP32[$31+20>>2]|0;HEAP32[$29+24>>2]=HEAP32[$31+24>>2]|0;
  $32 = (3722368 + (($16*28)|0)|0);
  $33 = $index$01 | 2;
  $34 = (52348 + (($30*28)|0)|0);
  ;HEAP32[$32>>2]=HEAP32[$34>>2]|0;HEAP32[$32+4>>2]=HEAP32[$34+4>>2]|0;HEAP32[$32+8>>2]=HEAP32[$34+8>>2]|0;HEAP32[$32+12>>2]=HEAP32[$34+12>>2]|0;HEAP32[$32+16>>2]=HEAP32[$34+16>>2]|0;HEAP32[$32+20>>2]=HEAP32[$34+20>>2]|0;HEAP32[$32+24>>2]=HEAP32[$34+24>>2]|0;
  $35 = (3722368 + (($19*28)|0)|0);
  $36 = $index$01 | 3;
  $37 = (52348 + (($33*28)|0)|0);
  ;HEAP32[$35>>2]=HEAP32[$37>>2]|0;HEAP32[$35+4>>2]=HEAP32[$37+4>>2]|0;HEAP32[$35+8>>2]=HEAP32[$37+8>>2]|0;HEAP32[$35+12>>2]=HEAP32[$37+12>>2]|0;HEAP32[$35+16>>2]=HEAP32[$37+16>>2]|0;HEAP32[$35+20>>2]=HEAP32[$37+20>>2]|0;HEAP32[$35+24>>2]=HEAP32[$37+24>>2]|0;
  $38 = (($nverts$02) + 4)|0;
  $39 = (3722368 + (($26*28)|0)|0);
  $40 = (($index$01) + 4)|0;
  $41 = (52348 + (($36*28)|0)|0);
  ;HEAP32[$39>>2]=HEAP32[$41>>2]|0;HEAP32[$39+4>>2]=HEAP32[$41+4>>2]|0;HEAP32[$39+8>>2]=HEAP32[$41+8>>2]|0;HEAP32[$39+12>>2]=HEAP32[$41+12>>2]|0;HEAP32[$39+16>>2]=HEAP32[$41+16>>2]|0;HEAP32[$39+20>>2]=HEAP32[$41+20>>2]|0;HEAP32[$39+24>>2]=HEAP32[$41+24>>2]|0;
  $42 = ($40|0)>($7|0);
  if ($42) {
   break;
  } else {
   $index$01 = $40;$ninds$03 = $27;$nverts$02 = $38;
  }
 }
 $43 = (($11) + 4)|0;
 $44 = (($13) + 6)|0;
 HEAP32[(21548164)>>2] = $44;
 HEAP32[(18402432)>>2] = $43;
 return;
}
function _gfx__emit_strip() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $index$0$be = 0, $index$01 = 0, $ninds$0$be = 0, $ninds$0$lcssa = 0, $ninds$03 = 0, $nverts$0$be = 0, $nverts$0$lcssa = 0, $nverts$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(3722364)>>2]|0;
 $1 = ($0*3)|0;
 $2 = (($1) + -6)|0;
 _gfx__allocate_batch($2,$0);
 $3 = HEAP32[(3722364)>>2]|0;
 $4 = HEAP32[(21548164)>>2]|0;
 $5 = HEAP32[(18402432)>>2]|0;
 $6 = ($3|0)<(3);
 if ($6) {
  return;
 }
 $7 = (($4) + 1)|0;
 $8 = (18402436 + ($4<<2)|0);
 HEAP32[$8>>2] = $5;
 $9 = (($5) + 1)|0;
 $10 = (($4) + 2)|0;
 $11 = (18402436 + ($7<<2)|0);
 HEAP32[$11>>2] = $9;
 $12 = (($5) + 2)|0;
 $13 = (($4) + 3)|0;
 $14 = (18402436 + ($10<<2)|0);
 HEAP32[$14>>2] = $12;
 $15 = (3722368 + (($5*28)|0)|0);
 ;HEAP32[$15>>2]=HEAP32[(52348)>>2]|0;HEAP32[$15+4>>2]=HEAP32[(52348)+4>>2]|0;HEAP32[$15+8>>2]=HEAP32[(52348)+8>>2]|0;HEAP32[$15+12>>2]=HEAP32[(52348)+12>>2]|0;HEAP32[$15+16>>2]=HEAP32[(52348)+16>>2]|0;HEAP32[$15+20>>2]=HEAP32[(52348)+20>>2]|0;HEAP32[$15+24>>2]=HEAP32[(52348)+24>>2]|0;
 $16 = (3722368 + (($9*28)|0)|0);
 ;HEAP32[$16>>2]=HEAP32[(52376)>>2]|0;HEAP32[$16+4>>2]=HEAP32[(52376)+4>>2]|0;HEAP32[$16+8>>2]=HEAP32[(52376)+8>>2]|0;HEAP32[$16+12>>2]=HEAP32[(52376)+12>>2]|0;HEAP32[$16+16>>2]=HEAP32[(52376)+16>>2]|0;HEAP32[$16+20>>2]=HEAP32[(52376)+20>>2]|0;HEAP32[$16+24>>2]=HEAP32[(52376)+24>>2]|0;
 $17 = (($5) + 3)|0;
 $18 = (3722368 + (($12*28)|0)|0);
 ;HEAP32[$18>>2]=HEAP32[(52404)>>2]|0;HEAP32[$18+4>>2]=HEAP32[(52404)+4>>2]|0;HEAP32[$18+8>>2]=HEAP32[(52404)+8>>2]|0;HEAP32[$18+12>>2]=HEAP32[(52404)+12>>2]|0;HEAP32[$18+16>>2]=HEAP32[(52404)+16>>2]|0;HEAP32[$18+20>>2]=HEAP32[(52404)+20>>2]|0;HEAP32[$18+24>>2]=HEAP32[(52404)+24>>2]|0;
 $19 = ($3|0)>(3);
 if ($19) {
  $index$01 = 3;$ninds$03 = $13;$nverts$02 = $17;
  while(1) {
   $20 = (($nverts$02) + -1)|0;
   $21 = (($ninds$03) + 1)|0;
   $22 = (18402436 + ($ninds$03<<2)|0);
   HEAP32[$22>>2] = $20;
   $23 = (($nverts$02) + -2)|0;
   $24 = (($ninds$03) + 2)|0;
   $25 = (18402436 + ($21<<2)|0);
   HEAP32[$25>>2] = $23;
   $26 = (($ninds$03) + 3)|0;
   $27 = (18402436 + ($24<<2)|0);
   HEAP32[$27>>2] = $nverts$02;
   $28 = (($nverts$02) + 1)|0;
   $29 = (3722368 + (($nverts$02*28)|0)|0);
   $30 = (($index$01) + 1)|0;
   $31 = (52348 + (($index$01*28)|0)|0);
   ;HEAP32[$29>>2]=HEAP32[$31>>2]|0;HEAP32[$29+4>>2]=HEAP32[$31+4>>2]|0;HEAP32[$29+8>>2]=HEAP32[$31+8>>2]|0;HEAP32[$29+12>>2]=HEAP32[$31+12>>2]|0;HEAP32[$29+16>>2]=HEAP32[$31+16>>2]|0;HEAP32[$29+20>>2]=HEAP32[$31+20>>2]|0;HEAP32[$29+24>>2]=HEAP32[$31+24>>2]|0;
   $32 = ($30|0)<($3|0);
   if ($32) {
    $33 = (($ninds$03) + 4)|0;
    $34 = (18402436 + ($26<<2)|0);
    HEAP32[$34>>2] = $20;
    $35 = (($ninds$03) + 5)|0;
    $36 = (18402436 + ($33<<2)|0);
    HEAP32[$36>>2] = $nverts$02;
    $37 = (($ninds$03) + 6)|0;
    $38 = (18402436 + ($35<<2)|0);
    HEAP32[$38>>2] = $28;
    $39 = (($nverts$02) + 2)|0;
    $40 = (3722368 + (($28*28)|0)|0);
    $41 = (($index$01) + 2)|0;
    $42 = (52348 + (($30*28)|0)|0);
    ;HEAP32[$40>>2]=HEAP32[$42>>2]|0;HEAP32[$40+4>>2]=HEAP32[$42+4>>2]|0;HEAP32[$40+8>>2]=HEAP32[$42+8>>2]|0;HEAP32[$40+12>>2]=HEAP32[$42+12>>2]|0;HEAP32[$40+16>>2]=HEAP32[$42+16>>2]|0;HEAP32[$40+20>>2]=HEAP32[$42+20>>2]|0;HEAP32[$40+24>>2]=HEAP32[$42+24>>2]|0;
    $index$0$be = $41;$ninds$0$be = $37;$nverts$0$be = $39;
   } else {
    $index$0$be = $30;$ninds$0$be = $26;$nverts$0$be = $28;
   }
   $43 = ($index$0$be|0)<($3|0);
   if ($43) {
    $index$01 = $index$0$be;$ninds$03 = $ninds$0$be;$nverts$02 = $nverts$0$be;
   } else {
    $ninds$0$lcssa = $ninds$0$be;$nverts$0$lcssa = $nverts$0$be;
    break;
   }
  }
 } else {
  $ninds$0$lcssa = $13;$nverts$0$lcssa = $17;
 }
 HEAP32[(21548164)>>2] = $ninds$0$lcssa;
 HEAP32[(18402432)>>2] = $nverts$0$lcssa;
 return;
}
function _gfx__emit_fan() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $index$02 = 0, $ninds$0 = 0, $ninds$0$in4 = 0, $ninds$0$in4$phi = 0, $ninds$0$lcssa = 0, $ninds$01 = 0;
 var $ninds$05 = 0, $nverts$0$lcssa = 0, $nverts$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(3722364)>>2]|0;
 $1 = ($0*3)|0;
 $2 = (($1) + -6)|0;
 _gfx__allocate_batch($2,$0);
 $3 = HEAP32[(3722364)>>2]|0;
 $4 = HEAP32[(21548164)>>2]|0;
 $5 = HEAP32[(18402432)>>2]|0;
 $6 = ($3|0)<(3);
 if ($6) {
  return;
 }
 $7 = (($4) + 1)|0;
 $8 = (18402436 + ($4<<2)|0);
 HEAP32[$8>>2] = $5;
 $9 = (($5) + 1)|0;
 $10 = (($4) + 2)|0;
 $11 = (18402436 + ($7<<2)|0);
 HEAP32[$11>>2] = $9;
 $12 = (($5) + 2)|0;
 $13 = (18402436 + ($10<<2)|0);
 HEAP32[$13>>2] = $12;
 $14 = (3722368 + (($5*28)|0)|0);
 ;HEAP32[$14>>2]=HEAP32[(52348)>>2]|0;HEAP32[$14+4>>2]=HEAP32[(52348)+4>>2]|0;HEAP32[$14+8>>2]=HEAP32[(52348)+8>>2]|0;HEAP32[$14+12>>2]=HEAP32[(52348)+12>>2]|0;HEAP32[$14+16>>2]=HEAP32[(52348)+16>>2]|0;HEAP32[$14+20>>2]=HEAP32[(52348)+20>>2]|0;HEAP32[$14+24>>2]=HEAP32[(52348)+24>>2]|0;
 $15 = (3722368 + (($9*28)|0)|0);
 ;HEAP32[$15>>2]=HEAP32[(52376)>>2]|0;HEAP32[$15+4>>2]=HEAP32[(52376)+4>>2]|0;HEAP32[$15+8>>2]=HEAP32[(52376)+8>>2]|0;HEAP32[$15+12>>2]=HEAP32[(52376)+12>>2]|0;HEAP32[$15+16>>2]=HEAP32[(52376)+16>>2]|0;HEAP32[$15+20>>2]=HEAP32[(52376)+20>>2]|0;HEAP32[$15+24>>2]=HEAP32[(52376)+24>>2]|0;
 $16 = (($5) + 3)|0;
 $17 = (3722368 + (($12*28)|0)|0);
 ;HEAP32[$17>>2]=HEAP32[(52404)>>2]|0;HEAP32[$17+4>>2]=HEAP32[(52404)+4>>2]|0;HEAP32[$17+8>>2]=HEAP32[(52404)+8>>2]|0;HEAP32[$17+12>>2]=HEAP32[(52404)+12>>2]|0;HEAP32[$17+16>>2]=HEAP32[(52404)+16>>2]|0;HEAP32[$17+20>>2]=HEAP32[(52404)+20>>2]|0;HEAP32[$17+24>>2]=HEAP32[(52404)+24>>2]|0;
 $ninds$01 = (($4) + 3)|0;
 $18 = ($3|0)>(3);
 if ($18) {
  $19 = ($3*3)|0;
  $20 = (($4) + ($19))|0;
  $21 = (($20) + -6)|0;
  $index$02 = 3;$ninds$0$in4 = $4;$ninds$05 = $ninds$01;$nverts$03 = $16;
  while(1) {
   $22 = (($ninds$0$in4) + 4)|0;
   $23 = (18402436 + ($ninds$05<<2)|0);
   HEAP32[$23>>2] = $5;
   $24 = (($nverts$03) + -1)|0;
   $25 = (($ninds$0$in4) + 5)|0;
   $26 = (18402436 + ($22<<2)|0);
   HEAP32[$26>>2] = $24;
   $27 = (18402436 + ($25<<2)|0);
   HEAP32[$27>>2] = $nverts$03;
   $28 = (($nverts$03) + 1)|0;
   $29 = (3722368 + (($nverts$03*28)|0)|0);
   $30 = (($index$02) + 1)|0;
   $31 = (52348 + (($index$02*28)|0)|0);
   ;HEAP32[$29>>2]=HEAP32[$31>>2]|0;HEAP32[$29+4>>2]=HEAP32[$31+4>>2]|0;HEAP32[$29+8>>2]=HEAP32[$31+8>>2]|0;HEAP32[$29+12>>2]=HEAP32[$31+12>>2]|0;HEAP32[$29+16>>2]=HEAP32[$31+16>>2]|0;HEAP32[$29+20>>2]=HEAP32[$31+20>>2]|0;HEAP32[$29+24>>2]=HEAP32[$31+24>>2]|0;
   $ninds$0 = (($ninds$05) + 3)|0;
   $exitcond = ($30|0)==($3|0);
   if ($exitcond) {
    break;
   } else {
    $ninds$0$in4$phi = $ninds$05;$index$02 = $30;$ninds$05 = $ninds$0;$nverts$03 = $28;$ninds$0$in4 = $ninds$0$in4$phi;
   }
  }
  $32 = (($3) + ($5))|0;
  $ninds$0$lcssa = $21;$nverts$0$lcssa = $32;
 } else {
  $ninds$0$lcssa = $ninds$01;$nverts$0$lcssa = $16;
 }
 HEAP32[(21548164)>>2] = $ninds$0$lcssa;
 HEAP32[(18402432)>>2] = $nverts$0$lcssa;
 return;
}
function _gfx__emit_points() {
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond = 0, $index$02 = 0, $inds$05 = 0, $ninds$0$lcssa = 0, $nverts$0$lcssa = 0, $nverts$03 = 0, $v$sroa$8 = 0, $verts$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $v$sroa$8 = sp;
 $0 = HEAP32[(3722364)>>2]|0;
 $1 = ($0*6)|0;
 $2 = $0 << 2;
 _gfx__allocate_batch($1,$2);
 $3 = HEAP32[(3722364)>>2]|0;
 $4 = HEAP32[(21548164)>>2]|0;
 $5 = HEAP32[(18402432)>>2]|0;
 $6 = ($3|0)>(0);
 if (!($6)) {
  $ninds$0$lcssa = $4;$nverts$0$lcssa = $5;
  HEAP32[(21548164)>>2] = $ninds$0$lcssa;
  HEAP32[(18402432)>>2] = $nverts$0$lcssa;
  STACKTOP = sp;return;
 }
 $7 = ($3*6)|0;
 $8 = $3 << 2;
 $index$02 = 0;$inds$05 = (18402436);$nverts$03 = $5;$verts$01 = (3722368);
 while(1) {
  $9 = (52348 + (($index$02*28)|0)|0);
  $10 = +HEAPF32[$9>>2];
  $11 = (((52348 + (($index$02*28)|0)|0)) + 4|0);
  $12 = +HEAPF32[$11>>2];
  $13 = (((52348 + (($index$02*28)|0)|0)) + 8|0);
  ;HEAP32[$v$sroa$8>>2]=HEAP32[$13>>2]|0;HEAP32[$v$sroa$8+4>>2]=HEAP32[$13+4>>2]|0;HEAP32[$v$sroa$8+8>>2]=HEAP32[$13+8>>2]|0;HEAP32[$v$sroa$8+12>>2]=HEAP32[$13+12>>2]|0;HEAP32[$v$sroa$8+16>>2]=HEAP32[$13+16>>2]|0;
  HEAPF32[$verts$01>>2] = $10;
  $14 = ((($verts$01)) + 4|0);
  HEAPF32[$14>>2] = $12;
  $15 = ((($verts$01)) + 8|0);
  ;HEAP32[$15>>2]=HEAP32[$v$sroa$8>>2]|0;HEAP32[$15+4>>2]=HEAP32[$v$sroa$8+4>>2]|0;HEAP32[$15+8>>2]=HEAP32[$v$sroa$8+8>>2]|0;HEAP32[$15+12>>2]=HEAP32[$v$sroa$8+12>>2]|0;HEAP32[$15+16>>2]=HEAP32[$v$sroa$8+16>>2]|0;
  $16 = $10 + 1.0;
  $17 = ((($verts$01)) + 28|0);
  HEAPF32[$17>>2] = $16;
  $18 = ((($verts$01)) + 32|0);
  HEAPF32[$18>>2] = $12;
  $19 = ((($verts$01)) + 36|0);
  ;HEAP32[$19>>2]=HEAP32[$v$sroa$8>>2]|0;HEAP32[$19+4>>2]=HEAP32[$v$sroa$8+4>>2]|0;HEAP32[$19+8>>2]=HEAP32[$v$sroa$8+8>>2]|0;HEAP32[$19+12>>2]=HEAP32[$v$sroa$8+12>>2]|0;HEAP32[$19+16>>2]=HEAP32[$v$sroa$8+16>>2]|0;
  $20 = $12 + 1.0;
  $21 = ((($verts$01)) + 56|0);
  HEAPF32[$21>>2] = $16;
  $22 = ((($verts$01)) + 60|0);
  HEAPF32[$22>>2] = $20;
  $23 = ((($verts$01)) + 64|0);
  ;HEAP32[$23>>2]=HEAP32[$v$sroa$8>>2]|0;HEAP32[$23+4>>2]=HEAP32[$v$sroa$8+4>>2]|0;HEAP32[$23+8>>2]=HEAP32[$v$sroa$8+8>>2]|0;HEAP32[$23+12>>2]=HEAP32[$v$sroa$8+12>>2]|0;HEAP32[$23+16>>2]=HEAP32[$v$sroa$8+16>>2]|0;
  $24 = ((($verts$01)) + 84|0);
  HEAPF32[$24>>2] = $10;
  $25 = ((($verts$01)) + 88|0);
  HEAPF32[$25>>2] = $20;
  $26 = ((($verts$01)) + 92|0);
  ;HEAP32[$26>>2]=HEAP32[$v$sroa$8>>2]|0;HEAP32[$26+4>>2]=HEAP32[$v$sroa$8+4>>2]|0;HEAP32[$26+8>>2]=HEAP32[$v$sroa$8+8>>2]|0;HEAP32[$26+12>>2]=HEAP32[$v$sroa$8+12>>2]|0;HEAP32[$26+16>>2]=HEAP32[$v$sroa$8+16>>2]|0;
  HEAP32[$inds$05>>2] = $nverts$03;
  $27 = (($nverts$03) + 1)|0;
  $28 = ((($inds$05)) + 4|0);
  HEAP32[$28>>2] = $27;
  $29 = (($nverts$03) + 3)|0;
  $30 = ((($inds$05)) + 8|0);
  HEAP32[$30>>2] = $29;
  $31 = ((($inds$05)) + 12|0);
  HEAP32[$31>>2] = $27;
  $32 = (($nverts$03) + 2)|0;
  $33 = ((($inds$05)) + 16|0);
  HEAP32[$33>>2] = $32;
  $34 = ((($inds$05)) + 20|0);
  HEAP32[$34>>2] = $29;
  $35 = ((($verts$01)) + 112|0);
  $36 = ((($inds$05)) + 24|0);
  $37 = (($nverts$03) + 4)|0;
  $38 = (($index$02) + 1)|0;
  $exitcond = ($38|0)==($3|0);
  if ($exitcond) {
   break;
  } else {
   $index$02 = $38;$inds$05 = $36;$nverts$03 = $37;$verts$01 = $35;
  }
 }
 $39 = (($4) + ($7))|0;
 $40 = (($5) + ($8))|0;
 $ninds$0$lcssa = $39;$nverts$0$lcssa = $40;
 HEAP32[(21548164)>>2] = $ninds$0$lcssa;
 HEAP32[(18402432)>>2] = $nverts$0$lcssa;
 STACKTOP = sp;return;
}
function _gfx__push_texture($id) {
 $id = $id|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa17 = 0, $$lcssa18 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $i$0 = 0, $i$0$lcssa16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _gfx__get_opengl();
 $i$0 = 0;
 while(1) {
  $0 = ($i$0|0)<(8192);
  if (!($0)) {
   label = 6;
   break;
  }
  $1 = (21548424 + (($i$0*28)|0)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = $2 & 4096;
  $4 = ($3|0)==(0);
  $5 = (($i$0) + 1)|0;
  if ($4) {
   $$lcssa = $1;$$lcssa17 = $1;$$lcssa18 = $5;$i$0$lcssa16 = $i$0;
   break;
  } else {
   $i$0 = $5;
  }
 }
 if ((label|0) == 6) {
  HEAP32[$id>>2] = 0;
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$id>>2] = $$lcssa18;
 HEAP32[$$lcssa17>>2] = 4096;
 $6 = (((21548424 + (($i$0$lcssa16*28)|0)|0)) + 24|0);
 HEAP32[$6>>2] = 0;
 $7 = HEAP32[(21777800)>>2]|0;
 $8 = ($7|0)>($i$0$lcssa16|0);
 if ($8) {
  $$0 = $$lcssa;
  return ($$0|0);
 }
 HEAP32[(21777800)>>2] = $$lcssa18;
 $$0 = $$lcssa;
 return ($$0|0);
}
function _gfx__load_shader($shader,$fs) {
 $shader = $shader|0;
 $fs = $fs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $endptr = 0, $endptr2 = 0, $endptr4 = 0, $strlen = 0, $strlen1 = 0, $strlen3 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc(378)|0);
 $1 = (_strlen($fs)|0);
 $2 = (($1) + 1475)|0;
 $3 = (_malloc($2)|0);
 HEAP8[$0>>0] = 0;
 HEAP8[$3>>0] = 0;
 $strlen = (_strlen($0)|0);
 $endptr = (($0) + ($strlen)|0);
 _memcpy(($endptr|0),(22108248|0),240)|0;
 $strlen1 = (_strlen($0)|0);
 $endptr2 = (($0) + ($strlen1)|0);
 _memcpy(($endptr2|0),(22108488|0),138)|0;
 $strlen3 = (_strlen($3)|0);
 $endptr4 = (($3) + ($strlen3)|0);
 _memcpy(($endptr4|0),(22108626|0),1474)|0;
 (_strcat($3,$fs)|0);
 _gfx__get_opengl();
 $4 = HEAP32[(22105540)>>2]|0;
 $5 = (FUNCTION_TABLE_i[$4 & 3]()|0);
 _gfx__load_shader_into($5,$0,$3);
 $6 = ((($shader)) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[(22105596)>>2]|0;
 $8 = (FUNCTION_TABLE_iii[$7 & 3]($5,22110100)|0);
 $9 = ((($shader)) + 8|0);
 HEAP32[$9>>2] = $8;
 $10 = HEAP32[(22105596)>>2]|0;
 $11 = HEAP32[$6>>2]|0;
 $12 = (FUNCTION_TABLE_iii[$10 & 3]($11,22110111)|0);
 $13 = ((($shader)) + 12|0);
 HEAP32[$13>>2] = $12;
 $14 = HEAP32[(22105596)>>2]|0;
 $15 = HEAP32[$6>>2]|0;
 $16 = (FUNCTION_TABLE_iii[$14 & 3]($15,22110120)|0);
 $17 = ((($shader)) + 16|0);
 HEAP32[$17>>2] = $16;
 $18 = HEAP32[(22105596)>>2]|0;
 $19 = HEAP32[$6>>2]|0;
 $20 = (FUNCTION_TABLE_iii[$18 & 3]($19,22110126)|0);
 $21 = ((($shader)) + 20|0);
 HEAP32[$21>>2] = $20;
 $22 = HEAP32[(22105592)>>2]|0;
 $23 = HEAP32[$6>>2]|0;
 $24 = (FUNCTION_TABLE_iii[$22 & 3]($23,22110138)|0);
 $25 = ((($shader)) + 24|0);
 HEAP32[$25>>2] = $24;
 $26 = HEAP32[(22105592)>>2]|0;
 $27 = HEAP32[$6>>2]|0;
 $28 = (FUNCTION_TABLE_iii[$26 & 3]($27,22110148)|0);
 $29 = ((($shader)) + 28|0);
 HEAP32[$29>>2] = $28;
 $30 = HEAP32[(22105592)>>2]|0;
 $31 = HEAP32[$6>>2]|0;
 $32 = (FUNCTION_TABLE_iii[$30 & 3]($31,22110158)|0);
 $33 = ((($shader)) + 32|0);
 HEAP32[$33>>2] = $32;
 _free($0);
 _free($3);
 return;
}
function _gfx__push_shader($id) {
 $id = $id|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa17 = 0, $$lcssa18 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $i$0 = 0, $i$0$lcssa16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _gfx__get_opengl();
 $i$0 = 0;
 while(1) {
  $0 = ($i$0|0)<(8192);
  if (!($0)) {
   label = 6;
   break;
  }
  $1 = (21777804 + (($i$0*40)|0)|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = $2 & 4096;
  $4 = ($3|0)==(0);
  $5 = (($i$0) + 1)|0;
  if ($4) {
   $$lcssa = $1;$$lcssa17 = $1;$$lcssa18 = $5;$i$0$lcssa16 = $i$0;
   break;
  } else {
   $i$0 = $5;
  }
 }
 if ((label|0) == 6) {
  HEAP32[$id>>2] = 0;
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$id>>2] = $$lcssa18;
 HEAP32[$$lcssa17>>2] = 4096;
 $6 = HEAP32[(22105484)>>2]|0;
 $7 = ($6|0)>($i$0$lcssa16|0);
 if ($7) {
  $$0 = $$lcssa;
  return ($$0|0);
 }
 HEAP32[(22105484)>>2] = $$lcssa18;
 $$0 = $$lcssa;
 return ($$0|0);
}
function _gfx__get_shader($id) {
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($id|0)==(0);
 if ($0) {
  $3 = 0;
  return ($3|0);
 }
 $1 = (($id) + -1)|0;
 _gfx__get_opengl();
 $2 = (21777804 + (($1*40)|0)|0);
 $3 = $2;
 return ($3|0);
}
function _nsvg__parseContent($s,$contentCb,$ud) {
 $s = $s|0;
 $contentCb = $contentCb|0;
 $ud = $ud|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$s>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $$0$lcssa = $s;
  } else {
   $$02 = $s;$2 = $0;
   while(1) {
    $3 = (_nsvg__isspace($2)|0);
    $4 = ($3|0)==(0);
    if ($4) {
     $$0$lcssa = $$02;
     break L1;
    }
    $5 = ((($$02)) + 1|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==(0);
    if ($7) {
     $$0$lcssa = $5;
     break;
    } else {
     $$02 = $5;$2 = $6;
    }
   }
  }
 } while(0);
 $8 = HEAP8[$$0$lcssa>>0]|0;
 $9 = ($8<<24>>24)!=(0);
 $10 = ($contentCb|0)!=(0|0);
 $or$cond = $10 & $9;
 if (!($or$cond)) {
  return;
 }
 FUNCTION_TABLE_vii[$contentCb & 63]($ud,$$0$lcssa);
 return;
}
function _nsvg__parseElement($s,$startelCb,$endelCb,$ud) {
 $s = $s|0;
 $startelCb = $startelCb|0;
 $endelCb = $endelCb|0;
 $ud = $ud|0;
 var $$ = 0, $$0$lcssa = 0, $$044 = 0, $$1 = 0, $$241 = 0, $$241$lcssa = 0, $$3 = 0, $$3$ph21 = 0, $$436 = 0, $$436$lcssa = 0, $$436$lcssa$lcssa123 = 0, $$538 = 0, $$538$lcssa = 0, $$6 = 0, $$6$lcssa125 = 0, $$7 = 0, $$8 = 0, $$8$lcssa = 0, $$lcssa127 = 0, $$lcssa130 = 0;
 var $$pr = 0, $$pr16 = 0, $$pr17 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $52$phi = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $attr = 0, $end$0 = 0, $end$1 = 0, $end$1$ph106 = 0, $nattr$0$ph = 0, $nattr$0$ph$lcssa131 = 0, $nattr$0$ph134 = 0, $not$ = 0, $or$cond = 0, $or$cond4 = 0, $or$cond6 = 0;
 var $or$cond8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024|0;
 $attr = sp;
 $0 = HEAP8[$s>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $$0$lcssa = $s;
  } else {
   $$044 = $s;$2 = $0;
   while(1) {
    $3 = (_nsvg__isspace($2)|0);
    $4 = ($3|0)==(0);
    if ($4) {
     $$0$lcssa = $$044;
     break L1;
    }
    $5 = ((($$044)) + 1|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==(0);
    if ($7) {
     $$0$lcssa = $5;
     break;
    } else {
     $$044 = $5;$2 = $6;
    }
   }
  }
 } while(0);
 $8 = HEAP8[$$0$lcssa>>0]|0;
 $9 = ($8<<24>>24)==(47);
 $10 = ((($$0$lcssa)) + 1|0);
 $end$0 = $9&1;
 $$1 = $9 ? $10 : $$0$lcssa;
 $11 = HEAP8[$$1>>0]|0;
 switch ($11<<24>>24) {
 case 33: case 63: case 0:  {
  STACKTOP = sp;return;
  break;
 }
 default: {
 }
 }
 $12 = HEAP8[$$1>>0]|0;
 $13 = ($12<<24>>24)==(0);
 L9: do {
  if ($13) {
   $$3$ph21 = $$1;$nattr$0$ph = 0;
  } else {
   $$241 = $$1;$14 = $12;
   while(1) {
    $15 = (_nsvg__isspace($14)|0);
    $16 = ($15|0)==(0);
    if (!($16)) {
     $$241$lcssa = $$241;
     break;
    }
    $17 = ((($$241)) + 1|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)==(0);
    if ($19) {
     $$3$ph21 = $17;$nattr$0$ph = 0;
     break L9;
    } else {
     $$241 = $17;$14 = $18;
    }
   }
   $$pr = HEAP8[$$241$lcssa>>0]|0;
   $20 = ($$pr<<24>>24)==(0);
   if ($20) {
    $$3$ph21 = $$241$lcssa;$nattr$0$ph = 0;
   } else {
    $21 = ((($$241$lcssa)) + 1|0);
    HEAP8[$$241$lcssa>>0] = 0;
    $$3$ph21 = $21;$nattr$0$ph = 0;
   }
  }
 } while(0);
 L15: while(1) {
  $22 = ($nattr$0$ph|0)<(253);
  $$3 = $$3$ph21;
  while(1) {
   if ($9) {
    $end$1 = 1;$nattr$0$ph134 = $nattr$0$ph;
    break L15;
   }
   $23 = HEAP8[$$3>>0]|0;
   $24 = ($23<<24>>24)!=(0);
   $or$cond8 = $22 & $24;
   if (!($or$cond8)) {
    $end$1 = 0;$nattr$0$ph134 = $nattr$0$ph;
    break L15;
   }
   $25 = HEAP8[$$3>>0]|0;
   $26 = ($25<<24>>24)==(0);
   if ($26) {
    $end$1$ph106 = $end$0;$nattr$0$ph$lcssa131 = $nattr$0$ph;
    label = 30;
    break L15;
   } else {
    $$436 = $$3;$27 = $25;
   }
   while(1) {
    $28 = (_nsvg__isspace($27)|0);
    $29 = ($28|0)==(0);
    if ($29) {
     $$436$lcssa = $$436;
     break;
    }
    $30 = ((($$436)) + 1|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = ($31<<24>>24)==(0);
    if ($32) {
     $end$1 = $end$0;$nattr$0$ph134 = $nattr$0$ph;
     break L15;
    } else {
     $$436 = $30;$27 = $31;
    }
   }
   $$pr16 = HEAP8[$$436$lcssa>>0]|0;
   switch ($$pr16<<24>>24) {
   case 0:  {
    $end$1 = $end$0;$nattr$0$ph134 = $nattr$0$ph;
    break L15;
    break;
   }
   case 47:  {
    $end$1$ph106 = 1;$nattr$0$ph$lcssa131 = $nattr$0$ph;
    label = 30;
    break L15;
    break;
   }
   default: {
   }
   }
   $33 = HEAP8[$$436$lcssa>>0]|0;
   $34 = ($33<<24>>24)==(0);
   L26: do {
    if ($34) {
     $$6 = $$436$lcssa;
    } else {
     $$538 = $$436$lcssa;$35 = $33;
     while(1) {
      $36 = (_nsvg__isspace($35)|0);
      $37 = ($36|0)==(0);
      $38 = ($35<<24>>24)!=(61);
      $or$cond = $38 & $37;
      if (!($or$cond)) {
       $$538$lcssa = $$538;
       break;
      }
      $39 = ((($$538)) + 1|0);
      $40 = HEAP8[$39>>0]|0;
      $41 = ($40<<24>>24)==(0);
      if ($41) {
       $$6 = $39;
       break L26;
      } else {
       $$538 = $39;$35 = $40;
      }
     }
     $$pr17 = HEAP8[$$538$lcssa>>0]|0;
     $42 = ($$pr17<<24>>24)==(0);
     if ($42) {
      $$6 = $$538$lcssa;
     } else {
      $43 = ((($$538$lcssa)) + 1|0);
      HEAP8[$$538$lcssa>>0] = 0;
      $$6 = $43;
     }
    }
   } while(0);
   L32: while(1) {
    $44 = HEAP8[$$6>>0]|0;
    switch ($44<<24>>24) {
    case 0:  {
     $end$1 = $end$0;$nattr$0$ph134 = $nattr$0$ph;
     break L15;
     break;
    }
    case 39: case 34:  {
     $$6$lcssa125 = $$6;$$lcssa127 = $44;
     break L32;
     break;
    }
    default: {
    }
    }
    $45 = ((($$6)) + 1|0);
    $$6 = $45;
   }
   $46 = ((($$6$lcssa125)) + 1|0);
   $$7 = $46;$52 = $$6$lcssa125;
   while(1) {
    $47 = HEAP8[$$7>>0]|0;
    $48 = ($47<<24>>24)==(0);
    $49 = ($47<<24>>24)!=($$lcssa127<<24>>24);
    $not$ = $48 ^ 1;
    $$ = $49 & $not$;
    $50 = ((($$7)) + 1|0);
    if ($$) {
     $52$phi = $$7;$$7 = $50;$52 = $52$phi;
    } else {
     break;
    }
   }
   if ($48) {
    $$8 = $$7;
   } else {
    $51 = ((($52)) + 2|0);
    HEAP8[$$7>>0] = 0;
    $$8 = $51;
   }
   $53 = ($$436$lcssa|0)==(0|0);
   if ($53) {
    $$3 = $$8;
   } else {
    $$436$lcssa$lcssa123 = $$436$lcssa;$$8$lcssa = $$8;$$lcssa130 = $46;
    break;
   }
  }
  $54 = $nattr$0$ph | 1;
  $55 = (($attr) + ($nattr$0$ph<<2)|0);
  HEAP32[$55>>2] = $$436$lcssa$lcssa123;
  $56 = (($nattr$0$ph) + 2)|0;
  $57 = (($attr) + ($54<<2)|0);
  HEAP32[$57>>2] = $$lcssa130;
  $$3$ph21 = $$8$lcssa;$nattr$0$ph = $56;
 }
 if ((label|0) == 30) {
  $end$1 = $end$1$ph106;$nattr$0$ph134 = $nattr$0$ph$lcssa131;
 }
 $58 = $nattr$0$ph134 | 1;
 $59 = (($attr) + ($nattr$0$ph134<<2)|0);
 HEAP32[$59>>2] = 0;
 $60 = (($attr) + ($58<<2)|0);
 HEAP32[$60>>2] = 0;
 $61 = $9 ^ 1;
 $62 = ($startelCb|0)!=(0|0);
 $or$cond4 = $62 & $61;
 if ($or$cond4) {
  FUNCTION_TABLE_viii[$startelCb & 31]($ud,$$1,$attr);
 }
 $63 = ($end$1|0)!=(0);
 $64 = ($endelCb|0)!=(0|0);
 $or$cond6 = $64 & $63;
 if (!($or$cond6)) {
  STACKTOP = sp;return;
 }
 FUNCTION_TABLE_vii[$endelCb & 63]($ud,$$1);
 STACKTOP = sp;return;
}
function _nsvg__createParser() {
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $cond = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (_malloc(40004)|0);
 $cond = ($0|0)==(0|0);
 if ($cond) {
  $$0 = 0;
  return ($$0|0);
 }
 _memset(($0|0),0,40004)|0;
 $1 = (_malloc(12)|0);
 $2 = ((($0)) + 39956|0);
 HEAP32[$2>>2] = $1;
 $3 = ($1|0)==(0|0);
 if (!($3)) {
  ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
  $4 = ((($0)) + 64|0);
  _nsvg__xformIdentity($4);
  dest=$0; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
  $5 = ((($0)) + 88|0);
  HEAP32[$5>>2] = 0;
  $6 = ((($0)) + 92|0);
  HEAP32[$6>>2] = 0;
  $7 = ((($0)) + 96|0);
  HEAPF32[$7>>2] = 1.0;
  $8 = ((($0)) + 100|0);
  HEAPF32[$8>>2] = 1.0;
  $9 = ((($0)) + 104|0);
  HEAPF32[$9>>2] = 1.0;
  $10 = ((($0)) + 300|0);
  HEAPF32[$10>>2] = 1.0;
  $11 = ((($0)) + 236|0);
  HEAPF32[$11>>2] = 1.0;
  $12 = ((($0)) + 280|0);
  HEAP8[$12>>0] = 0;
  $13 = ((($0)) + 281|0);
  HEAP8[$13>>0] = 0;
  $14 = ((($0)) + 284|0);
  HEAPF32[$14>>2] = 4.0;
  $15 = ((($0)) + 288|0);
  HEAP8[$15>>0] = 0;
  $16 = ((($0)) + 308|0);
  HEAP8[$16>>0] = 1;
  $17 = ((($0)) + 310|0);
  HEAP8[$17>>0] = 1;
  $$0 = $0;
  return ($$0|0);
 }
 $18 = HEAP32[$2>>2]|0;
 $19 = ($18|0)==(0|0);
 if (!($19)) {
  _free($18);
 }
 _free($0);
 $$0 = 0;
 return ($$0|0);
}
function _nsvg__startElement($ud,$el,$attr) {
 $ud = $ud|0;
 $el = $el|0;
 $attr = $attr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($ud)) + 40001|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (_strcmp($el,22107536)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   _nsvg__parseGradient($ud,$attr,2);
   return;
  }
  $5 = (_strcmp($el,22107551)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   _nsvg__parseGradient($ud,$attr,3);
   return;
  }
  $7 = (_strcmp($el,22107566)|0);
  $8 = ($7|0)==(0);
  if (!($8)) {
   return;
  }
  _nsvg__parseGradientStop($ud,$attr);
  return;
 }
 $9 = (_strcmp($el,22107524)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  _nsvg__pushAttr($ud);
  _nsvg__parseAttribs($ud,$attr);
  return;
 }
 $11 = (_strcmp($el,22107526)|0);
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = ((($ud)) + 40000|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = ($14<<24>>24)==(0);
  if (!($15)) {
   return;
  }
  _nsvg__pushAttr($ud);
  _nsvg__parsePath($ud,$attr);
  _nsvg__popAttr($ud);
  return;
 }
 $16 = (_strcmp($el,22107571)|0);
 $17 = ($16|0)==(0);
 if ($17) {
  _nsvg__pushAttr($ud);
  _nsvg__parseRect($ud,$attr);
  _nsvg__popAttr($ud);
  return;
 }
 $18 = (_strcmp($el,22107576)|0);
 $19 = ($18|0)==(0);
 if ($19) {
  _nsvg__pushAttr($ud);
  _nsvg__parseCircle($ud,$attr);
  _nsvg__popAttr($ud);
  return;
 }
 $20 = (_strcmp($el,22107583)|0);
 $21 = ($20|0)==(0);
 if ($21) {
  _nsvg__pushAttr($ud);
  _nsvg__parseEllipse($ud,$attr);
  _nsvg__popAttr($ud);
  return;
 }
 $22 = (_strcmp($el,22107591)|0);
 $23 = ($22|0)==(0);
 if ($23) {
  _nsvg__pushAttr($ud);
  _nsvg__parseLine($ud,$attr);
  _nsvg__popAttr($ud);
  return;
 }
 $24 = (_strcmp($el,22107596)|0);
 $25 = ($24|0)==(0);
 if ($25) {
  _nsvg__pushAttr($ud);
  _nsvg__parsePoly($ud,$attr,0);
  _nsvg__popAttr($ud);
  return;
 }
 $26 = (_strcmp($el,22107605)|0);
 $27 = ($26|0)==(0);
 if ($27) {
  _nsvg__pushAttr($ud);
  _nsvg__parsePoly($ud,$attr,1);
  _nsvg__popAttr($ud);
  return;
 }
 $28 = (_strcmp($el,22107536)|0);
 $29 = ($28|0)==(0);
 if ($29) {
  _nsvg__parseGradient($ud,$attr,2);
  return;
 }
 $30 = (_strcmp($el,22107551)|0);
 $31 = ($30|0)==(0);
 if ($31) {
  _nsvg__parseGradient($ud,$attr,3);
  return;
 }
 $32 = (_strcmp($el,22107566)|0);
 $33 = ($32|0)==(0);
 if ($33) {
  _nsvg__parseGradientStop($ud,$attr);
  return;
 }
 $34 = (_strcmp($el,22107531)|0);
 $35 = ($34|0)==(0);
 if ($35) {
  HEAP8[$0>>0] = 1;
  return;
 }
 $36 = (_strcmp($el,22107613)|0);
 $37 = ($36|0)==(0);
 if (!($37)) {
  return;
 }
 _nsvg__parseSVG($ud,$attr);
 return;
}
function _nsvg__endElement($ud,$el) {
 $ud = $ud|0;
 $el = $el|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strcmp($el,22107524)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  _nsvg__popAttr($ud);
  return;
 }
 $2 = (_strcmp($el,22107526)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($ud)) + 40000|0);
  HEAP8[$4>>0] = 0;
  return;
 }
 $5 = (_strcmp($el,22107531)|0);
 $6 = ($5|0)==(0);
 if (!($6)) {
  return;
 }
 $7 = ((($ud)) + 40001|0);
 HEAP8[$7>>0] = 0;
 return;
}
function _nsvg__content($ud,$s) {
 $ud = $ud|0;
 $s = $s|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _nsvg__scaleToViewbox($p,$units) {
 $p = $p|0;
 $units = $units|0;
 var $$byval_copy = 0, $$pn = 0.0, $$pn2 = 0.0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0.0;
 var $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0.0;
 var $130 = 0.0, $131 = 0.0, $132 = 0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0.0, $148 = 0.0;
 var $149 = 0.0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0;
 var $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0;
 var $72 = 0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0;
 var $90 = 0.0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, $bounds = 0, $i$05 = 0, $i$111 = 0, $path$0 = 0, $path$06 = 0, $path$07 = 0, $shape$0 = 0, $shape$015 = 0, $shape$016 = 0, $switch = 0;
 var $switch4 = 0, $sx$0 = 0.0, $sy$0 = 0.0, $t = 0, $tx$0 = 0.0, $ty$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $$byval_copy = sp + 48|0;
 $bounds = sp + 32|0;
 $t = sp + 8|0;
 $0 = sp;
 _nsvg__imageBounds($p,$bounds);
 $1 = ((($p)) + 39976|0);
 $2 = +HEAPF32[$1>>2];
 $3 = $2 == 0.0;
 do {
  if ($3) {
   $4 = ((($p)) + 39956|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = +HEAPF32[$5>>2];
   $7 = $6 > 0.0;
   if ($7) {
    HEAPF32[$1>>2] = $6;
    break;
   } else {
    $8 = HEAP32[$bounds>>2]|0;
    $9 = ((($p)) + 39968|0);
    HEAP32[$9>>2] = $8;
    $10 = ((($bounds)) + 8|0);
    $11 = +HEAPF32[$10>>2];
    $12 = +HEAPF32[$bounds>>2];
    $13 = $11 - $12;
    HEAPF32[$1>>2] = $13;
    break;
   }
  }
 } while(0);
 $14 = ((($p)) + 39980|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $15 == 0.0;
 do {
  if ($16) {
   $17 = ((($p)) + 39956|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($18)) + 4|0);
   $20 = +HEAPF32[$19>>2];
   $21 = $20 > 0.0;
   if ($21) {
    HEAPF32[$14>>2] = $20;
    break;
   } else {
    $22 = ((($bounds)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($p)) + 39972|0);
    HEAP32[$24>>2] = $23;
    $25 = ((($bounds)) + 12|0);
    $26 = +HEAPF32[$25>>2];
    $27 = +HEAPF32[$22>>2];
    $28 = $26 - $27;
    HEAPF32[$14>>2] = $28;
    break;
   }
  }
 } while(0);
 $29 = ((($p)) + 39956|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = +HEAPF32[$30>>2];
 $32 = $31 == 0.0;
 if ($32) {
  $33 = HEAP32[$1>>2]|0;
  HEAP32[$30>>2] = $33;
 }
 $34 = HEAP32[$29>>2]|0;
 $35 = ((($34)) + 4|0);
 $36 = +HEAPF32[$35>>2];
 $37 = $36 == 0.0;
 if ($37) {
  $38 = HEAP32[$14>>2]|0;
  HEAP32[$35>>2] = $38;
 }
 $39 = ((($p)) + 39968|0);
 $40 = +HEAPF32[$39>>2];
 $41 = ((($p)) + 39972|0);
 $42 = +HEAPF32[$41>>2];
 $43 = +HEAPF32[$1>>2];
 $44 = $43 > 0.0;
 if ($44) {
  $45 = HEAP32[$29>>2]|0;
  $46 = +HEAPF32[$45>>2];
  $47 = $46 / $43;
  $59 = $47;
 } else {
  $59 = 0.0;
 }
 $48 = +HEAPF32[$14>>2];
 $49 = $48 > 0.0;
 if ($49) {
  $50 = HEAP32[$29>>2]|0;
  $51 = ((($50)) + 4|0);
  $52 = +HEAPF32[$51>>2];
  $53 = $52 / $48;
  $60 = $53;
 } else {
  $60 = 0.0;
 }
 $54 = (_nsvg__parseUnits($units)|0);
 _nsvg__coord($0,1.0,$54);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;
 $55 = (+_nsvg__convertToPixels($p,$$byval_copy,0.0,1.0));
 $56 = 1.0 / $55;
 $57 = ((($p)) + 39992|0);
 $58 = HEAP32[$57>>2]|0;
 switch ($58|0) {
 case 1:  {
  $61 = (+_nsvg__minf($59,$60));
  $62 = +HEAPF32[$1>>2];
  $63 = $61 * $62;
  $64 = HEAP32[$29>>2]|0;
  $65 = +HEAPF32[$64>>2];
  $66 = ((($p)) + 39984|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (+_nsvg__viewAlign($63,$65,$67));
  $69 = $68 / $61;
  $70 = +HEAPF32[$14>>2];
  $71 = $61 * $70;
  $72 = ((($64)) + 4|0);
  $73 = +HEAPF32[$72>>2];
  $74 = ((($p)) + 39988|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = (+_nsvg__viewAlign($71,$73,$75));
  $77 = $76 / $61;
  $$pn = $69;$$pn2 = $77;$sx$0 = $61;$sy$0 = $61;
  break;
 }
 case 2:  {
  $78 = (+_nsvg__maxf($59,$60));
  $79 = +HEAPF32[$1>>2];
  $80 = $78 * $79;
  $81 = HEAP32[$29>>2]|0;
  $82 = +HEAPF32[$81>>2];
  $83 = ((($p)) + 39984|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (+_nsvg__viewAlign($80,$82,$84));
  $86 = $85 / $78;
  $87 = +HEAPF32[$14>>2];
  $88 = $78 * $87;
  $89 = ((($81)) + 4|0);
  $90 = +HEAPF32[$89>>2];
  $91 = ((($p)) + 39988|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = (+_nsvg__viewAlign($88,$90,$92));
  $94 = $93 / $78;
  $$pn = $86;$$pn2 = $94;$sx$0 = $78;$sy$0 = $78;
  break;
 }
 default: {
  $$pn = -0.0;$$pn2 = -0.0;$sx$0 = $59;$sy$0 = $60;
 }
 }
 $ty$0 = $$pn2 - $42;
 $tx$0 = $$pn - $40;
 $95 = $56 * $sx$0;
 $96 = $56 * $sy$0;
 $97 = $95 + $96;
 $98 = $97 * 0.5;
 $99 = HEAP32[$29>>2]|0;
 $100 = ((($99)) + 8|0);
 $shape$015 = HEAP32[$100>>2]|0;
 $101 = ($shape$015|0)==(0|0);
 if ($101) {
  STACKTOP = sp;return;
 }
 $shape$016 = $shape$015;
 while(1) {
  $102 = ((($shape$016)) + 136|0);
  $103 = +HEAPF32[$102>>2];
  $104 = $tx$0 + $103;
  $105 = $95 * $104;
  HEAPF32[$102>>2] = $105;
  $106 = ((($shape$016)) + 140|0);
  $107 = +HEAPF32[$106>>2];
  $108 = $ty$0 + $107;
  $109 = $96 * $108;
  HEAPF32[$106>>2] = $109;
  $110 = ((($shape$016)) + 144|0);
  $111 = +HEAPF32[$110>>2];
  $112 = $tx$0 + $111;
  $113 = $95 * $112;
  HEAPF32[$110>>2] = $113;
  $114 = ((($shape$016)) + 148|0);
  $115 = +HEAPF32[$114>>2];
  $116 = $ty$0 + $115;
  $117 = $96 * $116;
  HEAPF32[$114>>2] = $117;
  $118 = ((($shape$016)) + 152|0);
  $path$06 = HEAP32[$118>>2]|0;
  $119 = ($path$06|0)==(0|0);
  if (!($119)) {
   $path$07 = $path$06;
   while(1) {
    $120 = ((($path$07)) + 12|0);
    $121 = +HEAPF32[$120>>2];
    $122 = $tx$0 + $121;
    $123 = $95 * $122;
    HEAPF32[$120>>2] = $123;
    $124 = ((($path$07)) + 16|0);
    $125 = +HEAPF32[$124>>2];
    $126 = $ty$0 + $125;
    $127 = $96 * $126;
    HEAPF32[$124>>2] = $127;
    $128 = ((($path$07)) + 20|0);
    $129 = +HEAPF32[$128>>2];
    $130 = $tx$0 + $129;
    $131 = $95 * $130;
    HEAPF32[$128>>2] = $131;
    $132 = ((($path$07)) + 24|0);
    $133 = +HEAPF32[$132>>2];
    $134 = $ty$0 + $133;
    $135 = $96 * $134;
    HEAPF32[$132>>2] = $135;
    $136 = ((($path$07)) + 4|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = ($137|0)>(0);
    if ($138) {
     $139 = HEAP32[$path$07>>2]|0;
     $140 = HEAP32[$136>>2]|0;
     $i$05 = 0;
     while(1) {
      $141 = $i$05 << 1;
      $142 = (($139) + ($141<<2)|0);
      $143 = +HEAPF32[$142>>2];
      $144 = $tx$0 + $143;
      $145 = $95 * $144;
      HEAPF32[$142>>2] = $145;
      $$sum1 = $141 | 1;
      $146 = (($139) + ($$sum1<<2)|0);
      $147 = +HEAPF32[$146>>2];
      $148 = $ty$0 + $147;
      $149 = $96 * $148;
      HEAPF32[$146>>2] = $149;
      $150 = (($i$05) + 1)|0;
      $151 = ($150|0)<($140|0);
      if ($151) {
       $i$05 = $150;
      } else {
       break;
      }
     }
    }
    $152 = ((($path$07)) + 28|0);
    $path$0 = HEAP32[$152>>2]|0;
    $153 = ($path$0|0)==(0|0);
    if ($153) {
     break;
    } else {
     $path$07 = $path$0;
    }
   }
  }
  $154 = ((($shape$016)) + 64|0);
  $155 = HEAP8[$154>>0]|0;
  $156 = $155 & -2;
  $switch = ($156<<24>>24)==(2);
  if ($switch) {
   $157 = ((($shape$016)) + 68|0);
   $158 = HEAP32[$157>>2]|0;
   _nsvg__scaleGradient($158,$tx$0,$ty$0,$95,$96);
   $159 = HEAP32[$157>>2]|0;
   ;HEAP32[$t>>2]=HEAP32[$159>>2]|0;HEAP32[$t+4>>2]=HEAP32[$159+4>>2]|0;HEAP32[$t+8>>2]=HEAP32[$159+8>>2]|0;HEAP32[$t+12>>2]=HEAP32[$159+12>>2]|0;HEAP32[$t+16>>2]=HEAP32[$159+16>>2]|0;HEAP32[$t+20>>2]=HEAP32[$159+20>>2]|0;
   $160 = HEAP32[$157>>2]|0;
   _nsvg__xformInverse($160,$t);
  }
  $161 = ((($shape$016)) + 72|0);
  $162 = HEAP8[$161>>0]|0;
  $163 = $162 & -2;
  $switch4 = ($163<<24>>24)==(2);
  if ($switch4) {
   $164 = ((($shape$016)) + 76|0);
   $165 = HEAP32[$164>>2]|0;
   _nsvg__scaleGradient($165,$tx$0,$ty$0,$95,$96);
   $166 = HEAP32[$164>>2]|0;
   ;HEAP32[$t>>2]=HEAP32[$166>>2]|0;HEAP32[$t+4>>2]=HEAP32[$166+4>>2]|0;HEAP32[$t+8>>2]=HEAP32[$166+8>>2]|0;HEAP32[$t+12>>2]=HEAP32[$166+12>>2]|0;HEAP32[$t+16>>2]=HEAP32[$166+16>>2]|0;HEAP32[$t+20>>2]=HEAP32[$166+20>>2]|0;
   $167 = HEAP32[$164>>2]|0;
   _nsvg__xformInverse($167,$t);
  }
  $168 = ((($shape$016)) + 84|0);
  $169 = +HEAPF32[$168>>2];
  $170 = $98 * $169;
  HEAPF32[$168>>2] = $170;
  $171 = ((($shape$016)) + 88|0);
  $172 = +HEAPF32[$171>>2];
  $173 = $98 * $172;
  HEAPF32[$171>>2] = $173;
  $174 = ((($shape$016)) + 124|0);
  $175 = HEAP8[$174>>0]|0;
  $176 = ($175<<24>>24)>(0);
  if ($176) {
   $i$111 = 0;
   while(1) {
    $177 = (((($shape$016)) + 92|0) + ($i$111<<2)|0);
    $178 = +HEAPF32[$177>>2];
    $179 = $98 * $178;
    HEAPF32[$177>>2] = $179;
    $180 = (($i$111) + 1)|0;
    $181 = HEAP8[$174>>0]|0;
    $182 = $181 << 24 >> 24;
    $183 = ($180|0)<($182|0);
    if ($183) {
     $i$111 = $180;
    } else {
     break;
    }
   }
  }
  $184 = ((($shape$016)) + 156|0);
  $shape$0 = HEAP32[$184>>2]|0;
  $185 = ($shape$0|0)==(0|0);
  if ($185) {
   break;
  } else {
   $shape$016 = $shape$0;
  }
 }
 STACKTOP = sp;return;
}
function _nsvg__deleteParser($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($p|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($p)) + 39952|0);
 $2 = HEAP32[$1>>2]|0;
 _nsvg__deletePaths($2);
 $3 = ((($p)) + 39960|0);
 $4 = HEAP32[$3>>2]|0;
 _nsvg__deleteGradientData($4);
 $5 = ((($p)) + 39956|0);
 $6 = HEAP32[$5>>2]|0;
 _nsvgDelete($6);
 $7 = ((($p)) + 39940|0);
 $8 = HEAP32[$7>>2]|0;
 _free($8);
 _free($p);
 return;
}
function _nsvg__deletePaths($path) {
 $path = $path|0;
 var $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($path|0)==(0|0);
 if ($0) {
  return;
 } else {
  $$01 = $path;
 }
 while(1) {
  $1 = ((($$01)) + 28|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = HEAP32[$$01>>2]|0;
  $4 = ($3|0)==(0|0);
  if (!($4)) {
   _free($3);
  }
  _free($$01);
  $5 = ($2|0)==(0|0);
  if ($5) {
   break;
  } else {
   $$01 = $2;
  }
 }
 return;
}
function _nsvg__deletePaint($paint) {
 $paint = $paint|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$paint>>0]|0;
 $1 = $0 & -2;
 $switch = ($1<<24>>24)==(2);
 if (!($switch)) {
  return;
 }
 $2 = ((($paint)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 _free($3);
 return;
}
function _nsvg__resetPool($r) {
 $r = $r|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $p$0 = 0, $p$01 = 0, $p$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($r)) + 56|0);
 $p$01 = HEAP32[$0>>2]|0;
 $1 = ($p$01|0)==(0|0);
 if (!($1)) {
  $p$02 = $p$01;
  while(1) {
   $2 = ((($p$02)) + 1024|0);
   HEAP32[$2>>2] = 0;
   $3 = ((($p$02)) + 1028|0);
   $p$0 = HEAP32[$3>>2]|0;
   $4 = ($p$0|0)==(0|0);
   if ($4) {
    break;
   } else {
    $p$02 = $p$0;
   }
  }
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($r)) + 60|0);
 HEAP32[$6>>2] = $5;
 return;
}
function _nsvg__flattenShape($r,$shape,$scale) {
 $r = $r|0;
 $shape = $shape|0;
 $scale = +$scale;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0;
 var $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0;
 var $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $i$07 = 0, $i$19 = 0, $j$08 = 0, $j$08$phi = 0, $path$0 = 0, $path$013 = 0;
 var $path$014 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($shape)) + 152|0);
 $path$013 = HEAP32[$0>>2]|0;
 $1 = ($path$013|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($r)) + 32|0);
 $3 = ((($r)) + 28|0);
 $path$014 = $path$013;
 while(1) {
  HEAP32[$2>>2] = 0;
  $4 = HEAP32[$path$014>>2]|0;
  $5 = +HEAPF32[$4>>2];
  $6 = $5 * $scale;
  $7 = ((($4)) + 4|0);
  $8 = +HEAPF32[$7>>2];
  $9 = $8 * $scale;
  _nsvg__addPathPoint($r,$6,$9,0);
  $10 = ((($path$014)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)>(1);
  if ($12) {
   $i$07 = 0;
   while(1) {
    $13 = $i$07 << 1;
    $14 = HEAP32[$path$014>>2]|0;
    $15 = (($14) + ($13<<2)|0);
    $16 = +HEAPF32[$15>>2];
    $17 = $16 * $scale;
    $$sum1 = $13 | 1;
    $18 = (($14) + ($$sum1<<2)|0);
    $19 = +HEAPF32[$18>>2];
    $20 = $19 * $scale;
    $$sum = (($13) + 2)|0;
    $21 = (($14) + ($$sum<<2)|0);
    $22 = +HEAPF32[$21>>2];
    $23 = $22 * $scale;
    $$sum2 = (($13) + 3)|0;
    $24 = (($14) + ($$sum2<<2)|0);
    $25 = +HEAPF32[$24>>2];
    $26 = $25 * $scale;
    $$sum3 = (($13) + 4)|0;
    $27 = (($14) + ($$sum3<<2)|0);
    $28 = +HEAPF32[$27>>2];
    $29 = $28 * $scale;
    $$sum4 = (($13) + 5)|0;
    $30 = (($14) + ($$sum4<<2)|0);
    $31 = +HEAPF32[$30>>2];
    $32 = $31 * $scale;
    $$sum5 = (($13) + 6)|0;
    $33 = (($14) + ($$sum5<<2)|0);
    $34 = +HEAPF32[$33>>2];
    $35 = $34 * $scale;
    $$sum6 = (($13) + 7)|0;
    $36 = (($14) + ($$sum6<<2)|0);
    $37 = +HEAPF32[$36>>2];
    $38 = $37 * $scale;
    _nsvg__flattenCubicBez($r,$17,$20,$23,$26,$29,$32,$35,$38,0,0);
    $39 = (($i$07) + 3)|0;
    $40 = HEAP32[$10>>2]|0;
    $41 = (($40) + -1)|0;
    $42 = ($39|0)<($41|0);
    if ($42) {
     $i$07 = $39;
    } else {
     break;
    }
   }
  }
  $43 = HEAP32[$path$014>>2]|0;
  $44 = +HEAPF32[$43>>2];
  $45 = $44 * $scale;
  $46 = ((($43)) + 4|0);
  $47 = +HEAPF32[$46>>2];
  $48 = $47 * $scale;
  _nsvg__addPathPoint($r,$45,$48,0);
  $49 = HEAP32[$2>>2]|0;
  $50 = ($49|0)>(0);
  if ($50) {
   $51 = HEAP32[$2>>2]|0;
   $52 = (($51) + -1)|0;
   $i$19 = 0;$j$08 = $52;
   while(1) {
    $53 = HEAP32[$3>>2]|0;
    $54 = (($53) + ($j$08<<5)|0);
    $55 = +HEAPF32[$54>>2];
    $56 = (((($53) + ($j$08<<5)|0)) + 4|0);
    $57 = +HEAPF32[$56>>2];
    $58 = (($53) + ($i$19<<5)|0);
    $59 = +HEAPF32[$58>>2];
    $60 = (((($53) + ($i$19<<5)|0)) + 4|0);
    $61 = +HEAPF32[$60>>2];
    _nsvg__addEdge($r,$55,$57,$59,$61);
    $62 = (($i$19) + 1)|0;
    $63 = HEAP32[$2>>2]|0;
    $64 = ($62|0)<($63|0);
    if ($64) {
     $j$08$phi = $i$19;$i$19 = $62;$j$08 = $j$08$phi;
    } else {
     break;
    }
   }
  }
  $65 = ((($path$014)) + 28|0);
  $path$0 = HEAP32[$65>>2]|0;
  $66 = ($path$0|0)==(0|0);
  if ($66) {
   break;
  } else {
   $path$014 = $path$0;
  }
 }
 return;
}
function _nsvg__cmpEdge($p,$q) {
 $p = $p|0;
 $q = $q|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = +HEAPF32[$0>>2];
 $2 = ((($q)) + 4|0);
 $3 = +HEAPF32[$2>>2];
 $4 = $1 < $3;
 $5 = $1 > $3;
 $$ = $5&1;
 $$0 = $4 ? -1 : $$;
 return ($$0|0);
}
function _nsvg__initPaint($cache,$paint,$opacity) {
 $cache = $cache|0;
 $paint = $paint|0;
 $opacity = +$opacity;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $cb$0$lcssa = 0, $exitcond = 0, $exitcond18 = 0, $exitcond19 = 0, $exitcond20 = 0;
 var $i$16 = 0, $i$214 = 0, $i$311 = 0, $i$47 = 0, $ib$0$lcssa = 0, $j$08 = 0, $scevgep = 0, $u$09 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$paint>>0]|0;
 HEAP8[$cache>>0] = $0;
 $1 = HEAP8[$paint>>0]|0;
 $2 = ($1<<24>>24)==(1);
 $3 = ((($paint)) + 4|0);
 if ($2) {
  $4 = HEAP32[$3>>2]|0;
  $5 = (_nsvg__applyOpacity($4,$opacity)|0);
  $6 = ((($cache)) + 28|0);
  HEAP32[$6>>2] = $5;
  return;
 }
 $7 = HEAP32[$3>>2]|0;
 $8 = ((($7)) + 24|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ((($cache)) + 1|0);
 HEAP8[$10>>0] = $9;
 $11 = ((($cache)) + 4|0);
 ;HEAP32[$11>>2]=HEAP32[$7>>2]|0;HEAP32[$11+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$11+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$11+12>>2]=HEAP32[$7+12>>2]|0;HEAP32[$11+16>>2]=HEAP32[$7+16>>2]|0;HEAP32[$11+20>>2]=HEAP32[$7+20>>2]|0;
 $12 = ((($7)) + 36|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0);
 if ($14) {
  $scevgep = ((($cache)) + 28|0);
  _memset(($scevgep|0),0,1024)|0;
  $$pr = HEAP32[$12>>2]|0;
  $15 = $$pr;
 } else {
  $15 = $13;
 }
 $16 = ($15|0)==(1);
 if ($16) {
  $i$16 = 0;
  while(1) {
   $17 = (((($7)) + 40|0) + ($i$16<<3)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (_nsvg__applyOpacity($18,$opacity)|0);
   $20 = (((($cache)) + 28|0) + ($i$16<<2)|0);
   HEAP32[$20>>2] = $19;
   $21 = (($i$16) + 1)|0;
   $exitcond = ($21|0)==(256);
   if ($exitcond) {
    break;
   } else {
    $i$16 = $21;
   }
  }
  return;
 }
 $22 = ((($7)) + 40|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (_nsvg__applyOpacity($23,$opacity)|0);
 $25 = ((($7)) + 44|0);
 $26 = +HEAPF32[$25>>2];
 $27 = (+_nsvg__clampf($26,0.0,1.0));
 $28 = (($15) + -1)|0;
 $29 = (((((($7)) + 40|0) + ($28<<3)|0)) + 4|0);
 $30 = +HEAPF32[$29>>2];
 $31 = (+_nsvg__clampf($30,$27,1.0));
 $32 = $27 * 255.0;
 $33 = (~~(($32)));
 $34 = $31 * 255.0;
 $35 = (~~(($34)));
 $36 = ($33|0)>(0);
 if ($36) {
  $i$214 = 0;
  while(1) {
   $39 = (((($cache)) + 28|0) + ($i$214<<2)|0);
   HEAP32[$39>>2] = $24;
   $40 = (($i$214) + 1)|0;
   $exitcond20 = ($40|0)==($33|0);
   if ($exitcond20) {
    break;
   } else {
    $i$214 = $40;
   }
  }
 }
 $37 = HEAP32[$12>>2]|0;
 $38 = ($37|0)>(1);
 if ($38) {
  $i$311 = 0;
  while(1) {
   $42 = (((($7)) + 40|0) + ($i$311<<3)|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (_nsvg__applyOpacity($43,$opacity)|0);
   $45 = (($i$311) + 1)|0;
   $46 = (((($7)) + 40|0) + ($45<<3)|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = (_nsvg__applyOpacity($47,$opacity)|0);
   $49 = (((((($7)) + 40|0) + ($i$311<<3)|0)) + 4|0);
   $50 = +HEAPF32[$49>>2];
   $51 = (+_nsvg__clampf($50,0.0,1.0));
   $52 = (((((($7)) + 40|0) + ($45<<3)|0)) + 4|0);
   $53 = +HEAPF32[$52>>2];
   $54 = (+_nsvg__clampf($53,0.0,1.0));
   $55 = $51 * 255.0;
   $56 = (~~(($55)));
   $57 = $54 * 255.0;
   $58 = (~~(($57)));
   $59 = (($58) - ($56))|0;
   $60 = ($59|0)<(1);
   if (!($60)) {
    $64 = (+($59|0));
    $65 = 1.0 / $64;
    $66 = (($58) - ($56))|0;
    $j$08 = 0;$u$09 = 0.0;
    while(1) {
     $67 = (_nsvg__lerpRGBA($44,$48,$u$09)|0);
     $68 = (($j$08) + ($56))|0;
     $69 = (((($cache)) + 28|0) + ($68<<2)|0);
     HEAP32[$69>>2] = $67;
     $70 = $65 + $u$09;
     $71 = (($j$08) + 1)|0;
     $exitcond19 = ($71|0)==($66|0);
     if ($exitcond19) {
      break;
     } else {
      $j$08 = $71;$u$09 = $70;
     }
    }
   }
   $61 = HEAP32[$12>>2]|0;
   $62 = (($61) + -1)|0;
   $63 = ($45|0)<($62|0);
   if ($63) {
    $i$311 = $45;
   } else {
    $cb$0$lcssa = $48;$ib$0$lcssa = $58;
    break;
   }
  }
 } else {
  $cb$0$lcssa = 0;$ib$0$lcssa = $35;
 }
 $41 = ($ib$0$lcssa|0)<(256);
 if ($41) {
  $i$47 = $ib$0$lcssa;
 } else {
  return;
 }
 while(1) {
  $72 = (((($cache)) + 28|0) + ($i$47<<2)|0);
  HEAP32[$72>>2] = $cb$0$lcssa;
  $73 = (($i$47) + 1)|0;
  $exitcond18 = ($73|0)==(256);
  if ($exitcond18) {
   break;
  } else {
   $i$47 = $73;
  }
 }
 return;
}
function _nsvg__rasterizeSortedEdges($r,$tx,$ty,$scale,$cache,$fillRule) {
 $r = $r|0;
 $tx = +$tx;
 $ty = +$ty;
 $scale = +$scale;
 $cache = $cache|0;
 $fillRule = $fillRule|0;
 var $$lcssa = 0, $$lcssa39 = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0;
 var $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $active = 0, $changed$0 = 0, $changed$1 = 0, $e$016 = 0, $e$114 = 0, $e$2$lcssa = 0, $e$2$lcssa$lcssa = 0, $e$28 = 0, $exitcond = 0, $p$0 = 0, $s$015 = 0;
 var $step$0$ph7 = 0, $step$1 = 0, $xmax = 0, $xmin = 0, $y$017 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $active = sp + 8|0;
 $xmin = sp + 4|0;
 $xmax = sp;
 HEAP32[$active>>2] = 0;
 $0 = ((($r)) + 80|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 $3 = ((($r)) + 64|0);
 $4 = ((($r)) + 76|0);
 $5 = ((($r)) + 16|0);
 $6 = ((($r)) + 20|0);
 $7 = ((($r)) + 84|0);
 $8 = ((($r)) + 72|0);
 $e$016 = 0;$y$017 = 0;
 while(1) {
  $9 = HEAP32[$3>>2]|0;
  $10 = HEAP32[$4>>2]|0;
  _memset(($9|0),0,($10|0))|0;
  $11 = HEAP32[$4>>2]|0;
  HEAP32[$xmin>>2] = $11;
  HEAP32[$xmax>>2] = 0;
  $12 = ($y$017*5)|0;
  $e$114 = $e$016;$s$015 = 0;
  while(1) {
   $13 = (($s$015) + ($12))|0;
   $14 = (+($13|0));
   $15 = $14 + 0.5;
   $16 = HEAP32[$active>>2]|0;
   $17 = ($16|0)==(0|0);
   L8: do {
    if ($17) {
     $changed$0 = 0;$step$1 = $active;
    } else {
     $105 = $16;$step$0$ph7 = $active;
     while(1) {
      $19 = $105;
      while(1) {
       $18 = ((($19)) + 8|0);
       $20 = +HEAPF32[$18>>2];
       $21 = !($20 <= $15);
       if ($21) {
        $$lcssa = $19;
        break;
       }
       $22 = ((($19)) + 16|0);
       $23 = HEAP32[$22>>2]|0;
       HEAP32[$step$0$ph7>>2] = $23;
       _nsvg__freeActive($r,$19);
       $24 = HEAP32[$step$0$ph7>>2]|0;
       $25 = ($24|0)==(0|0);
       if ($25) {
        $changed$0 = 0;$step$1 = $active;
        break L8;
       } else {
        $19 = $24;
       }
      }
      $26 = ((($$lcssa)) + 4|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = HEAP32[$$lcssa>>2]|0;
      $29 = (($28) + ($27))|0;
      HEAP32[$$lcssa>>2] = $29;
      $30 = HEAP32[$step$0$ph7>>2]|0;
      $31 = ((($30)) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($32|0)==(0|0);
      if ($33) {
       $changed$0 = 0;$step$1 = $active;
       break;
      } else {
       $105 = $32;$step$0$ph7 = $31;
      }
     }
    }
   } while(0);
   while(1) {
    $34 = HEAP32[$step$1>>2]|0;
    $35 = ($34|0)==(0|0);
    if (!($35)) {
     $36 = ((($34)) + 16|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($37|0)==(0|0);
     if (!($38)) {
      $39 = HEAP32[$34>>2]|0;
      $40 = HEAP32[$37>>2]|0;
      $41 = ($39|0)>($40|0);
      if ($41) {
       $42 = ((($37)) + 16|0);
       $43 = HEAP32[$42>>2]|0;
       HEAP32[$36>>2] = $43;
       HEAP32[$42>>2] = $34;
       HEAP32[$step$1>>2] = $37;
       $changed$1 = 1;
      } else {
       $changed$1 = $changed$0;
      }
      $44 = HEAP32[$step$1>>2]|0;
      $45 = ((($44)) + 16|0);
      $changed$0 = $changed$1;$step$1 = $45;
      continue;
     }
    }
    $46 = ($changed$0|0)==(0);
    if ($46) {
     break;
    } else {
     $changed$0 = 0;$step$1 = $active;
    }
   }
   $47 = HEAP32[$6>>2]|0;
   $48 = ($e$114|0)<($47|0);
   L25: do {
    if ($48) {
     $e$28 = $e$114;
     while(1) {
      $49 = HEAP32[$5>>2]|0;
      $50 = (($49) + (($e$28*24)|0)|0);
      $51 = (((($49) + (($e$28*24)|0)|0)) + 4|0);
      $52 = +HEAPF32[$51>>2];
      $53 = !($52 <= $15);
      if ($53) {
       $e$2$lcssa = $e$28;
       break L25;
      }
      $54 = (((($49) + (($e$28*24)|0)|0)) + 12|0);
      $55 = +HEAPF32[$54>>2];
      $56 = $55 > $15;
      do {
       if ($56) {
        $57 = (_nsvg__addActive($r,$50,$15)|0);
        $58 = ($57|0)==(0|0);
        if ($58) {
         $e$2$lcssa = $e$28;
         break L25;
        }
        $59 = HEAP32[$active>>2]|0;
        $60 = ($59|0)==(0|0);
        if ($60) {
         HEAP32[$active>>2] = $57;
         break;
        }
        $61 = HEAP32[$57>>2]|0;
        $62 = HEAP32[$59>>2]|0;
        $63 = ($61|0)<($62|0);
        if ($63) {
         $64 = ((($57)) + 16|0);
         HEAP32[$64>>2] = $59;
         HEAP32[$active>>2] = $57;
         break;
        } else {
         $p$0 = $59;
        }
        while(1) {
         $65 = ((($p$0)) + 16|0);
         $66 = HEAP32[$65>>2]|0;
         $67 = ($66|0)==(0|0);
         if ($67) {
          $$lcssa39 = $65;
          label = 24;
          break;
         }
         $69 = HEAP32[$66>>2]|0;
         $70 = HEAP32[$57>>2]|0;
         $71 = ($69|0)<($70|0);
         $72 = HEAP32[$65>>2]|0;
         if ($71) {
          $p$0 = $72;
         } else {
          $74 = $72;$75 = $65;
          break;
         }
        }
        if ((label|0) == 24) {
         label = 0;
         $68 = HEAP32[$$lcssa39>>2]|0;
         $74 = $68;$75 = $$lcssa39;
        }
        $73 = ((($57)) + 16|0);
        HEAP32[$73>>2] = $74;
        HEAP32[$75>>2] = $57;
       }
      } while(0);
      $76 = (($e$28) + 1)|0;
      $77 = HEAP32[$6>>2]|0;
      $78 = ($76|0)<($77|0);
      if ($78) {
       $e$28 = $76;
      } else {
       $e$2$lcssa = $76;
       break;
      }
     }
    } else {
     $e$2$lcssa = $e$114;
    }
   } while(0);
   $79 = HEAP32[$active>>2]|0;
   $80 = ($79|0)==(0|0);
   if (!($80)) {
    $81 = HEAP32[$3>>2]|0;
    $82 = HEAP32[$4>>2]|0;
    _nsvg__fillActiveEdges($81,$82,$79,$xmin,$xmax,$fillRule);
   }
   $83 = (($s$015) + 1)|0;
   $exitcond = ($83|0)==(5);
   if ($exitcond) {
    $e$2$lcssa$lcssa = $e$2$lcssa;
    break;
   } else {
    $e$114 = $e$2$lcssa;$s$015 = $83;
   }
  }
  $84 = HEAP32[$xmin>>2]|0;
  $85 = ($84|0)<(0);
  if ($85) {
   HEAP32[$xmin>>2] = 0;
  }
  $86 = HEAP32[$xmax>>2]|0;
  $87 = HEAP32[$4>>2]|0;
  $88 = (($87) + -1)|0;
  $89 = ($86|0)>($88|0);
  if ($89) {
   HEAP32[$xmax>>2] = $88;
  }
  $90 = HEAP32[$xmin>>2]|0;
  $91 = HEAP32[$xmax>>2]|0;
  $92 = ($91|0)<($90|0);
  if (!($92)) {
   $93 = HEAP32[$7>>2]|0;
   $94 = Math_imul($93, $y$017)|0;
   $95 = HEAP32[$8>>2]|0;
   $96 = $90 << 2;
   $$sum = (($94) + ($96))|0;
   $97 = (($95) + ($$sum)|0);
   $98 = (1 - ($90))|0;
   $99 = (($98) + ($91))|0;
   $100 = HEAP32[$3>>2]|0;
   $101 = (($100) + ($90)|0);
   _nsvg__scanlineSolid($97,$99,$101,$90,$y$017,$tx,$ty,$scale,$cache);
  }
  $102 = (($y$017) + 1)|0;
  $103 = HEAP32[$0>>2]|0;
  $104 = ($102|0)<($103|0);
  if ($104) {
   $e$016 = $e$2$lcssa$lcssa;$y$017 = $102;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _nsvg__flattenShapeStroke($r,$shape,$scale) {
 $r = $r|0;
 $shape = $shape|0;
 $scale = +$scale;
 var $$byval_copy1 = 0, $$lcssa = 0, $$lcssa10 = 0.0, $$lcssa131 = 0.0, $$lcssa133 = 0.0, $$lcssa135 = 0.0, $$lcssa137 = 0.0, $$lcssa139 = 0.0, $$pn = 0.0, $$sum = 0, $$sum4 = 0, $$sum5 = 0, $$sum6 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0.0, $10 = 0.0, $100 = 0.0;
 var $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0.0, $111 = 0, $112 = 0, $113 = 0, $114 = 0.0, $115 = 0, $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0.0;
 var $12 = 0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0;
 var $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0, $allDashLen$0$ = 0.0, $allDashLen$0$lcssa = 0.0;
 var $allDashLen$021 = 0.0, $closed$0 = 0, $cur = 0, $dashLen$0$ph41 = 0.0, $dashOffset$0$lcssa = 0.0, $dashOffset$0$ph = 0.0, $dashOffset$027 = 0.0, $dashState$0$ph$lcssa = 0, $dashState$0$ph40 = 0, $i$020 = 0, $idash$0$lcssa = 0, $idash$028 = 0, $idash$1$ph42 = 0, $j$022 = 0, $j$1$ph43 = 0, $j$135 = 0, $j$135$lcssa = 0, $or$cond = 0, $or$cond3 = 0, $path$0 = 0;
 var $path$045 = 0, $path$046 = 0, $totalDist$034 = 0.0, $totalDist$034$lcssa = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $$byval_copy1 = sp + 32|0;
 $cur = sp;
 $0 = ((($shape)) + 128|0);
 $1 = +HEAPF32[$0>>2];
 $2 = ((($shape)) + 125|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = ((($shape)) + 126|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 << 24 >> 24;
 $8 = ((($shape)) + 84|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $9 * $scale;
 $11 = ((($shape)) + 152|0);
 $path$045 = HEAP32[$11>>2]|0;
 $12 = ($path$045|0)==(0|0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = ((($r)) + 32|0);
 $14 = ((($r)) + 28|0);
 $15 = ((($r)) + 12|0);
 $16 = ((($shape)) + 124|0);
 $17 = ((($r)) + 40|0);
 $18 = ((($shape)) + 88|0);
 $19 = ((($shape)) + 92|0);
 $20 = ((($r)) + 44|0);
 $21 = ((($cur)) + 4|0);
 $22 = ((($cur)) + 28|0);
 $path$046 = $path$045;
 while(1) {
  HEAP32[$13>>2] = 0;
  $23 = HEAP32[$path$046>>2]|0;
  $24 = +HEAPF32[$23>>2];
  $25 = $24 * $scale;
  $26 = ((($23)) + 4|0);
  $27 = +HEAPF32[$26>>2];
  $28 = $27 * $scale;
  _nsvg__addPathPoint($r,$25,$28,1);
  $29 = ((($path$046)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)>(1);
  if ($31) {
   $i$020 = 0;
   while(1) {
    $32 = $i$020 << 1;
    $33 = HEAP32[$path$046>>2]|0;
    $34 = (($33) + ($32<<2)|0);
    $35 = +HEAPF32[$34>>2];
    $36 = $35 * $scale;
    $$sum4 = $32 | 1;
    $37 = (($33) + ($$sum4<<2)|0);
    $38 = +HEAPF32[$37>>2];
    $39 = $38 * $scale;
    $$sum = (($32) + 2)|0;
    $40 = (($33) + ($$sum<<2)|0);
    $41 = +HEAPF32[$40>>2];
    $42 = $41 * $scale;
    $$sum5 = (($32) + 3)|0;
    $43 = (($33) + ($$sum5<<2)|0);
    $44 = +HEAPF32[$43>>2];
    $45 = $44 * $scale;
    $$sum6 = (($32) + 4)|0;
    $46 = (($33) + ($$sum6<<2)|0);
    $47 = +HEAPF32[$46>>2];
    $48 = $47 * $scale;
    $$sum7 = (($32) + 5)|0;
    $49 = (($33) + ($$sum7<<2)|0);
    $50 = +HEAPF32[$49>>2];
    $51 = $50 * $scale;
    $$sum8 = (($32) + 6)|0;
    $52 = (($33) + ($$sum8<<2)|0);
    $53 = +HEAPF32[$52>>2];
    $54 = $53 * $scale;
    $$sum9 = (($32) + 7)|0;
    $55 = (($33) + ($$sum9<<2)|0);
    $56 = +HEAPF32[$55>>2];
    $57 = $56 * $scale;
    _nsvg__flattenCubicBez($r,$36,$39,$42,$45,$48,$51,$54,$57,0,1);
    $58 = (($i$020) + 3)|0;
    $59 = HEAP32[$29>>2]|0;
    $60 = (($59) + -1)|0;
    $61 = ($58|0)<($60|0);
    if ($61) {
     $i$020 = $58;
    } else {
     break;
    }
   }
  }
  $62 = HEAP32[$13>>2]|0;
  $63 = ($62|0)<(2);
  do {
   if (!($63)) {
    $64 = ((($path$046)) + 8|0);
    $65 = HEAP8[$64>>0]|0;
    $66 = $65 << 24 >> 24;
    $67 = (($62) + -1)|0;
    $68 = HEAP32[$14>>2]|0;
    $69 = (($68) + ($67<<5)|0);
    $70 = +HEAPF32[$69>>2];
    $71 = (((($68) + ($67<<5)|0)) + 4|0);
    $72 = +HEAPF32[$71>>2];
    $73 = +HEAPF32[$68>>2];
    $74 = ((($68)) + 4|0);
    $75 = +HEAPF32[$74>>2];
    $76 = +HEAPF32[$15>>2];
    $77 = (_nsvg__ptEquals($70,$72,$73,$75,$76)|0);
    $78 = ($77|0)==(0);
    if ($78) {
     $closed$0 = $66;
    } else {
     HEAP32[$13>>2] = $67;
     $closed$0 = 1;
    }
    $79 = HEAP8[$16>>0]|0;
    $80 = ($79<<24>>24)>(0);
    if (!($80)) {
     _nsvg__prepareStroke($r,$1,$4);
     $158 = HEAP32[$14>>2]|0;
     $159 = HEAP32[$13>>2]|0;
     _nsvg__expandStroke($r,$158,$159,$closed$0,$4,$7,$10);
     break;
    }
    $81 = ($closed$0|0)==(0);
    if (!($81)) {
     $82 = HEAP32[$14>>2]|0;
     ;HEAP32[$$byval_copy1>>2]=HEAP32[$82>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$82+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$82+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$82+12>>2]|0;HEAP32[$$byval_copy1+16>>2]=HEAP32[$82+16>>2]|0;HEAP32[$$byval_copy1+20>>2]=HEAP32[$82+20>>2]|0;HEAP32[$$byval_copy1+24>>2]=HEAP32[$82+24>>2]|0;HEAP32[$$byval_copy1+28>>2]=HEAP32[$82+28>>2]|0;
     _nsvg__appendPathPoint($r,$$byval_copy1);
    }
    _nsvg__duplicatePoints($r);
    HEAP32[$13>>2] = 0;
    $83 = HEAP32[$17>>2]|0;
    ;HEAP32[$cur>>2]=HEAP32[$83>>2]|0;HEAP32[$cur+4>>2]=HEAP32[$83+4>>2]|0;HEAP32[$cur+8>>2]=HEAP32[$83+8>>2]|0;HEAP32[$cur+12>>2]=HEAP32[$83+12>>2]|0;HEAP32[$cur+16>>2]=HEAP32[$83+16>>2]|0;HEAP32[$cur+20>>2]=HEAP32[$83+20>>2]|0;HEAP32[$cur+24>>2]=HEAP32[$83+24>>2]|0;HEAP32[$cur+28>>2]=HEAP32[$83+28>>2]|0;
    ;HEAP32[$$byval_copy1>>2]=HEAP32[$83>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$83+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$83+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$83+12>>2]|0;HEAP32[$$byval_copy1+16>>2]=HEAP32[$83+16>>2]|0;HEAP32[$$byval_copy1+20>>2]=HEAP32[$83+20>>2]|0;HEAP32[$$byval_copy1+24>>2]=HEAP32[$83+24>>2]|0;HEAP32[$$byval_copy1+28>>2]=HEAP32[$83+28>>2]|0;
    _nsvg__appendPathPoint($r,$$byval_copy1);
    $84 = HEAP8[$16>>0]|0;
    $85 = $84 << 24 >> 24;
    $86 = ($84<<24>>24)>(0);
    if ($86) {
     $87 = HEAP8[$16>>0]|0;
     $88 = $87 << 24 >> 24;
     $allDashLen$021 = 0.0;$j$022 = 0;
     while(1) {
      $89 = (((($shape)) + 92|0) + ($j$022<<2)|0);
      $90 = +HEAPF32[$89>>2];
      $91 = $allDashLen$021 + $90;
      $92 = (($j$022) + 1)|0;
      $93 = ($92|0)<($88|0);
      if ($93) {
       $allDashLen$021 = $91;$j$022 = $92;
      } else {
       $$lcssa = $88;$allDashLen$0$lcssa = $91;
       break;
      }
     }
    } else {
     $$lcssa = $85;$allDashLen$0$lcssa = 0.0;
    }
    $94 = $$lcssa & 1;
    $95 = ($94|0)==(0);
    $96 = $allDashLen$0$lcssa * 2.0;
    $allDashLen$0$ = $95 ? $allDashLen$0$lcssa : $96;
    $97 = +HEAPF32[$18>>2];
    $98 = (+_fmodf($97,$allDashLen$0$));
    $99 = $98 < 0.0;
    $100 = $allDashLen$0$ + $98;
    $dashOffset$0$ph = $99 ? $100 : $98;
    $101 = +HEAPF32[$19>>2];
    $102 = $dashOffset$0$ph > $101;
    if ($102) {
     $103 = HEAP8[$16>>0]|0;
     $104 = $103 << 24 >> 24;
     $106 = $101;$dashOffset$027 = $dashOffset$0$ph;$idash$028 = 0;
     while(1) {
      $105 = $dashOffset$027 - $106;
      $107 = (($idash$028) + 1)|0;
      $108 = (($107|0) % ($104|0))&-1;
      $109 = (((($shape)) + 92|0) + ($108<<2)|0);
      $110 = +HEAPF32[$109>>2];
      $111 = $105 > $110;
      if ($111) {
       $106 = $110;$dashOffset$027 = $105;$idash$028 = $108;
      } else {
       $$lcssa10 = $110;$dashOffset$0$lcssa = $105;$idash$0$lcssa = $108;
       break;
      }
     }
    } else {
     $$lcssa10 = $101;$dashOffset$0$lcssa = $dashOffset$0$ph;$idash$0$lcssa = 0;
    }
    $112 = HEAP32[$20>>2]|0;
    $113 = ($112|0)>(1);
    L31: do {
     if ($113) {
      $114 = $$lcssa10 - $dashOffset$0$lcssa;
      $$pn = $114;$dashState$0$ph40 = 1;$idash$1$ph42 = $idash$0$lcssa;$j$1$ph43 = 1;
      while(1) {
       $dashLen$0$ph41 = $$pn * $scale;
       $j$135 = $j$1$ph43;$totalDist$034 = 0.0;
       while(1) {
        $115 = HEAP32[$17>>2]|0;
        $116 = (($115) + ($j$135<<5)|0);
        $117 = +HEAPF32[$116>>2];
        $118 = +HEAPF32[$cur>>2];
        $119 = $117 - $118;
        $120 = (((($115) + ($j$135<<5)|0)) + 4|0);
        $121 = +HEAPF32[$120>>2];
        $122 = +HEAPF32[$21>>2];
        $123 = $121 - $122;
        $124 = $119 * $119;
        $125 = $123 * $123;
        $126 = $124 + $125;
        $127 = (+Math_sqrt((+$126)));
        $128 = $totalDist$034 + $127;
        $129 = $128 > $dashLen$0$ph41;
        if ($129) {
         $$lcssa131 = $118;$$lcssa133 = $119;$$lcssa135 = $122;$$lcssa137 = $123;$$lcssa139 = $127;$j$135$lcssa = $j$135;$totalDist$034$lcssa = $totalDist$034;
         break;
        }
        ;HEAP32[$cur>>2]=HEAP32[$116>>2]|0;HEAP32[$cur+4>>2]=HEAP32[$116+4>>2]|0;HEAP32[$cur+8>>2]=HEAP32[$116+8>>2]|0;HEAP32[$cur+12>>2]=HEAP32[$116+12>>2]|0;HEAP32[$cur+16>>2]=HEAP32[$116+16>>2]|0;HEAP32[$cur+20>>2]=HEAP32[$116+20>>2]|0;HEAP32[$cur+24>>2]=HEAP32[$116+24>>2]|0;HEAP32[$cur+28>>2]=HEAP32[$116+28>>2]|0;
        ;HEAP32[$$byval_copy1>>2]=HEAP32[$116>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$116+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$116+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$116+12>>2]|0;HEAP32[$$byval_copy1+16>>2]=HEAP32[$116+16>>2]|0;HEAP32[$$byval_copy1+20>>2]=HEAP32[$116+20>>2]|0;HEAP32[$$byval_copy1+24>>2]=HEAP32[$116+24>>2]|0;HEAP32[$$byval_copy1+28>>2]=HEAP32[$116+28>>2]|0;
        _nsvg__appendPathPoint($r,$$byval_copy1);
        $151 = (($j$135) + 1)|0;
        $152 = HEAP32[$20>>2]|0;
        $153 = ($151|0)<($152|0);
        if ($153) {
         $j$135 = $151;$totalDist$034 = $128;
        } else {
         $dashState$0$ph$lcssa = $dashState$0$ph40;
         break L31;
        }
       }
       $130 = $dashLen$0$ph41 - $totalDist$034$lcssa;
       $131 = $130 / $$lcssa139;
       $132 = $$lcssa133 * $131;
       $133 = $$lcssa131 + $132;
       $134 = $$lcssa137 * $131;
       $135 = $$lcssa135 + $134;
       _nsvg__addPathPoint($r,$133,$135,1);
       $136 = HEAP32[$13>>2]|0;
       $137 = ($136|0)>(1);
       $138 = ($dashState$0$ph40|0)!=(0);
       $or$cond = $138 & $137;
       if ($or$cond) {
        _nsvg__prepareStroke($r,$1,$4);
        $139 = HEAP32[$14>>2]|0;
        $140 = HEAP32[$13>>2]|0;
        _nsvg__expandStroke($r,$139,$140,0,$4,$7,$10);
       }
       $141 = $138&1;
       $142 = $141 ^ 1;
       $143 = (($idash$1$ph42) + 1)|0;
       $144 = HEAP8[$16>>0]|0;
       $145 = $144 << 24 >> 24;
       $146 = (($143|0) % ($145|0))&-1;
       $147 = (((($shape)) + 92|0) + ($146<<2)|0);
       $148 = +HEAPF32[$147>>2];
       HEAPF32[$cur>>2] = $133;
       HEAPF32[$21>>2] = $135;
       HEAP8[$22>>0] = 1;
       HEAP32[$13>>2] = 0;
       ;HEAP32[$$byval_copy1>>2]=HEAP32[$cur>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$cur+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$cur+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$cur+12>>2]|0;HEAP32[$$byval_copy1+16>>2]=HEAP32[$cur+16>>2]|0;HEAP32[$$byval_copy1+20>>2]=HEAP32[$cur+20>>2]|0;HEAP32[$$byval_copy1+24>>2]=HEAP32[$cur+24>>2]|0;HEAP32[$$byval_copy1+28>>2]=HEAP32[$cur+28>>2]|0;
       _nsvg__appendPathPoint($r,$$byval_copy1);
       $149 = HEAP32[$20>>2]|0;
       $150 = ($j$135$lcssa|0)<($149|0);
       if ($150) {
        $$pn = $148;$dashState$0$ph40 = $142;$idash$1$ph42 = $146;$j$1$ph43 = $j$135$lcssa;
       } else {
        $dashState$0$ph$lcssa = $142;
        break;
       }
      }
     } else {
      $dashState$0$ph$lcssa = 1;
     }
    } while(0);
    $154 = HEAP32[$13>>2]|0;
    $155 = ($154|0)>(1);
    $156 = ($dashState$0$ph$lcssa|0)!=(0);
    $or$cond3 = $156 & $155;
    if ($or$cond3) {
     $157 = HEAP32[$14>>2]|0;
     _nsvg__expandStroke($r,$157,$154,0,$4,$7,$10);
    }
   }
  } while(0);
  $160 = ((($path$046)) + 28|0);
  $path$0 = HEAP32[$160>>2]|0;
  $161 = ($path$0|0)==(0|0);
  if ($161) {
   break;
  } else {
   $path$046 = $path$0;
  }
 }
 STACKTOP = sp;return;
}
function _nsvg__addPathPoint($r,$x,$y,$flags) {
 $r = $r|0;
 $x = +$x;
 $y = +$y;
 $flags = $flags|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($r)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if ($2) {
  $3 = (($1) + -1)|0;
  $4 = ((($r)) + 28|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + ($3<<5)|0);
  $7 = +HEAPF32[$6>>2];
  $8 = (((($5) + ($3<<5)|0)) + 4|0);
  $9 = +HEAPF32[$8>>2];
  $10 = ((($r)) + 12|0);
  $11 = +HEAPF32[$10>>2];
  $12 = (_nsvg__ptEquals($7,$9,$x,$y,$11)|0);
  $13 = ($12|0)==(0);
  if (!($13)) {
   $14 = (((($5) + ($3<<5)|0)) + 28|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = $15&255;
   $17 = $16 | $flags;
   $18 = $17&255;
   HEAP8[$14>>0] = $18;
   return;
  }
 }
 $19 = HEAP32[$0>>2]|0;
 $20 = ((($r)) + 36|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ($19|0)<($21|0);
 if (!($22)) {
  $23 = ($21|0)>(0);
  $24 = $21 << 1;
  $$ = $23 ? $24 : 64;
  HEAP32[$20>>2] = $$;
  $25 = ((($r)) + 28|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $$ << 5;
  $28 = (_realloc($26,$27)|0);
  HEAP32[$25>>2] = $28;
  $29 = ($28|0)==(0|0);
  if ($29) {
   return;
  }
 }
 $30 = HEAP32[$0>>2]|0;
 $31 = ((($r)) + 28|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = (($32) + ($30<<5)|0);
 HEAPF32[$33>>2] = $x;
 $34 = (((($32) + ($30<<5)|0)) + 4|0);
 HEAPF32[$34>>2] = $y;
 $35 = $flags&255;
 $36 = (((($32) + ($30<<5)|0)) + 28|0);
 HEAP8[$36>>0] = $35;
 $37 = HEAP32[$0>>2]|0;
 $38 = (($37) + 1)|0;
 HEAP32[$0>>2] = $38;
 return;
}
function _nsvg__flattenCubicBez($r,$x1,$y1,$x2,$y2,$x3,$y3,$x4,$y4,$level,$type) {
 $r = $r|0;
 $x1 = +$x1;
 $y1 = +$y1;
 $x2 = +$x2;
 $y2 = +$y2;
 $x3 = +$x3;
 $y3 = +$y3;
 $x4 = +$x4;
 $y4 = +$y4;
 $level = $level|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $level$tr7 = 0, $x1$tr1 = 0.0, $x2$tr3 = 0.0, $x3$tr5 = 0.0, $y1$tr2 = 0.0, $y2$tr4 = 0.0, $y3$tr6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($level|0)>(10);
 if ($0) {
  return;
 }
 $1 = ((($r)) + 8|0);
 $level$tr7 = $level;$x1$tr1 = $x1;$x2$tr3 = $x2;$x3$tr5 = $x3;$y1$tr2 = $y1;$y2$tr4 = $y2;$y3$tr6 = $y3;
 while(1) {
  $2 = $x1$tr1 + $x2$tr3;
  $3 = $2 * 0.5;
  $4 = $y1$tr2 + $y2$tr4;
  $5 = $4 * 0.5;
  $6 = $x2$tr3 + $x3$tr5;
  $7 = $6 * 0.5;
  $8 = $y2$tr4 + $y3$tr6;
  $9 = $8 * 0.5;
  $10 = $x3$tr5 + $x4;
  $11 = $10 * 0.5;
  $12 = $y3$tr6 + $y4;
  $13 = $12 * 0.5;
  $14 = $3 + $7;
  $15 = $14 * 0.5;
  $16 = $5 + $9;
  $17 = $16 * 0.5;
  $18 = $x4 - $x1$tr1;
  $19 = $y4 - $y1$tr2;
  $20 = $x2$tr3 - $x4;
  $21 = $19 * $20;
  $22 = $y2$tr4 - $y4;
  $23 = $18 * $22;
  $24 = $21 - $23;
  $25 = (+_nsvg__absf($24));
  $26 = $x3$tr5 - $x4;
  $27 = $19 * $26;
  $28 = $y3$tr6 - $y4;
  $29 = $18 * $28;
  $30 = $27 - $29;
  $31 = (+_nsvg__absf($30));
  $32 = $25 + $31;
  $33 = $32 * $32;
  $34 = +HEAPF32[$1>>2];
  $35 = $18 * $18;
  $36 = $19 * $19;
  $37 = $35 + $36;
  $38 = $37 * $34;
  $39 = $33 < $38;
  if ($39) {
   break;
  }
  $40 = $7 + $11;
  $41 = $40 * 0.5;
  $42 = $9 + $13;
  $43 = $42 * 0.5;
  $44 = $15 + $41;
  $45 = $44 * 0.5;
  $46 = $17 + $43;
  $47 = $46 * 0.5;
  $48 = (($level$tr7) + 1)|0;
  _nsvg__flattenCubicBez($r,$x1$tr1,$y1$tr2,$3,$5,$15,$17,$45,$47,$48,0);
  $49 = ($level$tr7|0)>(9);
  if ($49) {
   label = 6;
   break;
  } else {
   $level$tr7 = $48;$x1$tr1 = $45;$x2$tr3 = $41;$x3$tr5 = $11;$y1$tr2 = $47;$y2$tr4 = $43;$y3$tr6 = $13;
  }
 }
 if ((label|0) == 6) {
  return;
 }
 _nsvg__addPathPoint($r,$x4,$y4,$type);
 return;
}
function _nsvg__ptEquals($x1,$y1,$x2,$y2,$tol) {
 $x1 = +$x1;
 $y1 = +$y1;
 $x2 = +$x2;
 $y2 = +$y2;
 $tol = +$tol;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $x2 - $x1;
 $1 = $y2 - $y1;
 $2 = $0 * $0;
 $3 = $1 * $1;
 $4 = $2 + $3;
 $5 = $tol * $tol;
 $6 = $4 < $5;
 $7 = $6&1;
 return ($7|0);
}
function _nsvg__appendPathPoint($r,$pt) {
 $r = $r|0;
 $pt = $pt|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($r)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($r)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)<($3|0);
 if (!($4)) {
  $5 = ($3|0)>(0);
  $6 = $3 << 1;
  $$ = $5 ? $6 : 64;
  HEAP32[$2>>2] = $$;
  $7 = ((($r)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $$ << 5;
  $10 = (_realloc($8,$9)|0);
  HEAP32[$7>>2] = $10;
  $11 = ($10|0)==(0|0);
  if ($11) {
   return;
  }
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = ((($r)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + ($12<<5)|0);
 ;HEAP32[$15>>2]=HEAP32[$pt>>2]|0;HEAP32[$15+4>>2]=HEAP32[$pt+4>>2]|0;HEAP32[$15+8>>2]=HEAP32[$pt+8>>2]|0;HEAP32[$15+12>>2]=HEAP32[$pt+12>>2]|0;HEAP32[$15+16>>2]=HEAP32[$pt+16>>2]|0;HEAP32[$15+20>>2]=HEAP32[$pt+20>>2]|0;HEAP32[$15+24>>2]=HEAP32[$pt+24>>2]|0;HEAP32[$15+28>>2]=HEAP32[$pt+28>>2]|0;
 $16 = HEAP32[$0>>2]|0;
 $17 = (($16) + 1)|0;
 HEAP32[$0>>2] = $17;
 return;
}
function _nsvg__duplicatePoints($r) {
 $r = $r|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($r)) + 32|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($r)) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)>($3|0);
 if ($4) {
  HEAP32[$2>>2] = $1;
  $5 = ((($r)) + 40|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $1 << 5;
  $8 = (_realloc($6,$7)|0);
  HEAP32[$5>>2] = $8;
  $9 = ($8|0)==(0|0);
  if ($9) {
   return;
  }
 }
 $10 = ((($r)) + 40|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($r)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$0>>2]|0;
 $15 = $14 << 5;
 _memcpy(($11|0),($13|0),($15|0))|0;
 $16 = HEAP32[$0>>2]|0;
 $17 = ((($r)) + 44|0);
 HEAP32[$17>>2] = $16;
 return;
}
function _nsvg__prepareStroke($r,$miterLimit,$lineJoin) {
 $r = $r|0;
 $miterLimit = +$miterLimit;
 $lineJoin = $lineJoin|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0.0, $43 = 0.0;
 var $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0;
 var $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0.0;
 var $80 = 0, $81 = 0, $9 = 0.0, $i$09 = 0, $j$06 = 0, $lineJoin$off = 0, $p0$08 = 0, $p0$08$phi = 0, $p0$15 = 0, $p0$15$phi = 0, $p1$07 = 0, $p1$14 = 0, $s2$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($r)) + 32|0);
 $1 = ((($r)) + 28|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)>(0);
 if (!($4)) {
  return;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = (($5) + -1)|0;
 $7 = (($2) + ($6<<5)|0);
 $i$09 = 0;$p0$08 = $7;$p1$07 = $2;
 while(1) {
  $8 = +HEAPF32[$p1$07>>2];
  $9 = +HEAPF32[$p0$08>>2];
  $10 = $8 - $9;
  $11 = ((($p0$08)) + 8|0);
  HEAPF32[$11>>2] = $10;
  $12 = ((($p1$07)) + 4|0);
  $13 = +HEAPF32[$12>>2];
  $14 = ((($p0$08)) + 4|0);
  $15 = +HEAPF32[$14>>2];
  $16 = $13 - $15;
  $17 = ((($p0$08)) + 12|0);
  HEAPF32[$17>>2] = $16;
  $18 = (+_nsvg__normalize($11,$17));
  $19 = ((($p0$08)) + 16|0);
  HEAPF32[$19>>2] = $18;
  $20 = ((($p1$07)) + 32|0);
  $21 = (($i$09) + 1)|0;
  $22 = HEAP32[$0>>2]|0;
  $23 = ($21|0)<($22|0);
  if ($23) {
   $p0$08$phi = $p1$07;$i$09 = $21;$p1$07 = $20;$p0$08 = $p0$08$phi;
  } else {
   $$lcssa = $22;
   break;
  }
 }
 $24 = HEAP32[$1>>2]|0;
 $25 = ($$lcssa|0)>(0);
 if (!($25)) {
  return;
 }
 $26 = (($$lcssa) + -1)|0;
 $27 = (($24) + ($26<<5)|0);
 $28 = HEAP32[$0>>2]|0;
 $lineJoin$off = (($lineJoin) + -1)|0;
 $29 = ($lineJoin$off>>>0)<(2);
 $j$06 = 0;$p0$15 = $27;$p1$14 = $24;
 while(1) {
  $30 = ((($p0$15)) + 12|0);
  $31 = +HEAPF32[$30>>2];
  $32 = ((($p0$15)) + 8|0);
  $33 = +HEAPF32[$32>>2];
  $34 = ((($p1$14)) + 12|0);
  $35 = +HEAPF32[$34>>2];
  $36 = ((($p1$14)) + 8|0);
  $37 = +HEAPF32[$36>>2];
  $38 = -$37;
  $39 = $31 + $35;
  $40 = $39 * 0.5;
  $41 = ((($p1$14)) + 20|0);
  HEAPF32[$41>>2] = $40;
  $42 = $38 - $33;
  $43 = $42 * 0.5;
  $44 = ((($p1$14)) + 24|0);
  HEAPF32[$44>>2] = $43;
  $45 = +HEAPF32[$41>>2];
  $46 = $45 * $45;
  $47 = $43 * $43;
  $48 = $46 + $47;
  $49 = $48 > 9.9999999747524271E-7;
  if ($49) {
   $50 = 1.0 / $48;
   $51 = $50 > 600.0;
   $s2$0 = $51 ? 600.0 : $50;
   $52 = $45 * $s2$0;
   HEAPF32[$41>>2] = $52;
   $53 = +HEAPF32[$44>>2];
   $54 = $53 * $s2$0;
   HEAPF32[$44>>2] = $54;
  }
  $55 = ((($p1$14)) + 28|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = $56 & 1;
  HEAP8[$55>>0] = $57;
  $58 = +HEAPF32[$36>>2];
  $59 = +HEAPF32[$30>>2];
  $60 = $58 * $59;
  $61 = +HEAPF32[$32>>2];
  $62 = +HEAPF32[$34>>2];
  $63 = $61 * $62;
  $64 = $60 - $63;
  $65 = $64 > 0.0;
  if ($65) {
   $66 = $57&255;
   $67 = $66 | 4;
   $68 = $67&255;
   HEAP8[$55>>0] = $68;
  }
  $69 = HEAP8[$55>>0]|0;
  $70 = $69&255;
  $71 = $70 & 1;
  $72 = ($71|0)==(0);
  if (!($72)) {
   $73 = $48 * $miterLimit;
   $74 = $73 * $miterLimit;
   $75 = $74 < 1.0;
   $76 = $29 | $75;
   if ($76) {
    $77 = $70 | 2;
    $78 = $77&255;
    HEAP8[$55>>0] = $78;
   }
  }
  $79 = ((($p1$14)) + 32|0);
  $80 = (($j$06) + 1)|0;
  $81 = ($80|0)<($28|0);
  if ($81) {
   $p0$15$phi = $p1$14;$j$06 = $80;$p1$14 = $79;$p0$15 = $p0$15$phi;
  } else {
   break;
  }
 }
 return;
}
function _nsvg__expandStroke($r,$points,$npoints,$closed,$lineJoin,$lineCap,$lineWidth) {
 $r = $r|0;
 $points = $points|0;
 $npoints = $npoints|0;
 $closed = $closed|0;
 $lineJoin = $lineJoin|0;
 $lineCap = $lineCap|0;
 $lineWidth = +$lineWidth;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $dx = 0, $dx1 = 0, $dy = 0, $dy2 = 0, $e$07 = 0, $exitcond = 0, $firstLeft$sroa$0$0 = 0.0, $firstLeft$sroa$3$0 = 0.0, $firstRight$sroa$0$0 = 0.0, $firstRight$sroa$3$0 = 0.0, $j$011 = 0, $left = 0;
 var $p0$02 = 0, $p0$1$lcssa = 0, $p0$19 = 0, $p0$19$phi = 0, $p1$04 = 0, $p1$1$lcssa = 0, $p1$110 = 0, $right = 0, $s$05 = 0, $scevgep = 0, $scevgep13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $left = sp + 48|0;
 $right = sp + 16|0;
 $dx = sp + 12|0;
 $dy = sp + 8|0;
 $dx1 = sp + 4|0;
 $dy2 = sp;
 $0 = $lineWidth * 0.5;
 $1 = ((($r)) + 8|0);
 $2 = +HEAPF32[$1>>2];
 $3 = (_nsvg__curveDivs($0,$2)|0);
 ;HEAP32[$left>>2]=0|0;HEAP32[$left+4>>2]=0|0;HEAP32[$left+8>>2]=0|0;HEAP32[$left+12>>2]=0|0;HEAP32[$left+16>>2]=0|0;HEAP32[$left+20>>2]=0|0;HEAP32[$left+24>>2]=0|0;HEAP32[$left+28>>2]=0|0;
 ;HEAP32[$right>>2]=0|0;HEAP32[$right+4>>2]=0|0;HEAP32[$right+8>>2]=0|0;HEAP32[$right+12>>2]=0|0;HEAP32[$right+16>>2]=0|0;HEAP32[$right+20>>2]=0|0;HEAP32[$right+24>>2]=0|0;HEAP32[$right+28>>2]=0|0;
 $4 = ($closed|0)!=(0);
 L1: do {
  if ($4) {
   $5 = (($npoints) + -1)|0;
   $6 = (($points) + ($5<<5)|0);
   _nsvg__initClosed($left,$right,$6,$points,$lineWidth);
   $7 = +HEAPF32[$left>>2];
   $8 = ((($left)) + 4|0);
   $9 = +HEAPF32[$8>>2];
   $10 = +HEAPF32[$right>>2];
   $11 = ((($right)) + 4|0);
   $12 = +HEAPF32[$11>>2];
   $e$07 = $npoints;$firstLeft$sroa$0$0 = $7;$firstLeft$sroa$3$0 = $9;$firstRight$sroa$0$0 = $10;$firstRight$sroa$3$0 = $12;$p0$02 = $6;$p1$04 = $points;$s$05 = 0;
  } else {
   $13 = ((($points)) + 32|0);
   $14 = (($npoints) + -1)|0;
   $15 = +HEAPF32[$13>>2];
   $16 = +HEAPF32[$points>>2];
   $17 = $15 - $16;
   HEAPF32[$dx>>2] = $17;
   $18 = ((($points)) + 36|0);
   $19 = +HEAPF32[$18>>2];
   $20 = ((($points)) + 4|0);
   $21 = +HEAPF32[$20>>2];
   $22 = $19 - $21;
   HEAPF32[$dy>>2] = $22;
   (+_nsvg__normalize($dx,$dy));
   switch ($lineCap|0) {
   case 0:  {
    $23 = +HEAPF32[$dx>>2];
    $24 = +HEAPF32[$dy>>2];
    _nsvg__buttCap($r,$left,$right,$points,$23,$24,$lineWidth,0);
    $e$07 = $14;$firstLeft$sroa$0$0 = 0.0;$firstLeft$sroa$3$0 = 0.0;$firstRight$sroa$0$0 = 0.0;$firstRight$sroa$3$0 = 0.0;$p0$02 = $points;$p1$04 = $13;$s$05 = 1;
    break L1;
    break;
   }
   case 2:  {
    $25 = +HEAPF32[$dx>>2];
    $26 = +HEAPF32[$dy>>2];
    _nsvg__squareCap($r,$left,$right,$points,$25,$26,$lineWidth,0);
    $e$07 = $14;$firstLeft$sroa$0$0 = 0.0;$firstLeft$sroa$3$0 = 0.0;$firstRight$sroa$0$0 = 0.0;$firstRight$sroa$3$0 = 0.0;$p0$02 = $points;$p1$04 = $13;$s$05 = 1;
    break L1;
    break;
   }
   case 1:  {
    $27 = +HEAPF32[$dx>>2];
    $28 = +HEAPF32[$dy>>2];
    _nsvg__roundCap($r,$left,$right,$points,$27,$28,$lineWidth,$3,0);
    $e$07 = $14;$firstLeft$sroa$0$0 = 0.0;$firstLeft$sroa$3$0 = 0.0;$firstRight$sroa$0$0 = 0.0;$firstRight$sroa$3$0 = 0.0;$p0$02 = $points;$p1$04 = $13;$s$05 = 1;
    break L1;
    break;
   }
   default: {
    $e$07 = $14;$firstLeft$sroa$0$0 = 0.0;$firstLeft$sroa$3$0 = 0.0;$firstRight$sroa$0$0 = 0.0;$firstRight$sroa$3$0 = 0.0;$p0$02 = $points;$p1$04 = $13;$s$05 = 1;
    break L1;
   }
   }
  }
 } while(0);
 $29 = ($e$07|0)>($s$05|0);
 if ($29) {
  $30 = (($e$07) - ($s$05))|0;
  $31 = (($e$07) + -1)|0;
  $32 = (($31) - ($s$05))|0;
  $j$011 = $s$05;$p0$19 = $p0$02;$p1$110 = $p1$04;
  while(1) {
   $33 = ((($p1$110)) + 28|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $36 = $35 & 1;
   $37 = ($36|0)==(0);
   L13: do {
    if ($37) {
     _nsvg__straightJoin($r,$left,$right,$p1$110,$lineWidth);
    } else {
     switch ($lineJoin|0) {
     case 1:  {
      _nsvg__roundJoin($r,$left,$right,$p0$19,$p1$110,$lineWidth,$3);
      break L13;
      break;
     }
     case 2:  {
      break;
     }
     default: {
      label = 12;
     }
     }
     if ((label|0) == 12) {
      label = 0;
      $38 = $35 & 2;
      $39 = ($38|0)==(0);
      if ($39) {
       _nsvg__miterJoin($r,$left,$right,$p0$19,$p1$110,$lineWidth);
       break;
      }
     }
     _nsvg__bevelJoin($r,$left,$right,$p0$19,$p1$110,$lineWidth);
    }
   } while(0);
   $40 = ((($p1$110)) + 32|0);
   $41 = (($j$011) + 1)|0;
   $exitcond = ($41|0)==($e$07|0);
   if ($exitcond) {
    break;
   } else {
    $p0$19$phi = $p1$110;$j$011 = $41;$p1$110 = $40;$p0$19 = $p0$19$phi;
   }
  }
  $scevgep = (($p1$04) + ($30<<5)|0);
  $scevgep13 = (($p1$04) + ($32<<5)|0);
  $p0$1$lcssa = $scevgep13;$p1$1$lcssa = $scevgep;
 } else {
  $p0$1$lcssa = $p0$02;$p1$1$lcssa = $p1$04;
 }
 if ($4) {
  $42 = +HEAPF32[$left>>2];
  $43 = ((($left)) + 4|0);
  $44 = +HEAPF32[$43>>2];
  _nsvg__addEdge($r,$firstLeft$sroa$0$0,$firstLeft$sroa$3$0,$42,$44);
  $45 = +HEAPF32[$right>>2];
  $46 = ((($right)) + 4|0);
  $47 = +HEAPF32[$46>>2];
  _nsvg__addEdge($r,$45,$47,$firstRight$sroa$0$0,$firstRight$sroa$3$0);
  STACKTOP = sp;return;
 }
 $48 = +HEAPF32[$p1$1$lcssa>>2];
 $49 = +HEAPF32[$p0$1$lcssa>>2];
 $50 = $48 - $49;
 HEAPF32[$dx1>>2] = $50;
 $51 = ((($p1$1$lcssa)) + 4|0);
 $52 = +HEAPF32[$51>>2];
 $53 = ((($p0$1$lcssa)) + 4|0);
 $54 = +HEAPF32[$53>>2];
 $55 = $52 - $54;
 HEAPF32[$dy2>>2] = $55;
 (+_nsvg__normalize($dx1,$dy2));
 switch ($lineCap|0) {
 case 0:  {
  $56 = +HEAPF32[$dx1>>2];
  $57 = -$56;
  $58 = +HEAPF32[$dy2>>2];
  $59 = -$58;
  _nsvg__buttCap($r,$right,$left,$p1$1$lcssa,$57,$59,$lineWidth,1);
  STACKTOP = sp;return;
  break;
 }
 case 2:  {
  $60 = +HEAPF32[$dx1>>2];
  $61 = -$60;
  $62 = +HEAPF32[$dy2>>2];
  $63 = -$62;
  _nsvg__squareCap($r,$right,$left,$p1$1$lcssa,$61,$63,$lineWidth,1);
  STACKTOP = sp;return;
  break;
 }
 case 1:  {
  $64 = +HEAPF32[$dx1>>2];
  $65 = -$64;
  $66 = +HEAPF32[$dy2>>2];
  $67 = -$66;
  _nsvg__roundCap($r,$right,$left,$p1$1$lcssa,$65,$67,$lineWidth,$3,1);
  STACKTOP = sp;return;
  break;
 }
 default: {
  STACKTOP = sp;return;
 }
 }
}
function _nsvg__curveDivs($r,$tol) {
 $r = +$r;
 $tol = +$tol;
 var $$ = 0, $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $r + $tol;
 $1 = $r / $0;
 $2 = (+Math_acos((+$1)));
 $3 = $2 * 2.0;
 $4 = 3.1415927410125732 / $3;
 $5 = (+Math_ceil((+$4)));
 $6 = (~~(($5)));
 $7 = ($6|0)<(2);
 $$ = $7 ? 2 : $6;
 return ($$|0);
}
function _nsvg__initClosed($left,$right,$p0,$p1,$lineWidth) {
 $left = $left|0;
 $right = $right|0;
 $p0 = $p0|0;
 $p1 = $p1|0;
 $lineWidth = +$lineWidth;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $dx = 0, $dy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $dx = sp + 4|0;
 $dy = sp;
 $0 = $lineWidth * 0.5;
 $1 = +HEAPF32[$p1>>2];
 $2 = +HEAPF32[$p0>>2];
 $3 = $1 - $2;
 HEAPF32[$dx>>2] = $3;
 $4 = ((($p1)) + 4|0);
 $5 = +HEAPF32[$4>>2];
 $6 = ((($p0)) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $5 - $7;
 HEAPF32[$dy>>2] = $8;
 $9 = (+_nsvg__normalize($dx,$dy));
 $10 = +HEAPF32[$p0>>2];
 $11 = +HEAPF32[$dx>>2];
 $12 = $9 * $11;
 $13 = $12 * 0.5;
 $14 = $10 + $13;
 $15 = +HEAPF32[$6>>2];
 $16 = +HEAPF32[$dy>>2];
 $17 = $9 * $16;
 $18 = $17 * 0.5;
 $19 = $15 + $18;
 $20 = $0 * $16;
 $21 = $14 - $20;
 $22 = $0 * $11;
 $23 = $22 + $19;
 $24 = $14 + $20;
 $25 = $19 - $22;
 HEAPF32[$left>>2] = $21;
 $26 = ((($left)) + 4|0);
 HEAPF32[$26>>2] = $23;
 HEAPF32[$right>>2] = $24;
 $27 = ((($right)) + 4|0);
 HEAPF32[$27>>2] = $25;
 STACKTOP = sp;return;
}
function _nsvg__normalize($x,$y) {
 $x = $x|0;
 $y = $y|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$x>>2];
 $1 = $0 * $0;
 $2 = +HEAPF32[$y>>2];
 $3 = $2 * $2;
 $4 = $1 + $3;
 $5 = (+Math_sqrt((+$4)));
 $6 = $5 > 9.9999999747524271E-7;
 if (!($6)) {
  return (+$5);
 }
 $7 = 1.0 / $5;
 $8 = $0 * $7;
 HEAPF32[$x>>2] = $8;
 $9 = +HEAPF32[$y>>2];
 $10 = $7 * $9;
 HEAPF32[$y>>2] = $10;
 return (+$5);
}
function _nsvg__buttCap($r,$left,$right,$p,$dx,$dy,$lineWidth,$connect) {
 $r = $r|0;
 $left = $left|0;
 $right = $right|0;
 $p = $p|0;
 $dx = +$dx;
 $dy = +$dy;
 $lineWidth = +$lineWidth;
 $connect = $connect|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = $lineWidth * 0.5;
 $1 = +HEAPF32[$p>>2];
 $2 = ((($p)) + 4|0);
 $3 = +HEAPF32[$2>>2];
 $4 = $0 * $dy;
 $5 = $1 - $4;
 $6 = $0 * $dx;
 $7 = $6 + $3;
 $8 = $4 + $1;
 $9 = $3 - $6;
 _nsvg__addEdge($r,$5,$7,$8,$9);
 $10 = ($connect|0)==(0);
 if (!($10)) {
  $11 = +HEAPF32[$left>>2];
  $12 = ((($left)) + 4|0);
  $13 = +HEAPF32[$12>>2];
  _nsvg__addEdge($r,$11,$13,$5,$7);
  $14 = +HEAPF32[$right>>2];
  $15 = ((($right)) + 4|0);
  $16 = +HEAPF32[$15>>2];
  _nsvg__addEdge($r,$8,$9,$14,$16);
 }
 HEAPF32[$left>>2] = $5;
 $17 = ((($left)) + 4|0);
 HEAPF32[$17>>2] = $7;
 HEAPF32[$right>>2] = $8;
 $18 = ((($right)) + 4|0);
 HEAPF32[$18>>2] = $9;
 return;
}
function _nsvg__squareCap($r,$left,$right,$p,$dx,$dy,$lineWidth,$connect) {
 $r = $r|0;
 $left = $left|0;
 $right = $right|0;
 $p = $p|0;
 $dx = +$dx;
 $dy = +$dy;
 $lineWidth = +$lineWidth;
 $connect = $connect|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0;
 var $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $lineWidth * 0.5;
 $1 = +HEAPF32[$p>>2];
 $2 = $0 * $dx;
 $3 = $1 - $2;
 $4 = ((($p)) + 4|0);
 $5 = +HEAPF32[$4>>2];
 $6 = $0 * $dy;
 $7 = $5 - $6;
 $8 = $3 - $6;
 $9 = $2 + $7;
 $10 = $6 + $3;
 $11 = $7 - $2;
 _nsvg__addEdge($r,$8,$9,$10,$11);
 $12 = ($connect|0)==(0);
 if (!($12)) {
  $13 = +HEAPF32[$left>>2];
  $14 = ((($left)) + 4|0);
  $15 = +HEAPF32[$14>>2];
  _nsvg__addEdge($r,$13,$15,$8,$9);
  $16 = +HEAPF32[$right>>2];
  $17 = ((($right)) + 4|0);
  $18 = +HEAPF32[$17>>2];
  _nsvg__addEdge($r,$10,$11,$16,$18);
 }
 HEAPF32[$left>>2] = $8;
 $19 = ((($left)) + 4|0);
 HEAPF32[$19>>2] = $9;
 HEAPF32[$right>>2] = $10;
 $20 = ((($right)) + 4|0);
 HEAPF32[$20>>2] = $11;
 return;
}
function _nsvg__roundCap($r,$left,$right,$p,$dx,$dy,$lineWidth,$ncap,$connect) {
 $r = $r|0;
 $left = $left|0;
 $right = $right|0;
 $p = $p|0;
 $dx = +$dx;
 $dy = +$dy;
 $lineWidth = +$lineWidth;
 $ncap = $ncap|0;
 $connect = $connect|0;
 var $$rx$0 = 0.0, $$ry$0 = 0.0, $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $exitcond = 0, $i$07 = 0, $lx$0$lcssa = 0.0;
 var $lx$06 = 0.0, $lx$1 = 0.0, $ly$0$lcssa = 0.0, $ly$05 = 0.0, $ly$1 = 0.0, $prevx$01 = 0.0, $prevy$02 = 0.0, $rx$0$lcssa = 0.0, $rx$04 = 0.0, $rx$1 = 0.0, $ry$0$lcssa = 0.0, $ry$03 = 0.0, $ry$1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $lineWidth * 0.5;
 $1 = +HEAPF32[$p>>2];
 $2 = ((($p)) + 4|0);
 $3 = +HEAPF32[$2>>2];
 $4 = ($ncap|0)>(0);
 if ($4) {
  $5 = (($ncap) + -1)|0;
  $6 = (+($5|0));
  $i$07 = 0;$lx$06 = 0.0;$ly$05 = 0.0;$prevx$01 = 0.0;$prevy$02 = 0.0;$rx$04 = 0.0;$ry$03 = 0.0;
  while(1) {
   $7 = (+($i$07|0));
   $8 = $7 / $6;
   $9 = $8 * 3.1415927410125732;
   $10 = (+Math_cos((+$9)));
   $11 = $0 * $10;
   $12 = (+Math_sin((+$9)));
   $13 = $0 * $12;
   $14 = $11 * $dy;
   $15 = $1 - $14;
   $16 = $13 * $dx;
   $17 = $15 - $16;
   $18 = $11 * $dx;
   $19 = $3 + $18;
   $20 = $13 * $dy;
   $21 = $19 - $20;
   $22 = ($i$07|0)>(0);
   if ($22) {
    _nsvg__addEdge($r,$prevx$01,$prevy$02,$17,$21);
    label = 6;
   } else {
    $23 = ($i$07|0)==(0);
    if ($23) {
     $lx$1 = $17;$ly$1 = $21;$rx$1 = $rx$04;$ry$1 = $ry$03;
    } else {
     label = 6;
    }
   }
   if ((label|0) == 6) {
    label = 0;
    $24 = ($i$07|0)==($5|0);
    $$ry$0 = $24 ? $21 : $ry$03;
    $$rx$0 = $24 ? $17 : $rx$04;
    $lx$1 = $lx$06;$ly$1 = $ly$05;$rx$1 = $$rx$0;$ry$1 = $$ry$0;
   }
   $25 = (($i$07) + 1)|0;
   $exitcond = ($25|0)==($ncap|0);
   if ($exitcond) {
    $lx$0$lcssa = $lx$1;$ly$0$lcssa = $ly$1;$rx$0$lcssa = $rx$1;$ry$0$lcssa = $ry$1;
    break;
   } else {
    $i$07 = $25;$lx$06 = $lx$1;$ly$05 = $ly$1;$prevx$01 = $17;$prevy$02 = $21;$rx$04 = $rx$1;$ry$03 = $ry$1;
   }
  }
 } else {
  $lx$0$lcssa = 0.0;$ly$0$lcssa = 0.0;$rx$0$lcssa = 0.0;$ry$0$lcssa = 0.0;
 }
 $26 = ($connect|0)==(0);
 if ($26) {
  HEAPF32[$left>>2] = $lx$0$lcssa;
  $33 = ((($left)) + 4|0);
  HEAPF32[$33>>2] = $ly$0$lcssa;
  HEAPF32[$right>>2] = $rx$0$lcssa;
  $34 = ((($right)) + 4|0);
  HEAPF32[$34>>2] = $ry$0$lcssa;
  return;
 }
 $27 = +HEAPF32[$left>>2];
 $28 = ((($left)) + 4|0);
 $29 = +HEAPF32[$28>>2];
 _nsvg__addEdge($r,$27,$29,$lx$0$lcssa,$ly$0$lcssa);
 $30 = +HEAPF32[$right>>2];
 $31 = ((($right)) + 4|0);
 $32 = +HEAPF32[$31>>2];
 _nsvg__addEdge($r,$rx$0$lcssa,$ry$0$lcssa,$30,$32);
 HEAPF32[$left>>2] = $lx$0$lcssa;
 $33 = ((($left)) + 4|0);
 HEAPF32[$33>>2] = $ly$0$lcssa;
 HEAPF32[$right>>2] = $rx$0$lcssa;
 $34 = ((($right)) + 4|0);
 HEAPF32[$34>>2] = $ry$0$lcssa;
 return;
}
function _nsvg__roundJoin($r,$left,$right,$p0,$p1,$lineWidth,$ncap) {
 $r = $r|0;
 $left = $left|0;
 $right = $right|0;
 $p0 = $p0|0;
 $p1 = $p1|0;
 $lineWidth = +$lineWidth;
 $ncap = $ncap|0;
 var $$ = 0, $$op = 0, $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $da$0 = 0.0, $da$1 = 0.0;
 var $exitcond = 0, $i$05 = 0, $lx$0$lcssa = 0.0, $lx$04 = 0.0, $ly$0$lcssa = 0.0, $ly$03 = 0.0, $ncap$$ = 0, $rx$0$lcssa = 0.0, $rx$02 = 0.0, $ry$0$lcssa = 0.0, $ry$01 = 0.0, $smax12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $lineWidth * 0.5;
 $1 = ((($p0)) + 12|0);
 $2 = +HEAPF32[$1>>2];
 $3 = ((($p0)) + 8|0);
 $4 = +HEAPF32[$3>>2];
 $5 = -$4;
 $6 = ((($p1)) + 12|0);
 $7 = +HEAPF32[$6>>2];
 $8 = ((($p1)) + 8|0);
 $9 = +HEAPF32[$8>>2];
 $10 = -$9;
 $11 = (+Math_atan2((+$5),(+$2)));
 $12 = (+Math_atan2((+$10),(+$7)));
 $13 = $12 - $11;
 $14 = $13 < 3.1415927410125732;
 $15 = $13 + 6.2831854820251465;
 $da$0 = $14 ? $15 : $13;
 $16 = $da$0 > 3.1415927410125732;
 $17 = $da$0 + -6.2831854820251465;
 $da$1 = $16 ? $17 : $da$0;
 $18 = (+_nsvg__absf($da$1));
 $19 = $18 / 3.1415927410125732;
 $20 = (+($ncap|0));
 $21 = $20 * $19;
 $22 = (+Math_ceil((+$21)));
 $23 = (~~(($22)));
 $24 = ($23|0)<(2);
 $$ = $24 ? 2 : $23;
 $25 = ($$|0)>($ncap|0);
 $ncap$$ = $25 ? $ncap : $$;
 $26 = +HEAPF32[$left>>2];
 $27 = ((($left)) + 4|0);
 $28 = +HEAPF32[$27>>2];
 $29 = +HEAPF32[$right>>2];
 $30 = ((($right)) + 4|0);
 $31 = +HEAPF32[$30>>2];
 $32 = ($ncap$$|0)>(0);
 if (!($32)) {
  $lx$0$lcssa = $26;$ly$0$lcssa = $28;$rx$0$lcssa = $29;$ry$0$lcssa = $31;
  HEAPF32[$left>>2] = $lx$0$lcssa;
  HEAPF32[$27>>2] = $ly$0$lcssa;
  HEAPF32[$right>>2] = $rx$0$lcssa;
  HEAPF32[$30>>2] = $ry$0$lcssa;
  return;
 }
 $33 = (($ncap$$) + -1)|0;
 $34 = (+($33|0));
 $35 = ((($p1)) + 4|0);
 $36 = $ncap ^ -1;
 $37 = ($23|0)>(2);
 $$op = $23 ^ -1;
 $38 = $37 ? $$op : -3;
 $39 = ($38|0)<($36|0);
 $smax12 = $39 ? $36 : $38;
 $40 = $smax12 ^ -1;
 $i$05 = 0;$lx$04 = $26;$ly$03 = $28;$rx$02 = $29;$ry$01 = $31;
 while(1) {
  $41 = (+($i$05|0));
  $42 = $41 / $34;
  $43 = $da$1 * $42;
  $44 = $11 + $43;
  $45 = (+Math_cos((+$44)));
  $46 = $0 * $45;
  $47 = (+Math_sin((+$44)));
  $48 = $0 * $47;
  $49 = +HEAPF32[$p1>>2];
  $50 = $49 - $46;
  $51 = +HEAPF32[$35>>2];
  $52 = $51 - $48;
  $53 = $46 + $49;
  $54 = $48 + $51;
  _nsvg__addEdge($r,$50,$52,$lx$04,$ly$03);
  _nsvg__addEdge($r,$rx$02,$ry$01,$53,$54);
  $55 = (($i$05) + 1)|0;
  $exitcond = ($55|0)==($40|0);
  if ($exitcond) {
   $lx$0$lcssa = $50;$ly$0$lcssa = $52;$rx$0$lcssa = $53;$ry$0$lcssa = $54;
   break;
  } else {
   $i$05 = $55;$lx$04 = $50;$ly$03 = $52;$rx$02 = $53;$ry$01 = $54;
  }
 }
 HEAPF32[$left>>2] = $lx$0$lcssa;
 HEAPF32[$27>>2] = $ly$0$lcssa;
 HEAPF32[$right>>2] = $rx$0$lcssa;
 HEAPF32[$30>>2] = $ry$0$lcssa;
 return;
}
function _nsvg__bevelJoin($r,$left,$right,$p0,$p1,$lineWidth) {
 $r = $r|0;
 $left = $left|0;
 $right = $right|0;
 $p0 = $p0|0;
 $p1 = $p1|0;
 $lineWidth = +$lineWidth;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $lineWidth * 0.5;
 $1 = ((($p0)) + 12|0);
 $2 = +HEAPF32[$1>>2];
 $3 = ((($p0)) + 8|0);
 $4 = +HEAPF32[$3>>2];
 $5 = ((($p1)) + 12|0);
 $6 = +HEAPF32[$5>>2];
 $7 = ((($p1)) + 8|0);
 $8 = +HEAPF32[$7>>2];
 $9 = +HEAPF32[$p1>>2];
 $10 = $0 * $2;
 $11 = $9 - $10;
 $12 = ((($p1)) + 4|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $0 * $4;
 $15 = $14 + $13;
 $16 = $10 + $9;
 $17 = $13 - $14;
 $18 = $0 * $6;
 $19 = $9 - $18;
 $20 = $0 * $8;
 $21 = $20 + $13;
 $22 = $18 + $9;
 $23 = $13 - $20;
 $24 = +HEAPF32[$left>>2];
 $25 = ((($left)) + 4|0);
 $26 = +HEAPF32[$25>>2];
 _nsvg__addEdge($r,$11,$15,$24,$26);
 _nsvg__addEdge($r,$19,$21,$11,$15);
 $27 = +HEAPF32[$right>>2];
 $28 = ((($right)) + 4|0);
 $29 = +HEAPF32[$28>>2];
 _nsvg__addEdge($r,$27,$29,$16,$17);
 _nsvg__addEdge($r,$16,$17,$22,$23);
 HEAPF32[$left>>2] = $19;
 HEAPF32[$25>>2] = $21;
 HEAPF32[$right>>2] = $22;
 HEAPF32[$28>>2] = $23;
 return;
}
function _nsvg__miterJoin($r,$left,$right,$p0,$p1,$lineWidth) {
 $r = $r|0;
 $left = $left|0;
 $right = $right|0;
 $p0 = $p0|0;
 $p1 = $p1|0;
 $lineWidth = +$lineWidth;
 var $0 = 0.0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $lx1$0 = 0.0, $ly1$0 = 0.0, $rx1$0 = 0.0, $ry1$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $lineWidth * 0.5;
 $1 = ((($p0)) + 12|0);
 $2 = +HEAPF32[$1>>2];
 $3 = ((($p0)) + 8|0);
 $4 = +HEAPF32[$3>>2];
 $5 = -$4;
 $6 = ((($p1)) + 12|0);
 $7 = +HEAPF32[$6>>2];
 $8 = ((($p1)) + 8|0);
 $9 = +HEAPF32[$8>>2];
 $10 = -$9;
 $11 = ((($p1)) + 28|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12 & 4;
 $14 = ($13<<24>>24)==(0);
 $15 = +HEAPF32[$p1>>2];
 if ($14) {
  $42 = $0 * $2;
  $43 = $15 - $42;
  $44 = ((($p1)) + 4|0);
  $45 = +HEAPF32[$44>>2];
  $46 = $0 * $5;
  $47 = $45 - $46;
  $48 = $0 * $7;
  $49 = $15 - $48;
  $50 = $0 * $10;
  $51 = $45 - $50;
  $52 = +HEAPF32[$left>>2];
  $53 = ((($left)) + 4|0);
  $54 = +HEAPF32[$53>>2];
  _nsvg__addEdge($r,$43,$47,$52,$54);
  _nsvg__addEdge($r,$49,$51,$43,$47);
  $55 = +HEAPF32[$p1>>2];
  $56 = ((($p1)) + 20|0);
  $57 = +HEAPF32[$56>>2];
  $58 = $0 * $57;
  $59 = $55 + $58;
  $60 = +HEAPF32[$44>>2];
  $61 = ((($p1)) + 24|0);
  $62 = +HEAPF32[$61>>2];
  $63 = $0 * $62;
  $64 = $60 + $63;
  $65 = +HEAPF32[$right>>2];
  $66 = ((($right)) + 4|0);
  $67 = +HEAPF32[$66>>2];
  _nsvg__addEdge($r,$65,$67,$59,$64);
  $lx1$0 = $49;$ly1$0 = $51;$rx1$0 = $59;$ry1$0 = $64;
  HEAPF32[$left>>2] = $lx1$0;
  $68 = ((($left)) + 4|0);
  HEAPF32[$68>>2] = $ly1$0;
  HEAPF32[$right>>2] = $rx1$0;
  $69 = ((($right)) + 4|0);
  HEAPF32[$69>>2] = $ry1$0;
  return;
 } else {
  $16 = ((($p1)) + 20|0);
  $17 = +HEAPF32[$16>>2];
  $18 = $0 * $17;
  $19 = $15 - $18;
  $20 = ((($p1)) + 4|0);
  $21 = +HEAPF32[$20>>2];
  $22 = ((($p1)) + 24|0);
  $23 = +HEAPF32[$22>>2];
  $24 = $0 * $23;
  $25 = $21 - $24;
  $26 = +HEAPF32[$left>>2];
  $27 = ((($left)) + 4|0);
  $28 = +HEAPF32[$27>>2];
  _nsvg__addEdge($r,$19,$25,$26,$28);
  $29 = +HEAPF32[$p1>>2];
  $30 = $0 * $2;
  $31 = $30 + $29;
  $32 = +HEAPF32[$20>>2];
  $33 = $0 * $5;
  $34 = $33 + $32;
  $35 = $0 * $7;
  $36 = $35 + $29;
  $37 = $0 * $10;
  $38 = $37 + $32;
  $39 = +HEAPF32[$right>>2];
  $40 = ((($right)) + 4|0);
  $41 = +HEAPF32[$40>>2];
  _nsvg__addEdge($r,$39,$41,$31,$34);
  _nsvg__addEdge($r,$31,$34,$36,$38);
  $lx1$0 = $19;$ly1$0 = $25;$rx1$0 = $36;$ry1$0 = $38;
  HEAPF32[$left>>2] = $lx1$0;
  $68 = ((($left)) + 4|0);
  HEAPF32[$68>>2] = $ly1$0;
  HEAPF32[$right>>2] = $rx1$0;
  $69 = ((($right)) + 4|0);
  HEAPF32[$69>>2] = $ry1$0;
  return;
 }
}
function _nsvg__straightJoin($r,$left,$right,$p1,$lineWidth) {
 $r = $r|0;
 $left = $left|0;
 $right = $right|0;
 $p1 = $p1|0;
 $lineWidth = +$lineWidth;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $lineWidth * 0.5;
 $1 = +HEAPF32[$p1>>2];
 $2 = ((($p1)) + 20|0);
 $3 = +HEAPF32[$2>>2];
 $4 = $0 * $3;
 $5 = $1 - $4;
 $6 = ((($p1)) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = ((($p1)) + 24|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $0 * $9;
 $11 = $7 - $10;
 $12 = $1 + $4;
 $13 = $7 + $10;
 $14 = +HEAPF32[$left>>2];
 $15 = ((($left)) + 4|0);
 $16 = +HEAPF32[$15>>2];
 _nsvg__addEdge($r,$5,$11,$14,$16);
 $17 = +HEAPF32[$right>>2];
 $18 = ((($right)) + 4|0);
 $19 = +HEAPF32[$18>>2];
 _nsvg__addEdge($r,$17,$19,$12,$13);
 HEAPF32[$left>>2] = $5;
 HEAPF32[$15>>2] = $11;
 HEAPF32[$right>>2] = $12;
 HEAPF32[$18>>2] = $13;
 return;
}
function _nsvg__addEdge($r,$x0,$y0,$x1,$y1) {
 $r = $r|0;
 $x0 = +$x0;
 $y0 = +$y0;
 $x1 = +$x1;
 $y1 = +$y1;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $y0 == $y1;
 if ($0) {
  return;
 }
 $1 = ((($r)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($r)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)<($4|0);
 if (!($5)) {
  $6 = ($4|0)>(0);
  $7 = $4 << 1;
  $$ = $6 ? $7 : 64;
  HEAP32[$3>>2] = $$;
  $8 = ((($r)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($$*24)|0;
  $11 = (_realloc($9,$10)|0);
  HEAP32[$8>>2] = $11;
  $12 = ($11|0)==(0|0);
  if ($12) {
   return;
  }
 }
 $13 = HEAP32[$1>>2]|0;
 $14 = ((($r)) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($13) + 1)|0;
 HEAP32[$1>>2] = $16;
 $17 = $y0 < $y1;
 $18 = (($15) + (($13*24)|0)|0);
 if ($17) {
  HEAPF32[$18>>2] = $x0;
  $19 = (((($15) + (($13*24)|0)|0)) + 4|0);
  HEAPF32[$19>>2] = $y0;
  $20 = (((($15) + (($13*24)|0)|0)) + 8|0);
  HEAPF32[$20>>2] = $x1;
  $21 = (((($15) + (($13*24)|0)|0)) + 12|0);
  HEAPF32[$21>>2] = $y1;
  $22 = (((($15) + (($13*24)|0)|0)) + 16|0);
  HEAP32[$22>>2] = 1;
  return;
 } else {
  HEAPF32[$18>>2] = $x1;
  $23 = (((($15) + (($13*24)|0)|0)) + 4|0);
  HEAPF32[$23>>2] = $y1;
  $24 = (((($15) + (($13*24)|0)|0)) + 8|0);
  HEAPF32[$24>>2] = $x0;
  $25 = (((($15) + (($13*24)|0)|0)) + 12|0);
  HEAPF32[$25>>2] = $y0;
  $26 = (((($15) + (($13*24)|0)|0)) + 16|0);
  HEAP32[$26>>2] = -1;
  return;
 }
}
function _nsvg__absf($x) {
 $x = +$x;
 var $0 = 0, $1 = 0.0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $x < 0.0;
 $1 = -$x;
 $2 = $0 ? $1 : $x;
 return (+$2);
}
function _nsvg__freeActive($r,$z) {
 $r = $r|0;
 $z = $z|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($r)) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($z)) + 16|0);
 HEAP32[$2>>2] = $1;
 HEAP32[$0>>2] = $z;
 return;
}
function _nsvg__addActive($r,$e,$startPoint) {
 $r = $r|0;
 $e = $e|0;
 $startPoint = +$startPoint;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0;
 var $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0.0, $z$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($r)) + 52|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $5 = (_nsvg__alloc($r)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   $$0 = 0;
   return ($$0|0);
  } else {
   $z$0 = $5;
  }
 } else {
  $3 = ((($1)) + 16|0);
  $4 = HEAP32[$3>>2]|0;
  HEAP32[$0>>2] = $4;
  $z$0 = $1;
 }
 $7 = ((($e)) + 8|0);
 $8 = +HEAPF32[$7>>2];
 $9 = +HEAPF32[$e>>2];
 $10 = $8 - $9;
 $11 = ((($e)) + 12|0);
 $12 = +HEAPF32[$11>>2];
 $13 = ((($e)) + 4|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $12 - $14;
 $16 = $10 / $15;
 $17 = $16 < 0.0;
 if ($17) {
  $18 = $16 * -1024.0;
  $19 = (+Math_floor((+$18)));
  $20 = -$19;
  $21 = (~~(($20)));
  $22 = ((($z$0)) + 4|0);
  HEAP32[$22>>2] = $21;
 } else {
  $23 = $16 * 1024.0;
  $24 = (+Math_floor((+$23)));
  $25 = (~~(($24)));
  $26 = ((($z$0)) + 4|0);
  HEAP32[$26>>2] = $25;
 }
 $27 = +HEAPF32[$e>>2];
 $28 = +HEAPF32[$13>>2];
 $29 = $startPoint - $28;
 $30 = $16 * $29;
 $31 = $27 + $30;
 $32 = $31 * 1024.0;
 $33 = (+Math_floor((+$32)));
 $34 = (~~(($33)));
 HEAP32[$z$0>>2] = $34;
 $35 = HEAP32[$11>>2]|0;
 $36 = ((($z$0)) + 8|0);
 HEAP32[$36>>2] = $35;
 $37 = ((($z$0)) + 16|0);
 HEAP32[$37>>2] = 0;
 $38 = ((($e)) + 16|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($z$0)) + 12|0);
 HEAP32[$40>>2] = $39;
 $$0 = $z$0;
 return ($$0|0);
}
function _nsvg__fillActiveEdges($scanline,$len,$e,$xmin,$xmax,$fillRule) {
 $scanline = $scanline|0;
 $len = $len|0;
 $e = $e|0;
 $xmin = $xmin|0;
 $xmax = $xmax|0;
 $fillRule = $fillRule|0;
 var $$05 = 0, $$1 = 0, $$old1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $w$03 = 0, $w$2 = 0, $w$3 = 0, $x0$04 = 0, $x0$1 = 0, $x0$2 = 0, $x0$3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($fillRule<<24>>24)==(0);
 if (!($0)) {
  $11 = ($fillRule<<24>>24)==(1);
  $12 = ($e|0)!=(0|0);
  $or$cond = $12 & $11;
  if ($or$cond) {
   $$1 = $e;$w$2 = 0;$x0$2 = 0;
  } else {
   return;
  }
  while(1) {
   $13 = ($w$2|0)==(0);
   $14 = HEAP32[$$1>>2]|0;
   if ($13) {
    $w$3 = 1;$x0$3 = $14;
   } else {
    _nsvg__fillScanline($scanline,$len,$x0$2,$14,$xmin,$xmax);
    $w$3 = 0;$x0$3 = $x0$2;
   }
   $15 = ((($$1)) + 16|0);
   $16 = HEAP32[$15>>2]|0;
   $$old1 = ($16|0)==(0|0);
   if ($$old1) {
    break;
   } else {
    $$1 = $16;$w$2 = $w$3;$x0$2 = $x0$3;
   }
  }
  return;
 }
 $1 = ($e|0)==(0|0);
 if ($1) {
  return;
 } else {
  $$05 = $e;$w$03 = 0;$x0$04 = 0;
 }
 while(1) {
  $2 = ($w$03|0)==(0);
  $3 = HEAP32[$$05>>2]|0;
  $4 = ((($$05)) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + ($w$03))|0;
  if ($2) {
   $x0$1 = $3;
  } else {
   $7 = ($6|0)==(0);
   if ($7) {
    _nsvg__fillScanline($scanline,$len,$x0$04,$3,$xmin,$xmax);
    $x0$1 = $x0$04;
   } else {
    $x0$1 = $x0$04;
   }
  }
  $8 = ((($$05)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if ($10) {
   break;
  } else {
   $$05 = $9;$w$03 = $6;$x0$04 = $x0$1;
  }
 }
 return;
}
function _nsvg__scanlineSolid($dst,$count,$cover,$x,$y,$tx,$ty,$scale,$cache) {
 $dst = $dst|0;
 $count = $count|0;
 $cover = $cover|0;
 $x = $x|0;
 $y = $y|0;
 $tx = +$tx;
 $ty = +$ty;
 $scale = +$scale;
 $cache = $cache|0;
 var $$017 = 0, $$08 = 0, $$112 = 0, $$1211 = 0, $$217 = 0, $$2316 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0.0;
 var $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0;
 var $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0;
 var $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond19 = 0, $exitcond20 = 0, $fx$010 = 0.0, $fx11$015 = 0.0, $i$06 = 0, $i1$09 = 0;
 var $i16$014 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$cache>>0]|0;
 switch ($0<<24>>24) {
 case 1:  {
  $1 = ((($cache)) + 28|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = $2 & 255;
  $4 = $2 >>> 8;
  $5 = $4 & 255;
  $6 = $2 >>> 16;
  $7 = $6 & 255;
  $8 = $2 >>> 24;
  $9 = ($count|0)>(0);
  if ($9) {
   $$017 = $cover;$$08 = $dst;$i$06 = 0;
  } else {
   return;
  }
  while(1) {
   $10 = HEAP8[$$017>>0]|0;
   $11 = $10&255;
   $12 = Math_imul($11, $8)|0;
   $13 = (_nsvg__div255($12)|0);
   $14 = (255 - ($13))|0;
   $15 = Math_imul($13, $3)|0;
   $16 = (_nsvg__div255($15)|0);
   $17 = Math_imul($13, $5)|0;
   $18 = (_nsvg__div255($17)|0);
   $19 = Math_imul($13, $7)|0;
   $20 = (_nsvg__div255($19)|0);
   $21 = HEAP8[$$08>>0]|0;
   $22 = $21&255;
   $23 = Math_imul($22, $14)|0;
   $24 = (_nsvg__div255($23)|0);
   $25 = (($24) + ($16))|0;
   $26 = ((($$08)) + 1|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = Math_imul($28, $14)|0;
   $30 = (_nsvg__div255($29)|0);
   $31 = (($30) + ($18))|0;
   $32 = ((($$08)) + 2|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = Math_imul($34, $14)|0;
   $36 = (_nsvg__div255($35)|0);
   $37 = (($36) + ($20))|0;
   $38 = ((($$08)) + 3|0);
   $39 = HEAP8[$38>>0]|0;
   $40 = $39&255;
   $41 = Math_imul($40, $14)|0;
   $42 = (_nsvg__div255($41)|0);
   $43 = (($42) + ($13))|0;
   $44 = $25&255;
   HEAP8[$$08>>0] = $44;
   $45 = $31&255;
   HEAP8[$26>>0] = $45;
   $46 = $37&255;
   HEAP8[$32>>0] = $46;
   $47 = $43&255;
   HEAP8[$38>>0] = $47;
   $48 = ((($$017)) + 1|0);
   $49 = ((($$08)) + 4|0);
   $50 = (($i$06) + 1)|0;
   $exitcond = ($50|0)==($count|0);
   if ($exitcond) {
    break;
   } else {
    $$017 = $48;$$08 = $49;$i$06 = $50;
   }
  }
  return;
  break;
 }
 case 2:  {
  $51 = (+($y|0));
  $52 = $51 - $ty;
  $53 = $52 / $scale;
  $54 = 1.0 / $scale;
  $55 = ($count|0)>(0);
  if (!($55)) {
   return;
  }
  $56 = (+($x|0));
  $57 = $56 - $tx;
  $58 = $57 / $scale;
  $59 = ((($cache)) + 8|0);
  $60 = ((($cache)) + 16|0);
  $61 = ((($cache)) + 24|0);
  $$112 = $dst;$$1211 = $cover;$fx$010 = $58;$i1$09 = 0;
  while(1) {
   $62 = +HEAPF32[$59>>2];
   $63 = $fx$010 * $62;
   $64 = +HEAPF32[$60>>2];
   $65 = $53 * $64;
   $66 = $63 + $65;
   $67 = +HEAPF32[$61>>2];
   $68 = $67 + $66;
   $69 = $68 * 255.0;
   $70 = (+_nsvg__clampf($69,0.0,255.0));
   $71 = (~~(($70)));
   $72 = (((($cache)) + 28|0) + ($71<<2)|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = $73 & 255;
   $75 = $73 >>> 8;
   $76 = $75 & 255;
   $77 = $73 >>> 16;
   $78 = $77 & 255;
   $79 = $73 >>> 24;
   $80 = HEAP8[$$1211>>0]|0;
   $81 = $80&255;
   $82 = Math_imul($81, $79)|0;
   $83 = (_nsvg__div255($82)|0);
   $84 = (255 - ($83))|0;
   $85 = Math_imul($83, $74)|0;
   $86 = (_nsvg__div255($85)|0);
   $87 = Math_imul($76, $83)|0;
   $88 = (_nsvg__div255($87)|0);
   $89 = Math_imul($78, $83)|0;
   $90 = (_nsvg__div255($89)|0);
   $91 = HEAP8[$$112>>0]|0;
   $92 = $91&255;
   $93 = Math_imul($92, $84)|0;
   $94 = (_nsvg__div255($93)|0);
   $95 = (($94) + ($86))|0;
   $96 = ((($$112)) + 1|0);
   $97 = HEAP8[$96>>0]|0;
   $98 = $97&255;
   $99 = Math_imul($98, $84)|0;
   $100 = (_nsvg__div255($99)|0);
   $101 = (($100) + ($88))|0;
   $102 = ((($$112)) + 2|0);
   $103 = HEAP8[$102>>0]|0;
   $104 = $103&255;
   $105 = Math_imul($104, $84)|0;
   $106 = (_nsvg__div255($105)|0);
   $107 = (($106) + ($90))|0;
   $108 = ((($$112)) + 3|0);
   $109 = HEAP8[$108>>0]|0;
   $110 = $109&255;
   $111 = Math_imul($110, $84)|0;
   $112 = (_nsvg__div255($111)|0);
   $113 = (($112) + ($83))|0;
   $114 = $95&255;
   HEAP8[$$112>>0] = $114;
   $115 = $101&255;
   HEAP8[$96>>0] = $115;
   $116 = $107&255;
   HEAP8[$102>>0] = $116;
   $117 = $113&255;
   HEAP8[$108>>0] = $117;
   $118 = ((($$1211)) + 1|0);
   $119 = ((($$112)) + 4|0);
   $120 = $54 + $fx$010;
   $121 = (($i1$09) + 1)|0;
   $exitcond19 = ($121|0)==($count|0);
   if ($exitcond19) {
    break;
   } else {
    $$112 = $119;$$1211 = $118;$fx$010 = $120;$i1$09 = $121;
   }
  }
  return;
  break;
 }
 case 3:  {
  $122 = ((($cache)) + 4|0);
  $123 = (+($y|0));
  $124 = $123 - $ty;
  $125 = $124 / $scale;
  $126 = 1.0 / $scale;
  $127 = ($count|0)>(0);
  if (!($127)) {
   return;
  }
  $128 = (+($x|0));
  $129 = $128 - $tx;
  $130 = $129 / $scale;
  $131 = ((($cache)) + 12|0);
  $132 = ((($cache)) + 20|0);
  $133 = ((($cache)) + 8|0);
  $134 = ((($cache)) + 16|0);
  $135 = ((($cache)) + 24|0);
  $$217 = $dst;$$2316 = $cover;$fx11$015 = $130;$i16$014 = 0;
  while(1) {
   $136 = +HEAPF32[$122>>2];
   $137 = $fx11$015 * $136;
   $138 = +HEAPF32[$131>>2];
   $139 = $125 * $138;
   $140 = $137 + $139;
   $141 = +HEAPF32[$132>>2];
   $142 = $141 + $140;
   $143 = +HEAPF32[$133>>2];
   $144 = $fx11$015 * $143;
   $145 = +HEAPF32[$134>>2];
   $146 = $125 * $145;
   $147 = $144 + $146;
   $148 = +HEAPF32[$135>>2];
   $149 = $148 + $147;
   $150 = $142 * $142;
   $151 = $149 * $149;
   $152 = $150 + $151;
   $153 = (+Math_sqrt((+$152)));
   $154 = $153 * 255.0;
   $155 = (+_nsvg__clampf($154,0.0,255.0));
   $156 = (~~(($155)));
   $157 = (((($cache)) + 28|0) + ($156<<2)|0);
   $158 = HEAP32[$157>>2]|0;
   $159 = $158 & 255;
   $160 = $158 >>> 8;
   $161 = $160 & 255;
   $162 = $158 >>> 16;
   $163 = $162 & 255;
   $164 = $158 >>> 24;
   $165 = HEAP8[$$2316>>0]|0;
   $166 = $165&255;
   $167 = Math_imul($166, $164)|0;
   $168 = (_nsvg__div255($167)|0);
   $169 = (255 - ($168))|0;
   $170 = Math_imul($168, $159)|0;
   $171 = (_nsvg__div255($170)|0);
   $172 = Math_imul($161, $168)|0;
   $173 = (_nsvg__div255($172)|0);
   $174 = Math_imul($163, $168)|0;
   $175 = (_nsvg__div255($174)|0);
   $176 = HEAP8[$$217>>0]|0;
   $177 = $176&255;
   $178 = Math_imul($177, $169)|0;
   $179 = (_nsvg__div255($178)|0);
   $180 = (($179) + ($171))|0;
   $181 = ((($$217)) + 1|0);
   $182 = HEAP8[$181>>0]|0;
   $183 = $182&255;
   $184 = Math_imul($183, $169)|0;
   $185 = (_nsvg__div255($184)|0);
   $186 = (($185) + ($173))|0;
   $187 = ((($$217)) + 2|0);
   $188 = HEAP8[$187>>0]|0;
   $189 = $188&255;
   $190 = Math_imul($189, $169)|0;
   $191 = (_nsvg__div255($190)|0);
   $192 = (($191) + ($175))|0;
   $193 = ((($$217)) + 3|0);
   $194 = HEAP8[$193>>0]|0;
   $195 = $194&255;
   $196 = Math_imul($195, $169)|0;
   $197 = (_nsvg__div255($196)|0);
   $198 = (($197) + ($168))|0;
   $199 = $180&255;
   HEAP8[$$217>>0] = $199;
   $200 = $186&255;
   HEAP8[$181>>0] = $200;
   $201 = $192&255;
   HEAP8[$187>>0] = $201;
   $202 = $198&255;
   HEAP8[$193>>0] = $202;
   $203 = ((($$2316)) + 1|0);
   $204 = ((($$217)) + 4|0);
   $205 = $126 + $fx11$015;
   $206 = (($i16$014) + 1)|0;
   $exitcond20 = ($206|0)==($count|0);
   if ($exitcond20) {
    break;
   } else {
    $$217 = $204;$$2316 = $203;$fx11$015 = $205;$i16$014 = $206;
   }
  }
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _nsvg__div255($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($x*257)|0;
 $1 = (($0) + 257)|0;
 $2 = $1 >> 16;
 return ($2|0);
}
function _nsvg__clampf($a,$mn,$mx) {
 $a = +$a;
 $mn = +$mn;
 $mx = +$mx;
 var $0 = 0, $1 = 0, $2 = 0.0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $a < $mn;
 $1 = $a > $mx;
 $2 = $1 ? $mx : $a;
 $3 = $0 ? $mn : $2;
 return (+$3);
}
function _nsvg__fillScanline($scanline,$len,$x0,$x1,$xmin,$xmax) {
 $scanline = $scanline|0;
 $len = $len|0;
 $x0 = $x0|0;
 $x1 = $x1|0;
 $xmin = $xmin|0;
 $xmax = $xmax|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$0 = 0, $i$11 = 0, $j$0 = 0, $or$cond = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $x0 >> 10;
 $1 = $x1 >> 10;
 $2 = HEAP32[$xmin>>2]|0;
 $3 = ($0|0)<($2|0);
 if ($3) {
  HEAP32[$xmin>>2] = $0;
 }
 $4 = HEAP32[$xmax>>2]|0;
 $5 = ($1|0)>($4|0);
 if ($5) {
  HEAP32[$xmax>>2] = $1;
 }
 $6 = ($0|0)<($len|0);
 $7 = ($1|0)>(-1);
 $or$cond = $6 & $7;
 if (!($or$cond)) {
  return;
 }
 $8 = ($0|0)==($1|0);
 if ($8) {
  $9 = (($scanline) + ($0)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = (($x1) - ($x0))|0;
  $13 = ($12*51)|0;
  $14 = $13 >>> 10;
  $15 = (($11) + ($14))|0;
  $16 = $15&255;
  HEAP8[$9>>0] = $16;
  return;
 }
 $17 = ($0|0)>(-1);
 if ($17) {
  $18 = (($scanline) + ($0)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = $x0 & 1023;
  $22 = (1024 - ($21))|0;
  $23 = ($22*51)|0;
  $24 = $23 >>> 10;
  $25 = (($20) + ($24))|0;
  $26 = $25&255;
  HEAP8[$18>>0] = $26;
  $phitmp = (($0) + 1)|0;
  $i$0 = $phitmp;
 } else {
  $i$0 = 0;
 }
 $27 = ($1|0)<($len|0);
 if ($27) {
  $28 = (($scanline) + ($1)|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = $x1 & 1023;
  $32 = ($31*51)|0;
  $33 = $32 >>> 10;
  $34 = (($30) + ($33))|0;
  $35 = $34&255;
  HEAP8[$28>>0] = $35;
  $j$0 = $1;
 } else {
  $j$0 = $len;
 }
 $36 = ($i$0|0)<($j$0|0);
 if ($36) {
  $i$11 = $i$0;
 } else {
  return;
 }
 while(1) {
  $37 = (($scanline) + ($i$11)|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = (($39) + 51)|0;
  $41 = $40&255;
  HEAP8[$37>>0] = $41;
  $42 = (($i$11) + 1)|0;
  $exitcond = ($42|0)==($j$0|0);
  if ($exitcond) {
   break;
  } else {
   $i$11 = $42;
  }
 }
 return;
}
function _nsvg__alloc($r) {
 $r = $r|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($r)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  label = 3;
 } else {
  $3 = ((($1)) + 1024|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($4) + 20)|0;
  $6 = ($5|0)>(1024);
  if ($6) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $7 = HEAP32[$0>>2]|0;
  $8 = (_nsvg__nextPage($r,$7)|0);
  HEAP32[$0>>2] = $8;
 }
 $9 = HEAP32[$0>>2]|0;
 $10 = ((($9)) + 1024|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + 20)|0;
 HEAP32[$10>>2] = $12;
 $13 = (($9) + ($11)|0);
 return ($13|0);
}
function _nsvg__nextPage($r,$cur) {
 $r = $r|0;
 $cur = $cur|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($cur|0)!=(0|0);
 if ($0) {
  $1 = ((($cur)) + 1028|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $$0 = $2;
   return ($$0|0);
  }
 }
 $4 = (_malloc(1032)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 _memset(($4|0),0,1032)|0;
 if ($0) {
  $6 = ((($cur)) + 1028|0);
  HEAP32[$6>>2] = $4;
  $$0 = $4;
  return ($$0|0);
 } else {
  $7 = ((($r)) + 56|0);
  HEAP32[$7>>2] = $4;
  $$0 = $4;
  return ($$0|0);
 }
 return (0)|0;
}
function _nsvg__applyOpacity($c,$u) {
 $c = $c|0;
 $u = +$u;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_nsvg__clampf($u,0.0,1.0));
 $1 = $0 * 256.0;
 $2 = (~~(($1)));
 $3 = $c >>> 8;
 $4 = $c >>> 16;
 $5 = $c >>> 24;
 $6 = Math_imul($2, $5)|0;
 $7 = $6 >>> 8;
 $8 = $c&255;
 $9 = $3&255;
 $10 = $4&255;
 $11 = $7&255;
 $12 = (_nsvg__RGBA($8,$9,$10,$11)|0);
 return ($12|0);
}
function _nsvg__lerpRGBA($c0,$c1,$u) {
 $c0 = $c0|0;
 $c1 = $c1|0;
 $u = +$u;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_nsvg__clampf($u,0.0,1.0));
 $1 = $0 * 256.0;
 $2 = (~~(($1)));
 $3 = $c0 & 255;
 $4 = (256 - ($2))|0;
 $5 = Math_imul($4, $3)|0;
 $6 = $c1 & 255;
 $7 = Math_imul($2, $6)|0;
 $8 = (($5) + ($7))|0;
 $9 = $8 >>> 8;
 $10 = $c0 >>> 8;
 $11 = $10 & 255;
 $12 = Math_imul($4, $11)|0;
 $13 = $c1 >>> 8;
 $14 = $13 & 255;
 $15 = Math_imul($2, $14)|0;
 $16 = (($12) + ($15))|0;
 $17 = $16 >>> 8;
 $18 = $c0 >>> 16;
 $19 = $18 & 255;
 $20 = Math_imul($4, $19)|0;
 $21 = $c1 >>> 16;
 $22 = $21 & 255;
 $23 = Math_imul($2, $22)|0;
 $24 = (($20) + ($23))|0;
 $25 = $24 >>> 8;
 $26 = $c0 >>> 24;
 $27 = Math_imul($4, $26)|0;
 $28 = $c1 >>> 24;
 $29 = Math_imul($2, $28)|0;
 $30 = (($27) + ($29))|0;
 $31 = $30 >>> 8;
 $32 = $9&255;
 $33 = $17&255;
 $34 = $25&255;
 $35 = $31&255;
 $36 = (_nsvg__RGBA($32,$33,$34,$35)|0);
 return ($36|0);
}
function _nsvg__RGBA($r,$g,$b,$a) {
 $r = $r|0;
 $g = $g|0;
 $b = $b|0;
 $a = $a|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $r&255;
 $1 = $g&255;
 $2 = $1 << 8;
 $3 = $2 | $0;
 $4 = $b&255;
 $5 = $4 << 16;
 $6 = $3 | $5;
 $7 = $a&255;
 $8 = $7 << 24;
 $9 = $6 | $8;
 return ($9|0);
}
function _nsvg__deleteGradientData($grad) {
 $grad = $grad|0;
 var $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($grad|0)==(0|0);
 if ($0) {
  return;
 } else {
  $$01 = $grad;
 }
 while(1) {
  $1 = ((($$01)) + 208|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($$01)) + 204|0);
  $4 = HEAP32[$3>>2]|0;
  _free($4);
  _free($$01);
  $5 = ($2|0)==(0|0);
  if ($5) {
   break;
  } else {
   $$01 = $2;
  }
 }
 return;
}
function _nsvg__imageBounds($p,$bounds) {
 $p = $p|0;
 $bounds = $bounds|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $shape$0 = 0, $shape$0$in = 0, $shape$0$in1 = 0, $shape$02 = 0, $shape$03 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 39956|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($1)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  ;HEAP32[$bounds>>2]=0|0;HEAP32[$bounds+4>>2]=0|0;HEAP32[$bounds+8>>2]=0|0;HEAP32[$bounds+12>>2]=0|0;
  return;
 }
 $5 = ((($3)) + 136|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$bounds>>2] = $6;
 $7 = ((($3)) + 140|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($bounds)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = ((($3)) + 144|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($bounds)) + 8|0);
 HEAP32[$12>>2] = $11;
 $13 = ((($3)) + 148|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ((($bounds)) + 12|0);
 HEAP32[$15>>2] = $14;
 $shape$0$in1 = ((($3)) + 156|0);
 $shape$02 = HEAP32[$shape$0$in1>>2]|0;
 $16 = ($shape$02|0)==(0|0);
 if ($16) {
  return;
 } else {
  $shape$03 = $shape$02;
 }
 while(1) {
  $17 = +HEAPF32[$bounds>>2];
  $18 = ((($shape$03)) + 136|0);
  $19 = +HEAPF32[$18>>2];
  $20 = (+_nsvg__minf($17,$19));
  HEAPF32[$bounds>>2] = $20;
  $21 = +HEAPF32[$9>>2];
  $22 = ((($shape$03)) + 140|0);
  $23 = +HEAPF32[$22>>2];
  $24 = (+_nsvg__minf($21,$23));
  HEAPF32[$9>>2] = $24;
  $25 = +HEAPF32[$12>>2];
  $26 = ((($shape$03)) + 144|0);
  $27 = +HEAPF32[$26>>2];
  $28 = (+_nsvg__maxf($25,$27));
  HEAPF32[$12>>2] = $28;
  $29 = +HEAPF32[$15>>2];
  $30 = ((($shape$03)) + 148|0);
  $31 = +HEAPF32[$30>>2];
  $32 = (+_nsvg__maxf($29,$31));
  HEAPF32[$15>>2] = $32;
  $shape$0$in = ((($shape$03)) + 156|0);
  $shape$0 = HEAP32[$shape$0$in>>2]|0;
  $33 = ($shape$0|0)==(0|0);
  if ($33) {
   break;
  } else {
   $shape$03 = $shape$0;
  }
 }
 return;
}
function _nsvg__parseUnits($units) {
 $units = $units|0;
 var $$0 = 0, $$pr = 0, $$pr1$pr = 0, $$pr3 = 0, $$pr5 = 0, $$pr7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$units>>0]|0;
 $1 = ($0<<24>>24)==(112);
 do {
  if ($1) {
   $2 = ((($units)) + 1|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==(120);
   if ($4) {
    $$0 = 1;
    return ($$0|0);
   }
   $$pr = HEAP8[$units>>0]|0;
   $5 = ($$pr<<24>>24)==(112);
   if ($5) {
    $6 = ((($units)) + 1|0);
    $7 = HEAP8[$6>>0]|0;
    $8 = ($7<<24>>24)==(116);
    if ($8) {
     $$0 = 2;
     return ($$0|0);
    }
    $$pr1$pr = HEAP8[$units>>0]|0;
    $9 = ($$pr1$pr<<24>>24)==(112);
    if (!($9)) {
     $13 = $$pr1$pr;
     break;
    }
    $10 = ((($units)) + 1|0);
    $11 = HEAP8[$10>>0]|0;
    $12 = ($11<<24>>24)==(99);
    if ($12) {
     $$0 = 3;
     return ($$0|0);
    }
   }
   $$pr3 = HEAP8[$units>>0]|0;
   $13 = $$pr3;
  } else {
   $13 = $0;
  }
 } while(0);
 $14 = ($13<<24>>24)==(109);
 if ($14) {
  $15 = ((($units)) + 1|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)==(109);
  if ($17) {
   $$0 = 4;
   return ($$0|0);
  }
 }
 $18 = HEAP8[$units>>0]|0;
 $19 = ($18<<24>>24)==(99);
 do {
  if ($19) {
   $20 = ((($units)) + 1|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)==(109);
   if ($22) {
    $$0 = 5;
    return ($$0|0);
   } else {
    $$pr5 = HEAP8[$units>>0]|0;
    $23 = $$pr5;
    break;
   }
  } else {
   $23 = $18;
  }
 } while(0);
 $24 = ($23<<24>>24)==(105);
 if ($24) {
  $25 = ((($units)) + 1|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = ($26<<24>>24)==(110);
  if ($27) {
   $$0 = 6;
   return ($$0|0);
  }
 }
 $28 = HEAP8[$units>>0]|0;
 switch ($28<<24>>24) {
 case 101:  {
  label = 16;
  break;
 }
 case 37:  {
  $$0 = 7;
  return ($$0|0);
  break;
 }
 default: {
 }
 }
 if ((label|0) == 16) {
  $29 = ((($units)) + 1|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = ($30<<24>>24)==(109);
  if ($31) {
   $$0 = 8;
   return ($$0|0);
  }
  $$pr7 = HEAP8[$units>>0]|0;
  $32 = ($$pr7<<24>>24)==(101);
  if ($32) {
   $33 = ((($units)) + 1|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = ($34<<24>>24)==(120);
   if ($35) {
    $$0 = 9;
    return ($$0|0);
   }
  }
 }
 $$0 = 0;
 return ($$0|0);
}
function _nsvg__coord($agg$result,$v,$units) {
 $agg$result = $agg$result|0;
 $v = +$v;
 $units = $units|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF32[$agg$result>>2] = $v;
 $0 = ((($agg$result)) + 4|0);
 HEAP32[$0>>2] = $units;
 return;
}
function _nsvg__convertToPixels($p,$c,$orig,$length) {
 $p = $p|0;
 $c = $c|0;
 $orig = +$orig;
 $length = +$length;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0;
 var $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $5 = 0.0;
 var $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_nsvg__getAttr($p)|0);
 $1 = ((($c)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 do {
  switch ($2|0) {
  case 0:  {
   $3 = +HEAPF32[$c>>2];
   $$0 = $3;
   return (+$$0);
   break;
  }
  case 1:  {
   $4 = +HEAPF32[$c>>2];
   $$0 = $4;
   return (+$$0);
   break;
  }
  case 2:  {
   $5 = +HEAPF32[$c>>2];
   $6 = $5 / 72.0;
   $7 = ((($p)) + 39996|0);
   $8 = +HEAPF32[$7>>2];
   $9 = $6 * $8;
   $$0 = $9;
   return (+$$0);
   break;
  }
  case 3:  {
   $10 = +HEAPF32[$c>>2];
   $11 = $10 / 6.0;
   $12 = ((($p)) + 39996|0);
   $13 = +HEAPF32[$12>>2];
   $14 = $11 * $13;
   $$0 = $14;
   return (+$$0);
   break;
  }
  case 4:  {
   $15 = +HEAPF32[$c>>2];
   $16 = $15 / 25.399999618530273;
   $17 = ((($p)) + 39996|0);
   $18 = +HEAPF32[$17>>2];
   $19 = $16 * $18;
   $$0 = $19;
   return (+$$0);
   break;
  }
  case 5:  {
   $20 = +HEAPF32[$c>>2];
   $21 = $20 / 2.5399999618530273;
   $22 = ((($p)) + 39996|0);
   $23 = +HEAPF32[$22>>2];
   $24 = $21 * $23;
   $$0 = $24;
   return (+$$0);
   break;
  }
  case 6:  {
   $25 = +HEAPF32[$c>>2];
   $26 = ((($p)) + 39996|0);
   $27 = +HEAPF32[$26>>2];
   $28 = $25 * $27;
   $$0 = $28;
   return (+$$0);
   break;
  }
  case 8:  {
   $29 = +HEAPF32[$c>>2];
   $30 = ((($0)) + 292|0);
   $31 = +HEAPF32[$30>>2];
   $32 = $29 * $31;
   $$0 = $32;
   return (+$$0);
   break;
  }
  case 9:  {
   $33 = +HEAPF32[$c>>2];
   $34 = ((($0)) + 292|0);
   $35 = +HEAPF32[$34>>2];
   $36 = $33 * $35;
   $37 = $36 * 0.51999998092651367;
   $$0 = $37;
   return (+$$0);
   break;
  }
  case 7:  {
   $38 = +HEAPF32[$c>>2];
   $39 = $38 / 100.0;
   $40 = $39 * $length;
   $41 = $40 + $orig;
   $$0 = $41;
   return (+$$0);
   break;
  }
  default: {
   $42 = +HEAPF32[$c>>2];
   $$0 = $42;
   return (+$$0);
  }
  }
 } while(0);
 return +(0.0);
}
function _nsvg__minf($a,$b) {
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $a < $b;
 $1 = $0 ? $a : $b;
 return (+$1);
}
function _nsvg__viewAlign($content,$container,$type) {
 $content = +$content;
 $container = +$container;
 $type = $type|0;
 var $$ = 0.0, $0 = 0, $1 = 0, $2 = 0.0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0);
 if ($0) {
  return +0;
 } else {
  $1 = ($type|0)==(2);
  $2 = $container - $content;
  $3 = $2 * 0.5;
  $$ = $1 ? $2 : $3;
  return (+$$);
 }
 return +(0.0);
}
function _nsvg__maxf($a,$b) {
 $a = +$a;
 $b = +$b;
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $a > $b;
 $1 = $0 ? $a : $b;
 return (+$1);
}
function _nsvg__scaleGradient($grad,$tx,$ty,$sx,$sy) {
 $grad = $grad|0;
 $tx = +$tx;
 $ty = +$ty;
 $sx = +$sx;
 $sy = +$sy;
 var $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $t = sp;
 _nsvg__xformSetTranslation($t,$tx,$ty);
 _nsvg__xformMultiply($grad,$t);
 _nsvg__xformSetScale($t,$sx,$sy);
 _nsvg__xformMultiply($grad,$t);
 STACKTOP = sp;return;
}
function _nsvg__xformInverse($inv,$t) {
 $inv = $inv|0;
 $t = $t|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$t>>2];
 $1 = $0;
 $2 = ((($t)) + 12|0);
 $3 = +HEAPF32[$2>>2];
 $4 = $3;
 $5 = $1 * $4;
 $6 = ((($t)) + 8|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $7;
 $9 = ((($t)) + 4|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $10;
 $12 = $8 * $11;
 $13 = $5 - $12;
 $14 = $13 > -9.9999999999999995E-7;
 $15 = $13 < 9.9999999999999995E-7;
 $or$cond = $14 & $15;
 if ($or$cond) {
  _nsvg__xformIdentity($t);
  return;
 } else {
  $16 = 1.0 / $13;
  $17 = $4 * $16;
  $18 = $17;
  HEAPF32[$inv>>2] = $18;
  $19 = +HEAPF32[$6>>2];
  $20 = -$19;
  $21 = $20;
  $22 = $16 * $21;
  $23 = $22;
  $24 = ((($inv)) + 8|0);
  HEAPF32[$24>>2] = $23;
  $25 = +HEAPF32[$6>>2];
  $26 = $25;
  $27 = ((($t)) + 20|0);
  $28 = +HEAPF32[$27>>2];
  $29 = $28;
  $30 = $26 * $29;
  $31 = +HEAPF32[$2>>2];
  $32 = $31;
  $33 = ((($t)) + 16|0);
  $34 = +HEAPF32[$33>>2];
  $35 = $34;
  $36 = $32 * $35;
  $37 = $30 - $36;
  $38 = $16 * $37;
  $39 = $38;
  $40 = ((($inv)) + 16|0);
  HEAPF32[$40>>2] = $39;
  $41 = +HEAPF32[$9>>2];
  $42 = -$41;
  $43 = $42;
  $44 = $16 * $43;
  $45 = $44;
  $46 = ((($inv)) + 4|0);
  HEAPF32[$46>>2] = $45;
  $47 = +HEAPF32[$t>>2];
  $48 = $47;
  $49 = $16 * $48;
  $50 = $49;
  $51 = ((($inv)) + 12|0);
  HEAPF32[$51>>2] = $50;
  $52 = +HEAPF32[$9>>2];
  $53 = $52;
  $54 = +HEAPF32[$33>>2];
  $55 = $54;
  $56 = $53 * $55;
  $57 = +HEAPF32[$t>>2];
  $58 = $57;
  $59 = +HEAPF32[$27>>2];
  $60 = $59;
  $61 = $58 * $60;
  $62 = $56 - $61;
  $63 = $16 * $62;
  $64 = $63;
  $65 = ((($inv)) + 20|0);
  HEAPF32[$65>>2] = $64;
  return;
 }
}
function _nsvg__xformIdentity($t) {
 $t = $t|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF32[$t>>2] = 1.0;
 $0 = ((($t)) + 4|0);
 HEAPF32[$0>>2] = 0.0;
 $1 = ((($t)) + 8|0);
 HEAPF32[$1>>2] = 0.0;
 $2 = ((($t)) + 12|0);
 HEAPF32[$2>>2] = 1.0;
 $3 = ((($t)) + 16|0);
 HEAPF32[$3>>2] = 0.0;
 $4 = ((($t)) + 20|0);
 HEAPF32[$4>>2] = 0.0;
 return;
}
function _nsvg__xformSetTranslation($t,$tx,$ty) {
 $t = $t|0;
 $tx = +$tx;
 $ty = +$ty;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF32[$t>>2] = 1.0;
 $0 = ((($t)) + 4|0);
 HEAPF32[$0>>2] = 0.0;
 $1 = ((($t)) + 8|0);
 HEAPF32[$1>>2] = 0.0;
 $2 = ((($t)) + 12|0);
 HEAPF32[$2>>2] = 1.0;
 $3 = ((($t)) + 16|0);
 HEAPF32[$3>>2] = $tx;
 $4 = ((($t)) + 20|0);
 HEAPF32[$4>>2] = $ty;
 return;
}
function _nsvg__xformMultiply($t,$s) {
 $t = $t|0;
 $s = $s|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$t>>2];
 $1 = +HEAPF32[$s>>2];
 $2 = $0 * $1;
 $3 = ((($t)) + 4|0);
 $4 = +HEAPF32[$3>>2];
 $5 = ((($s)) + 8|0);
 $6 = +HEAPF32[$5>>2];
 $7 = $4 * $6;
 $8 = $2 + $7;
 $9 = ((($t)) + 8|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $1 * $10;
 $12 = ((($t)) + 12|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $6 * $13;
 $15 = $11 + $14;
 $16 = ((($t)) + 16|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $1 * $17;
 $19 = ((($t)) + 20|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $6 * $20;
 $22 = $18 + $21;
 $23 = ((($s)) + 16|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $24 + $22;
 $26 = ((($s)) + 4|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $0 * $27;
 $29 = ((($s)) + 12|0);
 $30 = +HEAPF32[$29>>2];
 $31 = $4 * $30;
 $32 = $28 + $31;
 HEAPF32[$3>>2] = $32;
 $33 = +HEAPF32[$9>>2];
 $34 = +HEAPF32[$26>>2];
 $35 = $33 * $34;
 $36 = +HEAPF32[$12>>2];
 $37 = +HEAPF32[$29>>2];
 $38 = $36 * $37;
 $39 = $35 + $38;
 HEAPF32[$12>>2] = $39;
 $40 = +HEAPF32[$16>>2];
 $41 = +HEAPF32[$26>>2];
 $42 = $40 * $41;
 $43 = +HEAPF32[$19>>2];
 $44 = +HEAPF32[$29>>2];
 $45 = $43 * $44;
 $46 = $42 + $45;
 $47 = ((($s)) + 20|0);
 $48 = +HEAPF32[$47>>2];
 $49 = $48 + $46;
 HEAPF32[$19>>2] = $49;
 HEAPF32[$t>>2] = $8;
 HEAPF32[$9>>2] = $15;
 HEAPF32[$16>>2] = $25;
 return;
}
function _nsvg__xformSetScale($t,$sx,$sy) {
 $t = $t|0;
 $sx = +$sx;
 $sy = +$sy;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF32[$t>>2] = $sx;
 $0 = ((($t)) + 4|0);
 HEAPF32[$0>>2] = 0.0;
 $1 = ((($t)) + 8|0);
 HEAPF32[$1>>2] = 0.0;
 $2 = ((($t)) + 12|0);
 HEAPF32[$2>>2] = $sy;
 $3 = ((($t)) + 16|0);
 HEAPF32[$3>>2] = 0.0;
 $4 = ((($t)) + 20|0);
 HEAPF32[$4>>2] = 0.0;
 return;
}
function _nsvg__getAttr($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 39936|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($p) + (($1*312)|0)|0);
 return ($2|0);
}
function _nsvg__popAttr($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 39936|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  return;
 }
 $3 = (($1) + -1)|0;
 HEAP32[$0>>2] = $3;
 return;
}
function _nsvg__parseGradient($p,$attr,$type) {
 $p = $p|0;
 $attr = $attr|0;
 $type = $type|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$016 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0;
 $0 = sp + 120|0;
 $1 = sp + 112|0;
 $2 = sp + 104|0;
 $3 = sp + 96|0;
 $4 = sp + 88|0;
 $5 = sp + 80|0;
 $6 = sp + 72|0;
 $7 = sp + 64|0;
 $8 = sp + 56|0;
 $9 = sp + 48|0;
 $10 = sp + 40|0;
 $11 = sp + 32|0;
 $12 = sp + 24|0;
 $13 = sp + 16|0;
 $14 = sp + 8|0;
 $15 = sp;
 $16 = (_malloc(212)|0);
 $17 = ($16|0)==(0|0);
 if ($17) {
  STACKTOP = sp;return;
 }
 _memset(($16|0),0,212)|0;
 $18 = ((($16)) + 173|0);
 HEAP8[$18>>0] = 1;
 $19 = ((($16)) + 128|0);
 HEAP8[$19>>0] = $type;
 switch ($type<<24>>24) {
 case 2:  {
  $20 = ((($16)) + 132|0);
  _nsvg__coord($0,0.0,7);
  $21 = $0;
  $22 = $21;
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + 4)|0;
  $25 = $24;
  $26 = HEAP32[$25>>2]|0;
  $27 = $20;
  $28 = $27;
  HEAP32[$28>>2] = $23;
  $29 = (($27) + 4)|0;
  $30 = $29;
  HEAP32[$30>>2] = $26;
  $31 = ((($16)) + 140|0);
  _nsvg__coord($1,0.0,7);
  $32 = $1;
  $33 = $32;
  $34 = HEAP32[$33>>2]|0;
  $35 = (($32) + 4)|0;
  $36 = $35;
  $37 = HEAP32[$36>>2]|0;
  $38 = $31;
  $39 = $38;
  HEAP32[$39>>2] = $34;
  $40 = (($38) + 4)|0;
  $41 = $40;
  HEAP32[$41>>2] = $37;
  $42 = ((($16)) + 148|0);
  _nsvg__coord($2,100.0,7);
  $43 = $2;
  $44 = $43;
  $45 = HEAP32[$44>>2]|0;
  $46 = (($43) + 4)|0;
  $47 = $46;
  $48 = HEAP32[$47>>2]|0;
  $49 = $42;
  $50 = $49;
  HEAP32[$50>>2] = $45;
  $51 = (($49) + 4)|0;
  $52 = $51;
  HEAP32[$52>>2] = $48;
  $53 = ((($16)) + 156|0);
  _nsvg__coord($3,0.0,7);
  $54 = $3;
  $55 = $54;
  $56 = HEAP32[$55>>2]|0;
  $57 = (($54) + 4)|0;
  $58 = $57;
  $59 = HEAP32[$58>>2]|0;
  $60 = $53;
  $61 = $60;
  HEAP32[$61>>2] = $56;
  $62 = (($60) + 4)|0;
  $63 = $62;
  HEAP32[$63>>2] = $59;
  break;
 }
 case 3:  {
  $64 = ((($16)) + 132|0);
  _nsvg__coord($4,50.0,7);
  $65 = $4;
  $66 = $65;
  $67 = HEAP32[$66>>2]|0;
  $68 = (($65) + 4)|0;
  $69 = $68;
  $70 = HEAP32[$69>>2]|0;
  $71 = $64;
  $72 = $71;
  HEAP32[$72>>2] = $67;
  $73 = (($71) + 4)|0;
  $74 = $73;
  HEAP32[$74>>2] = $70;
  $75 = ((($16)) + 140|0);
  _nsvg__coord($5,50.0,7);
  $76 = $5;
  $77 = $76;
  $78 = HEAP32[$77>>2]|0;
  $79 = (($76) + 4)|0;
  $80 = $79;
  $81 = HEAP32[$80>>2]|0;
  $82 = $75;
  $83 = $82;
  HEAP32[$83>>2] = $78;
  $84 = (($82) + 4)|0;
  $85 = $84;
  HEAP32[$85>>2] = $81;
  $86 = ((($16)) + 148|0);
  _nsvg__coord($6,50.0,7);
  $87 = $6;
  $88 = $87;
  $89 = HEAP32[$88>>2]|0;
  $90 = (($87) + 4)|0;
  $91 = $90;
  $92 = HEAP32[$91>>2]|0;
  $93 = $86;
  $94 = $93;
  HEAP32[$94>>2] = $89;
  $95 = (($93) + 4)|0;
  $96 = $95;
  HEAP32[$96>>2] = $92;
  break;
 }
 default: {
 }
 }
 $97 = ((($16)) + 176|0);
 _nsvg__xformIdentity($97);
 $98 = HEAP32[$attr>>2]|0;
 $99 = ($98|0)==(0|0);
 if (!($99)) {
  $100 = ((($16)) + 63|0);
  $101 = ((($16)) + 132|0);
  $102 = ((($16)) + 140|0);
  $103 = ((($16)) + 148|0);
  $104 = ((($16)) + 156|0);
  $105 = ((($16)) + 164|0);
  $106 = ((($16)) + 132|0);
  $107 = ((($16)) + 140|0);
  $108 = ((($16)) + 148|0);
  $109 = ((($16)) + 156|0);
  $110 = ((($16)) + 172|0);
  $111 = ((($16)) + 172|0);
  $112 = ((($16)) + 172|0);
  $113 = ((($16)) + 64|0);
  $114 = ((($16)) + 126|0);
  $115 = $98;$124 = $attr;$i$016 = 0;
  while(1) {
   $116 = (_strcmp($115,22107967)|0);
   $117 = ($116|0)==(0);
   $118 = $i$016 | 1;
   $119 = (($attr) + ($118<<2)|0);
   $120 = HEAP32[$119>>2]|0;
   do {
    if ($117) {
     (_strncpy($16,$120,63)|0);
     HEAP8[$100>>0] = 0;
    } else {
     $121 = (_nsvg__parseAttr($p,$115,$120)|0);
     $122 = ($121|0)==(0);
     if ($122) {
      $123 = HEAP32[$124>>2]|0;
      $125 = (_strcmp($123,22108149)|0);
      $126 = ($125|0)==(0);
      if ($126) {
       $127 = HEAP32[$119>>2]|0;
       $128 = (_strcmp($127,22108163)|0);
       $129 = ($128|0)==(0);
       if ($129) {
        HEAP8[$18>>0] = 1;
        break;
       } else {
        HEAP8[$18>>0] = 0;
        break;
       }
      }
      $130 = (_strcmp($123,22108181)|0);
      $131 = ($130|0)==(0);
      if ($131) {
       $132 = HEAP32[$119>>2]|0;
       _nsvg__parseTransform($97,$132);
       break;
      }
      $133 = (_strcmp($123,22108113)|0);
      $134 = ($133|0)==(0);
      if ($134) {
       $135 = HEAP32[$119>>2]|0;
       _nsvg__parseCoordinateRaw($7,$135);
       $136 = $7;
       $137 = $136;
       $138 = HEAP32[$137>>2]|0;
       $139 = (($136) + 4)|0;
       $140 = $139;
       $141 = HEAP32[$140>>2]|0;
       $142 = $101;
       $143 = $142;
       HEAP32[$143>>2] = $138;
       $144 = (($142) + 4)|0;
       $145 = $144;
       HEAP32[$145>>2] = $141;
       break;
      }
      $146 = (_strcmp($123,22108116)|0);
      $147 = ($146|0)==(0);
      if ($147) {
       $148 = HEAP32[$119>>2]|0;
       _nsvg__parseCoordinateRaw($8,$148);
       $149 = $8;
       $150 = $149;
       $151 = HEAP32[$150>>2]|0;
       $152 = (($149) + 4)|0;
       $153 = $152;
       $154 = HEAP32[$153>>2]|0;
       $155 = $102;
       $156 = $155;
       HEAP32[$156>>2] = $151;
       $157 = (($155) + 4)|0;
       $158 = $157;
       HEAP32[$158>>2] = $154;
       break;
      }
      $159 = (_strcmp($123,22108125)|0);
      $160 = ($159|0)==(0);
      if ($160) {
       $161 = HEAP32[$119>>2]|0;
       _nsvg__parseCoordinateRaw($9,$161);
       $162 = $9;
       $163 = $162;
       $164 = HEAP32[$163>>2]|0;
       $165 = (($162) + 4)|0;
       $166 = $165;
       $167 = HEAP32[$166>>2]|0;
       $168 = $103;
       $169 = $168;
       HEAP32[$169>>2] = $164;
       $170 = (($168) + 4)|0;
       $171 = $170;
       HEAP32[$171>>2] = $167;
       break;
      }
      $172 = (_strcmp($123,22108199)|0);
      $173 = ($172|0)==(0);
      if ($173) {
       $174 = HEAP32[$119>>2]|0;
       _nsvg__parseCoordinateRaw($10,$174);
       $175 = $10;
       $176 = $175;
       $177 = HEAP32[$176>>2]|0;
       $178 = (($175) + 4)|0;
       $179 = $178;
       $180 = HEAP32[$179>>2]|0;
       $181 = $104;
       $182 = $181;
       HEAP32[$182>>2] = $177;
       $183 = (($181) + 4)|0;
       $184 = $183;
       HEAP32[$184>>2] = $180;
       break;
      }
      $185 = (_strcmp($123,22108202)|0);
      $186 = ($185|0)==(0);
      if ($186) {
       $187 = HEAP32[$119>>2]|0;
       _nsvg__parseCoordinateRaw($11,$187);
       $188 = $11;
       $189 = $188;
       $190 = HEAP32[$189>>2]|0;
       $191 = (($188) + 4)|0;
       $192 = $191;
       $193 = HEAP32[$192>>2]|0;
       $194 = $105;
       $195 = $194;
       HEAP32[$195>>2] = $190;
       $196 = (($194) + 4)|0;
       $197 = $196;
       HEAP32[$197>>2] = $193;
       break;
      }
      $198 = (_strcmp($123,22108101)|0);
      $199 = ($198|0)==(0);
      if ($199) {
       $200 = HEAP32[$119>>2]|0;
       _nsvg__parseCoordinateRaw($12,$200);
       $201 = $12;
       $202 = $201;
       $203 = HEAP32[$202>>2]|0;
       $204 = (($201) + 4)|0;
       $205 = $204;
       $206 = HEAP32[$205>>2]|0;
       $207 = $106;
       $208 = $207;
       HEAP32[$208>>2] = $203;
       $209 = (($207) + 4)|0;
       $210 = $209;
       HEAP32[$210>>2] = $206;
       break;
      }
      $211 = (_strcmp($123,22108104)|0);
      $212 = ($211|0)==(0);
      if ($212) {
       $213 = HEAP32[$119>>2]|0;
       _nsvg__parseCoordinateRaw($13,$213);
       $214 = $13;
       $215 = $214;
       $216 = HEAP32[$215>>2]|0;
       $217 = (($214) + 4)|0;
       $218 = $217;
       $219 = HEAP32[$218>>2]|0;
       $220 = $107;
       $221 = $220;
       HEAP32[$221>>2] = $216;
       $222 = (($220) + 4)|0;
       $223 = $222;
       HEAP32[$223>>2] = $219;
       break;
      }
      $224 = (_strcmp($123,22108107)|0);
      $225 = ($224|0)==(0);
      if ($225) {
       $226 = HEAP32[$119>>2]|0;
       _nsvg__parseCoordinateRaw($14,$226);
       $227 = $14;
       $228 = $227;
       $229 = HEAP32[$228>>2]|0;
       $230 = (($227) + 4)|0;
       $231 = $230;
       $232 = HEAP32[$231>>2]|0;
       $233 = $108;
       $234 = $233;
       HEAP32[$234>>2] = $229;
       $235 = (($233) + 4)|0;
       $236 = $235;
       HEAP32[$236>>2] = $232;
       break;
      }
      $237 = (_strcmp($123,22108110)|0);
      $238 = ($237|0)==(0);
      if ($238) {
       $239 = HEAP32[$119>>2]|0;
       _nsvg__parseCoordinateRaw($15,$239);
       $240 = $15;
       $241 = $240;
       $242 = HEAP32[$241>>2]|0;
       $243 = (($240) + 4)|0;
       $244 = $243;
       $245 = HEAP32[$244>>2]|0;
       $246 = $109;
       $247 = $246;
       HEAP32[$247>>2] = $242;
       $248 = (($246) + 4)|0;
       $249 = $248;
       HEAP32[$249>>2] = $245;
       break;
      }
      $250 = (_strcmp($123,22108205)|0);
      $251 = ($250|0)==(0);
      if (!($251)) {
       $259 = (_strcmp($123,22108237)|0);
       $260 = ($259|0)==(0);
       if (!($260)) {
        break;
       }
       $261 = HEAP32[$119>>2]|0;
       $262 = ((($261)) + 1|0);
       (_strncpy($113,$262,62)|0);
       HEAP8[$114>>0] = 0;
       break;
      }
      $252 = HEAP32[$119>>2]|0;
      $253 = (_strcmp($252,22108218)|0);
      $254 = ($253|0)==(0);
      if ($254) {
       HEAP8[$110>>0] = 0;
       break;
      }
      $255 = (_strcmp($252,22108222)|0);
      $256 = ($255|0)==(0);
      if ($256) {
       HEAP8[$111>>0] = 1;
       break;
      }
      $257 = (_strcmp($252,22108230)|0);
      $258 = ($257|0)==(0);
      if (!($258)) {
       break;
      }
      HEAP8[$112>>0] = 2;
     }
    }
   } while(0);
   $263 = (($i$016) + 2)|0;
   $264 = (($attr) + ($263<<2)|0);
   $265 = HEAP32[$264>>2]|0;
   $266 = ($265|0)==(0|0);
   if ($266) {
    break;
   } else {
    $115 = $265;$124 = $264;$i$016 = $263;
   }
  }
 }
 $267 = ((($p)) + 39960|0);
 $268 = HEAP32[$267>>2]|0;
 $269 = ((($16)) + 208|0);
 HEAP32[$269>>2] = $268;
 HEAP32[$267>>2] = $16;
 STACKTOP = sp;return;
}
function _nsvg__parseGradientStop($p,$attr) {
 $p = $p|0;
 $attr = $attr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $i$06 = 0, $i$12 = 0, $i$21 = 0, $idx$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_nsvg__getAttr($p)|0);
 $1 = ((($0)) + 304|0);
 HEAPF32[$1>>2] = 0.0;
 $2 = ((($0)) + 296|0);
 HEAP32[$2>>2] = 0;
 $3 = ((($0)) + 300|0);
 HEAPF32[$3>>2] = 1.0;
 $4 = HEAP32[$attr>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $9 = $4;$i$06 = 0;
  while(1) {
   $6 = $i$06 | 1;
   $7 = (($attr) + ($6<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   (_nsvg__parseAttr($p,$9,$8)|0);
   $10 = (($i$06) + 2)|0;
   $11 = (($attr) + ($10<<2)|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   if ($13) {
    break;
   } else {
    $9 = $12;$i$06 = $10;
   }
  }
 }
 $14 = ((($p)) + 39960|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  return;
 }
 $17 = ((($15)) + 200|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + 1)|0;
 HEAP32[$17>>2] = $19;
 $20 = ((($15)) + 204|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $19 << 3;
 $23 = (_realloc($21,$22)|0);
 HEAP32[$20>>2] = $23;
 $24 = ($23|0)==(0|0);
 if ($24) {
  return;
 }
 $25 = HEAP32[$17>>2]|0;
 $26 = (($25) + -1)|0;
 $27 = ($25|0)>(1);
 L11: do {
  if ($27) {
   $28 = +HEAPF32[$1>>2];
   $29 = HEAP32[$20>>2]|0;
   $i$12 = 0;
   while(1) {
    $30 = (((($29) + ($i$12<<3)|0)) + 4|0);
    $31 = +HEAPF32[$30>>2];
    $32 = $28 < $31;
    if ($32) {
     $idx$0 = $i$12;
     break L11;
    }
    $33 = (($i$12) + 1)|0;
    $34 = HEAP32[$17>>2]|0;
    $35 = (($34) + -1)|0;
    $36 = ($33|0)<($35|0);
    if ($36) {
     $i$12 = $33;
    } else {
     $idx$0 = $26;
     break;
    }
   }
  } else {
   $idx$0 = $26;
  }
 } while(0);
 $37 = HEAP32[$17>>2]|0;
 $38 = (($37) + -1)|0;
 $39 = ($38|0)>($idx$0|0);
 if ($39) {
  $i$21 = $38;
  while(1) {
   $40 = HEAP32[$20>>2]|0;
   $41 = (($40) + ($i$21<<3)|0);
   $42 = (($i$21) + -1)|0;
   $43 = (($40) + ($42<<3)|0);
   $44 = $43;
   $45 = $44;
   $46 = HEAP32[$45>>2]|0;
   $47 = (($44) + 4)|0;
   $48 = $47;
   $49 = HEAP32[$48>>2]|0;
   $50 = $41;
   $51 = $50;
   HEAP32[$51>>2] = $46;
   $52 = (($50) + 4)|0;
   $53 = $52;
   HEAP32[$53>>2] = $49;
   $54 = ($42|0)>($idx$0|0);
   if ($54) {
    $i$21 = $42;
   } else {
    break;
   }
  }
 }
 $55 = HEAP32[$20>>2]|0;
 $56 = HEAP32[$2>>2]|0;
 $57 = (($55) + ($idx$0<<3)|0);
 $58 = +HEAPF32[$3>>2];
 $59 = $58 * 255.0;
 $60 = (~~(($59))>>>0);
 $61 = $60 << 24;
 $62 = $61 | $56;
 HEAP32[$57>>2] = $62;
 $63 = HEAP32[$1>>2]|0;
 $64 = (((($55) + ($idx$0<<3)|0)) + 4|0);
 HEAP32[$64>>2] = $63;
 return;
}
function _nsvg__pushAttr($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 39936|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(127);
 if (!($2)) {
  return;
 }
 $3 = (($1) + 1)|0;
 HEAP32[$0>>2] = $3;
 $4 = (($p) + (($3*312)|0)|0);
 $5 = (($p) + (($1*312)|0)|0);
 _memcpy(($4|0),($5|0),312)|0;
 return;
}
function _nsvg__parseAttribs($p,$attr) {
 $p = $p|0;
 $attr = $attr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$attr>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 } else {
  $2 = $0;$i$01 = 0;
 }
 while(1) {
  $3 = (_strcmp($2,22107742)|0);
  $4 = ($3|0)==(0);
  $5 = $i$01 | 1;
  $6 = (($attr) + ($5<<2)|0);
  $7 = HEAP32[$6>>2]|0;
  if ($4) {
   _nsvg__parseStyle($p,$7);
  } else {
   (_nsvg__parseAttr($p,$2,$7)|0);
  }
  $8 = (($i$01) + 2)|0;
  $9 = (($attr) + ($8<<2)|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   break;
  } else {
   $2 = $10;$i$01 = $8;
  }
 }
 return;
}
function _nsvg__parsePath($p,$attr) {
 $p = $p|0;
 $attr = $attr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $args = 0, $cmd$0$be = 0, $cmd$02 = 0, $cpx = 0, $cpx2 = 0, $cpy = 0, $cpy2 = 0, $i$07 = 0;
 var $item = 0, $nargs$0$be = 0, $nargs$03 = 0, $nargs$1 = 0, $rargs$0$be = 0, $rargs$04 = 0, $s$06 = 0, $s$1 = 0, $s$1$lcssa = 0, $s$21 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0;
 $args = sp + 32|0;
 $cpx = sp + 28|0;
 $cpy = sp + 24|0;
 $cpx2 = sp + 20|0;
 $cpy2 = sp + 16|0;
 $tmp = sp;
 $item = sp + 72|0;
 $0 = HEAP32[$attr>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  _nsvg__addShape($p);
  STACKTOP = sp;return;
 }
 $2 = ((($tmp)) + 4|0);
 $3 = ((($tmp)) + 8|0);
 $4 = ((($tmp)) + 12|0);
 $12 = $attr;$5 = $0;$i$07 = 0;$s$06 = 0;
 while(1) {
  $6 = (_strcmp($5,22108131)|0);
  $7 = ($6|0)==(0);
  if ($7) {
   $8 = $i$07 | 1;
   $9 = (($attr) + ($8<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   $s$1 = $10;
  } else {
   $11 = HEAP32[$12>>2]|0;
   HEAP32[$tmp>>2] = $11;
   $13 = $i$07 | 1;
   $14 = (($attr) + ($13<<2)|0);
   $15 = HEAP32[$14>>2]|0;
   HEAP32[$2>>2] = $15;
   HEAP32[$3>>2] = 0;
   HEAP32[$4>>2] = 0;
   _nsvg__parseAttribs($p,$tmp);
   $s$1 = $s$06;
  }
  $16 = (($i$07) + 2)|0;
  $17 = (($attr) + ($16<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0|0);
  if ($19) {
   $s$1$lcssa = $s$1;
   break;
  } else {
   $12 = $17;$5 = $18;$i$07 = $16;$s$06 = $s$1;
  }
 }
 $20 = ($s$1$lcssa|0)==(0|0);
 if ($20) {
  _nsvg__addShape($p);
  STACKTOP = sp;return;
 }
 _nsvg__resetPath($p);
 HEAPF32[$cpx>>2] = 0.0;
 HEAPF32[$cpy>>2] = 0.0;
 HEAPF32[$cpx2>>2] = 0.0;
 HEAPF32[$cpy2>>2] = 0.0;
 $21 = HEAP8[$s$1$lcssa>>0]|0;
 $22 = ($21<<24>>24)==(0);
 L14: do {
  if (!($22)) {
   $23 = ((($p)) + 39944|0);
   $24 = ((($p)) + 39944|0);
   $25 = ((($p)) + 39940|0);
   $cmd$02 = 0;$nargs$03 = 0;$rargs$04 = 0;$s$21 = $s$1$lcssa;
   while(1) {
    $26 = (_nsvg__getNextPathItem($s$21,$item)|0);
    $27 = HEAP8[$item>>0]|0;
    $28 = ($27<<24>>24)==(0);
    if ($28) {
     break L14;
    }
    $29 = (_nsvg__isnum($27)|0);
    $30 = ($29|0)==(0);
    L19: do {
     if ($30) {
      $75 = (_nsvg__getArgsPerElement($27)|0);
      switch ($27<<24>>24) {
      case 109: case 77:  {
       $76 = HEAP32[$23>>2]|0;
       $77 = ($76|0)>(0);
       if ($77) {
        _nsvg__addPath($p,0);
       }
       _nsvg__resetPath($p);
       $cmd$0$be = $27;$nargs$0$be = 0;$rargs$0$be = $75;
       break L19;
       break;
      }
      case 122: case 90:  {
       $80 = HEAP32[$24>>2]|0;
       $81 = ($80|0)>(0);
       if ($81) {
        $82 = HEAP32[$25>>2]|0;
        $83 = HEAP32[$82>>2]|0;
        HEAP32[$cpx>>2] = $83;
        $84 = HEAP32[$25>>2]|0;
        $85 = ((($84)) + 4|0);
        $86 = HEAP32[$85>>2]|0;
        HEAP32[$cpy>>2] = $86;
        HEAP32[$cpx2>>2] = $83;
        HEAP32[$cpy2>>2] = $86;
        _nsvg__addPath($p,1);
       }
       _nsvg__resetPath($p);
       $87 = +HEAPF32[$cpx>>2];
       $88 = +HEAPF32[$cpy>>2];
       _nsvg__moveTo($p,$87,$88);
       $cmd$0$be = $27;$nargs$0$be = 0;$rargs$0$be = $75;
       break L19;
       break;
      }
      default: {
       $cmd$0$be = $27;$nargs$0$be = $nargs$03;$rargs$0$be = $75;
       break L19;
      }
      }
     } else {
      $31 = ($nargs$03|0)<(10);
      if ($31) {
       $32 = (+_nsvg__atof($item));
       $33 = $32;
       $34 = (($nargs$03) + 1)|0;
       $35 = (($args) + ($nargs$03<<2)|0);
       HEAPF32[$35>>2] = $33;
       $nargs$1 = $34;
      } else {
       $nargs$1 = $nargs$03;
      }
      $36 = ($nargs$1|0)<($rargs$04|0);
      if ($36) {
       $cmd$0$be = $cmd$02;$nargs$0$be = $nargs$1;$rargs$0$be = $rargs$04;
      } else {
       $37 = $cmd$02 << 24 >> 24;
       do {
        switch ($37|0) {
        case 77: case 109:  {
         $38 = ($cmd$02<<24>>24)==(109);
         $39 = $38&1;
         _nsvg__pathMoveTo($p,$cpx,$cpy,$args,$39);
         $40 = $38 ? 108 : 76;
         $41 = (_nsvg__getArgsPerElement($40)|0);
         $42 = HEAP32[$cpx>>2]|0;
         HEAP32[$cpx2>>2] = $42;
         $43 = HEAP32[$cpy>>2]|0;
         HEAP32[$cpy2>>2] = $43;
         $cmd$0$be = $40;$nargs$0$be = 0;$rargs$0$be = $41;
         break L19;
         break;
        }
        case 76: case 108:  {
         $44 = ($cmd$02<<24>>24)==(108);
         $45 = $44&1;
         _nsvg__pathLineTo($p,$cpx,$cpy,$args,$45);
         $46 = HEAP32[$cpx>>2]|0;
         HEAP32[$cpx2>>2] = $46;
         $47 = HEAP32[$cpy>>2]|0;
         HEAP32[$cpy2>>2] = $47;
         $cmd$0$be = $cmd$02;$nargs$0$be = 0;$rargs$0$be = $rargs$04;
         break L19;
         break;
        }
        case 104: case 72:  {
         $48 = ($cmd$02<<24>>24)==(104);
         $49 = $48&1;
         _nsvg__pathHLineTo($p,$cpx,$cpy,$args,$49);
         $50 = HEAP32[$cpx>>2]|0;
         HEAP32[$cpx2>>2] = $50;
         $51 = HEAP32[$cpy>>2]|0;
         HEAP32[$cpy2>>2] = $51;
         $cmd$0$be = $cmd$02;$nargs$0$be = 0;$rargs$0$be = $rargs$04;
         break L19;
         break;
        }
        case 118: case 86:  {
         $52 = ($cmd$02<<24>>24)==(118);
         $53 = $52&1;
         _nsvg__pathVLineTo($p,$cpx,$cpy,$args,$53);
         $54 = HEAP32[$cpx>>2]|0;
         HEAP32[$cpx2>>2] = $54;
         $55 = HEAP32[$cpy>>2]|0;
         HEAP32[$cpy2>>2] = $55;
         $cmd$0$be = $cmd$02;$nargs$0$be = 0;$rargs$0$be = $rargs$04;
         break L19;
         break;
        }
        case 99: case 67:  {
         $56 = ($cmd$02<<24>>24)==(99);
         $57 = $56&1;
         _nsvg__pathCubicBezTo($p,$cpx,$cpy,$cpx2,$cpy2,$args,$57);
         $cmd$0$be = $cmd$02;$nargs$0$be = 0;$rargs$0$be = $rargs$04;
         break L19;
         break;
        }
        case 115: case 83:  {
         $58 = ($cmd$02<<24>>24)==(115);
         $59 = $58&1;
         _nsvg__pathCubicBezShortTo($p,$cpx,$cpy,$cpx2,$cpy2,$args,$59);
         $cmd$0$be = $cmd$02;$nargs$0$be = 0;$rargs$0$be = $rargs$04;
         break L19;
         break;
        }
        case 113: case 81:  {
         $60 = ($cmd$02<<24>>24)==(113);
         $61 = $60&1;
         _nsvg__pathQuadBezTo($p,$cpx,$cpy,$cpx2,$cpy2,$args,$61);
         $cmd$0$be = $cmd$02;$nargs$0$be = 0;$rargs$0$be = $rargs$04;
         break L19;
         break;
        }
        case 116: case 84:  {
         $62 = ($cmd$02<<24>>24)==(116);
         $63 = $62&1;
         _nsvg__pathQuadBezShortTo($p,$cpx,$cpy,$cpx2,$cpy2,$args,$63);
         $cmd$0$be = $cmd$02;$nargs$0$be = 0;$rargs$0$be = $rargs$04;
         break L19;
         break;
        }
        case 97: case 65:  {
         $64 = ($cmd$02<<24>>24)==(97);
         $65 = $64&1;
         _nsvg__pathArcTo($p,$cpx,$cpy,$args,$65);
         $66 = HEAP32[$cpx>>2]|0;
         HEAP32[$cpx2>>2] = $66;
         $67 = HEAP32[$cpy>>2]|0;
         HEAP32[$cpy2>>2] = $67;
         $cmd$0$be = $cmd$02;$nargs$0$be = 0;$rargs$0$be = $rargs$04;
         break L19;
         break;
        }
        default: {
         $68 = ($nargs$1|0)>(1);
         if (!($68)) {
          $cmd$0$be = $cmd$02;$nargs$0$be = 0;$rargs$0$be = $rargs$04;
          break L19;
         }
         $69 = (($nargs$1) + -2)|0;
         $70 = (($args) + ($69<<2)|0);
         $71 = HEAP32[$70>>2]|0;
         HEAP32[$cpx>>2] = $71;
         $72 = (($nargs$1) + -1)|0;
         $73 = (($args) + ($72<<2)|0);
         $74 = HEAP32[$73>>2]|0;
         HEAP32[$cpy>>2] = $74;
         HEAP32[$cpx2>>2] = $71;
         HEAP32[$cpy2>>2] = $74;
         $cmd$0$be = $cmd$02;$nargs$0$be = 0;$rargs$0$be = $rargs$04;
         break L19;
        }
        }
       } while(0);
      }
     }
    } while(0);
    $78 = HEAP8[$26>>0]|0;
    $79 = ($78<<24>>24)==(0);
    if ($79) {
     break;
    } else {
     $cmd$02 = $cmd$0$be;$nargs$03 = $nargs$0$be;$rargs$04 = $rargs$0$be;$s$21 = $26;
    }
   }
  }
 } while(0);
 $89 = ((($p)) + 39944|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = ($90|0)==(0);
 if ($91) {
  _nsvg__addShape($p);
  STACKTOP = sp;return;
 }
 _nsvg__addPath($p,0);
 _nsvg__addShape($p);
 STACKTOP = sp;return;
}
function _nsvg__parseRect($p,$attr) {
 $p = $p|0;
 $attr = $attr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0;
 var $9 = 0, $h$0$lcssa = 0.0, $h$011 = 0.0, $h$1 = 0.0, $h$2 = 0.0, $i$014 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $rx$0$lcssa = 0.0, $rx$012 = 0.0, $rx$1 = 0.0, $rx$2 = 0.0, $rx$4 = 0.0, $rx$5 = 0.0, $ry$0$lcssa = 0.0, $ry$0$rx$0 = 0.0, $ry$013 = 0.0, $ry$1 = 0.0;
 var $ry$2 = 0.0, $ry$3 = 0.0, $ry$4 = 0.0, $w$0$lcssa = 0.0, $w$010 = 0.0, $w$1 = 0.0, $w$2 = 0.0, $x$0$lcssa = 0.0, $x$08 = 0.0, $x$1 = 0.0, $x$2 = 0.0, $y$0$lcssa = 0.0, $y$09 = 0.0, $y$1 = 0.0, $y$2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$attr>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $h$0$lcssa = 0.0;$rx$0$lcssa = -1.0;$ry$0$lcssa = -1.0;$w$0$lcssa = 0.0;$x$0$lcssa = 0.0;$y$0$lcssa = 0.0;
 } else {
  $5 = $0;$9 = $attr;$h$011 = 0.0;$i$014 = 0;$rx$012 = -1.0;$ry$013 = -1.0;$w$010 = 0.0;$x$08 = 0.0;$y$09 = 0.0;
  while(1) {
   $2 = $i$014 | 1;
   $3 = (($attr) + ($2<<2)|0);
   $4 = HEAP32[$3>>2]|0;
   $6 = (_nsvg__parseAttr($p,$5,$4)|0);
   $7 = ($6|0)==(0);
   if ($7) {
    $8 = HEAP32[$9>>2]|0;
    $10 = (_strcmp($8,22108127)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $12 = HEAP32[$3>>2]|0;
     $13 = (+_nsvg__actualOrigX($p));
     $14 = (+_nsvg__actualWidth($p));
     $15 = (+_nsvg__parseCoordinate($p,$12,$13,$14));
     $x$1 = $15;
    } else {
     $x$1 = $x$08;
    }
    $16 = HEAP32[$9>>2]|0;
    $17 = (_strcmp($16,22108129)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     $19 = HEAP32[$3>>2]|0;
     $20 = (+_nsvg__actualOrigY($p));
     $21 = (+_nsvg__actualHeight($p));
     $22 = (+_nsvg__parseCoordinate($p,$19,$20,$21));
     $y$1 = $22;
    } else {
     $y$1 = $y$09;
    }
    $23 = HEAP32[$9>>2]|0;
    $24 = (_strcmp($23,22107617)|0);
    $25 = ($24|0)==(0);
    if ($25) {
     $26 = HEAP32[$3>>2]|0;
     $27 = (+_nsvg__actualWidth($p));
     $28 = (+_nsvg__parseCoordinate($p,$26,0.0,$27));
     $w$1 = $28;
    } else {
     $w$1 = $w$010;
    }
    $29 = HEAP32[$9>>2]|0;
    $30 = (_strcmp($29,22107623)|0);
    $31 = ($30|0)==(0);
    if ($31) {
     $32 = HEAP32[$3>>2]|0;
     $33 = (+_nsvg__actualHeight($p));
     $34 = (+_nsvg__parseCoordinate($p,$32,0.0,$33));
     $h$1 = $34;
    } else {
     $h$1 = $h$011;
    }
    $35 = HEAP32[$9>>2]|0;
    $36 = (_strcmp($35,22108119)|0);
    $37 = ($36|0)==(0);
    if ($37) {
     $38 = HEAP32[$3>>2]|0;
     $39 = (+_nsvg__actualWidth($p));
     $40 = (+_nsvg__parseCoordinate($p,$38,0.0,$39));
     $41 = (+Math_abs((+$40)));
     $rx$1 = $41;
    } else {
     $rx$1 = $rx$012;
    }
    $42 = HEAP32[$9>>2]|0;
    $43 = (_strcmp($42,22108122)|0);
    $44 = ($43|0)==(0);
    if ($44) {
     $45 = HEAP32[$3>>2]|0;
     $46 = (+_nsvg__actualHeight($p));
     $47 = (+_nsvg__parseCoordinate($p,$45,0.0,$46));
     $48 = (+Math_abs((+$47)));
     $h$2 = $h$1;$rx$2 = $rx$1;$ry$1 = $48;$w$2 = $w$1;$x$2 = $x$1;$y$2 = $y$1;
    } else {
     $h$2 = $h$1;$rx$2 = $rx$1;$ry$1 = $ry$013;$w$2 = $w$1;$x$2 = $x$1;$y$2 = $y$1;
    }
   } else {
    $h$2 = $h$011;$rx$2 = $rx$012;$ry$1 = $ry$013;$w$2 = $w$010;$x$2 = $x$08;$y$2 = $y$09;
   }
   $49 = (($i$014) + 2)|0;
   $50 = (($attr) + ($49<<2)|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51|0)==(0|0);
   if ($52) {
    $h$0$lcssa = $h$2;$rx$0$lcssa = $rx$2;$ry$0$lcssa = $ry$1;$w$0$lcssa = $w$2;$x$0$lcssa = $x$2;$y$0$lcssa = $y$2;
    break;
   } else {
    $5 = $51;$9 = $50;$h$011 = $h$2;$i$014 = $49;$rx$012 = $rx$2;$ry$013 = $ry$1;$w$010 = $w$2;$x$08 = $x$2;$y$09 = $y$2;
   }
  }
 }
 $53 = $rx$0$lcssa < 0.0;
 $54 = $ry$0$lcssa > 0.0;
 $or$cond = $53 & $54;
 $ry$0$rx$0 = $or$cond ? $ry$0$lcssa : $rx$0$lcssa;
 $55 = $ry$0$lcssa < 0.0;
 $56 = $ry$0$rx$0 > 0.0;
 $or$cond3 = $55 & $56;
 $ry$2 = $or$cond3 ? $ry$0$rx$0 : $ry$0$lcssa;
 $57 = $ry$0$rx$0 < 0.0;
 $rx$4 = $57 ? 0.0 : $ry$0$rx$0;
 $58 = $ry$2 < 0.0;
 $ry$3 = $58 ? 0.0 : $ry$2;
 $59 = $w$0$lcssa * 0.5;
 $60 = $rx$4 > $59;
 $rx$5 = $60 ? $59 : $rx$4;
 $61 = $h$0$lcssa * 0.5;
 $62 = $ry$3 > $61;
 $ry$4 = $62 ? $61 : $ry$3;
 $63 = $w$0$lcssa != 0.0;
 $64 = $h$0$lcssa != 0.0;
 $or$cond5 = $63 & $64;
 if (!($or$cond5)) {
  return;
 }
 _nsvg__resetPath($p);
 $65 = $rx$5 < 9.9999997473787516E-6;
 $66 = $ry$4 < 9.9999997473787516E-5;
 $or$cond7 = $65 | $66;
 if ($or$cond7) {
  _nsvg__moveTo($p,$x$0$lcssa,$y$0$lcssa);
  $67 = $x$0$lcssa + $w$0$lcssa;
  _nsvg__lineTo($p,$67,$y$0$lcssa);
  $68 = $y$0$lcssa + $h$0$lcssa;
  _nsvg__lineTo($p,$67,$68);
  _nsvg__lineTo($p,$x$0$lcssa,$68);
 } else {
  $69 = $x$0$lcssa + $rx$5;
  _nsvg__moveTo($p,$69,$y$0$lcssa);
  $70 = $x$0$lcssa + $w$0$lcssa;
  $71 = $70 - $rx$5;
  _nsvg__lineTo($p,$71,$y$0$lcssa);
  $72 = $rx$5 * 0.44771522283554077;
  $73 = $70 - $72;
  $74 = $ry$4 * 0.44771522283554077;
  $75 = $y$0$lcssa + $74;
  $76 = $y$0$lcssa + $ry$4;
  _nsvg__cubicBezTo($p,$73,$y$0$lcssa,$70,$75,$70,$76);
  $77 = $y$0$lcssa + $h$0$lcssa;
  $78 = $77 - $ry$4;
  _nsvg__lineTo($p,$70,$78);
  $79 = $77 - $74;
  _nsvg__cubicBezTo($p,$70,$79,$73,$77,$71,$77);
  _nsvg__lineTo($p,$69,$77);
  $80 = $x$0$lcssa + $72;
  _nsvg__cubicBezTo($p,$80,$77,$x$0$lcssa,$79,$x$0$lcssa,$78);
  _nsvg__lineTo($p,$x$0$lcssa,$76);
  _nsvg__cubicBezTo($p,$x$0$lcssa,$75,$80,$y$0$lcssa,$69,$y$0$lcssa);
 }
 _nsvg__addPath($p,1);
 _nsvg__addShape($p);
 return;
}
function _nsvg__parseCircle($p,$attr) {
 $p = $p|0;
 $attr = $attr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cx$01 = 0.0, $cx$1 = 0.0, $cx$2 = 0.0, $cx$2$lcssa = 0.0, $cy$02 = 0.0, $cy$1 = 0.0, $cy$2 = 0.0, $cy$2$lcssa = 0.0, $i$04 = 0, $r$03 = 0.0, $r$1 = 0.0, $r$1$lcssa = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$attr>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 } else {
  $5 = $0;$9 = $attr;$cx$01 = 0.0;$cy$02 = 0.0;$i$04 = 0;$r$03 = 0.0;
 }
 while(1) {
  $2 = $i$04 | 1;
  $3 = (($attr) + ($2<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $6 = (_nsvg__parseAttr($p,$5,$4)|0);
  $7 = ($6|0)==(0);
  if ($7) {
   $8 = HEAP32[$9>>2]|0;
   $10 = (_strcmp($8,22108113)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $12 = HEAP32[$3>>2]|0;
    $13 = (+_nsvg__actualOrigX($p));
    $14 = (+_nsvg__actualWidth($p));
    $15 = (+_nsvg__parseCoordinate($p,$12,$13,$14));
    $cx$1 = $15;
   } else {
    $cx$1 = $cx$01;
   }
   $16 = HEAP32[$9>>2]|0;
   $17 = (_strcmp($16,22108116)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    $19 = HEAP32[$3>>2]|0;
    $20 = (+_nsvg__actualOrigY($p));
    $21 = (+_nsvg__actualHeight($p));
    $22 = (+_nsvg__parseCoordinate($p,$19,$20,$21));
    $cy$1 = $22;
   } else {
    $cy$1 = $cy$02;
   }
   $23 = HEAP32[$9>>2]|0;
   $24 = (_strcmp($23,22108125)|0);
   $25 = ($24|0)==(0);
   if ($25) {
    $26 = HEAP32[$3>>2]|0;
    $27 = (+_nsvg__actualLength($p));
    $28 = (+_nsvg__parseCoordinate($p,$26,0.0,$27));
    $29 = (+Math_abs((+$28)));
    $cx$2 = $cx$1;$cy$2 = $cy$1;$r$1 = $29;
   } else {
    $cx$2 = $cx$1;$cy$2 = $cy$1;$r$1 = $r$03;
   }
  } else {
   $cx$2 = $cx$01;$cy$2 = $cy$02;$r$1 = $r$03;
  }
  $30 = (($i$04) + 2)|0;
  $31 = (($attr) + ($30<<2)|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($32|0)==(0|0);
  if ($33) {
   $cx$2$lcssa = $cx$2;$cy$2$lcssa = $cy$2;$r$1$lcssa = $r$1;
   break;
  } else {
   $5 = $32;$9 = $31;$cx$01 = $cx$2;$cy$02 = $cy$2;$i$04 = $30;$r$03 = $r$1;
  }
 }
 $34 = $r$1$lcssa > 0.0;
 if (!($34)) {
  return;
 }
 _nsvg__resetPath($p);
 $35 = $cx$2$lcssa + $r$1$lcssa;
 _nsvg__moveTo($p,$35,$cy$2$lcssa);
 $36 = $r$1$lcssa * 0.55228477716445923;
 $37 = $cy$2$lcssa + $36;
 $38 = $cx$2$lcssa + $36;
 $39 = $cy$2$lcssa + $r$1$lcssa;
 _nsvg__cubicBezTo($p,$35,$37,$38,$39,$cx$2$lcssa,$39);
 $40 = $cx$2$lcssa - $36;
 $41 = $cx$2$lcssa - $r$1$lcssa;
 _nsvg__cubicBezTo($p,$40,$39,$41,$37,$41,$cy$2$lcssa);
 $42 = $cy$2$lcssa - $36;
 $43 = $cy$2$lcssa - $r$1$lcssa;
 _nsvg__cubicBezTo($p,$41,$42,$40,$43,$cx$2$lcssa,$43);
 _nsvg__cubicBezTo($p,$38,$43,$35,$42,$35,$cy$2$lcssa);
 _nsvg__addPath($p,1);
 _nsvg__addShape($p);
 return;
}
function _nsvg__parseEllipse($p,$attr) {
 $p = $p|0;
 $attr = $attr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cx$02 = 0.0, $cx$1 = 0.0, $cx$2 = 0.0, $cx$2$lcssa = 0.0, $cy$03 = 0.0, $cy$1 = 0.0, $cy$2 = 0.0;
 var $cy$2$lcssa = 0.0, $i$06 = 0, $or$cond = 0, $rx$04 = 0.0, $rx$1 = 0.0, $rx$2 = 0.0, $rx$2$lcssa = 0.0, $ry$05 = 0.0, $ry$1 = 0.0, $ry$1$lcssa = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$attr>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 } else {
  $5 = $0;$9 = $attr;$cx$02 = 0.0;$cy$03 = 0.0;$i$06 = 0;$rx$04 = 0.0;$ry$05 = 0.0;
 }
 while(1) {
  $2 = $i$06 | 1;
  $3 = (($attr) + ($2<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $6 = (_nsvg__parseAttr($p,$5,$4)|0);
  $7 = ($6|0)==(0);
  if ($7) {
   $8 = HEAP32[$9>>2]|0;
   $10 = (_strcmp($8,22108113)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $12 = HEAP32[$3>>2]|0;
    $13 = (+_nsvg__actualOrigX($p));
    $14 = (+_nsvg__actualWidth($p));
    $15 = (+_nsvg__parseCoordinate($p,$12,$13,$14));
    $cx$1 = $15;
   } else {
    $cx$1 = $cx$02;
   }
   $16 = HEAP32[$9>>2]|0;
   $17 = (_strcmp($16,22108116)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    $19 = HEAP32[$3>>2]|0;
    $20 = (+_nsvg__actualOrigY($p));
    $21 = (+_nsvg__actualHeight($p));
    $22 = (+_nsvg__parseCoordinate($p,$19,$20,$21));
    $cy$1 = $22;
   } else {
    $cy$1 = $cy$03;
   }
   $23 = HEAP32[$9>>2]|0;
   $24 = (_strcmp($23,22108119)|0);
   $25 = ($24|0)==(0);
   if ($25) {
    $26 = HEAP32[$3>>2]|0;
    $27 = (+_nsvg__actualWidth($p));
    $28 = (+_nsvg__parseCoordinate($p,$26,0.0,$27));
    $29 = (+Math_abs((+$28)));
    $rx$1 = $29;
   } else {
    $rx$1 = $rx$04;
   }
   $30 = HEAP32[$9>>2]|0;
   $31 = (_strcmp($30,22108122)|0);
   $32 = ($31|0)==(0);
   if ($32) {
    $33 = HEAP32[$3>>2]|0;
    $34 = (+_nsvg__actualHeight($p));
    $35 = (+_nsvg__parseCoordinate($p,$33,0.0,$34));
    $36 = (+Math_abs((+$35)));
    $cx$2 = $cx$1;$cy$2 = $cy$1;$rx$2 = $rx$1;$ry$1 = $36;
   } else {
    $cx$2 = $cx$1;$cy$2 = $cy$1;$rx$2 = $rx$1;$ry$1 = $ry$05;
   }
  } else {
   $cx$2 = $cx$02;$cy$2 = $cy$03;$rx$2 = $rx$04;$ry$1 = $ry$05;
  }
  $37 = (($i$06) + 2)|0;
  $38 = (($attr) + ($37<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)==(0|0);
  if ($40) {
   $cx$2$lcssa = $cx$2;$cy$2$lcssa = $cy$2;$rx$2$lcssa = $rx$2;$ry$1$lcssa = $ry$1;
   break;
  } else {
   $5 = $39;$9 = $38;$cx$02 = $cx$2;$cy$03 = $cy$2;$i$06 = $37;$rx$04 = $rx$2;$ry$05 = $ry$1;
  }
 }
 $41 = $rx$2$lcssa > 0.0;
 $42 = $ry$1$lcssa > 0.0;
 $or$cond = $41 & $42;
 if (!($or$cond)) {
  return;
 }
 _nsvg__resetPath($p);
 $43 = $cx$2$lcssa + $rx$2$lcssa;
 _nsvg__moveTo($p,$43,$cy$2$lcssa);
 $44 = $ry$1$lcssa * 0.55228477716445923;
 $45 = $cy$2$lcssa + $44;
 $46 = $rx$2$lcssa * 0.55228477716445923;
 $47 = $cx$2$lcssa + $46;
 $48 = $cy$2$lcssa + $ry$1$lcssa;
 _nsvg__cubicBezTo($p,$43,$45,$47,$48,$cx$2$lcssa,$48);
 $49 = $cx$2$lcssa - $46;
 $50 = $cx$2$lcssa - $rx$2$lcssa;
 _nsvg__cubicBezTo($p,$49,$48,$50,$45,$50,$cy$2$lcssa);
 $51 = $cy$2$lcssa - $44;
 $52 = $cy$2$lcssa - $ry$1$lcssa;
 _nsvg__cubicBezTo($p,$50,$51,$49,$52,$cx$2$lcssa,$52);
 _nsvg__cubicBezTo($p,$47,$52,$43,$51,$43,$cy$2$lcssa);
 _nsvg__addPath($p,1);
 _nsvg__addShape($p);
 return;
}
function _nsvg__parseLine($p,$attr) {
 $p = $p|0;
 $attr = $attr|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$05 = 0, $x1$0$lcssa = 0.0, $x1$01 = 0.0, $x1$1 = 0.0, $x1$2 = 0.0, $x2$0$lcssa = 0.0, $x2$03 = 0.0, $x2$1 = 0.0, $x2$2 = 0.0, $y1$0$lcssa = 0.0, $y1$02 = 0.0, $y1$1 = 0.0, $y1$2 = 0.0, $y2$0$lcssa = 0.0, $y2$04 = 0.0, $y2$1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$attr>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $x1$0$lcssa = 0.0;$x2$0$lcssa = 0.0;$y1$0$lcssa = 0.0;$y2$0$lcssa = 0.0;
  _nsvg__resetPath($p);
  _nsvg__moveTo($p,$x1$0$lcssa,$y1$0$lcssa);
  _nsvg__lineTo($p,$x2$0$lcssa,$y2$0$lcssa);
  _nsvg__addPath($p,0);
  _nsvg__addShape($p);
  return;
 } else {
  $5 = $0;$9 = $attr;$i$05 = 0;$x1$01 = 0.0;$x2$03 = 0.0;$y1$02 = 0.0;$y2$04 = 0.0;
 }
 while(1) {
  $2 = $i$05 | 1;
  $3 = (($attr) + ($2<<2)|0);
  $4 = HEAP32[$3>>2]|0;
  $6 = (_nsvg__parseAttr($p,$5,$4)|0);
  $7 = ($6|0)==(0);
  if ($7) {
   $8 = HEAP32[$9>>2]|0;
   $10 = (_strcmp($8,22108101)|0);
   $11 = ($10|0)==(0);
   if ($11) {
    $12 = HEAP32[$3>>2]|0;
    $13 = (+_nsvg__actualOrigX($p));
    $14 = (+_nsvg__actualWidth($p));
    $15 = (+_nsvg__parseCoordinate($p,$12,$13,$14));
    $x1$1 = $15;
   } else {
    $x1$1 = $x1$01;
   }
   $16 = HEAP32[$9>>2]|0;
   $17 = (_strcmp($16,22108104)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    $19 = HEAP32[$3>>2]|0;
    $20 = (+_nsvg__actualOrigY($p));
    $21 = (+_nsvg__actualHeight($p));
    $22 = (+_nsvg__parseCoordinate($p,$19,$20,$21));
    $y1$1 = $22;
   } else {
    $y1$1 = $y1$02;
   }
   $23 = HEAP32[$9>>2]|0;
   $24 = (_strcmp($23,22108107)|0);
   $25 = ($24|0)==(0);
   if ($25) {
    $26 = HEAP32[$3>>2]|0;
    $27 = (+_nsvg__actualOrigX($p));
    $28 = (+_nsvg__actualWidth($p));
    $29 = (+_nsvg__parseCoordinate($p,$26,$27,$28));
    $x2$1 = $29;
   } else {
    $x2$1 = $x2$03;
   }
   $30 = HEAP32[$9>>2]|0;
   $31 = (_strcmp($30,22108110)|0);
   $32 = ($31|0)==(0);
   if ($32) {
    $33 = HEAP32[$3>>2]|0;
    $34 = (+_nsvg__actualOrigY($p));
    $35 = (+_nsvg__actualHeight($p));
    $36 = (+_nsvg__parseCoordinate($p,$33,$34,$35));
    $x1$2 = $x1$1;$x2$2 = $x2$1;$y1$2 = $y1$1;$y2$1 = $36;
   } else {
    $x1$2 = $x1$1;$x2$2 = $x2$1;$y1$2 = $y1$1;$y2$1 = $y2$04;
   }
  } else {
   $x1$2 = $x1$01;$x2$2 = $x2$03;$y1$2 = $y1$02;$y2$1 = $y2$04;
  }
  $37 = (($i$05) + 2)|0;
  $38 = (($attr) + ($37<<2)|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = ($39|0)==(0|0);
  if ($40) {
   $x1$0$lcssa = $x1$2;$x2$0$lcssa = $x2$2;$y1$0$lcssa = $y1$2;$y2$0$lcssa = $y2$1;
   break;
  } else {
   $5 = $39;$9 = $38;$i$05 = $37;$x1$01 = $x1$2;$x2$03 = $x2$2;$y1$02 = $y1$2;$y2$04 = $y2$1;
  }
 }
 _nsvg__resetPath($p);
 _nsvg__moveTo($p,$x1$0$lcssa,$y1$0$lcssa);
 _nsvg__lineTo($p,$x2$0$lcssa,$y2$0$lcssa);
 _nsvg__addPath($p,0);
 _nsvg__addShape($p);
 return;
}
function _nsvg__parsePoly($p,$attr,$closeFlag) {
 $p = $p|0;
 $attr = $attr|0;
 $closeFlag = $closeFlag|0;
 var $$lcssa = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $args = 0, $i$01 = 0, $item = 0, $npts$02 = 0, $npts$1$ph4 = 0, $npts$2 = 0;
 var $npts$2$ph = 0, $s$0$ph3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $args = sp;
 $item = sp + 8|0;
 _nsvg__resetPath($p);
 $0 = HEAP32[$attr>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $30 = $closeFlag&255;
  _nsvg__addPath($p,$30);
  _nsvg__addShape($p);
  STACKTOP = sp;return;
 }
 $2 = ((($args)) + 4|0);
 $10 = $attr;$6 = $0;$i$01 = 0;$npts$02 = 0;
 while(1) {
  $3 = $i$01 | 1;
  $4 = (($attr) + ($3<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = (_nsvg__parseAttr($p,$6,$5)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $9 = HEAP32[$10>>2]|0;
   $11 = (_strcmp($9,22108094)|0);
   $12 = ($11|0)==(0);
   if ($12) {
    $13 = HEAP32[$4>>2]|0;
    $14 = HEAP8[$13>>0]|0;
    $15 = ($14<<24>>24)==(0);
    if ($15) {
     $npts$2 = $npts$02;
    } else {
     $npts$1$ph4 = $npts$02;$s$0$ph3 = $13;
     while(1) {
      $16 = (_nsvg__getNextPathItem($s$0$ph3,$item)|0);
      $17 = (+_nsvg__atof($item));
      $18 = $17;
      $19 = HEAP8[$16>>0]|0;
      $20 = ($19<<24>>24)==(0);
      if ($20) {
       $$lcssa = $18;$npts$2$ph = $npts$1$ph4;
       break;
      }
      $24 = (_nsvg__getNextPathItem($16,$item)|0);
      $31 = (+_nsvg__atof($item));
      $21 = $31;
      HEAPF32[$2>>2] = $21;
      $32 = ($npts$1$ph4|0)==(0);
      if ($32) {
       _nsvg__moveTo($p,$18,$21);
      } else {
       _nsvg__lineTo($p,$18,$21);
      }
      $22 = (($npts$1$ph4) + 1)|0;
      $23 = HEAP8[$24>>0]|0;
      $25 = ($23<<24>>24)==(0);
      if ($25) {
       $$lcssa = $18;$npts$2$ph = $22;
       break;
      } else {
       $npts$1$ph4 = $22;$s$0$ph3 = $24;
      }
     }
     HEAPF32[$args>>2] = $$lcssa;
     $npts$2 = $npts$2$ph;
    }
   } else {
    $npts$2 = $npts$02;
   }
  } else {
   $npts$2 = $npts$02;
  }
  $26 = (($i$01) + 2)|0;
  $27 = (($attr) + ($26<<2)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)==(0|0);
  if ($29) {
   break;
  } else {
   $10 = $27;$6 = $28;$i$01 = $26;$npts$02 = $npts$2;
  }
 }
 $30 = $closeFlag&255;
 _nsvg__addPath($p,$30);
 _nsvg__addShape($p);
 STACKTOP = sp;return;
}
function _nsvg__parseSVG($p,$attr) {
 $p = $p|0;
 $attr = $attr|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[$attr>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = ((($p)) + 39956|0);
 $3 = ((($p)) + 39956|0);
 $4 = ((($p)) + 39968|0);
 $5 = ((($p)) + 39972|0);
 $6 = ((($p)) + 39976|0);
 $7 = ((($p)) + 39980|0);
 $8 = ((($p)) + 39984|0);
 $9 = ((($p)) + 39984|0);
 $10 = ((($p)) + 39988|0);
 $11 = ((($p)) + 39988|0);
 $12 = ((($p)) + 39992|0);
 $13 = ((($p)) + 39988|0);
 $14 = ((($p)) + 39984|0);
 $15 = ((($p)) + 39992|0);
 $19 = $0;$23 = $attr;$i$01 = 0;
 while(1) {
  $16 = $i$01 | 1;
  $17 = (($attr) + ($16<<2)|0);
  $18 = HEAP32[$17>>2]|0;
  $20 = (_nsvg__parseAttr($p,$19,$18)|0);
  $21 = ($20|0)==(0);
  do {
   if ($21) {
    $22 = HEAP32[$23>>2]|0;
    $24 = (_strcmp($22,22107617)|0);
    $25 = ($24|0)==(0);
    if ($25) {
     $26 = HEAP32[$17>>2]|0;
     $27 = (+_nsvg__parseCoordinate($p,$26,0.0,0.0));
     $28 = HEAP32[$2>>2]|0;
     HEAPF32[$28>>2] = $27;
     break;
    }
    $29 = (_strcmp($22,22107623)|0);
    $30 = ($29|0)==(0);
    if ($30) {
     $31 = HEAP32[$17>>2]|0;
     $32 = (+_nsvg__parseCoordinate($p,$31,0.0,0.0));
     $33 = HEAP32[$3>>2]|0;
     $34 = ((($33)) + 4|0);
     HEAPF32[$34>>2] = $32;
     break;
    }
    $35 = (_strcmp($22,22107630)|0);
    $36 = ($35|0)==(0);
    if ($36) {
     $37 = HEAP32[$17>>2]|0;
     HEAP32[$vararg_buffer>>2] = $4;
     $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $5;
     $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
     HEAP32[$vararg_ptr2>>2] = $6;
     $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
     HEAP32[$vararg_ptr3>>2] = $7;
     (_sscanf($37,22107638,$vararg_buffer)|0);
     break;
    }
    $38 = (_strcmp($22,22107674)|0);
    $39 = ($38|0)==(0);
    if ($39) {
     $40 = HEAP32[$17>>2]|0;
     $41 = (_strstr($40,22107694)|0);
     $42 = ($41|0)==(0|0);
     if (!($42)) {
      HEAP32[$15>>2] = 0;
      break;
     }
     $43 = (_strstr($40,22107699)|0);
     $44 = ($43|0)==(0|0);
     do {
      if ($44) {
       $45 = (_strstr($40,22107704)|0);
       $46 = ($45|0)==(0|0);
       if (!($46)) {
        HEAP32[$9>>2] = 1;
        break;
       }
       $47 = (_strstr($40,22107709)|0);
       $48 = ($47|0)==(0|0);
       if (!($48)) {
        HEAP32[$8>>2] = 2;
       }
      } else {
       HEAP32[$14>>2] = 0;
      }
     } while(0);
     $49 = HEAP32[$17>>2]|0;
     $50 = (_strstr($49,22107714)|0);
     $51 = ($50|0)==(0|0);
     do {
      if ($51) {
       $52 = (_strstr($49,22107719)|0);
       $53 = ($52|0)==(0|0);
       if (!($53)) {
        HEAP32[$11>>2] = 1;
        break;
       }
       $54 = (_strstr($49,22107724)|0);
       $55 = ($54|0)==(0|0);
       if (!($55)) {
        HEAP32[$10>>2] = 2;
       }
      } else {
       HEAP32[$13>>2] = 0;
      }
     } while(0);
     HEAP32[$12>>2] = 1;
     $56 = HEAP32[$17>>2]|0;
     $57 = (_strstr($56,22107729)|0);
     $58 = ($57|0)==(0|0);
     $$ = $58 ? 1 : 2;
     HEAP32[$12>>2] = $$;
    }
   }
  } while(0);
  $59 = (($i$01) + 2)|0;
  $60 = (($attr) + ($59<<2)|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($61|0)==(0|0);
  if ($62) {
   break;
  } else {
   $19 = $61;$23 = $60;$i$01 = $59;
  }
 }
 STACKTOP = sp;return;
}
function _nsvg__parseAttr($p,$name,$value) {
 $p = $p|0;
 $name = $name|0;
 $value = $value|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0.0, $42 = 0.0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0.0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $xform = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $xform = sp;
 $0 = (_nsvg__getAttr($p)|0);
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $$0 = 0;
  } else {
   $2 = (_strcmp($name,22107742)|0);
   $3 = ($2|0)==(0);
   if ($3) {
    _nsvg__parseStyle($p,$value);
    $$0 = 1;
    break;
   }
   $4 = (_strcmp($name,22107748)|0);
   $5 = ($4|0)==(0);
   if ($5) {
    $6 = (_strcmp($value,22107694)|0);
    $7 = ($6|0)==(0);
    if (!($7)) {
     $$0 = 1;
     break;
    }
    $8 = ((($0)) + 310|0);
    HEAP8[$8>>0] = 0;
    $$0 = 1;
    break;
   }
   $9 = (_strcmp($name,22107756)|0);
   $10 = ($9|0)==(0);
   if ($10) {
    $11 = (_strcmp($value,22107694)|0);
    $12 = ($11|0)==(0);
    if ($12) {
     $13 = ((($0)) + 308|0);
     HEAP8[$13>>0] = 0;
     $$0 = 1;
     break;
    }
    $14 = (_strncmp($value,22107761,4)|0);
    $15 = ($14|0)==(0);
    $16 = ((($0)) + 308|0);
    if ($15) {
     HEAP8[$16>>0] = 2;
     $17 = ((($0)) + 108|0);
     _nsvg__parseUrl($17,$value);
     $$0 = 1;
     break;
    } else {
     HEAP8[$16>>0] = 1;
     $18 = (_nsvg__parseColor($value)|0);
     $19 = ((($0)) + 88|0);
     HEAP32[$19>>2] = $18;
     $$0 = 1;
     break;
    }
   }
   $20 = (_strcmp($name,22107766)|0);
   $21 = ($20|0)==(0);
   if ($21) {
    $22 = (+_nsvg__parseOpacity($value));
    $23 = ((($0)) + 96|0);
    HEAPF32[$23>>2] = $22;
    $$0 = 1;
    break;
   }
   $24 = (_strcmp($name,22107774)|0);
   $25 = ($24|0)==(0);
   if ($25) {
    $26 = (+_nsvg__parseOpacity($value));
    $27 = ((($0)) + 100|0);
    HEAPF32[$27>>2] = $26;
    $$0 = 1;
    break;
   }
   $28 = (_strcmp($name,22107787)|0);
   $29 = ($28|0)==(0);
   if ($29) {
    $30 = (_strcmp($value,22107694)|0);
    $31 = ($30|0)==(0);
    if ($31) {
     $32 = ((($0)) + 309|0);
     HEAP8[$32>>0] = 0;
     $$0 = 1;
     break;
    }
    $33 = (_strncmp($value,22107761,4)|0);
    $34 = ($33|0)==(0);
    $35 = ((($0)) + 309|0);
    if ($34) {
     HEAP8[$35>>0] = 2;
     $36 = ((($0)) + 172|0);
     _nsvg__parseUrl($36,$value);
     $$0 = 1;
     break;
    } else {
     HEAP8[$35>>0] = 1;
     $37 = (_nsvg__parseColor($value)|0);
     $38 = ((($0)) + 92|0);
     HEAP32[$38>>2] = $37;
     $$0 = 1;
     break;
    }
   }
   $39 = (_strcmp($name,22107794)|0);
   $40 = ($39|0)==(0);
   if ($40) {
    $41 = (+_nsvg__actualLength($p));
    $42 = (+_nsvg__parseCoordinate($p,$value,0.0,$41));
    $43 = ((($0)) + 236|0);
    HEAPF32[$43>>2] = $42;
    $$0 = 1;
    break;
   }
   $44 = (_strcmp($name,22107807)|0);
   $45 = ($44|0)==(0);
   if ($45) {
    $46 = ((($0)) + 244|0);
    $47 = (_nsvg__parseStrokeDashArray($p,$value,$46)|0);
    $48 = ((($0)) + 276|0);
    HEAP32[$48>>2] = $47;
    $$0 = 1;
    break;
   }
   $49 = (_strcmp($name,22107824)|0);
   $50 = ($49|0)==(0);
   if ($50) {
    $51 = (+_nsvg__actualLength($p));
    $52 = (+_nsvg__parseCoordinate($p,$value,0.0,$51));
    $53 = ((($0)) + 240|0);
    HEAPF32[$53>>2] = $52;
    $$0 = 1;
    break;
   }
   $54 = (_strcmp($name,22107842)|0);
   $55 = ($54|0)==(0);
   if ($55) {
    $56 = (+_nsvg__parseOpacity($value));
    $57 = ((($0)) + 104|0);
    HEAPF32[$57>>2] = $56;
    $$0 = 1;
    break;
   }
   $58 = (_strcmp($name,22107857)|0);
   $59 = ($58|0)==(0);
   if ($59) {
    $60 = (_nsvg__parseLineCap($value)|0);
    $61 = ((($0)) + 281|0);
    HEAP8[$61>>0] = $60;
    $$0 = 1;
    break;
   }
   $62 = (_strcmp($name,22107872)|0);
   $63 = ($62|0)==(0);
   if ($63) {
    $64 = (_nsvg__parseLineJoin($value)|0);
    $65 = ((($0)) + 280|0);
    HEAP8[$65>>0] = $64;
    $$0 = 1;
    break;
   }
   $66 = (_strcmp($name,22107888)|0);
   $67 = ($66|0)==(0);
   if ($67) {
    $68 = (+_nsvg__parseMiterLimit($value));
    $69 = ((($0)) + 284|0);
    HEAPF32[$69>>2] = $68;
    $$0 = 1;
    break;
   }
   $70 = (_strcmp($name,22107906)|0);
   $71 = ($70|0)==(0);
   if ($71) {
    $72 = (_nsvg__parseFillRule($value)|0);
    $73 = ((($0)) + 288|0);
    HEAP8[$73>>0] = $72;
    $$0 = 1;
    break;
   }
   $74 = (_strcmp($name,22107916)|0);
   $75 = ($74|0)==(0);
   if ($75) {
    $76 = (+_nsvg__actualLength($p));
    $77 = (+_nsvg__parseCoordinate($p,$value,0.0,$76));
    $78 = ((($0)) + 292|0);
    HEAPF32[$78>>2] = $77;
    $$0 = 1;
    break;
   }
   $79 = (_strcmp($name,22107926)|0);
   $80 = ($79|0)==(0);
   if ($80) {
    _nsvg__parseTransform($xform,$value);
    $81 = ((($0)) + 64|0);
    _nsvg__xformPremultiply($81,$xform);
    $$0 = 1;
    break;
   }
   $82 = (_strcmp($name,22107936)|0);
   $83 = ($82|0)==(0);
   if ($83) {
    $84 = (_nsvg__parseColor($value)|0);
    $85 = ((($0)) + 296|0);
    HEAP32[$85>>2] = $84;
    $$0 = 1;
    break;
   }
   $86 = (_strcmp($name,22107947)|0);
   $87 = ($86|0)==(0);
   if ($87) {
    $88 = (+_nsvg__parseOpacity($value));
    $89 = ((($0)) + 300|0);
    HEAPF32[$89>>2] = $88;
    $$0 = 1;
    break;
   }
   $90 = (_strcmp($name,22107960)|0);
   $91 = ($90|0)==(0);
   if ($91) {
    $92 = (+_nsvg__parseCoordinate($p,$value,0.0,1.0));
    $93 = ((($0)) + 304|0);
    HEAPF32[$93>>2] = $92;
    $$0 = 1;
    break;
   }
   $94 = (_strcmp($name,22107967)|0);
   $95 = ($94|0)==(0);
   if (!($95)) {
    $$0 = 0;
    break;
   }
   (_strncpy($0,$value,63)|0);
   $96 = ((($0)) + 63|0);
   HEAP8[$96>>0] = 0;
   $$0 = 1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _nsvg__parseCoordinate($p,$str,$orig,$length) {
 $p = $p|0;
 $str = $str|0;
 $orig = +$orig;
 $length = +$length;
 var $0 = 0.0, $coord = 0, $coord$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $coord$byval_copy = sp + 8|0;
 $coord = sp;
 _nsvg__parseCoordinateRaw($coord,$str);
 ;HEAP32[$coord$byval_copy>>2]=HEAP32[$coord>>2]|0;HEAP32[$coord$byval_copy+4>>2]=HEAP32[$coord+4>>2]|0;
 $0 = (+_nsvg__convertToPixels($p,$coord$byval_copy,$orig,$length));
 STACKTOP = sp;return (+$0);
}
function _nsvg__parseCoordinateRaw($agg$result,$str) {
 $agg$result = $agg$result|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $coord = 0, $units = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer = sp + 8|0;
 $coord = sp;
 $units = sp + 16|0;
 $0 = $coord;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (($0) + 4)|0;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 dest=$units; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 HEAP32[$vararg_buffer>>2] = $coord;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $units;
 (_sscanf($str,22107735,$vararg_buffer)|0);
 $4 = (_nsvg__parseUnits($units)|0);
 $5 = ((($coord)) + 4|0);
 HEAP32[$5>>2] = $4;
 $6 = $coord;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = $agg$result;
 $13 = $12;
 HEAP32[$13>>2] = $8;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $11;
 STACKTOP = sp;return;
}
function _nsvg__parseStyle($p,$str) {
 $p = $p|0;
 $str = $str|0;
 var $$012 = 0, $$1$lcssa = 0, $$14 = 0, $$2 = 0, $$2$ = 0, $$2$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $end$0$lcssa = 0, $end$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$str>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  return;
 } else {
  $$012 = $str;
 }
 while(1) {
  $2 = HEAP8[$$012>>0]|0;
  $3 = ($2<<24>>24)==(0);
  L5: do {
   if ($3) {
    $$1$lcssa = $$012;
   } else {
    $$14 = $$012;$4 = $2;
    while(1) {
     $5 = (_nsvg__isspace($4)|0);
     $6 = ($5|0)==(0);
     if ($6) {
      $$1$lcssa = $$14;
      break L5;
     }
     $7 = ((($$14)) + 1|0);
     $8 = HEAP8[$7>>0]|0;
     $9 = ($8<<24>>24)==(0);
     if ($9) {
      $$1$lcssa = $7;
      break;
     } else {
      $$14 = $7;$4 = $8;
     }
    }
   }
  } while(0);
  $$2 = $$1$lcssa;
  L10: while(1) {
   $10 = HEAP8[$$2>>0]|0;
   switch ($10<<24>>24) {
   case 0: case 59:  {
    $$2$lcssa = $$2;
    break L10;
    break;
   }
   default: {
   }
   }
   $12 = ((($$2)) + 1|0);
   $$2 = $12;
  }
  $11 = ($$2$lcssa>>>0)>($$1$lcssa>>>0);
  L14: do {
   if ($11) {
    $end$07 = $$2$lcssa;
    while(1) {
     $13 = HEAP8[$end$07>>0]|0;
     $14 = ($13<<24>>24)==(59);
     if (!($14)) {
      $15 = (_nsvg__isspace($13)|0);
      $16 = ($15|0)==(0);
      if ($16) {
       $end$0$lcssa = $end$07;
       break L14;
      }
     }
     $17 = ((($end$07)) + -1|0);
     $18 = ($17>>>0)>($$1$lcssa>>>0);
     if ($18) {
      $end$07 = $17;
     } else {
      $end$0$lcssa = $17;
      break;
     }
    }
   } else {
    $end$0$lcssa = $$2$lcssa;
   }
  } while(0);
  $19 = ((($end$0$lcssa)) + 1|0);
  _nsvg__parseNameValue($p,$$1$lcssa,$19);
  $20 = HEAP8[$$2$lcssa>>0]|0;
  $21 = ($20<<24>>24)==(0);
  $22 = ((($$2$lcssa)) + 1|0);
  $$2$ = $21 ? $$2$lcssa : $22;
  $23 = HEAP8[$$2$>>0]|0;
  $24 = ($23<<24>>24)==(0);
  if ($24) {
   break;
  } else {
   $$012 = $$2$;
  }
 }
 return;
}
function _nsvg__parseUrl($id,$str) {
 $id = $id|0;
 $str = $str|0;
 var $$ = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0$lcssa = 0, $i$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($str)) + 4|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(35);
 $3 = ((($str)) + 5|0);
 $$ = $2 ? $3 : $0;
 $$01 = $$;$i$02 = 0;
 while(1) {
  $4 = HEAP8[$$01>>0]|0;
  $5 = ($4<<24>>24)==(41);
  if ($5) {
   $i$0$lcssa = $i$02;
   label = 4;
   break;
  }
  $6 = ((($$01)) + 1|0);
  $7 = (($id) + ($i$02)|0);
  HEAP8[$7>>0] = $4;
  $8 = (($i$02) + 1)|0;
  $9 = ($8|0)<(63);
  if ($9) {
   $$01 = $6;$i$02 = $8;
  } else {
   $i$0$lcssa = $8;
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $10 = (($id) + ($i$0$lcssa)|0);
  HEAP8[$10>>0] = 0;
  return;
 }
}
function _nsvg__parseColor($str) {
 $str = $str|0;
 var $$0 = 0, $$0$lcssa = 0, $$01 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $str;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = ($0<<24>>24)==(32);
  $2 = ((($$0)) + 1|0);
  if ($1) {
   $$0 = $2;
  } else {
   $$0$lcssa = $$0;$$lcssa = $0;
   break;
  }
 }
 $3 = (_strlen($$0$lcssa)|0);
 $4 = ($3|0)==(0);
 if (!($4)) {
  $5 = ($$lcssa<<24>>24)==(35);
  if ($5) {
   $6 = (_nsvg__parseColorHex($$0$lcssa)|0);
   $$01 = $6;
   return ($$01|0);
  }
  $7 = ($3>>>0)>(3);
  if ($7) {
   $8 = HEAP8[$$0$lcssa>>0]|0;
   $9 = ($8<<24>>24)==(114);
   if ($9) {
    $10 = ((($$0$lcssa)) + 1|0);
    $11 = HEAP8[$10>>0]|0;
    $12 = ($11<<24>>24)==(103);
    if ($12) {
     $13 = ((($$0$lcssa)) + 2|0);
     $14 = HEAP8[$13>>0]|0;
     $15 = ($14<<24>>24)==(98);
     if ($15) {
      $16 = ((($$0$lcssa)) + 3|0);
      $17 = HEAP8[$16>>0]|0;
      $18 = ($17<<24>>24)==(40);
      if ($18) {
       $19 = (_nsvg__parseColorRGB($$0$lcssa)|0);
       $$01 = $19;
       return ($$01|0);
      }
     }
    }
   }
  }
 }
 $20 = (_nsvg__parseColorName($$0$lcssa)|0);
 $$01 = $20;
 return ($$01|0);
}
function _nsvg__parseOpacity($str) {
 $str = $str|0;
 var $0 = 0.0, $1 = 0, $2 = 0, $3 = 0.0, $val = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $val = sp + 4|0;
 HEAPF32[$val>>2] = 0.0;
 HEAP32[$vararg_buffer>>2] = $val;
 (_sscanf($str,22108028,$vararg_buffer)|0);
 $0 = +HEAPF32[$val>>2];
 $1 = $0 < 0.0;
 if ($1) {
  HEAPF32[$val>>2] = 0.0;
 } else {
  $2 = $0 > 1.0;
  if ($2) {
   HEAPF32[$val>>2] = 1.0;
  }
 }
 $3 = +HEAPF32[$val>>2];
 STACKTOP = sp;return (+$3);
}
function _nsvg__actualLength($p) {
 $p = $p|0;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_nsvg__actualWidth($p));
 $1 = (+_nsvg__actualHeight($p));
 $2 = $0 * $0;
 $3 = $1 * $1;
 $4 = $2 + $3;
 $5 = (+Math_sqrt((+$4)));
 $6 = $5 / 1.4142135381698608;
 return (+$6);
}
function _nsvg__parseStrokeDashArray($p,$str,$strokeDashArray) {
 $p = $p|0;
 $str = $str|0;
 $strokeDashArray = $strokeDashArray|0;
 var $$0 = 0, $$01 = 0, $$01$ph = 0, $$lcssa = 0.0, $$lcssa10 = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0.0, $count$0$ph = 0, $count$0$ph$lcssa = 0, $exitcond = 0, $i$03 = 0, $item = 0, $phitmp = 0, $phitmp5 = 0, $sum$04 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $item = sp;
 $0 = HEAP8[$str>>0]|0;
 $1 = ($0<<24>>24)==(110);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$01$ph = $str;$count$0$ph = 0;
 }
 L3: while(1) {
  $2 = ($count$0$ph|0)<(8);
  $$01 = $$01$ph;
  while(1) {
   $3 = HEAP8[$$01>>0]|0;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $count$0$ph$lcssa = $count$0$ph;
    break L3;
   }
   $6 = (_nsvg__getNextDashItem($$01,$item)|0);
   $7 = HEAP8[$item>>0]|0;
   $8 = ($7<<24>>24)==(0);
   if ($8) {
    $count$0$ph$lcssa = $count$0$ph;
    break L3;
   }
   if ($2) {
    $$lcssa10 = $6;
    break;
   } else {
    $$01 = $6;
   }
  }
  $9 = (+_nsvg__actualLength($p));
  $10 = (+_nsvg__parseCoordinate($p,$item,0.0,$9));
  $11 = (+Math_abs((+$10)));
  $12 = (($count$0$ph) + 1)|0;
  $13 = (($strokeDashArray) + ($count$0$ph<<2)|0);
  HEAPF32[$13>>2] = $11;
  $$01$ph = $$lcssa10;$count$0$ph = $12;
 }
 $5 = ($count$0$ph$lcssa|0)>(0);
 if ($5) {
  $i$03 = 0;$sum$04 = 0.0;
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $14 = (($strokeDashArray) + ($i$03<<2)|0);
  $15 = +HEAPF32[$14>>2];
  $16 = $sum$04 + $15;
  $17 = (($i$03) + 1)|0;
  $exitcond = ($17|0)==($count$0$ph$lcssa|0);
  if ($exitcond) {
   $$lcssa = $16;
   break;
  } else {
   $i$03 = $17;$sum$04 = $16;
  }
 }
 $phitmp = !($$lcssa <= 9.9999999747524271E-7);
 $phitmp5 = $phitmp ? $count$0$ph$lcssa : 0;
 $$0 = $phitmp5;
 STACKTOP = sp;return ($$0|0);
}
function _nsvg__parseLineCap($str) {
 $str = $str|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strcmp($str,22108049)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (_strcmp($str,22108037)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 1;
  return ($$0|0);
 }
 $4 = (_strcmp($str,22108054)|0);
 $5 = ($4|0)==(0);
 $$ = $5 ? 2 : 0;
 $$0 = $$;
 return ($$0|0);
}
function _nsvg__parseLineJoin($str) {
 $str = $str|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strcmp($str,22108031)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (_strcmp($str,22108037)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 1;
  return ($$0|0);
 }
 $4 = (_strcmp($str,22108043)|0);
 $5 = ($4|0)==(0);
 $$ = $5 ? 2 : 0;
 $$0 = $$;
 return ($$0|0);
}
function _nsvg__parseMiterLimit($str) {
 $str = $str|0;
 var $0 = 0.0, $1 = 0, $2 = 0.0, $val = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $val = sp + 4|0;
 HEAPF32[$val>>2] = 0.0;
 HEAP32[$vararg_buffer>>2] = $val;
 (_sscanf($str,22108028,$vararg_buffer)|0);
 $0 = +HEAPF32[$val>>2];
 $1 = $0 < 0.0;
 if ($1) {
  HEAPF32[$val>>2] = 0.0;
 }
 $2 = +HEAPF32[$val>>2];
 STACKTOP = sp;return (+$2);
}
function _nsvg__parseFillRule($str) {
 $str = $str|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strcmp($str,22108012)|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = (_strcmp($str,22108020)|0);
 $3 = ($2|0)==(0);
 $$ = $3&1;
 $$0 = $$;
 return ($$0|0);
}
function _nsvg__parseTransform($xform,$str) {
 $xform = $xform|0;
 $str = $str|0;
 var $$0$be = 0, $$01 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $t = sp;
 _nsvg__xformIdentity($xform);
 $0 = HEAP8[$str>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $$01 = $str;
 while(1) {
  $2 = (_strncmp($$01,22107970,6)|0);
  $3 = ($2|0)==(0);
  do {
   if ($3) {
    $4 = (_nsvg__parseMatrix($t,$$01)|0);
    $5 = (($$01) + ($4)|0);
    $$1 = $5;
    label = 17;
   } else {
    $6 = (_strncmp($$01,22107977,9)|0);
    $7 = ($6|0)==(0);
    if ($7) {
     $8 = (_nsvg__parseTranslate($t,$$01)|0);
     $9 = (($$01) + ($8)|0);
     $$1 = $9;
     label = 17;
     break;
    }
    $10 = (_strncmp($$01,22107987,5)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $12 = (_nsvg__parseScale($t,$$01)|0);
     $13 = (($$01) + ($12)|0);
     $$1 = $13;
     label = 17;
     break;
    }
    $14 = (_strncmp($$01,22107993,6)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $16 = (_nsvg__parseRotate($t,$$01)|0);
     $17 = (($$01) + ($16)|0);
     $$1 = $17;
     label = 17;
     break;
    }
    $18 = (_strncmp($$01,22108000,5)|0);
    $19 = ($18|0)==(0);
    if ($19) {
     $20 = (_nsvg__parseSkewX($t,$$01)|0);
     $21 = (($$01) + ($20)|0);
     $$1 = $21;
     label = 17;
     break;
    }
    $22 = (_strncmp($$01,22108006,5)|0);
    $23 = ($22|0)==(0);
    if ($23) {
     $24 = (_nsvg__parseSkewY($t,$$01)|0);
     $25 = (($$01) + ($24)|0);
     $$1 = $25;
     label = 17;
     break;
    } else {
     $26 = ((($$01)) + 1|0);
     $$0$be = $26;
     break;
    }
   }
  } while(0);
  if ((label|0) == 17) {
   label = 0;
   _nsvg__xformPremultiply($xform,$t);
   $$0$be = $$1;
  }
  $27 = HEAP8[$$0$be>>0]|0;
  $28 = ($27<<24>>24)==(0);
  if ($28) {
   break;
  } else {
   $$01 = $$0$be;
  }
 }
 STACKTOP = sp;return;
}
function _nsvg__xformPremultiply($t,$s) {
 $t = $t|0;
 $s = $s|0;
 var $s2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $s2 = sp;
 ;HEAP32[$s2>>2]=HEAP32[$s>>2]|0;HEAP32[$s2+4>>2]=HEAP32[$s+4>>2]|0;HEAP32[$s2+8>>2]=HEAP32[$s+8>>2]|0;HEAP32[$s2+12>>2]=HEAP32[$s+12>>2]|0;HEAP32[$s2+16>>2]=HEAP32[$s+16>>2]|0;HEAP32[$s2+20>>2]=HEAP32[$s+20>>2]|0;
 _nsvg__xformMultiply($s2,$t);
 ;HEAP32[$t>>2]=HEAP32[$s2>>2]|0;HEAP32[$t+4>>2]=HEAP32[$s2+4>>2]|0;HEAP32[$t+8>>2]=HEAP32[$s2+8>>2]|0;HEAP32[$t+12>>2]=HEAP32[$s2+12>>2]|0;HEAP32[$t+16>>2]=HEAP32[$s2+16>>2]|0;HEAP32[$t+20>>2]=HEAP32[$s2+20>>2]|0;
 STACKTOP = sp;return;
}
function _nsvg__parseMatrix($xform,$str) {
 $xform = $xform|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $na = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $t = sp + 8|0;
 $na = sp;
 HEAP32[$na>>2] = 0;
 $0 = (_nsvg__parseTransformArgs($str,$t,6,$na)|0);
 $1 = HEAP32[$na>>2]|0;
 $2 = ($1|0)==(6);
 if (!($2)) {
  STACKTOP = sp;return ($0|0);
 }
 ;HEAP32[$xform>>2]=HEAP32[$t>>2]|0;HEAP32[$xform+4>>2]=HEAP32[$t+4>>2]|0;HEAP32[$xform+8>>2]=HEAP32[$t+8>>2]|0;HEAP32[$xform+12>>2]=HEAP32[$t+12>>2]|0;HEAP32[$xform+16>>2]=HEAP32[$t+16>>2]|0;HEAP32[$xform+20>>2]=HEAP32[$t+20>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function _nsvg__parseTranslate($xform,$str) {
 $xform = $xform|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0.0, $args = 0, $na = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $args = sp + 32|0;
 $t = sp + 8|0;
 $na = sp;
 HEAP32[$na>>2] = 0;
 $0 = (_nsvg__parseTransformArgs($str,$args,2,$na)|0);
 $1 = HEAP32[$na>>2]|0;
 $2 = ($1|0)==(1);
 if ($2) {
  $3 = ((($args)) + 4|0);
  HEAPF32[$3>>2] = 0.0;
 }
 $4 = +HEAPF32[$args>>2];
 $5 = ((($args)) + 4|0);
 $6 = +HEAPF32[$5>>2];
 _nsvg__xformSetTranslation($t,$4,$6);
 ;HEAP32[$xform>>2]=HEAP32[$t>>2]|0;HEAP32[$xform+4>>2]=HEAP32[$t+4>>2]|0;HEAP32[$xform+8>>2]=HEAP32[$t+8>>2]|0;HEAP32[$xform+12>>2]=HEAP32[$t+12>>2]|0;HEAP32[$xform+16>>2]=HEAP32[$t+16>>2]|0;HEAP32[$xform+20>>2]=HEAP32[$t+20>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function _nsvg__parseScale($xform,$str) {
 $xform = $xform|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $args = 0, $na = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $args = sp + 32|0;
 $na = sp + 24|0;
 $t = sp;
 HEAP32[$na>>2] = 0;
 $0 = (_nsvg__parseTransformArgs($str,$args,2,$na)|0);
 $1 = HEAP32[$na>>2]|0;
 $2 = ($1|0)==(1);
 if ($2) {
  $3 = HEAP32[$args>>2]|0;
  $4 = ((($args)) + 4|0);
  HEAP32[$4>>2] = $3;
 }
 $5 = +HEAPF32[$args>>2];
 $6 = ((($args)) + 4|0);
 $7 = +HEAPF32[$6>>2];
 _nsvg__xformSetScale($t,$5,$7);
 ;HEAP32[$xform>>2]=HEAP32[$t>>2]|0;HEAP32[$xform+4>>2]=HEAP32[$t+4>>2]|0;HEAP32[$xform+8>>2]=HEAP32[$t+8>>2]|0;HEAP32[$xform+12>>2]=HEAP32[$t+12>>2]|0;HEAP32[$xform+16>>2]=HEAP32[$t+16>>2]|0;HEAP32[$xform+20>>2]=HEAP32[$t+20>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function _nsvg__parseRotate($xform,$str) {
 $xform = $xform|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0.0, $args = 0, $m = 0, $na = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $args = sp + 52|0;
 $na = sp + 48|0;
 $m = sp + 24|0;
 $t = sp;
 HEAP32[$na>>2] = 0;
 $0 = (_nsvg__parseTransformArgs($str,$args,3,$na)|0);
 $1 = HEAP32[$na>>2]|0;
 $2 = ($1|0)==(1);
 if ($2) {
  $3 = ((($args)) + 8|0);
  HEAPF32[$3>>2] = 0.0;
  $4 = ((($args)) + 4|0);
  HEAPF32[$4>>2] = 0.0;
 }
 _nsvg__xformIdentity($m);
 $5 = HEAP32[$na>>2]|0;
 $6 = ($5|0)>(1);
 if ($6) {
  $7 = ((($args)) + 4|0);
  $8 = +HEAPF32[$7>>2];
  $9 = -$8;
  $10 = ((($args)) + 8|0);
  $11 = +HEAPF32[$10>>2];
  $12 = -$11;
  _nsvg__xformSetTranslation($t,$9,$12);
  _nsvg__xformMultiply($m,$t);
 }
 $13 = +HEAPF32[$args>>2];
 $14 = $13 / 180.0;
 $15 = $14 * 3.1415927410125732;
 _nsvg__xformSetRotation($t,$15);
 _nsvg__xformMultiply($m,$t);
 $16 = HEAP32[$na>>2]|0;
 $17 = ($16|0)>(1);
 if ($17) {
  $18 = ((($args)) + 4|0);
  $19 = +HEAPF32[$18>>2];
  $20 = ((($args)) + 8|0);
  $21 = +HEAPF32[$20>>2];
  _nsvg__xformSetTranslation($t,$19,$21);
  _nsvg__xformMultiply($m,$t);
 }
 ;HEAP32[$xform>>2]=HEAP32[$m>>2]|0;HEAP32[$xform+4>>2]=HEAP32[$m+4>>2]|0;HEAP32[$xform+8>>2]=HEAP32[$m+8>>2]|0;HEAP32[$xform+12>>2]=HEAP32[$m+12>>2]|0;HEAP32[$xform+16>>2]=HEAP32[$m+16>>2]|0;HEAP32[$xform+20>>2]=HEAP32[$m+20>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function _nsvg__parseSkewX($xform,$str) {
 $xform = $xform|0;
 $str = $str|0;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $args = 0, $na = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $args = sp + 28|0;
 $na = sp + 24|0;
 $t = sp;
 HEAP32[$na>>2] = 0;
 $0 = (_nsvg__parseTransformArgs($str,$args,1,$na)|0);
 $1 = +HEAPF32[$args>>2];
 $2 = $1 / 180.0;
 $3 = $2 * 3.1415927410125732;
 _nsvg__xformSetSkewX($t,$3);
 ;HEAP32[$xform>>2]=HEAP32[$t>>2]|0;HEAP32[$xform+4>>2]=HEAP32[$t+4>>2]|0;HEAP32[$xform+8>>2]=HEAP32[$t+8>>2]|0;HEAP32[$xform+12>>2]=HEAP32[$t+12>>2]|0;HEAP32[$xform+16>>2]=HEAP32[$t+16>>2]|0;HEAP32[$xform+20>>2]=HEAP32[$t+20>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function _nsvg__parseSkewY($xform,$str) {
 $xform = $xform|0;
 $str = $str|0;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $args = 0, $na = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $args = sp + 28|0;
 $na = sp + 24|0;
 $t = sp;
 HEAP32[$na>>2] = 0;
 $0 = (_nsvg__parseTransformArgs($str,$args,1,$na)|0);
 $1 = +HEAPF32[$args>>2];
 $2 = $1 / 180.0;
 $3 = $2 * 3.1415927410125732;
 _nsvg__xformSetSkewY($t,$3);
 ;HEAP32[$xform>>2]=HEAP32[$t>>2]|0;HEAP32[$xform+4>>2]=HEAP32[$t+4>>2]|0;HEAP32[$xform+8>>2]=HEAP32[$t+8>>2]|0;HEAP32[$xform+12>>2]=HEAP32[$t+12>>2]|0;HEAP32[$xform+16>>2]=HEAP32[$t+16>>2]|0;HEAP32[$xform+20>>2]=HEAP32[$t+20>>2]|0;
 STACKTOP = sp;return ($0|0);
}
function _nsvg__parseTransformArgs($str,$args,$maxNa,$na) {
 $str = $str|0;
 $args = $args|0;
 $maxNa = $maxNa|0;
 $na = $na|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $end$0 = 0, $it = 0, $not$ = 0, $not$2 = 0, $ptr$0 = 0, $ptr$1$be = 0, $ptr$15 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0;
 $it = sp;
 HEAP32[$na>>2] = 0;
 $ptr$0 = $str;
 while(1) {
  $0 = HEAP8[$ptr$0>>0]|0;
  $1 = ($0<<24>>24)==(0);
  $2 = ($0<<24>>24)!=(40);
  $not$ = $1 ^ 1;
  $$ = $2 & $not$;
  $3 = ((($ptr$0)) + 1|0);
  if ($$) {
   $ptr$0 = $3;
  } else {
   break;
  }
 }
 if ($1) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $end$0 = $ptr$0;
 }
 while(1) {
  $4 = HEAP8[$end$0>>0]|0;
  $5 = ($4<<24>>24)==(0);
  $6 = ($4<<24>>24)!=(41);
  $not$2 = $5 ^ 1;
  $$1 = $6 & $not$2;
  $7 = ((($end$0)) + 1|0);
  if ($$1) {
   $end$0 = $7;
  } else {
   break;
  }
 }
 if ($5) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $8 = ($ptr$0>>>0)<($end$0>>>0);
 L12: do {
  if ($8) {
   $ptr$15 = $ptr$0;
   while(1) {
    $9 = HEAP8[$ptr$15>>0]|0;
    switch ($9<<24>>24) {
    case 46: case 43: case 45:  {
     label = 9;
     break;
    }
    default: {
     $10 = (_nsvg__isdigit($9)|0);
     $11 = ($10|0)==(0);
     if ($11) {
      $20 = ((($ptr$15)) + 1|0);
      $ptr$1$be = $20;
     } else {
      label = 9;
     }
    }
    }
    if ((label|0) == 9) {
     label = 0;
     $12 = HEAP32[$na>>2]|0;
     $13 = ($12|0)<($maxNa|0);
     if (!($13)) {
      $$0 = 0;
      break;
     }
     $14 = (_nsvg__parseNumber($ptr$15,$it)|0);
     $15 = (+_nsvg__atof($it));
     $16 = $15;
     $17 = HEAP32[$na>>2]|0;
     $18 = (($17) + 1)|0;
     HEAP32[$na>>2] = $18;
     $19 = (($args) + ($17<<2)|0);
     HEAPF32[$19>>2] = $16;
     $ptr$1$be = $14;
    }
    $21 = ($ptr$1$be>>>0)<($end$0>>>0);
    if ($21) {
     $ptr$15 = $ptr$1$be;
    } else {
     break L12;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $22 = $end$0;
 $23 = $str;
 $24 = (($22) - ($23))|0;
 $$0 = $24;
 STACKTOP = sp;return ($$0|0);
}
function _nsvg__xformSetSkewY($t,$a) {
 $t = $t|0;
 $a = +$a;
 var $0 = 0.0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF32[$t>>2] = 1.0;
 $0 = (+Math_tan((+$a)));
 $1 = ((($t)) + 4|0);
 HEAPF32[$1>>2] = $0;
 $2 = ((($t)) + 8|0);
 HEAPF32[$2>>2] = 0.0;
 $3 = ((($t)) + 12|0);
 HEAPF32[$3>>2] = 1.0;
 $4 = ((($t)) + 16|0);
 HEAPF32[$4>>2] = 0.0;
 $5 = ((($t)) + 20|0);
 HEAPF32[$5>>2] = 0.0;
 return;
}
function _nsvg__isdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $c$off = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $c$off = (($c) + -48)<<24>>24;
 $0 = ($c$off&255)<(10);
 $1 = $0&1;
 return ($1|0);
}
function _nsvg__parseNumber($s,$it) {
 $s = $s|0;
 $it = $it|0;
 var $$0$ph = 0, $$0$pn = 0, $$0$pn$ph = 0, $$015 = 0, $$015$lcssa = 0, $$1 = 0, $$1$lcssa43 = 0, $$2 = 0, $$3$ph = 0, $$39 = 0, $$4 = 0, $$lcssa44 = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i$1$ph = 0, $i$10 = 0, $i$11 = 0, $i$116 = 0, $i$116$lcssa = 0, $i$2 = 0, $i$4$ph2 = 0, $i$6 = 0, $i$7 = 0, $i$8 = 0, $i$9$ph = 0, $i$910 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$s>>0]|0;
 switch ($0<<24>>24) {
 case 43: case 45:  {
  $1 = HEAP8[$s>>0]|0;
  HEAP8[$it>>0] = $1;
  $2 = ((($s)) + 1|0);
  $$0$ph = $2;$i$1$ph = 1;
  break;
 }
 default: {
  $$0$ph = $s;$i$1$ph = 0;
 }
 }
 $3 = HEAP8[$$0$ph>>0]|0;
 $4 = ($3<<24>>24)==(0);
 L4: do {
  if ($4) {
   $$2 = $$0$ph;$i$6 = $i$1$ph;
  } else {
   $$015 = $$0$ph;$5 = $3;$i$116 = $i$1$ph;
   while(1) {
    $6 = (_nsvg__isdigit($5)|0);
    $7 = ($6|0)==(0);
    if ($7) {
     $$015$lcssa = $$015;$i$116$lcssa = $i$116;
     break;
    }
    $8 = ($i$116|0)<(63);
    if ($8) {
     $9 = (($i$116) + 1)|0;
     $10 = (($it) + ($i$116)|0);
     HEAP8[$10>>0] = $5;
     $i$2 = $9;
    } else {
     $i$2 = $i$116;
    }
    $11 = ((($$015)) + 1|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = ($12<<24>>24)==(0);
    if ($13) {
     $$2 = $11;$i$6 = $i$2;
     break L4;
    } else {
     $$015 = $11;$5 = $12;$i$116 = $i$2;
    }
   }
   $$pr = HEAP8[$$015$lcssa>>0]|0;
   $14 = ($$pr<<24>>24)==(46);
   if ($14) {
    $15 = ($i$116$lcssa|0)<(63);
    if ($15) {
     $16 = (($i$116$lcssa) + 1)|0;
     $17 = (($it) + ($i$116$lcssa)|0);
     HEAP8[$17>>0] = $$pr;
     $$0$pn$ph = $$015$lcssa;$i$4$ph2 = $16;
    } else {
     $$0$pn$ph = $$015$lcssa;$i$4$ph2 = $i$116$lcssa;
    }
    while(1) {
     $18 = ($i$4$ph2|0)<(63);
     $$0$pn = $$0$pn$ph;
     while(1) {
      $$1 = ((($$0$pn)) + 1|0);
      $19 = HEAP8[$$1>>0]|0;
      $20 = ($19<<24>>24)==(0);
      if ($20) {
       $$2 = $$1;$i$6 = $i$4$ph2;
       break L4;
      }
      $21 = (_nsvg__isdigit($19)|0);
      $22 = ($21|0)==(0);
      if ($22) {
       $$2 = $$1;$i$6 = $i$4$ph2;
       break L4;
      }
      if ($18) {
       $$1$lcssa43 = $$1;$$lcssa44 = $19;
       break;
      } else {
       $$0$pn = $$1;
      }
     }
     $23 = (($i$4$ph2) + 1)|0;
     $24 = (($it) + ($i$4$ph2)|0);
     HEAP8[$24>>0] = $$lcssa44;
     $$0$pn$ph = $$1$lcssa43;$i$4$ph2 = $23;
    }
   } else {
    $$2 = $$015$lcssa;$i$6 = $i$116$lcssa;
   }
  }
 } while(0);
 $25 = HEAP8[$$2>>0]|0;
 switch ($25<<24>>24) {
 case 69: case 101:  {
  break;
 }
 default: {
  $$4 = $$2;$i$11 = $i$6;
  $48 = (($it) + ($i$11)|0);
  HEAP8[$48>>0] = 0;
  return ($$4|0);
 }
 }
 $26 = ($i$6|0)<(63);
 if ($26) {
  $27 = HEAP8[$$2>>0]|0;
  $28 = (($i$6) + 1)|0;
  $29 = (($it) + ($i$6)|0);
  HEAP8[$29>>0] = $27;
  $i$7 = $28;
 } else {
  $i$7 = $i$6;
 }
 $30 = ((($$2)) + 1|0);
 $31 = HEAP8[$30>>0]|0;
 switch ($31<<24>>24) {
 case 43: case 45:  {
  $32 = ($i$7|0)<(63);
  if ($32) {
   $33 = HEAP8[$30>>0]|0;
   $34 = (($i$7) + 1)|0;
   $35 = (($it) + ($i$7)|0);
   HEAP8[$35>>0] = $33;
   $i$8 = $34;
  } else {
   $i$8 = $i$7;
  }
  $36 = ((($$2)) + 2|0);
  $$3$ph = $36;$i$9$ph = $i$8;
  break;
 }
 default: {
  $$3$ph = $30;$i$9$ph = $i$7;
 }
 }
 $37 = HEAP8[$$3$ph>>0]|0;
 $38 = ($37<<24>>24)==(0);
 if ($38) {
  $$4 = $$3$ph;$i$11 = $i$9$ph;
  $48 = (($it) + ($i$11)|0);
  HEAP8[$48>>0] = 0;
  return ($$4|0);
 } else {
  $$39 = $$3$ph;$39 = $37;$i$910 = $i$9$ph;
 }
 while(1) {
  $40 = (_nsvg__isdigit($39)|0);
  $41 = ($40|0)==(0);
  if ($41) {
   $$4 = $$39;$i$11 = $i$910;
   label = 28;
   break;
  }
  $42 = ($i$910|0)<(63);
  if ($42) {
   $43 = (($i$910) + 1)|0;
   $44 = (($it) + ($i$910)|0);
   HEAP8[$44>>0] = $39;
   $i$10 = $43;
  } else {
   $i$10 = $i$910;
  }
  $45 = ((($$39)) + 1|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = ($46<<24>>24)==(0);
  if ($47) {
   $$4 = $45;$i$11 = $i$10;
   label = 28;
   break;
  } else {
   $$39 = $45;$39 = $46;$i$910 = $i$10;
  }
 }
 if ((label|0) == 28) {
  $48 = (($it) + ($i$11)|0);
  HEAP8[$48>>0] = 0;
  return ($$4|0);
 }
 return (0)|0;
}
function _nsvg__atof($s) {
 $s = $s|0;
 var $$ = 0.0, $$0 = 0.0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $cur$0 = 0, $cur$1 = 0, $cur$2 = 0, $cur$24 = 0, $end = 0, $hasIntPart$0 = 0, $res$0 = 0.0, $res$15 = 0.0, $res$2 = 0.0, $sign$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $end = sp;
 HEAP32[$end>>2] = 0;
 $0 = HEAP8[$s>>0]|0;
 switch ($0<<24>>24) {
 case 43:  {
  $1 = ((($s)) + 1|0);
  $cur$0 = $1;$sign$0 = 1.0;
  break;
 }
 case 45:  {
  $2 = ((($s)) + 1|0);
  $cur$0 = $2;$sign$0 = -1.0;
  break;
 }
 default: {
  $cur$0 = $s;$sign$0 = 1.0;
 }
 }
 $3 = HEAP8[$cur$0>>0]|0;
 $4 = (_nsvg__isdigit($3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $cur$1 = $cur$0;$hasIntPart$0 = 0;$res$0 = 0.0;
 } else {
  $6 = (_strtoll($cur$0,$end,10)|0);
  $7 = tempRet0;
  $8 = HEAP32[$end>>2]|0;
  $9 = ($cur$0|0)==($8|0);
  $10 = (+($6>>>0)) + (4294967296.0*(+($7|0)));
  $$ = $9 ? 0.0 : $10;
  $11 = $9&1;
  $$2 = $11 ^ 1;
  $cur$1 = $8;$hasIntPart$0 = $$2;$res$0 = $$;
 }
 $12 = HEAP8[$cur$1>>0]|0;
 $13 = ($12<<24>>24)==(46);
 if ($13) {
  $14 = ((($cur$1)) + 1|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = (_nsvg__isdigit($15)|0);
  $17 = ($16|0)==(0);
  if ($17) {
   $cur$2 = $14;
   label = 10;
  } else {
   $18 = (_strtoll($14,$end,10)|0);
   $19 = tempRet0;
   $20 = HEAP32[$end>>2]|0;
   $21 = ($14|0)==($20|0);
   if ($21) {
    $cur$2 = $14;
    label = 10;
   } else {
    $22 = (+($18>>>0)) + (4294967296.0*(+($19|0)));
    $23 = $20;
    $24 = $14;
    $25 = (($23) - ($24))|0;
    $26 = (+($25|0));
    $27 = (+Math_pow(10.0,(+$26)));
    $28 = $22 / $27;
    $29 = $res$0 + $28;
    $cur$24 = $20;$res$15 = $29;
   }
  }
 } else {
  $cur$2 = $cur$1;
  label = 10;
 }
 if ((label|0) == 10) {
  $30 = ($hasIntPart$0<<24>>24)==(0);
  if ($30) {
   $$0 = 0.0;
   STACKTOP = sp;return (+$$0);
  } else {
   $cur$24 = $cur$2;$res$15 = $res$0;
  }
 }
 $31 = HEAP8[$cur$24>>0]|0;
 switch ($31<<24>>24) {
 case 69: case 101:  {
  $32 = ((($cur$24)) + 1|0);
  $33 = (_strtol($32,$end,10)|0);
  $34 = HEAP32[$end>>2]|0;
  $35 = ($32|0)==($34|0);
  if ($35) {
   $res$2 = $res$15;
  } else {
   $36 = (+($33|0));
   $37 = (+Math_pow(10.0,(+$36)));
   $38 = $res$15 * $37;
   $res$2 = $38;
  }
  break;
 }
 default: {
  $res$2 = $res$15;
 }
 }
 $39 = $sign$0 * $res$2;
 $$0 = $39;
 STACKTOP = sp;return (+$$0);
}
function _nsvg__xformSetSkewX($t,$a) {
 $t = $t|0;
 $a = +$a;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF32[$t>>2] = 1.0;
 $0 = ((($t)) + 4|0);
 HEAPF32[$0>>2] = 0.0;
 $1 = (+Math_tan((+$a)));
 $2 = ((($t)) + 8|0);
 HEAPF32[$2>>2] = $1;
 $3 = ((($t)) + 12|0);
 HEAPF32[$3>>2] = 1.0;
 $4 = ((($t)) + 16|0);
 HEAPF32[$4>>2] = 0.0;
 $5 = ((($t)) + 20|0);
 HEAPF32[$5>>2] = 0.0;
 return;
}
function _nsvg__xformSetRotation($t,$a) {
 $t = $t|0;
 $a = +$a;
 var $0 = 0.0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+Math_cos((+$a)));
 $1 = (+Math_sin((+$a)));
 HEAPF32[$t>>2] = $0;
 $2 = ((($t)) + 4|0);
 HEAPF32[$2>>2] = $1;
 $3 = -$1;
 $4 = ((($t)) + 8|0);
 HEAPF32[$4>>2] = $3;
 $5 = ((($t)) + 12|0);
 HEAPF32[$5>>2] = $0;
 $6 = ((($t)) + 16|0);
 HEAPF32[$6>>2] = 0.0;
 $7 = ((($t)) + 20|0);
 HEAPF32[$7>>2] = 0.0;
 return;
}
function _nsvg__getNextDashItem($s,$it) {
 $s = $s|0;
 $it = $it|0;
 var $$0$lcssa = 0, $$010 = 0, $$1$lcssa = 0, $$15 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0$lcssa = 0, $n$06 = 0, $n$1 = 0, $or$cond = 0, $or$cond4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$it>>0] = 0;
 $0 = HEAP8[$s>>0]|0;
 $1 = ($0<<24>>24)==(0);
 L1: do {
  if ($1) {
   $$0$lcssa = $s;
  } else {
   $$010 = $s;$2 = $0;
   while(1) {
    $3 = (_nsvg__isspace($2)|0);
    $4 = ($3|0)!=(0);
    $5 = ($2<<24>>24)==(44);
    $or$cond = $5 | $4;
    if (!($or$cond)) {
     $$0$lcssa = $$010;
     break L1;
    }
    $8 = ((($$010)) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(0);
    if ($10) {
     $$0$lcssa = $8;
     break;
    } else {
     $$010 = $8;$2 = $9;
    }
   }
  }
 } while(0);
 $6 = HEAP8[$$0$lcssa>>0]|0;
 $7 = ($6<<24>>24)==(0);
 L6: do {
  if ($7) {
   $$1$lcssa = $$0$lcssa;$n$0$lcssa = 0;
  } else {
   $$15 = $$0$lcssa;$11 = $6;$n$06 = 0;
   while(1) {
    $12 = (_nsvg__isspace($11)|0);
    $13 = ($12|0)==(0);
    $14 = ($11<<24>>24)!=(44);
    $or$cond4 = $14 & $13;
    if (!($or$cond4)) {
     $$1$lcssa = $$15;$n$0$lcssa = $n$06;
     break L6;
    }
    $15 = ($n$06|0)<(63);
    if ($15) {
     $16 = (($n$06) + 1)|0;
     $17 = (($it) + ($n$06)|0);
     HEAP8[$17>>0] = $11;
     $n$1 = $16;
    } else {
     $n$1 = $n$06;
    }
    $18 = ((($$15)) + 1|0);
    $19 = HEAP8[$18>>0]|0;
    $20 = ($19<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $18;$n$0$lcssa = $n$1;
     break;
    } else {
     $$15 = $18;$11 = $19;$n$06 = $n$1;
    }
   }
  }
 } while(0);
 $21 = (($it) + ($n$0$lcssa)|0);
 HEAP8[$21>>0] = 0;
 return ($$1$lcssa|0);
}
function _nsvg__isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $memchr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c << 24 >> 24;
 $memchr = (_memchr(22108061,$0,7)|0);
 $1 = ($memchr|0)!=(0|0);
 $2 = $1&1;
 return ($2|0);
}
function _nsvg__actualWidth($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 39976|0);
 $1 = +HEAPF32[$0>>2];
 return (+$1);
}
function _nsvg__actualHeight($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 39980|0);
 $1 = +HEAPF32[$0>>2];
 return (+$1);
}
function _nsvg__parseColorHex($str) {
 $str = $str|0;
 var $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $n$0$lcssa = 0, $n$01 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $c = sp + 12|0;
 HEAP32[$c>>2] = 0;
 $0 = ((($str)) + 1|0);
 $1 = ((($str)) + 1|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 L1: do {
  if (!($3)) {
   $4 = $2;$n$01 = 0;
   while(1) {
    $5 = (_nsvg__isspace($4)|0);
    $6 = ($5|0)==(0);
    if (!($6)) {
     $n$0$lcssa = $n$01;
     break;
    }
    $7 = (($n$01) + 1)|0;
    $$sum = (($n$01) + 2)|0;
    $8 = (($str) + ($$sum)|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(0);
    if ($10) {
     $n$0$lcssa = $7;
     break;
    } else {
     $4 = $9;$n$01 = $7;
    }
   }
   switch ($n$0$lcssa|0) {
   case 6:  {
    HEAP32[$vararg_buffer>>2] = $c;
    (_sscanf($0,22108091,$vararg_buffer)|0);
    break L1;
    break;
   }
   case 3:  {
    HEAP32[$vararg_buffer1>>2] = $c;
    (_sscanf($0,22108091,$vararg_buffer1)|0);
    $11 = HEAP32[$c>>2]|0;
    $12 = $11 & 15;
    $13 = $11 << 4;
    $14 = $13 & 3840;
    $15 = $14 | $12;
    $16 = $11 << 8;
    $17 = $16 & 983040;
    $18 = $15 | $17;
    $19 = $18 << 4;
    $20 = $19 | $18;
    HEAP32[$c>>2] = $20;
    break L1;
    break;
   }
   default: {
    break L1;
   }
   }
  }
 } while(0);
 $21 = HEAP32[$c>>2]|0;
 $22 = $21 >>> 16;
 $23 = $22 & 255;
 $24 = $21 & 65280;
 $25 = $23 | $24;
 $26 = $21 << 16;
 $27 = $26 & 16711680;
 $28 = $25 | $27;
 STACKTOP = sp;return ($28|0);
}
function _nsvg__parseColorRGB($str) {
 $str = $str|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $b = 0, $g = 0, $r = 0, $s1 = 0, $s2 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0;
 $vararg_buffer = sp;
 $r = sp + 28|0;
 $g = sp + 24|0;
 $b = sp + 20|0;
 $s1 = sp + 64|0;
 $s2 = sp + 32|0;
 HEAP32[$r>>2] = -1;
 HEAP32[$g>>2] = -1;
 HEAP32[$b>>2] = -1;
 dest=$s1; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 dest=$s2; stop=dest+32|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $0 = ((($str)) + 4|0);
 HEAP32[$vararg_buffer>>2] = $r;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $s1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $g;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $s2;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $b;
 (_sscanf($0,22108068,$vararg_buffer)|0);
 $1 = (_strchr($s1,37)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP32[$r>>2]|0;
 if ($2) {
  $16 = HEAP32[$g>>2]|0;
  $17 = $16 << 8;
  $18 = $17 | $3;
  $19 = HEAP32[$b>>2]|0;
  $20 = $19 << 16;
  $21 = $18 | $20;
  $$0 = $21;
  STACKTOP = sp;return ($$0|0);
 } else {
  $4 = ($3*255)|0;
  $5 = (($4>>>0) / 100)&-1;
  $6 = HEAP32[$g>>2]|0;
  $7 = ($6*255)|0;
  $8 = (($7>>>0) / 100)&-1;
  $9 = $8 << 8;
  $10 = $9 | $5;
  $11 = HEAP32[$b>>2]|0;
  $12 = ($11*255)|0;
  $13 = (($12>>>0) / 100)&-1;
  $14 = $13 << 16;
  $15 = $10 | $14;
  $$0 = $15;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _nsvg__parseColorName($str) {
 $str = $str|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$02$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[21548324>>2]|0;
 $1 = (_strcmp($0,$str)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $i$02$lcssa = 0;
 } else {
  $5 = HEAP32[(21548332)>>2]|0;
  $6 = (_strcmp($5,$str)|0);
  $7 = ($6|0)==(0);
  if ($7) {
   $i$02$lcssa = 1;
  } else {
   $8 = HEAP32[(21548340)>>2]|0;
   $9 = (_strcmp($8,$str)|0);
   $10 = ($9|0)==(0);
   if ($10) {
    $i$02$lcssa = 2;
   } else {
    $11 = HEAP32[(21548348)>>2]|0;
    $12 = (_strcmp($11,$str)|0);
    $13 = ($12|0)==(0);
    if ($13) {
     $i$02$lcssa = 3;
    } else {
     $14 = HEAP32[(21548356)>>2]|0;
     $15 = (_strcmp($14,$str)|0);
     $16 = ($15|0)==(0);
     if ($16) {
      $i$02$lcssa = 4;
     } else {
      $17 = HEAP32[(21548364)>>2]|0;
      $18 = (_strcmp($17,$str)|0);
      $19 = ($18|0)==(0);
      if ($19) {
       $i$02$lcssa = 5;
      } else {
       $20 = HEAP32[(21548372)>>2]|0;
       $21 = (_strcmp($20,$str)|0);
       $22 = ($21|0)==(0);
       if ($22) {
        $i$02$lcssa = 6;
       } else {
        $23 = HEAP32[(21548380)>>2]|0;
        $24 = (_strcmp($23,$str)|0);
        $25 = ($24|0)==(0);
        if ($25) {
         $i$02$lcssa = 7;
        } else {
         $26 = HEAP32[(21548388)>>2]|0;
         $27 = (_strcmp($26,$str)|0);
         $28 = ($27|0)==(0);
         if ($28) {
          $i$02$lcssa = 8;
         } else {
          $29 = HEAP32[(21548396)>>2]|0;
          $30 = (_strcmp($29,$str)|0);
          $31 = ($30|0)==(0);
          if ($31) {
           $i$02$lcssa = 9;
          } else {
           $$0 = 8421504;
           return ($$0|0);
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $3 = (((21548324 + ($i$02$lcssa<<3)|0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $$0 = $4;
 return ($$0|0);
}
function _nsvg__parseNameValue($p,$start,$end) {
 $p = $p|0;
 $start = $start|0;
 $end = $end|0;
 var $$ = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $name = 0, $str$0$lcssa = 0, $str$0$lcssa22 = 0, $str$012 = 0, $str$1$lcssa = 0, $str$18 = 0;
 var $val$0$lcssa = 0, $val$05 = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024|0;
 $name = sp + 512|0;
 $value = sp;
 $0 = ($start>>>0)<($end>>>0);
 L1: do {
  if ($0) {
   $str$012 = $start;
   while(1) {
    $1 = HEAP8[$str$012>>0]|0;
    $2 = ($1<<24>>24)==(58);
    if ($2) {
     $str$0$lcssa = $str$012;
     break;
    }
    $4 = ((($str$012)) + 1|0);
    $5 = ($4>>>0)<($end>>>0);
    if ($5) {
     $str$012 = $4;
    } else {
     $str$0$lcssa = $4;
     break;
    }
   }
   $3 = ($str$0$lcssa>>>0)>($start>>>0);
   if ($3) {
    $str$18 = $str$0$lcssa;
    while(1) {
     $6 = HEAP8[$str$18>>0]|0;
     $7 = ($6<<24>>24)==(58);
     if (!($7)) {
      $8 = (_nsvg__isspace($6)|0);
      $9 = ($8|0)==(0);
      if ($9) {
       $str$0$lcssa22 = $str$0$lcssa;$str$1$lcssa = $str$18;
       break L1;
      }
     }
     $10 = ((($str$18)) + -1|0);
     $11 = ($10>>>0)>($start>>>0);
     if ($11) {
      $str$18 = $10;
     } else {
      $str$0$lcssa22 = $str$0$lcssa;$str$1$lcssa = $10;
      break;
     }
    }
   } else {
    $str$0$lcssa22 = $str$0$lcssa;$str$1$lcssa = $str$0$lcssa;
   }
  } else {
   $str$0$lcssa22 = $start;$str$1$lcssa = $start;
  }
 } while(0);
 $12 = ((($str$1$lcssa)) + 1|0);
 $13 = $12;
 $14 = $start;
 $15 = (($13) - ($14))|0;
 $16 = ($15|0)>(511);
 $$ = $16 ? 511 : $15;
 $17 = ($$|0)==(0);
 if (!($17)) {
  _memcpy(($name|0),($start|0),($$|0))|0;
 }
 $18 = (($name) + ($$)|0);
 HEAP8[$18>>0] = 0;
 $19 = ($str$0$lcssa22>>>0)<($end>>>0);
 L15: do {
  if ($19) {
   $val$05 = $str$0$lcssa22;
   while(1) {
    $20 = HEAP8[$val$05>>0]|0;
    $21 = ($20<<24>>24)==(58);
    if (!($21)) {
     $22 = (_nsvg__isspace($20)|0);
     $23 = ($22|0)==(0);
     if ($23) {
      $val$0$lcssa = $val$05;
      break L15;
     }
    }
    $24 = ((($val$05)) + 1|0);
    $25 = ($24>>>0)<($end>>>0);
    if ($25) {
     $val$05 = $24;
    } else {
     $val$0$lcssa = $24;
     break;
    }
   }
  } else {
   $val$0$lcssa = $str$0$lcssa22;
  }
 } while(0);
 $26 = $end;
 $27 = $val$0$lcssa;
 $28 = (($26) - ($27))|0;
 $29 = ($28|0)>(511);
 $$2 = $29 ? 511 : $28;
 $30 = ($$2|0)==(0);
 if ($30) {
  $31 = (($value) + ($$2)|0);
  HEAP8[$31>>0] = 0;
  (_nsvg__parseAttr($p,$name,$value)|0);
  STACKTOP = sp;return;
 }
 _memcpy(($value|0),($val$0$lcssa|0),($$2|0))|0;
 $31 = (($value) + ($$2)|0);
 HEAP8[$31>>0] = 0;
 (_nsvg__parseAttr($p,$name,$value)|0);
 STACKTOP = sp;return;
}
function _nsvg__resetPath($p) {
 $p = $p|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 39944|0);
 HEAP32[$0>>2] = 0;
 return;
}
function _nsvg__getNextPathItem($s,$it) {
 $s = $s|0;
 $it = $it|0;
 var $$0 = 0, $$014 = 0, $$014$lcssa = 0, $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP8[$it>>0] = 0;
 $0 = HEAP8[$s>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $$0 = $s;
  return ($$0|0);
 } else {
  $$014 = $s;$2 = $0;
 }
 while(1) {
  $3 = (_nsvg__isspace($2)|0);
  $4 = ($3|0)!=(0);
  $5 = ($2<<24>>24)==(44);
  $or$cond = $5 | $4;
  if (!($or$cond)) {
   $$014$lcssa = $$014;
   break;
  }
  $6 = ((($$014)) + 1|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = ($7<<24>>24)==(0);
  if ($8) {
   $$0 = $6;
   label = 8;
   break;
  } else {
   $$014 = $6;$2 = $7;
  }
 }
 if ((label|0) == 8) {
  return ($$0|0);
 }
 $$pr = HEAP8[$$014$lcssa>>0]|0;
 switch ($$pr<<24>>24) {
 case 46: case 43: case 45:  {
  break;
 }
 case 0:  {
  $$0 = $$014$lcssa;
  return ($$0|0);
  break;
 }
 default: {
  label = 5;
 }
 }
 if ((label|0) == 5) {
  $9 = (_nsvg__isdigit($$pr)|0);
  $10 = ($9|0)==(0);
  if ($10) {
   $12 = ((($$014$lcssa)) + 1|0);
   HEAP8[$it>>0] = $$pr;
   $13 = ((($it)) + 1|0);
   HEAP8[$13>>0] = 0;
   $$0 = $12;
   return ($$0|0);
  }
 }
 $11 = (_nsvg__parseNumber($$014$lcssa,$it)|0);
 $$0 = $11;
 return ($$0|0);
}
function _nsvg__moveTo($p,$x,$y) {
 $p = $p|0;
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 39944|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if ($2) {
  $3 = $1 << 1;
  $4 = (($3) + -2)|0;
  $5 = ((($p)) + 39940|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (($6) + ($4<<2)|0);
  HEAPF32[$7>>2] = $x;
  $8 = HEAP32[$0>>2]|0;
  $9 = $8 << 1;
  $10 = (($9) + -1)|0;
  $11 = HEAP32[$5>>2]|0;
  $12 = (($11) + ($10<<2)|0);
  HEAPF32[$12>>2] = $y;
  return;
 } else {
  _nsvg__addPoint($p,$x,$y);
  return;
 }
}
function _nsvg__lineTo($p,$x,$y) {
 $p = $p|0;
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 39944|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(0);
 if (!($2)) {
  return;
 }
 $3 = $1 << 1;
 $4 = (($3) + -2)|0;
 $5 = ((($p)) + 39940|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + ($4<<2)|0);
 $8 = +HEAPF32[$7>>2];
 $9 = (($3) + -1)|0;
 $10 = (($6) + ($9<<2)|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $x - $8;
 $13 = $y - $11;
 $14 = $12 / 3.0;
 $15 = $8 + $14;
 $16 = $13 / 3.0;
 $17 = $11 + $16;
 _nsvg__addPoint($p,$15,$17);
 $18 = $x - $14;
 $19 = $y - $16;
 _nsvg__addPoint($p,$18,$19);
 _nsvg__addPoint($p,$x,$y);
 return;
}
function _nsvg__addPath($p,$closed) {
 $p = $p|0;
 $closed = $closed|0;
 var $$pr = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0;
 var $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $9 = 0.0, $bounds = 0, $cond = 0, $i$02 = 0, $i$11 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $bounds = sp;
 $0 = (_nsvg__getAttr($p)|0);
 $1 = ((($p)) + 39944|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)<(4);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = ($closed<<24>>24)==(0);
 if (!($4)) {
  $5 = ((($p)) + 39940|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = +HEAPF32[$6>>2];
  $8 = ((($6)) + 4|0);
  $9 = +HEAPF32[$8>>2];
  _nsvg__lineTo($p,$7,$9);
 }
 $10 = (_malloc(32)|0);
 $cond = ($10|0)==(0|0);
 if ($cond) {
  STACKTOP = sp;return;
 }
 ;HEAP32[$10>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;HEAP32[$10+12>>2]=0|0;HEAP32[$10+16>>2]=0|0;HEAP32[$10+20>>2]=0|0;HEAP32[$10+24>>2]=0|0;HEAP32[$10+28>>2]=0|0;
 $11 = HEAP32[$1>>2]|0;
 $12 = $11 << 3;
 $13 = (_malloc($12)|0);
 HEAP32[$10>>2] = $13;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $78 = HEAP32[$10>>2]|0;
  $79 = ($78|0)==(0|0);
  if (!($79)) {
   _free($78);
  }
  _free($10);
  STACKTOP = sp;return;
 }
 $15 = ((($10)) + 8|0);
 HEAP8[$15>>0] = $closed;
 $16 = HEAP32[$1>>2]|0;
 $17 = ((($10)) + 4|0);
 HEAP32[$17>>2] = $16;
 $18 = HEAP32[$1>>2]|0;
 $19 = ($18|0)>(0);
 if ($19) {
  $20 = ((($p)) + 39940|0);
  $21 = ((($0)) + 64|0);
  $i$02 = 0;
  while(1) {
   $38 = $i$02 << 1;
   $39 = HEAP32[$10>>2]|0;
   $40 = (($39) + ($38<<2)|0);
   $41 = $38 | 1;
   $42 = (($39) + ($41<<2)|0);
   $43 = HEAP32[$20>>2]|0;
   $44 = (($43) + ($38<<2)|0);
   $45 = +HEAPF32[$44>>2];
   $46 = (($43) + ($41<<2)|0);
   $47 = +HEAPF32[$46>>2];
   _nsvg__xformPoint($40,$42,$45,$47,$21);
   $48 = (($i$02) + 1)|0;
   $49 = HEAP32[$1>>2]|0;
   $50 = ($48|0)<($49|0);
   if ($50) {
    $i$02 = $48;
   } else {
    break;
   }
  }
  $$pr = HEAP32[$17>>2]|0;
  $22 = $$pr;
 } else {
  $22 = $16;
 }
 $23 = ($22|0)>(1);
 if ($23) {
  $24 = ((($10)) + 12|0);
  $25 = ((($bounds)) + 4|0);
  $26 = ((($10)) + 16|0);
  $27 = ((($bounds)) + 8|0);
  $28 = ((($10)) + 20|0);
  $29 = ((($bounds)) + 12|0);
  $30 = ((($10)) + 24|0);
  $31 = ((($10)) + 12|0);
  $32 = ((($10)) + 16|0);
  $33 = ((($bounds)) + 4|0);
  $34 = ((($10)) + 20|0);
  $35 = ((($bounds)) + 8|0);
  $36 = ((($10)) + 24|0);
  $37 = ((($bounds)) + 12|0);
  $i$11 = 0;
  while(1) {
   $51 = $i$11 << 1;
   $52 = HEAP32[$10>>2]|0;
   $53 = (($52) + ($51<<2)|0);
   _nsvg__curveBounds($bounds,$53);
   $54 = ($i$11|0)==(0);
   if ($54) {
    $55 = HEAP32[$bounds>>2]|0;
    HEAP32[$24>>2] = $55;
    $56 = HEAP32[$25>>2]|0;
    HEAP32[$26>>2] = $56;
    $57 = HEAP32[$27>>2]|0;
    HEAP32[$28>>2] = $57;
    $58 = HEAP32[$29>>2]|0;
    HEAP32[$30>>2] = $58;
   } else {
    $59 = +HEAPF32[$31>>2];
    $60 = +HEAPF32[$bounds>>2];
    $61 = (+_nsvg__minf($59,$60));
    HEAPF32[$31>>2] = $61;
    $62 = +HEAPF32[$32>>2];
    $63 = +HEAPF32[$33>>2];
    $64 = (+_nsvg__minf($62,$63));
    HEAPF32[$32>>2] = $64;
    $65 = +HEAPF32[$34>>2];
    $66 = +HEAPF32[$35>>2];
    $67 = (+_nsvg__maxf($65,$66));
    HEAPF32[$34>>2] = $67;
    $68 = +HEAPF32[$36>>2];
    $69 = +HEAPF32[$37>>2];
    $70 = (+_nsvg__maxf($68,$69));
    HEAPF32[$36>>2] = $70;
   }
   $71 = (($i$11) + 3)|0;
   $72 = HEAP32[$17>>2]|0;
   $73 = (($72) + -1)|0;
   $74 = ($71|0)<($73|0);
   if ($74) {
    $i$11 = $71;
   } else {
    break;
   }
  }
 }
 $75 = ((($p)) + 39952|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = ((($10)) + 28|0);
 HEAP32[$77>>2] = $76;
 HEAP32[$75>>2] = $10;
 STACKTOP = sp;return;
}
function _nsvg__addShape($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $131 = 0, $14 = 0.0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0;
 var $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i$04 = 0, $inv = 0, $inv1 = 0, $localBounds = 0, $localBounds2 = 0, $path$0 = 0, $path$0$in = 0, $path$0$in1 = 0;
 var $path$02 = 0, $path$03 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $inv = sp + 56|0;
 $localBounds = sp + 40|0;
 $inv1 = sp + 16|0;
 $localBounds2 = sp;
 $0 = (_nsvg__getAttr($p)|0);
 $1 = ((($p)) + 39952|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = (_malloc(160)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 _memset(($4|0),0,160)|0;
 dest=$4; src=$0; stop=dest+64|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $6 = ((($0)) + 64|0);
 $7 = (+_nsvg__getAverageScale($6));
 $8 = ((($0)) + 236|0);
 $9 = +HEAPF32[$8>>2];
 $10 = $7 * $9;
 $11 = ((($4)) + 84|0);
 HEAPF32[$11>>2] = $10;
 $12 = ((($0)) + 240|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $7 * $13;
 $15 = ((($4)) + 88|0);
 HEAPF32[$15>>2] = $14;
 $16 = ((($0)) + 276|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17&255;
 $19 = ((($4)) + 124|0);
 HEAP8[$19>>0] = $18;
 $20 = HEAP32[$16>>2]|0;
 $21 = ($20|0)>(0);
 if ($21) {
  $22 = ((($4)) + 92|0);
  $i$04 = 0;
  while(1) {
   $23 = (((($0)) + 244|0) + ($i$04<<2)|0);
   $24 = +HEAPF32[$23>>2];
   $25 = $7 * $24;
   $26 = (($22) + ($i$04<<2)|0);
   HEAPF32[$26>>2] = $25;
   $27 = (($i$04) + 1)|0;
   $28 = HEAP32[$16>>2]|0;
   $29 = ($27|0)<($28|0);
   if ($29) {
    $i$04 = $27;
   } else {
    break;
   }
  }
 }
 $30 = ((($0)) + 280|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = ((($4)) + 125|0);
 HEAP8[$32>>0] = $31;
 $33 = ((($0)) + 281|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = ((($4)) + 126|0);
 HEAP8[$35>>0] = $34;
 $36 = ((($0)) + 284|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($4)) + 128|0);
 HEAP32[$38>>2] = $37;
 $39 = ((($0)) + 288|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = ((($4)) + 132|0);
 HEAP8[$41>>0] = $40;
 $42 = ((($0)) + 96|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = ((($4)) + 80|0);
 HEAP32[$44>>2] = $43;
 $45 = HEAP32[$1>>2]|0;
 $46 = ((($4)) + 152|0);
 HEAP32[$46>>2] = $45;
 HEAP32[$1>>2] = 0;
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($47)) + 12|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ((($4)) + 136|0);
 HEAP32[$50>>2] = $49;
 $51 = HEAP32[$46>>2]|0;
 $52 = ((($51)) + 16|0);
 $53 = HEAP32[$52>>2]|0;
 $54 = ((($4)) + 140|0);
 HEAP32[$54>>2] = $53;
 $55 = HEAP32[$46>>2]|0;
 $56 = ((($55)) + 20|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ((($4)) + 144|0);
 HEAP32[$58>>2] = $57;
 $59 = HEAP32[$46>>2]|0;
 $60 = ((($59)) + 24|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ((($4)) + 148|0);
 HEAP32[$62>>2] = $61;
 $63 = HEAP32[$46>>2]|0;
 $path$0$in1 = ((($63)) + 28|0);
 $path$02 = HEAP32[$path$0$in1>>2]|0;
 $64 = ($path$02|0)==(0|0);
 if (!($64)) {
  $path$03 = $path$02;
  while(1) {
   $65 = +HEAPF32[$50>>2];
   $66 = ((($path$03)) + 12|0);
   $67 = +HEAPF32[$66>>2];
   $68 = (+_nsvg__minf($65,$67));
   HEAPF32[$50>>2] = $68;
   $69 = +HEAPF32[$54>>2];
   $70 = ((($path$03)) + 16|0);
   $71 = +HEAPF32[$70>>2];
   $72 = (+_nsvg__minf($69,$71));
   HEAPF32[$54>>2] = $72;
   $73 = +HEAPF32[$58>>2];
   $74 = ((($path$03)) + 20|0);
   $75 = +HEAPF32[$74>>2];
   $76 = (+_nsvg__maxf($73,$75));
   HEAPF32[$58>>2] = $76;
   $77 = +HEAPF32[$62>>2];
   $78 = ((($path$03)) + 24|0);
   $79 = +HEAPF32[$78>>2];
   $80 = (+_nsvg__maxf($77,$79));
   HEAPF32[$62>>2] = $80;
   $path$0$in = ((($path$03)) + 28|0);
   $path$0 = HEAP32[$path$0$in>>2]|0;
   $81 = ($path$0|0)==(0|0);
   if ($81) {
    break;
   } else {
    $path$03 = $path$0;
   }
  }
 }
 $82 = ((($0)) + 308|0);
 $83 = HEAP8[$82>>0]|0;
 switch ($83<<24>>24) {
 case 0:  {
  $84 = ((($4)) + 64|0);
  HEAP8[$84>>0] = 0;
  break;
 }
 case 1:  {
  $85 = ((($4)) + 64|0);
  HEAP8[$85>>0] = 1;
  $86 = ((($0)) + 88|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = ((($4)) + 68|0);
  $89 = ((($0)) + 100|0);
  $90 = +HEAPF32[$89>>2];
  $91 = $90 * 255.0;
  $92 = (~~(($91))>>>0);
  $93 = $92 << 24;
  $94 = $93 | $87;
  HEAP32[$88>>2] = $94;
  break;
 }
 case 2:  {
  _nsvg__xformInverse($inv,$6);
  _nsvg__getLocalBounds($localBounds,$4,$inv);
  $95 = ((($0)) + 108|0);
  $96 = ((($4)) + 64|0);
  $97 = (_nsvg__createGradient($p,$95,$localBounds,$96)|0);
  $98 = ((($4)) + 68|0);
  HEAP32[$98>>2] = $97;
  $99 = ($97|0)==(0|0);
  if ($99) {
   HEAP8[$96>>0] = 0;
  }
  break;
 }
 default: {
 }
 }
 $100 = ((($0)) + 309|0);
 $101 = HEAP8[$100>>0]|0;
 switch ($101<<24>>24) {
 case 0:  {
  $102 = ((($4)) + 72|0);
  HEAP8[$102>>0] = 0;
  break;
 }
 case 1:  {
  $103 = ((($4)) + 72|0);
  HEAP8[$103>>0] = 1;
  $104 = ((($0)) + 92|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = ((($4)) + 76|0);
  $107 = ((($0)) + 104|0);
  $108 = +HEAPF32[$107>>2];
  $109 = $108 * 255.0;
  $110 = (~~(($109))>>>0);
  $111 = $110 << 24;
  $112 = $111 | $105;
  HEAP32[$106>>2] = $112;
  break;
 }
 case 2:  {
  _nsvg__xformInverse($inv1,$6);
  _nsvg__getLocalBounds($localBounds2,$4,$inv1);
  $113 = ((($0)) + 172|0);
  $114 = ((($4)) + 72|0);
  $115 = (_nsvg__createGradient($p,$113,$localBounds2,$114)|0);
  $116 = ((($4)) + 76|0);
  HEAP32[$116>>2] = $115;
  $117 = ($115|0)==(0|0);
  if ($117) {
   HEAP8[$114>>0] = 0;
  }
  break;
 }
 default: {
 }
 }
 $118 = ((($0)) + 310|0);
 $119 = HEAP8[$118>>0]|0;
 $120 = ($119<<24>>24)!=(0);
 $121 = $120&1;
 $122 = ((($4)) + 133|0);
 HEAP8[$122>>0] = $121;
 $123 = ((($p)) + 39956|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = ((($124)) + 8|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = ($126|0)==(0|0);
 if ($127) {
  HEAP32[$125>>2] = $4;
 } else {
  $128 = ((($p)) + 39964|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = ((($129)) + 156|0);
  HEAP32[$130>>2] = $4;
 }
 $131 = ((($p)) + 39964|0);
 HEAP32[$131>>2] = $4;
 STACKTOP = sp;return;
}
function _nsvg__getAverageScale($t) {
 $t = $t|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$t>>2];
 $1 = $0 * $0;
 $2 = ((($t)) + 8|0);
 $3 = +HEAPF32[$2>>2];
 $4 = $3 * $3;
 $5 = $1 + $4;
 $6 = (+Math_sqrt((+$5)));
 $7 = ((($t)) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $8 * $8;
 $10 = ((($t)) + 12|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $11 * $11;
 $13 = $9 + $12;
 $14 = (+Math_sqrt((+$13)));
 $15 = $6 + $14;
 $16 = $15 * 0.5;
 return (+$16);
}
function _nsvg__getLocalBounds($bounds,$shape,$xform) {
 $bounds = $bounds|0;
 $shape = $shape|0;
 $xform = $xform|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $curve = 0, $curveBounds = 0, $first$04 = 0, $first$1$lcssa = 0, $first$12 = 0;
 var $i$01 = 0, $path$0 = 0, $path$03 = 0, $path$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $curve = sp + 16|0;
 $curveBounds = sp;
 $0 = ((($shape)) + 152|0);
 $path$03 = HEAP32[$0>>2]|0;
 $1 = ($path$03|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = ((($curve)) + 4|0);
 $3 = ((($curve)) + 8|0);
 $4 = ((($curve)) + 12|0);
 $5 = ((($curve)) + 16|0);
 $6 = ((($curve)) + 20|0);
 $7 = ((($curve)) + 24|0);
 $8 = ((($curve)) + 28|0);
 $9 = ((($bounds)) + 4|0);
 $10 = ((($curveBounds)) + 4|0);
 $11 = ((($bounds)) + 8|0);
 $12 = ((($curveBounds)) + 8|0);
 $13 = ((($bounds)) + 12|0);
 $14 = ((($curveBounds)) + 12|0);
 $15 = ((($curveBounds)) + 4|0);
 $16 = ((($bounds)) + 4|0);
 $17 = ((($curveBounds)) + 8|0);
 $18 = ((($bounds)) + 8|0);
 $19 = ((($curveBounds)) + 12|0);
 $20 = ((($bounds)) + 12|0);
 $first$04 = 1;$path$05 = $path$03;
 while(1) {
  $21 = HEAP32[$path$05>>2]|0;
  $22 = +HEAPF32[$21>>2];
  $23 = ((($21)) + 4|0);
  $24 = +HEAPF32[$23>>2];
  _nsvg__xformPoint($curve,$2,$22,$24,$xform);
  $25 = ((($path$05)) + 4|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)>(1);
  if ($27) {
   $first$12 = $first$04;$i$01 = 0;
   while(1) {
    $28 = $i$01 << 1;
    $29 = (($28) + 2)|0;
    $30 = HEAP32[$path$05>>2]|0;
    $31 = (($30) + ($29<<2)|0);
    $32 = +HEAPF32[$31>>2];
    $33 = (($28) + 3)|0;
    $34 = (($30) + ($33<<2)|0);
    $35 = +HEAPF32[$34>>2];
    _nsvg__xformPoint($3,$4,$32,$35,$xform);
    $36 = (($28) + 4)|0;
    $37 = HEAP32[$path$05>>2]|0;
    $38 = (($37) + ($36<<2)|0);
    $39 = +HEAPF32[$38>>2];
    $40 = (($28) + 5)|0;
    $41 = (($37) + ($40<<2)|0);
    $42 = +HEAPF32[$41>>2];
    _nsvg__xformPoint($5,$6,$39,$42,$xform);
    $43 = (($i$01) + 3)|0;
    $44 = $43 << 1;
    $45 = HEAP32[$path$05>>2]|0;
    $46 = (($45) + ($44<<2)|0);
    $47 = +HEAPF32[$46>>2];
    $48 = $44 | 1;
    $49 = (($45) + ($48<<2)|0);
    $50 = +HEAPF32[$49>>2];
    _nsvg__xformPoint($7,$8,$47,$50,$xform);
    _nsvg__curveBounds($curveBounds,$curve);
    $51 = ($first$12|0)==(0);
    if ($51) {
     $56 = +HEAPF32[$bounds>>2];
     $57 = +HEAPF32[$curveBounds>>2];
     $58 = (+_nsvg__minf($56,$57));
     HEAPF32[$bounds>>2] = $58;
     $59 = +HEAPF32[$9>>2];
     $60 = +HEAPF32[$10>>2];
     $61 = (+_nsvg__minf($59,$60));
     HEAPF32[$9>>2] = $61;
     $62 = +HEAPF32[$11>>2];
     $63 = +HEAPF32[$12>>2];
     $64 = (+_nsvg__maxf($62,$63));
     HEAPF32[$11>>2] = $64;
     $65 = +HEAPF32[$13>>2];
     $66 = +HEAPF32[$14>>2];
     $67 = (+_nsvg__maxf($65,$66));
     HEAPF32[$13>>2] = $67;
    } else {
     $52 = HEAP32[$curveBounds>>2]|0;
     HEAP32[$bounds>>2] = $52;
     $53 = HEAP32[$15>>2]|0;
     HEAP32[$16>>2] = $53;
     $54 = HEAP32[$17>>2]|0;
     HEAP32[$18>>2] = $54;
     $55 = HEAP32[$19>>2]|0;
     HEAP32[$20>>2] = $55;
    }
    $68 = HEAP32[$7>>2]|0;
    HEAP32[$curve>>2] = $68;
    $69 = HEAP32[$8>>2]|0;
    HEAP32[$2>>2] = $69;
    $70 = HEAP32[$25>>2]|0;
    $71 = (($70) + -1)|0;
    $72 = ($43|0)<($71|0);
    if ($72) {
     $first$12 = 0;$i$01 = $43;
    } else {
     $first$1$lcssa = 0;
     break;
    }
   }
  } else {
   $first$1$lcssa = $first$04;
  }
  $73 = ((($path$05)) + 28|0);
  $path$0 = HEAP32[$73>>2]|0;
  $74 = ($path$0|0)==(0|0);
  if ($74) {
   break;
  } else {
   $first$04 = $first$1$lcssa;$path$05 = $path$0;
  }
 }
 STACKTOP = sp;return;
}
function _nsvg__createGradient($p,$id,$localBounds,$paintType) {
 $p = $p|0;
 $id = $id|0;
 $localBounds = $localBounds|0;
 $paintType = $paintType|0;
 var $$0 = 0, $$byval_copy8 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0.0;
 var $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0;
 var $60 = 0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $9 = 0, $ox$0 = 0.0, $oy$0 = 0.0, $ref$02 = 0, $ref$02$lcssa = 0, $sh$0 = 0.0, $sw$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $$byval_copy8 = sp;
 $0 = (_nsvg__getAttr($p)|0);
 $1 = (_nsvg__findGradientData($p,$id)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $ref$02 = $1;
 }
 while(1) {
  $3 = ((($ref$02)) + 204|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $$lcssa = $4;$ref$02$lcssa = $ref$02;
   break;
  }
  $6 = ((($ref$02)) + 64|0);
  $7 = (_nsvg__findGradientData($p,$6)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = 0;
   label = 12;
   break;
  } else {
   $ref$02 = $7;
  }
 }
 if ((label|0) == 12) {
  STACKTOP = sp;return ($$0|0);
 }
 $9 = ((($ref$02$lcssa)) + 200|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 << 3;
 $12 = (($11) + 40)|0;
 $13 = (_malloc($12)|0);
 $14 = ($13|0)==(0|0);
 if ($14) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = ((($1)) + 173|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)==(1);
 if ($17) {
  $18 = +HEAPF32[$localBounds>>2];
  $19 = ((($localBounds)) + 4|0);
  $20 = +HEAPF32[$19>>2];
  $21 = ((($localBounds)) + 8|0);
  $22 = +HEAPF32[$21>>2];
  $23 = $22 - $18;
  $24 = ((($localBounds)) + 12|0);
  $25 = +HEAPF32[$24>>2];
  $26 = $25 - $20;
  $ox$0 = $18;$oy$0 = $20;$sh$0 = $26;$sw$0 = $23;
 } else {
  $27 = (+_nsvg__actualOrigX($p));
  $28 = (+_nsvg__actualOrigY($p));
  $29 = (+_nsvg__actualWidth($p));
  $30 = (+_nsvg__actualHeight($p));
  $ox$0 = $27;$oy$0 = $28;$sh$0 = $30;$sw$0 = $29;
 }
 $31 = ((($1)) + 128|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = ($32<<24>>24)==(2);
 $34 = ((($1)) + 132|0);
 if ($33) {
  ;HEAP32[$$byval_copy8>>2]=HEAP32[$34>>2]|0;HEAP32[$$byval_copy8+4>>2]=HEAP32[$34+4>>2]|0;
  $35 = (+_nsvg__convertToPixels($p,$$byval_copy8,$ox$0,$sw$0));
  $36 = ((($1)) + 140|0);
  ;HEAP32[$$byval_copy8>>2]=HEAP32[$36>>2]|0;HEAP32[$$byval_copy8+4>>2]=HEAP32[$36+4>>2]|0;
  $37 = (+_nsvg__convertToPixels($p,$$byval_copy8,$oy$0,$sh$0));
  $38 = ((($1)) + 148|0);
  ;HEAP32[$$byval_copy8>>2]=HEAP32[$38>>2]|0;HEAP32[$$byval_copy8+4>>2]=HEAP32[$38+4>>2]|0;
  $39 = (+_nsvg__convertToPixels($p,$$byval_copy8,$ox$0,$sw$0));
  $40 = ((($1)) + 156|0);
  ;HEAP32[$$byval_copy8>>2]=HEAP32[$40>>2]|0;HEAP32[$$byval_copy8+4>>2]=HEAP32[$40+4>>2]|0;
  $41 = (+_nsvg__convertToPixels($p,$$byval_copy8,$oy$0,$sh$0));
  $42 = $39 - $35;
  $43 = $41 - $37;
  HEAPF32[$13>>2] = $43;
  $44 = -$42;
  $45 = ((($13)) + 4|0);
  HEAPF32[$45>>2] = $44;
  $46 = ((($13)) + 8|0);
  HEAPF32[$46>>2] = $42;
  $47 = ((($13)) + 12|0);
  HEAPF32[$47>>2] = $43;
  $48 = ((($13)) + 16|0);
  HEAPF32[$48>>2] = $35;
  $49 = ((($13)) + 20|0);
  HEAPF32[$49>>2] = $37;
 } else {
  $50 = $sw$0 * $sw$0;
  $51 = $sh$0 * $sh$0;
  $52 = $51 + $50;
  $53 = (+Math_sqrt((+$52)));
  $54 = $53 / 1.4142135381698608;
  ;HEAP32[$$byval_copy8>>2]=HEAP32[$34>>2]|0;HEAP32[$$byval_copy8+4>>2]=HEAP32[$34+4>>2]|0;
  $55 = (+_nsvg__convertToPixels($p,$$byval_copy8,$ox$0,$sw$0));
  $56 = ((($1)) + 140|0);
  ;HEAP32[$$byval_copy8>>2]=HEAP32[$56>>2]|0;HEAP32[$$byval_copy8+4>>2]=HEAP32[$56+4>>2]|0;
  $57 = (+_nsvg__convertToPixels($p,$$byval_copy8,$oy$0,$sh$0));
  $58 = ((($1)) + 156|0);
  ;HEAP32[$$byval_copy8>>2]=HEAP32[$58>>2]|0;HEAP32[$$byval_copy8+4>>2]=HEAP32[$58+4>>2]|0;
  $59 = (+_nsvg__convertToPixels($p,$$byval_copy8,$ox$0,$sw$0));
  $60 = ((($1)) + 164|0);
  ;HEAP32[$$byval_copy8>>2]=HEAP32[$60>>2]|0;HEAP32[$$byval_copy8+4>>2]=HEAP32[$60+4>>2]|0;
  $61 = (+_nsvg__convertToPixels($p,$$byval_copy8,$oy$0,$sh$0));
  $62 = ((($1)) + 148|0);
  ;HEAP32[$$byval_copy8>>2]=HEAP32[$62>>2]|0;HEAP32[$$byval_copy8+4>>2]=HEAP32[$62+4>>2]|0;
  $63 = (+_nsvg__convertToPixels($p,$$byval_copy8,0.0,$54));
  HEAPF32[$13>>2] = $63;
  $64 = ((($13)) + 4|0);
  HEAPF32[$64>>2] = 0.0;
  $65 = ((($13)) + 8|0);
  HEAPF32[$65>>2] = 0.0;
  $66 = ((($13)) + 12|0);
  HEAPF32[$66>>2] = $63;
  $67 = ((($13)) + 16|0);
  HEAPF32[$67>>2] = $55;
  $68 = ((($13)) + 20|0);
  HEAPF32[$68>>2] = $57;
  $69 = $59 / $63;
  $70 = ((($13)) + 28|0);
  HEAPF32[$70>>2] = $69;
  $71 = $61 / $63;
  $72 = ((($13)) + 32|0);
  HEAPF32[$72>>2] = $71;
 }
 $73 = ((($1)) + 176|0);
 _nsvg__xformMultiply($13,$73);
 $74 = ((($0)) + 64|0);
 _nsvg__xformMultiply($13,$74);
 $75 = ((($1)) + 172|0);
 $76 = HEAP8[$75>>0]|0;
 $77 = ((($13)) + 24|0);
 HEAP8[$77>>0] = $76;
 $78 = ((($13)) + 40|0);
 _memcpy(($78|0),($$lcssa|0),($11|0))|0;
 $79 = ((($13)) + 36|0);
 HEAP32[$79>>2] = $10;
 $80 = HEAP8[$31>>0]|0;
 HEAP8[$paintType>>0] = $80;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _nsvg__findGradientData($p,$id) {
 $p = $p|0;
 $id = $id|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $grad$0 = 0, $grad$01 = 0, $grad$02 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 39960|0);
 $grad$01 = HEAP32[$0>>2]|0;
 $1 = ($grad$01|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 } else {
  $grad$02 = $grad$01;
 }
 while(1) {
  $2 = (_strcmp($grad$02,$id)|0);
  $3 = ($2|0)==(0);
  if ($3) {
   $$0 = $grad$02;
   label = 4;
   break;
  }
  $4 = ((($grad$02)) + 208|0);
  $grad$0 = HEAP32[$4>>2]|0;
  $5 = ($grad$0|0)==(0|0);
  if ($5) {
   $$0 = 0;
   label = 4;
   break;
  } else {
   $grad$02 = $grad$0;
  }
 }
 if ((label|0) == 4) {
  return ($$0|0);
 }
 return (0)|0;
}
function _nsvg__actualOrigX($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 39968|0);
 $1 = +HEAPF32[$0>>2];
 return (+$1);
}
function _nsvg__actualOrigY($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 39972|0);
 $1 = +HEAPF32[$0>>2];
 return (+$1);
}
function _nsvg__xformPoint($dx,$dy,$x,$y,$t) {
 $dx = $dx|0;
 $dy = $dy|0;
 $x = +$x;
 $y = +$y;
 $t = $t|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$t>>2];
 $1 = $0 * $x;
 $2 = ((($t)) + 8|0);
 $3 = +HEAPF32[$2>>2];
 $4 = $3 * $y;
 $5 = $1 + $4;
 $6 = ((($t)) + 16|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $7 + $5;
 HEAPF32[$dx>>2] = $8;
 $9 = ((($t)) + 4|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $10 * $x;
 $12 = ((($t)) + 12|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $13 * $y;
 $15 = $11 + $14;
 $16 = ((($t)) + 20|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $17 + $15;
 HEAPF32[$dy>>2] = $18;
 return;
}
function _nsvg__curveBounds($bounds,$curve) {
 $bounds = $bounds|0;
 $curve = $curve|0;
 var $$sum = 0, $$sum6 = 0, $$sum7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0;
 var $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0.0;
 var $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0.0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0;
 var $97 = 0, $98 = 0, $count$0 = 0, $count$113 = 0, $exitcond = 0, $exitcond10 = 0, $i$09 = 0, $j$08 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $roots = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $roots = sp;
 $0 = ((($curve)) + 8|0);
 $1 = ((($curve)) + 24|0);
 $2 = +HEAPF32[$curve>>2];
 $3 = +HEAPF32[$1>>2];
 $4 = (+_nsvg__minf($2,$3));
 HEAPF32[$bounds>>2] = $4;
 $5 = ((($curve)) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $7 = ((($curve)) + 28|0);
 $8 = +HEAPF32[$7>>2];
 $9 = (+_nsvg__minf($6,$8));
 $10 = ((($bounds)) + 4|0);
 HEAPF32[$10>>2] = $9;
 $11 = +HEAPF32[$curve>>2];
 $12 = +HEAPF32[$1>>2];
 $13 = (+_nsvg__maxf($11,$12));
 $14 = ((($bounds)) + 8|0);
 HEAPF32[$14>>2] = $13;
 $15 = +HEAPF32[$5>>2];
 $16 = +HEAPF32[$7>>2];
 $17 = (+_nsvg__maxf($15,$16));
 $18 = ((($bounds)) + 12|0);
 HEAPF32[$18>>2] = $17;
 $19 = (_nsvg__ptInBounds($0,$bounds)|0);
 $20 = ($19|0)==(0);
 if (!($20)) {
  $21 = ((($curve)) + 16|0);
  $22 = (_nsvg__ptInBounds($21,$bounds)|0);
  $23 = ($22|0)==(0);
  if (!($23)) {
   STACKTOP = sp;return;
  }
 }
 $i$09 = 0;
 while(1) {
  $24 = (($curve) + ($i$09<<2)|0);
  $25 = +HEAPF32[$24>>2];
  $26 = $25;
  $27 = $26 * 3.0;
  $$sum = (($i$09) + 2)|0;
  $28 = (($curve) + ($$sum<<2)|0);
  $29 = +HEAPF32[$28>>2];
  $30 = $29;
  $31 = $30 * 9.0;
  $32 = $31 - $27;
  $$sum6 = (($i$09) + 4)|0;
  $33 = (($curve) + ($$sum6<<2)|0);
  $34 = +HEAPF32[$33>>2];
  $35 = $34;
  $36 = $35 * 9.0;
  $37 = $32 - $36;
  $$sum7 = (($i$09) + 6)|0;
  $38 = (($curve) + ($$sum7<<2)|0);
  $39 = +HEAPF32[$38>>2];
  $40 = $39;
  $41 = $40 * 3.0;
  $42 = $37 + $41;
  $43 = $26 * 6.0;
  $44 = $30 * 12.0;
  $45 = $43 - $44;
  $46 = $35 * 6.0;
  $47 = $45 + $46;
  $48 = $30 * 3.0;
  $49 = $26 * 3.0;
  $50 = $48 - $49;
  $51 = (+Math_abs((+$42)));
  $52 = $51 < 9.9999999999999998E-13;
  do {
   if ($52) {
    $53 = (+Math_abs((+$47)));
    $54 = $53 > 9.9999999999999998E-13;
    if ($54) {
     $55 = -$50;
     $56 = $55 / $47;
     $57 = $56 > 9.9999999999999998E-13;
     $58 = $56 < 0.99999999999900002;
     $or$cond = $57 & $58;
     if ($or$cond) {
      HEAPF64[$roots>>3] = $56;
      $count$113 = 1;
      label = 14;
     }
    }
   } else {
    $59 = $47 * $47;
    $60 = $50 * 4.0;
    $61 = $60 * $42;
    $62 = $59 - $61;
    $63 = $62 > 9.9999999999999998E-13;
    if ($63) {
     $64 = -$47;
     $65 = (+Math_sqrt((+$62)));
     $66 = $65 - $47;
     $67 = $42 * 2.0;
     $68 = $66 / $67;
     $69 = $68 > 9.9999999999999998E-13;
     $70 = $68 < 0.99999999999900002;
     $or$cond3 = $69 & $70;
     if ($or$cond3) {
      HEAPF64[$roots>>3] = $68;
      $count$0 = 1;
     } else {
      $count$0 = 0;
     }
     $71 = $64 - $65;
     $72 = $71 / $67;
     $73 = $72 > 9.9999999999999998E-13;
     $74 = $72 < 0.99999999999900002;
     $or$cond5 = $73 & $74;
     if ($or$cond5) {
      $75 = (($count$0) + 1)|0;
      $76 = (($roots) + ($count$0<<3)|0);
      HEAPF64[$76>>3] = $72;
      $count$113 = $75;
      label = 14;
      break;
     } else {
      $77 = ($count$0|0)==(0);
      if ($77) {
       break;
      } else {
       $count$113 = 1;
       label = 14;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 14) {
   label = 0;
   $78 = (($bounds) + ($i$09<<2)|0);
   $79 = (($i$09) + 2)|0;
   $80 = (($bounds) + ($79<<2)|0);
   $j$08 = 0;
   while(1) {
    $81 = (($roots) + ($j$08<<3)|0);
    $82 = +HEAPF64[$81>>3];
    $83 = +HEAPF32[$24>>2];
    $84 = $83;
    $85 = +HEAPF32[$28>>2];
    $86 = $85;
    $87 = +HEAPF32[$33>>2];
    $88 = $87;
    $89 = +HEAPF32[$38>>2];
    $90 = $89;
    $91 = (+_nsvg__evalBezier($82,$84,$86,$88,$90));
    $92 = +HEAPF32[$78>>2];
    $93 = $91;
    $94 = (+_nsvg__minf($92,$93));
    HEAPF32[$78>>2] = $94;
    $95 = +HEAPF32[$80>>2];
    $96 = (+_nsvg__maxf($95,$93));
    HEAPF32[$80>>2] = $96;
    $97 = (($j$08) + 1)|0;
    $exitcond = ($97|0)==($count$113|0);
    if ($exitcond) {
     break;
    } else {
     $j$08 = $97;
    }
   }
  }
  $98 = (($i$09) + 1)|0;
  $exitcond10 = ($98|0)==(2);
  if ($exitcond10) {
   break;
  } else {
   $i$09 = $98;
  }
 }
 STACKTOP = sp;return;
}
function _nsvg__ptInBounds($pt,$bounds) {
 $pt = $pt|0;
 $bounds = $bounds|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$pt>>2];
 $1 = +HEAPF32[$bounds>>2];
 $2 = !($0 >= $1);
 if ($2) {
  $15 = 0;
 } else {
  $3 = ((($bounds)) + 8|0);
  $4 = +HEAPF32[$3>>2];
  $5 = !($0 <= $4);
  if ($5) {
   $15 = 0;
  } else {
   $6 = ((($pt)) + 4|0);
   $7 = +HEAPF32[$6>>2];
   $8 = ((($bounds)) + 4|0);
   $9 = +HEAPF32[$8>>2];
   $10 = !($7 >= $9);
   if ($10) {
    $15 = 0;
   } else {
    $11 = ((($bounds)) + 12|0);
    $12 = +HEAPF32[$11>>2];
    $13 = $7 <= $12;
    $15 = $13;
   }
  }
 }
 $14 = $15&1;
 return ($14|0);
}
function _nsvg__evalBezier($t,$p0,$p1,$p2,$p3) {
 $t = +$t;
 $p0 = +$p0;
 $p1 = +$p1;
 $p2 = +$p2;
 $p3 = +$p3;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = 1.0 - $t;
 $1 = $0 * $0;
 $2 = $0 * $1;
 $3 = $2 * $p0;
 $4 = $0 * 3.0;
 $5 = $0 * $4;
 $6 = $5 * $t;
 $7 = $6 * $p1;
 $8 = $3 + $7;
 $9 = $4 * $t;
 $10 = $9 * $t;
 $11 = $10 * $p2;
 $12 = $11 + $8;
 $13 = $t * $t;
 $14 = $13 * $t;
 $15 = $14 * $p3;
 $16 = $15 + $12;
 return (+$16);
}
function _nsvg__addPoint($p,$x,$y) {
 $p = $p|0;
 $x = +$x;
 $y = +$y;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 39944|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($p)) + 39948|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1|0)<($3|0);
 if (!($4)) {
  $5 = ($3|0)==(0);
  $6 = $3 << 1;
  $$ = $5 ? 8 : $6;
  HEAP32[$2>>2] = $$;
  $7 = ((($p)) + 39940|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $$ << 3;
  $10 = (_realloc($8,$9)|0);
  HEAP32[$7>>2] = $10;
  $11 = ($10|0)==(0|0);
  if ($11) {
   return;
  }
 }
 $12 = HEAP32[$0>>2]|0;
 $13 = $12 << 1;
 $14 = ((($p)) + 39940|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + ($13<<2)|0);
 HEAPF32[$16>>2] = $x;
 $17 = HEAP32[$0>>2]|0;
 $18 = $17 << 1;
 $19 = $18 | 1;
 $20 = HEAP32[$14>>2]|0;
 $21 = (($20) + ($19<<2)|0);
 HEAPF32[$21>>2] = $y;
 $22 = HEAP32[$0>>2]|0;
 $23 = (($22) + 1)|0;
 HEAP32[$0>>2] = $23;
 return;
}
function _nsvg__cubicBezTo($p,$cpx1,$cpy1,$cpx2,$cpy2,$x,$y) {
 $p = $p|0;
 $cpx1 = +$cpx1;
 $cpy1 = +$cpy1;
 $cpx2 = +$cpx2;
 $cpy2 = +$cpy2;
 $x = +$x;
 $y = +$y;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _nsvg__addPoint($p,$cpx1,$cpy1);
 _nsvg__addPoint($p,$cpx2,$cpy2);
 _nsvg__addPoint($p,$x,$y);
 return;
}
function _nsvg__isnum($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $memchr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c << 24 >> 24;
 $memchr = (_memchr(22108133,$0,16)|0);
 $1 = ($memchr|0)!=(0|0);
 $2 = $1&1;
 return ($2|0);
}
function _nsvg__pathMoveTo($p,$cpx,$cpy,$args,$rel) {
 $p = $p|0;
 $cpx = $cpx|0;
 $cpy = $cpy|0;
 $args = $args|0;
 $rel = $rel|0;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($rel|0)==(0);
 $1 = +HEAPF32[$args>>2];
 if ($0) {
  HEAPF32[$cpx>>2] = $1;
  $8 = ((($args)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$cpy>>2] = $9;
 } else {
  $2 = +HEAPF32[$cpx>>2];
  $3 = $1 + $2;
  HEAPF32[$cpx>>2] = $3;
  $4 = ((($args)) + 4|0);
  $5 = +HEAPF32[$4>>2];
  $6 = +HEAPF32[$cpy>>2];
  $7 = $5 + $6;
  HEAPF32[$cpy>>2] = $7;
 }
 $10 = +HEAPF32[$cpx>>2];
 $11 = +HEAPF32[$cpy>>2];
 _nsvg__moveTo($p,$10,$11);
 return;
}
function _nsvg__getArgsPerElement($cmd) {
 $cmd = $cmd|0;
 var $$0 = 0, $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $cmd << 24 >> 24;
 switch ($0|0) {
 case 72: case 104: case 86: case 118:  {
  $$0 = 1;
  break;
 }
 case 84: case 116: case 76: case 108: case 77: case 109:  {
  $$0 = 2;
  break;
 }
 case 83: case 115: case 81: case 113:  {
  $$0 = 4;
  break;
 }
 case 67: case 99:  {
  $$0 = 6;
  break;
 }
 case 65: case 97:  {
  $$0 = 7;
  break;
 }
 default: {
  $$0 = 0;
 }
 }
 return ($$0|0);
}
function _nsvg__pathLineTo($p,$cpx,$cpy,$args,$rel) {
 $p = $p|0;
 $cpx = $cpx|0;
 $cpy = $cpy|0;
 $args = $args|0;
 $rel = $rel|0;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($rel|0)==(0);
 $1 = +HEAPF32[$args>>2];
 if ($0) {
  HEAPF32[$cpx>>2] = $1;
  $8 = ((($args)) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$cpy>>2] = $9;
 } else {
  $2 = +HEAPF32[$cpx>>2];
  $3 = $1 + $2;
  HEAPF32[$cpx>>2] = $3;
  $4 = ((($args)) + 4|0);
  $5 = +HEAPF32[$4>>2];
  $6 = +HEAPF32[$cpy>>2];
  $7 = $5 + $6;
  HEAPF32[$cpy>>2] = $7;
 }
 $10 = +HEAPF32[$cpx>>2];
 $11 = +HEAPF32[$cpy>>2];
 _nsvg__lineTo($p,$10,$11);
 return;
}
function _nsvg__pathHLineTo($p,$cpx,$cpy,$args,$rel) {
 $p = $p|0;
 $cpx = $cpx|0;
 $cpy = $cpy|0;
 $args = $args|0;
 $rel = $rel|0;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $storemerge = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($rel|0)==(0);
 $1 = +HEAPF32[$args>>2];
 if ($0) {
  $storemerge = $1;
 } else {
  $2 = +HEAPF32[$cpx>>2];
  $3 = $1 + $2;
  $storemerge = $3;
 }
 HEAPF32[$cpx>>2] = $storemerge;
 $4 = +HEAPF32[$cpy>>2];
 _nsvg__lineTo($p,$storemerge,$4);
 return;
}
function _nsvg__pathVLineTo($p,$cpx,$cpy,$args,$rel) {
 $p = $p|0;
 $cpx = $cpx|0;
 $cpy = $cpy|0;
 $args = $args|0;
 $rel = $rel|0;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $storemerge = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($rel|0)==(0);
 $1 = +HEAPF32[$args>>2];
 if ($0) {
  $storemerge = $1;
 } else {
  $2 = +HEAPF32[$cpy>>2];
  $3 = $1 + $2;
  $storemerge = $3;
 }
 HEAPF32[$cpy>>2] = $storemerge;
 $4 = +HEAPF32[$cpx>>2];
 _nsvg__lineTo($p,$4,$storemerge);
 return;
}
function _nsvg__pathCubicBezTo($p,$cpx,$cpy,$cpx2,$cpy2,$args,$rel) {
 $p = $p|0;
 $cpx = $cpx|0;
 $cpy = $cpy|0;
 $cpx2 = $cpx2|0;
 $cpy2 = $cpy2|0;
 $args = $args|0;
 $rel = $rel|0;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0.0, $20 = 0.0, $21 = 0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0, $28 = 0.0, $29 = 0, $3 = 0.0, $30 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $cx1$0 = 0.0, $cx2$0 = 0.0, $cy1$0 = 0.0, $cy2$0 = 0.0, $x2$0 = 0.0, $y2$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($rel|0)==(0);
 if ($0) {
  $20 = +HEAPF32[$args>>2];
  $21 = ((($args)) + 4|0);
  $22 = +HEAPF32[$21>>2];
  $23 = ((($args)) + 8|0);
  $24 = +HEAPF32[$23>>2];
  $25 = ((($args)) + 12|0);
  $26 = +HEAPF32[$25>>2];
  $27 = ((($args)) + 16|0);
  $28 = +HEAPF32[$27>>2];
  $29 = ((($args)) + 20|0);
  $30 = +HEAPF32[$29>>2];
  $cx1$0 = $20;$cx2$0 = $24;$cy1$0 = $22;$cy2$0 = $26;$x2$0 = $28;$y2$0 = $30;
 } else {
  $1 = +HEAPF32[$cpx>>2];
  $2 = +HEAPF32[$args>>2];
  $3 = $1 + $2;
  $4 = +HEAPF32[$cpy>>2];
  $5 = ((($args)) + 4|0);
  $6 = +HEAPF32[$5>>2];
  $7 = $4 + $6;
  $8 = ((($args)) + 8|0);
  $9 = +HEAPF32[$8>>2];
  $10 = $1 + $9;
  $11 = ((($args)) + 12|0);
  $12 = +HEAPF32[$11>>2];
  $13 = $4 + $12;
  $14 = ((($args)) + 16|0);
  $15 = +HEAPF32[$14>>2];
  $16 = $1 + $15;
  $17 = ((($args)) + 20|0);
  $18 = +HEAPF32[$17>>2];
  $19 = $4 + $18;
  $cx1$0 = $3;$cx2$0 = $10;$cy1$0 = $7;$cy2$0 = $13;$x2$0 = $16;$y2$0 = $19;
 }
 _nsvg__cubicBezTo($p,$cx1$0,$cy1$0,$cx2$0,$cy2$0,$x2$0,$y2$0);
 HEAPF32[$cpx2>>2] = $cx2$0;
 HEAPF32[$cpy2>>2] = $cy2$0;
 HEAPF32[$cpx>>2] = $x2$0;
 HEAPF32[$cpy>>2] = $y2$0;
 return;
}
function _nsvg__pathCubicBezShortTo($p,$cpx,$cpy,$cpx2,$cpy2,$args,$rel) {
 $p = $p|0;
 $cpx = $cpx|0;
 $cpy = $cpy|0;
 $cpx2 = $cpx2|0;
 $cpy2 = $cpy2|0;
 $args = $args|0;
 $rel = $rel|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $3 = 0.0;
 var $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $cx2$0 = 0.0, $cy2$0 = 0.0, $x2$0 = 0.0, $y2$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$cpx>>2];
 $1 = +HEAPF32[$cpy>>2];
 $2 = ($rel|0)==(0);
 $3 = +HEAPF32[$args>>2];
 if ($2) {
  $14 = ((($args)) + 4|0);
  $15 = +HEAPF32[$14>>2];
  $16 = ((($args)) + 8|0);
  $17 = +HEAPF32[$16>>2];
  $18 = ((($args)) + 12|0);
  $19 = +HEAPF32[$18>>2];
  $cx2$0 = $3;$cy2$0 = $15;$x2$0 = $17;$y2$0 = $19;
 } else {
  $4 = $0 + $3;
  $5 = ((($args)) + 4|0);
  $6 = +HEAPF32[$5>>2];
  $7 = $1 + $6;
  $8 = ((($args)) + 8|0);
  $9 = +HEAPF32[$8>>2];
  $10 = $0 + $9;
  $11 = ((($args)) + 12|0);
  $12 = +HEAPF32[$11>>2];
  $13 = $1 + $12;
  $cx2$0 = $4;$cy2$0 = $7;$x2$0 = $10;$y2$0 = $13;
 }
 $20 = $0 * 2.0;
 $21 = +HEAPF32[$cpx2>>2];
 $22 = $20 - $21;
 $23 = $1 * 2.0;
 $24 = +HEAPF32[$cpy2>>2];
 $25 = $23 - $24;
 _nsvg__cubicBezTo($p,$22,$25,$cx2$0,$cy2$0,$x2$0,$y2$0);
 HEAPF32[$cpx2>>2] = $cx2$0;
 HEAPF32[$cpy2>>2] = $cy2$0;
 HEAPF32[$cpx>>2] = $x2$0;
 HEAPF32[$cpy>>2] = $y2$0;
 return;
}
function _nsvg__pathQuadBezTo($p,$cpx,$cpy,$cpx2,$cpy2,$args,$rel) {
 $p = $p|0;
 $cpx = $cpx|0;
 $cpy = $cpy|0;
 $cpx2 = $cpx2|0;
 $cpy2 = $cpy2|0;
 $args = $args|0;
 $rel = $rel|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $cx$0 = 0.0, $cy$0 = 0.0, $x2$0 = 0.0, $y2$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$cpx>>2];
 $1 = +HEAPF32[$cpy>>2];
 $2 = ($rel|0)==(0);
 $3 = +HEAPF32[$args>>2];
 if ($2) {
  $14 = ((($args)) + 4|0);
  $15 = +HEAPF32[$14>>2];
  $16 = ((($args)) + 8|0);
  $17 = +HEAPF32[$16>>2];
  $18 = ((($args)) + 12|0);
  $19 = +HEAPF32[$18>>2];
  $cx$0 = $3;$cy$0 = $15;$x2$0 = $17;$y2$0 = $19;
 } else {
  $4 = $0 + $3;
  $5 = ((($args)) + 4|0);
  $6 = +HEAPF32[$5>>2];
  $7 = $1 + $6;
  $8 = ((($args)) + 8|0);
  $9 = +HEAPF32[$8>>2];
  $10 = $0 + $9;
  $11 = ((($args)) + 12|0);
  $12 = +HEAPF32[$11>>2];
  $13 = $1 + $12;
  $cx$0 = $4;$cy$0 = $7;$x2$0 = $10;$y2$0 = $13;
 }
 $20 = $cx$0 - $0;
 $21 = $20 * 0.66666668653488159;
 $22 = $0 + $21;
 $23 = $cy$0 - $1;
 $24 = $23 * 0.66666668653488159;
 $25 = $1 + $24;
 $26 = $cx$0 - $x2$0;
 $27 = $26 * 0.66666668653488159;
 $28 = $x2$0 + $27;
 $29 = $cy$0 - $y2$0;
 $30 = $29 * 0.66666668653488159;
 $31 = $y2$0 + $30;
 _nsvg__cubicBezTo($p,$22,$25,$28,$31,$x2$0,$y2$0);
 HEAPF32[$cpx2>>2] = $cx$0;
 HEAPF32[$cpy2>>2] = $cy$0;
 HEAPF32[$cpx>>2] = $x2$0;
 HEAPF32[$cpy>>2] = $y2$0;
 return;
}
function _nsvg__pathQuadBezShortTo($p,$cpx,$cpy,$cpx2,$cpy2,$args,$rel) {
 $p = $p|0;
 $cpx = $cpx|0;
 $cpy = $cpy|0;
 $cpx2 = $cpx2|0;
 $cpy2 = $cpy2|0;
 $args = $args|0;
 $rel = $rel|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $x2$0 = 0.0, $y2$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$cpx>>2];
 $1 = +HEAPF32[$cpy>>2];
 $2 = ($rel|0)==(0);
 $3 = +HEAPF32[$args>>2];
 if ($2) {
  $8 = ((($args)) + 4|0);
  $9 = +HEAPF32[$8>>2];
  $x2$0 = $3;$y2$0 = $9;
 } else {
  $4 = $0 + $3;
  $5 = ((($args)) + 4|0);
  $6 = +HEAPF32[$5>>2];
  $7 = $1 + $6;
  $x2$0 = $4;$y2$0 = $7;
 }
 $10 = $0 * 2.0;
 $11 = +HEAPF32[$cpx2>>2];
 $12 = $10 - $11;
 $13 = $1 * 2.0;
 $14 = +HEAPF32[$cpy2>>2];
 $15 = $13 - $14;
 $16 = $12 - $0;
 $17 = $16 * 0.66666668653488159;
 $18 = $0 + $17;
 $19 = $15 - $1;
 $20 = $19 * 0.66666668653488159;
 $21 = $1 + $20;
 $22 = $12 - $x2$0;
 $23 = $22 * 0.66666668653488159;
 $24 = $x2$0 + $23;
 $25 = $15 - $y2$0;
 $26 = $25 * 0.66666668653488159;
 $27 = $y2$0 + $26;
 _nsvg__cubicBezTo($p,$18,$21,$24,$27,$x2$0,$y2$0);
 HEAPF32[$cpx2>>2] = $12;
 HEAPF32[$cpy2>>2] = $15;
 HEAPF32[$cpx>>2] = $x2$0;
 HEAPF32[$cpy>>2] = $y2$0;
 return;
}
function _nsvg__pathArcTo($p,$cpx,$cpy,$args,$rel) {
 $p = $p|0;
 $cpx = $cpx|0;
 $cpy = $cpy|0;
 $args = $args|0;
 $rel = $rel|0;
 var $$ = 0.0, $0 = 0.0, $1 = 0.0, $10 = 0.0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0.0, $120 = 0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0.0, $132 = 0;
 var $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0.0, $148 = 0.0, $149 = 0.0, $15 = 0.0, $150 = 0.0;
 var $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0, $16 = 0.0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0;
 var $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0;
 var $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0.0, $61 = 0.0;
 var $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0.0;
 var $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0;
 var $99 = 0.0, $da$0 = 0.0, $exitcond = 0, $i$013 = 0, $kappa$0 = 0.0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $ptanx$011 = 0.0, $ptany$012 = 0.0, $px$09 = 0.0, $py$010 = 0.0, $rx$0 = 0.0, $ry$0 = 0.0, $s$0 = 0.0, $s$0$ = 0.0, $sa$0 = 0.0, $t = 0, $tanx = 0;
 var $tany = 0, $tmp = 0, $x = 0, $x2$0 = 0.0, $y = 0, $y2$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $x = sp + 36|0;
 $y = sp + 32|0;
 $tanx = sp + 28|0;
 $tany = sp + 24|0;
 $t = sp;
 $0 = +HEAPF32[$args>>2];
 $1 = (+Math_abs((+$0)));
 $2 = ((($args)) + 4|0);
 $3 = +HEAPF32[$2>>2];
 $4 = (+Math_abs((+$3)));
 $5 = ((($args)) + 8|0);
 $6 = +HEAPF32[$5>>2];
 $7 = $6 / 180.0;
 $8 = $7 * 3.1415927410125732;
 $9 = ((($args)) + 12|0);
 $10 = +HEAPF32[$9>>2];
 $11 = (+Math_abs((+$10)));
 $12 = $11;
 $13 = $12 > 9.9999999999999995E-7;
 $14 = ((($args)) + 16|0);
 $15 = +HEAPF32[$14>>2];
 $16 = (+Math_abs((+$15)));
 $17 = $16;
 $18 = $17 > 9.9999999999999995E-7;
 $19 = +HEAPF32[$cpx>>2];
 $20 = +HEAPF32[$cpy>>2];
 $21 = ($rel|0)==(0);
 $22 = ((($args)) + 20|0);
 $23 = +HEAPF32[$22>>2];
 if ($21) {
  $28 = ((($args)) + 24|0);
  $29 = +HEAPF32[$28>>2];
  $x2$0 = $23;$y2$0 = $29;
 } else {
  $24 = $19 + $23;
  $25 = ((($args)) + 24|0);
  $26 = +HEAPF32[$25>>2];
  $27 = $20 + $26;
  $x2$0 = $24;$y2$0 = $27;
 }
 $30 = $19 - $x2$0;
 $31 = $20 - $y2$0;
 $32 = $30 * $30;
 $33 = $31 * $31;
 $34 = $33 + $32;
 $35 = (+Math_sqrt((+$34)));
 $36 = $35 < 9.9999999747524271E-7;
 $37 = $1 < 9.9999999747524271E-7;
 $or$cond = $37 | $36;
 $38 = $4 < 9.9999999747524271E-7;
 $or$cond3 = $38 | $or$cond;
 if ($or$cond3) {
  _nsvg__lineTo($p,$x2$0,$y2$0);
  HEAPF32[$cpx>>2] = $x2$0;
  HEAPF32[$cpy>>2] = $y2$0;
  STACKTOP = sp;return;
 }
 $39 = (+Math_sin((+$8)));
 $40 = (+Math_cos((+$8)));
 $41 = $30 * $40;
 $42 = $41 * 0.5;
 $43 = $31 * $39;
 $44 = $43 * 0.5;
 $45 = $44 + $42;
 $46 = -$39;
 $47 = $30 * $46;
 $48 = $47 * 0.5;
 $49 = $31 * $40;
 $50 = $49 * 0.5;
 $51 = $48 + $50;
 $52 = (+_nsvg__sqr($45));
 $53 = (+_nsvg__sqr($1));
 $54 = $52 / $53;
 $55 = (+_nsvg__sqr($51));
 $56 = (+_nsvg__sqr($4));
 $57 = $55 / $56;
 $58 = $54 + $57;
 $59 = $58 > 1.0;
 if ($59) {
  $60 = (+Math_sqrt((+$58)));
  $61 = $1 * $60;
  $62 = $4 * $60;
  $rx$0 = $61;$ry$0 = $62;
 } else {
  $rx$0 = $1;$ry$0 = $4;
 }
 $63 = (+_nsvg__sqr($rx$0));
 $64 = (+_nsvg__sqr($ry$0));
 $65 = $63 * $64;
 $66 = $55 * $63;
 $67 = $65 - $66;
 $68 = $52 * $64;
 $69 = $67 - $68;
 $70 = $66 + $68;
 $71 = $70 > 0.0;
 if ($71) {
  $72 = $69 < 0.0;
  $sa$0 = $72 ? 0.0 : $69;
  $73 = $sa$0 / $70;
  $74 = (+Math_sqrt((+$73)));
  $s$0 = $74;
 } else {
  $s$0 = 0.0;
 }
 $tmp = $13 ^ $18;
 $75 = -$s$0;
 $s$0$ = $tmp ? $s$0 : $75;
 $76 = $rx$0 * $s$0$;
 $77 = $51 * $76;
 $78 = $77 / $ry$0;
 $79 = $ry$0 * $s$0$;
 $80 = $45 * $79;
 $81 = -$80;
 $82 = $81 / $rx$0;
 $83 = $19 + $x2$0;
 $84 = $83 * 0.5;
 $85 = $40 * $78;
 $86 = $84 + $85;
 $87 = $39 * $82;
 $88 = $86 - $87;
 $89 = $20 + $y2$0;
 $90 = $89 * 0.5;
 $91 = $39 * $78;
 $92 = $90 + $91;
 $93 = $40 * $82;
 $94 = $92 + $93;
 $95 = $45 - $78;
 $96 = $95 / $rx$0;
 $97 = $51 - $82;
 $98 = $97 / $ry$0;
 $99 = -$45;
 $100 = $99 - $78;
 $101 = $100 / $rx$0;
 $102 = -$51;
 $103 = $102 - $82;
 $104 = $103 / $ry$0;
 $105 = (+_nsvg__vecang(1.0,0.0,$96,$98));
 $106 = (+_nsvg__vecang($96,$98,$101,$104));
 $107 = $18 ^ 1;
 $108 = $106 > 0.0;
 $or$cond5 = $108 & $107;
 if ($or$cond5) {
  $109 = $106 + -6.2831854820251465;
  $da$0 = $109;
 } else {
  $110 = $106 < 0.0;
  $or$cond7 = $18 & $110;
  $111 = $106 + 6.2831854820251465;
  $$ = $or$cond7 ? $111 : $106;
  $da$0 = $$;
 }
 HEAPF32[$t>>2] = $40;
 $112 = ((($t)) + 4|0);
 HEAPF32[$112>>2] = $39;
 $113 = ((($t)) + 8|0);
 HEAPF32[$113>>2] = $46;
 $114 = ((($t)) + 12|0);
 HEAPF32[$114>>2] = $40;
 $115 = ((($t)) + 16|0);
 HEAPF32[$115>>2] = $88;
 $116 = ((($t)) + 20|0);
 HEAPF32[$116>>2] = $94;
 $117 = (+Math_abs((+$da$0)));
 $118 = $117 / 1.5707963705062866;
 $119 = $118 + 1.0;
 $120 = (~~(($119)));
 $121 = (+($120|0));
 $122 = $da$0 / $121;
 $123 = $122 * 0.5;
 $124 = (+Math_cos((+$123)));
 $125 = 1.0 - $124;
 $126 = $125 * 1.3333333730697632;
 $127 = (+Math_sin((+$123)));
 $128 = $126 / $127;
 $129 = (+Math_abs((+$128)));
 $130 = $da$0 < 0.0;
 $131 = -$129;
 $kappa$0 = $130 ? $131 : $129;
 $132 = ($120|0)<(0);
 if ($132) {
  HEAPF32[$cpx>>2] = $x2$0;
  HEAPF32[$cpy>>2] = $y2$0;
  STACKTOP = sp;return;
 } else {
  $i$013 = 0;$ptanx$011 = 0.0;$ptany$012 = 0.0;$px$09 = 0.0;$py$010 = 0.0;
 }
 while(1) {
  $133 = (+($i$013|0));
  $134 = $133 / $121;
  $135 = $da$0 * $134;
  $136 = $105 + $135;
  $137 = (+Math_cos((+$136)));
  $138 = (+Math_sin((+$136)));
  $139 = $rx$0 * $137;
  $140 = $ry$0 * $138;
  _nsvg__xformPoint($x,$y,$139,$140,$t);
  $141 = $rx$0 * $138;
  $142 = $kappa$0 * $141;
  $143 = -$142;
  $144 = $ry$0 * $137;
  $145 = $kappa$0 * $144;
  _nsvg__xformVec($tanx,$tany,$143,$145,$t);
  $146 = ($i$013|0)>(0);
  if ($146) {
   $147 = $px$09 + $ptanx$011;
   $148 = $py$010 + $ptany$012;
   $149 = +HEAPF32[$x>>2];
   $150 = +HEAPF32[$tanx>>2];
   $151 = $149 - $150;
   $152 = +HEAPF32[$y>>2];
   $153 = +HEAPF32[$tany>>2];
   $154 = $152 - $153;
   _nsvg__cubicBezTo($p,$147,$148,$151,$154,$149,$152);
  }
  $155 = +HEAPF32[$x>>2];
  $156 = +HEAPF32[$y>>2];
  $157 = +HEAPF32[$tanx>>2];
  $158 = +HEAPF32[$tany>>2];
  $159 = (($i$013) + 1)|0;
  $exitcond = ($i$013|0)==($120|0);
  if ($exitcond) {
   break;
  } else {
   $i$013 = $159;$ptanx$011 = $157;$ptany$012 = $158;$px$09 = $155;$py$010 = $156;
  }
 }
 HEAPF32[$cpx>>2] = $x2$0;
 HEAPF32[$cpy>>2] = $y2$0;
 STACKTOP = sp;return;
}
function _nsvg__sqr($x) {
 $x = +$x;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $x * $x;
 return (+$0);
}
function _nsvg__vecang($ux,$uy,$vx,$vy) {
 $ux = +$ux;
 $uy = +$uy;
 $vx = +$vx;
 $vy = +$vy;
 var $0 = 0.0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $r$0 = 0.0, $r$1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_nsvg__vecrat($ux,$uy,$vx,$vy));
 $1 = $0 < -1.0;
 $r$0 = $1 ? -1.0 : $0;
 $2 = $r$0 > 1.0;
 $r$1 = $2 ? 1.0 : $r$0;
 $3 = $ux * $vy;
 $4 = $uy * $vx;
 $5 = $3 < $4;
 $6 = $5 ? -1.0 : 1.0;
 $7 = (+Math_acos((+$r$1)));
 $8 = $6 * $7;
 return (+$8);
}
function _nsvg__xformVec($dx,$dy,$x,$y,$t) {
 $dx = $dx|0;
 $dy = $dy|0;
 $x = +$x;
 $y = +$y;
 $t = $t|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$t>>2];
 $1 = $0 * $x;
 $2 = ((($t)) + 8|0);
 $3 = +HEAPF32[$2>>2];
 $4 = $3 * $y;
 $5 = $1 + $4;
 HEAPF32[$dx>>2] = $5;
 $6 = ((($t)) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $7 * $x;
 $9 = ((($t)) + 12|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $10 * $y;
 $12 = $8 + $11;
 HEAPF32[$dy>>2] = $12;
 return;
}
function _nsvg__vecrat($ux,$uy,$vx,$vy) {
 $ux = +$ux;
 $uy = +$uy;
 $vx = +$vx;
 $vy = +$vy;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $ux * $vx;
 $1 = $uy * $vy;
 $2 = $0 + $1;
 $3 = (+_nsvg__vmag($ux,$uy));
 $4 = (+_nsvg__vmag($vx,$vy));
 $5 = $3 * $4;
 $6 = $2 / $5;
 return (+$6);
}
function _nsvg__vmag($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $x * $x;
 $1 = $y * $y;
 $2 = $0 + $1;
 $3 = (+Math_sqrt((+$2)));
 return (+$3);
}
function _gfx__load_shader_into($program,$vs,$fs) {
 $program = $program|0;
 $vs = $vs|0;
 $fs = $fs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $status = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 28|0;
 $1 = sp + 24|0;
 $status = sp + 20|0;
 HEAP32[$0>>2] = $vs;
 HEAP32[$1>>2] = $fs;
 _gfx__get_opengl();
 $2 = HEAP32[(22105544)>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 15](35633)|0);
 $4 = HEAP32[(22105544)>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 15](35632)|0);
 $6 = HEAP32[(22105552)>>2]|0;
 FUNCTION_TABLE_viiii[$6 & 31]($3,1,$0,0);
 $7 = HEAP32[(22105552)>>2]|0;
 FUNCTION_TABLE_viiii[$7 & 31]($5,1,$1,0);
 $8 = HEAP32[(22105568)>>2]|0;
 FUNCTION_TABLE_vi[$8 & 31]($3);
 $9 = HEAP32[(22105568)>>2]|0;
 FUNCTION_TABLE_vi[$9 & 31]($5);
 $10 = HEAP32[(22105580)>>2]|0;
 FUNCTION_TABLE_viii[$10 & 31]($3,35713,$status);
 $11 = HEAP32[$status>>2]|0;
 $12 = ($11|0)==(0);
 if ($12) {
  $13 = HEAP32[(22105588)>>2]|0;
  FUNCTION_TABLE_viiii[$13 & 31]($3,1024,0,22110165);
  $14 = HEAP32[22105928>>2]|0;
  HEAP32[$vararg_buffer>>2] = 22110165;
  (_fprintf($14,22111189,$vararg_buffer)|0);
  HEAP32[$status>>2] = 0;
 }
 $15 = HEAP32[(22105580)>>2]|0;
 FUNCTION_TABLE_viii[$15 & 31]($5,35713,$status);
 $16 = HEAP32[$status>>2]|0;
 $17 = ($16|0)==(0);
 if ($17) {
  $18 = HEAP32[(22105588)>>2]|0;
  FUNCTION_TABLE_viiii[$18 & 31]($5,1024,0,22110165);
  $19 = HEAP32[22105928>>2]|0;
  HEAP32[$vararg_buffer1>>2] = 22110165;
  (_fprintf($19,22111189,$vararg_buffer1)|0);
  HEAP32[$status>>2] = 0;
 }
 $20 = HEAP32[(22105572)>>2]|0;
 FUNCTION_TABLE_vii[$20 & 63]($program,$3);
 $21 = HEAP32[(22105572)>>2]|0;
 FUNCTION_TABLE_vii[$21 & 63]($program,$5);
 $22 = HEAP32[(22105548)>>2]|0;
 FUNCTION_TABLE_vi[$22 & 31]($program);
 $23 = HEAP32[(22105576)>>2]|0;
 FUNCTION_TABLE_viii[$23 & 31]($program,35714,$status);
 $24 = HEAP32[$status>>2]|0;
 $25 = ($24|0)==(0);
 if (!($25)) {
  $28 = HEAP32[(22105564)>>2]|0;
  FUNCTION_TABLE_vi[$28 & 31]($3);
  $29 = HEAP32[(22105564)>>2]|0;
  FUNCTION_TABLE_vi[$29 & 31]($5);
  STACKTOP = sp;return;
 }
 $26 = HEAP32[(22105584)>>2]|0;
 FUNCTION_TABLE_viiii[$26 & 31]($program,1024,0,22110165);
 $27 = HEAP32[22105928>>2]|0;
 HEAP32[$vararg_buffer4>>2] = 22110165;
 (_fprintf($27,22111189,$vararg_buffer4)|0);
 HEAP32[$status>>2] = 0;
 $28 = HEAP32[(22105564)>>2]|0;
 FUNCTION_TABLE_vi[$28 & 31]($3);
 $29 = HEAP32[(22105564)>>2]|0;
 FUNCTION_TABLE_vi[$29 & 31]($5);
 STACKTOP = sp;return;
}
function _gfx__allocate_batch($ninds,$nverts) {
 $ninds = $ninds|0;
 $nverts = $nverts|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(21548164)>>2]|0;
 $1 = (($0) + ($ninds))|0;
 $2 = ($1|0)>(786431);
 if (!($2)) {
  $3 = HEAP32[(18402432)>>2]|0;
  $4 = (($3) + ($nverts))|0;
  $5 = ($4|0)>(524287);
  if (!($5)) {
   return;
  }
 }
 _gfx_flush();
 return;
}
function _gfx__get_proc_address($name) {
 $name = $name|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_SDL_GL_GetProcAddress(($name|0))|0);
 return ($0|0);
}
function _gfx__missing_extension($name) {
 $name = $name|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP32[22105928>>2]|0;
 HEAP32[$vararg_buffer>>2] = $name;
 (_fprintf($0,22111802,$vararg_buffer)|0);
 $1 = HEAP32[21548404>>2]|0;
 $2 = ($1|0)==(0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 HEAP32[21548404>>2] = 1;
 STACKTOP = sp;return;
}
function _gfx__matrix_multiply($dst,$src) {
 $dst = $dst|0;
 $src = $src|0;
 var $0 = 0.0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0;
 var $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0.0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = +HEAPF32[$dst>>2];
 $1 = +HEAPF32[$src>>2];
 $2 = $0 * $1;
 $3 = ((($dst)) + 4|0);
 $4 = +HEAPF32[$3>>2];
 $5 = ((($src)) + 8|0);
 $6 = +HEAPF32[$5>>2];
 $7 = $4 * $6;
 $8 = $2 + $7;
 $9 = ((($dst)) + 8|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $1 * $10;
 $12 = ((($dst)) + 12|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $6 * $13;
 $15 = $11 + $14;
 $16 = ((($dst)) + 16|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $1 * $17;
 $19 = ((($dst)) + 20|0);
 $20 = +HEAPF32[$19>>2];
 $21 = $6 * $20;
 $22 = $18 + $21;
 $23 = ((($src)) + 16|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $24 + $22;
 $26 = ((($src)) + 4|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $0 * $27;
 $29 = ((($src)) + 12|0);
 $30 = +HEAPF32[$29>>2];
 $31 = $4 * $30;
 $32 = $28 + $31;
 HEAPF32[$3>>2] = $32;
 $33 = +HEAPF32[$9>>2];
 $34 = +HEAPF32[$26>>2];
 $35 = $33 * $34;
 $36 = +HEAPF32[$12>>2];
 $37 = +HEAPF32[$29>>2];
 $38 = $36 * $37;
 $39 = $35 + $38;
 HEAPF32[$12>>2] = $39;
 $40 = +HEAPF32[$16>>2];
 $41 = +HEAPF32[$26>>2];
 $42 = $40 * $41;
 $43 = +HEAPF32[$19>>2];
 $44 = +HEAPF32[$29>>2];
 $45 = $43 * $44;
 $46 = $42 + $45;
 $47 = ((($src)) + 20|0);
 $48 = +HEAPF32[$47>>2];
 $49 = $48 + $46;
 HEAPF32[$19>>2] = $49;
 HEAPF32[$dst>>2] = $8;
 HEAPF32[$9>>2] = $15;
 HEAPF32[$16>>2] = $25;
 return;
}
function _emscripten_GetProcAddress($name_) {
 $name_ = $name_|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $end = 0, $name = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $name = sp + 4|0;
 $end = sp;
 HEAP32[$1>>2] = $name_;
 $2 = HEAP32[$1>>2]|0;
 $3 = (_strlen($2)|0);
 $4 = (($3) + 1)|0;
 $5 = (_malloc($4)|0);
 HEAP32[$name>>2] = $5;
 $6 = HEAP32[$name>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 (_strcpy($6,$7)|0);
 $8 = HEAP32[$name>>2]|0;
 $9 = (_strstr($8,22111832)|0);
 HEAP32[$end>>2] = $9;
 $10 = HEAP32[$end>>2]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = HEAP32[$end>>2]|0;
  HEAP8[$12>>0] = 0;
 }
 $13 = HEAP32[$name>>2]|0;
 $14 = (_strstr($13,22111836)|0);
 HEAP32[$end>>2] = $14;
 $15 = HEAP32[$end>>2]|0;
 $16 = ($15|0)!=(0|0);
 if ($16) {
  $17 = HEAP32[$end>>2]|0;
  HEAP8[$17>>0] = 0;
 }
 $18 = HEAP32[$name>>2]|0;
 $19 = (_strstr($18,22111840)|0);
 HEAP32[$end>>2] = $19;
 $20 = HEAP32[$end>>2]|0;
 $21 = ($20|0)!=(0|0);
 if ($21) {
  $22 = HEAP32[$end>>2]|0;
  HEAP8[$22>>0] = 0;
 }
 $23 = HEAP32[$name>>2]|0;
 $24 = (_strstr($23,22111844)|0);
 HEAP32[$end>>2] = $24;
 $25 = HEAP32[$end>>2]|0;
 $26 = ($25|0)!=(0|0);
 if ($26) {
  $27 = HEAP32[$end>>2]|0;
  HEAP8[$27>>0] = 0;
 }
 $28 = HEAP32[$name>>2]|0;
 $29 = (_strcmp($28,22111850)|0);
 $30 = ($29|0)!=(0);
 do {
  if ($30) {
   $31 = HEAP32[$name>>2]|0;
   $32 = (_strcmp($31,22111888)|0);
   $33 = ($32|0)!=(0);
   if (!($33)) {
    HEAP32[$name>>2] = 22111907;
    break;
   }
   $34 = HEAP32[$name>>2]|0;
   $35 = (_strcmp($34,22111920)|0);
   $36 = ($35|0)!=(0);
   if (!($36)) {
    HEAP32[$name>>2] = 22111941;
    break;
   }
   $37 = HEAP32[$name>>2]|0;
   $38 = (_strcmp($37,22111956)|0);
   $39 = ($38|0)!=(0);
   if (!($39)) {
    HEAP32[$name>>2] = 22111971;
    break;
   }
   $40 = HEAP32[$name>>2]|0;
   $41 = (_strcmp($40,22111986)|0);
   $42 = ($41|0)!=(0);
   if (!($42)) {
    HEAP32[$name>>2] = 22112001;
   }
  } else {
   HEAP32[$name>>2] = 22111872;
  }
 } while(0);
 $43 = HEAP32[$name>>2]|0;
 $44 = (_strcmp($43,22112016)|0);
 $45 = ($44|0)!=(0);
 do {
  if ($45) {
   $46 = HEAP32[$name>>2]|0;
   $47 = (_strcmp($46,22112030)|0);
   $48 = ($47|0)!=(0);
   if (!($48)) {
    HEAP32[$0>>2] = 2;
    break;
   }
   $49 = HEAP32[$name>>2]|0;
   $50 = (_strcmp($49,22112042)|0);
   $51 = ($50|0)!=(0);
   if (!($51)) {
    HEAP32[$0>>2] = 4;
    break;
   }
   $52 = HEAP32[$name>>2]|0;
   $53 = (_strcmp($52,22112056)|0);
   $54 = ($53|0)!=(0);
   if (!($54)) {
    HEAP32[$0>>2] = 5;
    break;
   }
   $55 = HEAP32[$name>>2]|0;
   $56 = (_strcmp($55,22112068)|0);
   $57 = ($56|0)!=(0);
   if (!($57)) {
    HEAP32[$0>>2] = 6;
    break;
   }
   $58 = HEAP32[$name>>2]|0;
   $59 = (_strcmp($58,22112082)|0);
   $60 = ($59|0)!=(0);
   if (!($60)) {
    HEAP32[$0>>2] = 7;
    break;
   }
   $61 = HEAP32[$name>>2]|0;
   $62 = (_strcmp($61,22112096)|0);
   $63 = ($62|0)!=(0);
   if (!($63)) {
    HEAP32[$0>>2] = 8;
    break;
   }
   $64 = HEAP32[$name>>2]|0;
   $65 = (_strcmp($64,22112113)|0);
   $66 = ($65|0)!=(0);
   if (!($66)) {
    HEAP32[$0>>2] = 1;
    break;
   }
   $67 = HEAP32[$name>>2]|0;
   $68 = (_strcmp($67,22112136)|0);
   $69 = ($68|0)!=(0);
   if (!($69)) {
    HEAP32[$0>>2] = 1;
    break;
   }
   $70 = HEAP32[$name>>2]|0;
   $71 = (_strcmp($70,22112162)|0);
   $72 = ($71|0)!=(0);
   if (!($72)) {
    HEAP32[$0>>2] = 2;
    break;
   }
   $73 = HEAP32[$name>>2]|0;
   $74 = (_strcmp($73,22112175)|0);
   $75 = ($74|0)!=(0);
   if (!($75)) {
    HEAP32[$0>>2] = 3;
    break;
   }
   $76 = HEAP32[$name>>2]|0;
   $77 = (_strcmp($76,22112191)|0);
   $78 = ($77|0)!=(0);
   if (!($78)) {
    HEAP32[$0>>2] = 1;
    break;
   }
   $79 = HEAP32[$name>>2]|0;
   $80 = (_strcmp($79,22112204)|0);
   $81 = ($80|0)!=(0);
   if (!($81)) {
    HEAP32[$0>>2] = 9;
    break;
   }
   $82 = HEAP32[$name>>2]|0;
   $83 = (_strcmp($82,22112218)|0);
   $84 = ($83|0)!=(0);
   if (!($84)) {
    HEAP32[$0>>2] = 2;
    break;
   }
   $85 = HEAP32[$name>>2]|0;
   $86 = (_strcmp($85,22112238)|0);
   $87 = ($86|0)!=(0);
   if (!($87)) {
    HEAP32[$0>>2] = 3;
    break;
   }
   $88 = HEAP32[$name>>2]|0;
   $89 = (_strcmp($88,22112258)|0);
   $90 = ($89|0)!=(0);
   if (!($90)) {
    HEAP32[$0>>2] = 4;
    break;
   }
   $91 = HEAP32[$name>>2]|0;
   $92 = (_strcmp($91,22112275)|0);
   $93 = ($92|0)!=(0);
   if (!($93)) {
    HEAP32[$0>>2] = 5;
    break;
   }
   $94 = HEAP32[$name>>2]|0;
   $95 = (_strcmp($94,22112292)|0);
   $96 = ($95|0)!=(0);
   if (!($96)) {
    HEAP32[$0>>2] = 3;
    break;
   }
   $97 = HEAP32[$name>>2]|0;
   $98 = (_strcmp($97,22112304)|0);
   $99 = ($98|0)!=(0);
   if (!($99)) {
    HEAP32[$0>>2] = 10;
    break;
   }
   $100 = HEAP32[$name>>2]|0;
   $101 = (_strcmp($100,22112317)|0);
   $102 = ($101|0)!=(0);
   if (!($102)) {
    HEAP32[$0>>2] = 11;
    break;
   }
   $103 = HEAP32[$name>>2]|0;
   $104 = (_strcmp($103,22112333)|0);
   $105 = ($104|0)!=(0);
   if (!($105)) {
    HEAP32[$0>>2] = 6;
    break;
   }
   $106 = HEAP32[$name>>2]|0;
   $107 = (_strcmp($106,22112356)|0);
   $108 = ($107|0)!=(0);
   if (!($108)) {
    HEAP32[$0>>2] = 1;
    break;
   }
   $109 = HEAP32[$name>>2]|0;
   $110 = (_strcmp($109,22112369)|0);
   $111 = ($110|0)!=(0);
   if (!($111)) {
    HEAP32[$0>>2] = 2;
    break;
   }
   $112 = HEAP32[$name>>2]|0;
   $113 = (_strcmp($112,22112385)|0);
   $114 = ($113|0)!=(0);
   if (!($114)) {
    HEAP32[$0>>2] = 4;
    break;
   }
   $115 = HEAP32[$name>>2]|0;
   $116 = (_strcmp($115,22112396)|0);
   $117 = ($116|0)!=(0);
   if (!($117)) {
    HEAP32[$0>>2] = 12;
    break;
   }
   $118 = HEAP32[$name>>2]|0;
   $119 = (_strcmp($118,22112415)|0);
   $120 = ($119|0)!=(0);
   if (!($120)) {
    HEAP32[$0>>2] = 13;
    break;
   }
   $121 = HEAP32[$name>>2]|0;
   $122 = (_strcmp($121,22112437)|0);
   $123 = ($122|0)!=(0);
   if (!($123)) {
    HEAP32[$0>>2] = 14;
    break;
   }
   $124 = HEAP32[$name>>2]|0;
   $125 = (_strcmp($124,22112456)|0);
   $126 = ($125|0)!=(0);
   if (!($126)) {
    HEAP32[$0>>2] = 7;
    break;
   }
   $127 = HEAP32[$name>>2]|0;
   $128 = (_strcmp($127,22112485)|0);
   $129 = ($128|0)!=(0);
   if (!($129)) {
    HEAP32[$0>>2] = 5;
    break;
   }
   $130 = HEAP32[$name>>2]|0;
   $131 = (_strcmp($130,22112502)|0);
   $132 = ($131|0)!=(0);
   if (!($132)) {
    HEAP32[$0>>2] = 8;
    break;
   }
   $133 = HEAP32[$name>>2]|0;
   $134 = (_strcmp($133,22112517)|0);
   $135 = ($134|0)!=(0);
   if (!($135)) {
    HEAP32[$0>>2] = 9;
    break;
   }
   $136 = HEAP32[$name>>2]|0;
   $137 = (_strcmp($136,22112532)|0);
   $138 = ($137|0)!=(0);
   if (!($138)) {
    HEAP32[$0>>2] = 2;
    break;
   }
   $139 = HEAP32[$name>>2]|0;
   $140 = (_strcmp($139,22112553)|0);
   $141 = ($140|0)!=(0);
   if (!($141)) {
    HEAP32[$0>>2] = 10;
    break;
   }
   $142 = HEAP32[$name>>2]|0;
   $143 = (_strcmp($142,22112573)|0);
   $144 = ($143|0)!=(0);
   if (!($144)) {
    HEAP32[$0>>2] = 11;
    break;
   }
   $145 = HEAP32[$name>>2]|0;
   $146 = (_strcmp($145,22112593)|0);
   $147 = ($146|0)!=(0);
   if (!($147)) {
    HEAP32[$0>>2] = 12;
    break;
   }
   $148 = HEAP32[$name>>2]|0;
   $149 = (_strcmp($148,22112619)|0);
   $150 = ($149|0)!=(0);
   if (!($150)) {
    HEAP32[$0>>2] = 2;
    break;
   }
   $151 = HEAP32[$name>>2]|0;
   $152 = (_strcmp($151,22112638)|0);
   $153 = ($152|0)!=(0);
   if (!($153)) {
    HEAP32[$0>>2] = 1;
    break;
   }
   $154 = HEAP32[$name>>2]|0;
   $155 = (_strcmp($154,22112650)|0);
   $156 = ($155|0)!=(0);
   if (!($156)) {
    HEAP32[$0>>2] = 1;
    break;
   }
   $157 = HEAP32[$name>>2]|0;
   $158 = (_strcmp($157,22112662)|0);
   $159 = ($158|0)!=(0);
   if (!($159)) {
    HEAP32[$0>>2] = 1;
    break;
   }
   $160 = HEAP32[$name>>2]|0;
   $161 = (_strcmp($160,22112674)|0);
   $162 = ($161|0)!=(0);
   if (!($162)) {
    HEAP32[$0>>2] = 1;
    break;
   }
   $163 = HEAP32[$name>>2]|0;
   $164 = (_strcmp($163,22112686)|0);
   $165 = ($164|0)!=(0);
   if (!($165)) {
    HEAP32[$0>>2] = 15;
    break;
   }
   $166 = HEAP32[$name>>2]|0;
   $167 = (_strcmp($166,22112698)|0);
   $168 = ($167|0)!=(0);
   if (!($168)) {
    HEAP32[$0>>2] = 13;
    break;
   }
   $169 = HEAP32[$name>>2]|0;
   $170 = (_strcmp($169,22112710)|0);
   $171 = ($170|0)!=(0);
   if (!($171)) {
    HEAP32[$0>>2] = 3;
    break;
   }
   $172 = HEAP32[$name>>2]|0;
   $173 = (_strcmp($172,22112722)|0);
   $174 = ($173|0)!=(0);
   if (!($174)) {
    HEAP32[$0>>2] = 1;
    break;
   }
   $175 = HEAP32[$name>>2]|0;
   $176 = (_strcmp($175,22112734)|0);
   $177 = ($176|0)!=(0);
   if (!($177)) {
    HEAP32[$0>>2] = 14;
    break;
   }
   $178 = HEAP32[$name>>2]|0;
   $179 = (_strcmp($178,22112747)|0);
   $180 = ($179|0)!=(0);
   if (!($180)) {
    HEAP32[$0>>2] = 15;
    break;
   }
   $181 = HEAP32[$name>>2]|0;
   $182 = (_strcmp($181,22112760)|0);
   $183 = ($182|0)!=(0);
   if (!($183)) {
    HEAP32[$0>>2] = 16;
    break;
   }
   $184 = HEAP32[$name>>2]|0;
   $185 = (_strcmp($184,22112773)|0);
   $186 = ($185|0)!=(0);
   if (!($186)) {
    HEAP32[$0>>2] = 17;
    break;
   }
   $187 = HEAP32[$name>>2]|0;
   $188 = (_strcmp($187,22112786)|0);
   $189 = ($188|0)!=(0);
   if (!($189)) {
    HEAP32[$0>>2] = 18;
    break;
   }
   $190 = HEAP32[$name>>2]|0;
   $191 = (_strcmp($190,22112799)|0);
   $192 = ($191|0)!=(0);
   if (!($192)) {
    HEAP32[$0>>2] = 19;
    break;
   }
   $193 = HEAP32[$name>>2]|0;
   $194 = (_strcmp($193,22112812)|0);
   $195 = ($194|0)!=(0);
   if (!($195)) {
    HEAP32[$0>>2] = 20;
    break;
   }
   $196 = HEAP32[$name>>2]|0;
   $197 = (_strcmp($196,22112825)|0);
   $198 = ($197|0)!=(0);
   if (!($198)) {
    HEAP32[$0>>2] = 21;
    break;
   }
   $199 = HEAP32[$name>>2]|0;
   $200 = (_strcmp($199,22112838)|0);
   $201 = ($200|0)!=(0);
   if (!($201)) {
    HEAP32[$0>>2] = 4;
    break;
   }
   $202 = HEAP32[$name>>2]|0;
   $203 = (_strcmp($202,22112857)|0);
   $204 = ($203|0)!=(0);
   if (!($204)) {
    HEAP32[$0>>2] = 5;
    break;
   }
   $205 = HEAP32[$name>>2]|0;
   $206 = (_strcmp($205,22112876)|0);
   $207 = ($206|0)!=(0);
   if (!($207)) {
    HEAP32[$0>>2] = 6;
    break;
   }
   $208 = HEAP32[$name>>2]|0;
   $209 = (_strcmp($208,22112895)|0);
   $210 = ($209|0)!=(0);
   if (!($210)) {
    HEAP32[$0>>2] = 16;
    break;
   }
   $211 = HEAP32[$name>>2]|0;
   $212 = (_strcmp($211,22112908)|0);
   $213 = ($212|0)!=(0);
   if (!($213)) {
    HEAP32[$0>>2] = 17;
    break;
   }
   $214 = HEAP32[$name>>2]|0;
   $215 = (_strcmp($214,22112926)|0);
   $216 = ($215|0)!=(0);
   if (!($216)) {
    HEAP32[$0>>2] = 18;
    break;
   }
   $217 = HEAP32[$name>>2]|0;
   $218 = (_strcmp($217,22112944)|0);
   $219 = ($218|0)!=(0);
   if (!($219)) {
    HEAP32[$0>>2] = 19;
    break;
   }
   $220 = HEAP32[$name>>2]|0;
   $221 = (_strcmp($220,22112962)|0);
   $222 = ($221|0)!=(0);
   if (!($222)) {
    HEAP32[$0>>2] = 20;
    break;
   }
   $223 = HEAP32[$name>>2]|0;
   $224 = (_strcmp($223,22112980)|0);
   $225 = ($224|0)!=(0);
   if (!($225)) {
    HEAP32[$0>>2] = 3;
    break;
   }
   $226 = HEAP32[$name>>2]|0;
   $227 = (_strcmp($226,22113000)|0);
   $228 = ($227|0)!=(0);
   if (!($228)) {
    HEAP32[$0>>2] = 3;
    break;
   }
   $229 = HEAP32[$name>>2]|0;
   $230 = (_strcmp($229,22111941)|0);
   $231 = ($230|0)!=(0);
   if (!($231)) {
    HEAP32[$0>>2] = 6;
    break;
   }
   $232 = HEAP32[$name>>2]|0;
   $233 = (_strcmp($232,22113018)|0);
   $234 = ($233|0)!=(0);
   if (!($234)) {
    HEAP32[$0>>2] = 1;
    break;
   }
   $235 = HEAP32[$name>>2]|0;
   $236 = (_strcmp($235,22113033)|0);
   $237 = ($236|0)!=(0);
   if (!($237)) {
    HEAP32[$0>>2] = 7;
    break;
   }
   $238 = HEAP32[$name>>2]|0;
   $239 = (_strcmp($238,22113054)|0);
   $240 = ($239|0)!=(0);
   if (!($240)) {
    HEAP32[$0>>2] = 8;
    break;
   }
   $241 = HEAP32[$name>>2]|0;
   $242 = (_strcmp($241,22113069)|0);
   $243 = ($242|0)!=(0);
   if (!($243)) {
    HEAP32[$0>>2] = 9;
    break;
   }
   $244 = HEAP32[$name>>2]|0;
   $245 = (_strcmp($244,22113087)|0);
   $246 = ($245|0)!=(0);
   if (!($246)) {
    HEAP32[$0>>2] = 2;
    break;
   }
   $247 = HEAP32[$name>>2]|0;
   $248 = (_strcmp($247,22113103)|0);
   $249 = ($248|0)!=(0);
   if (!($249)) {
    HEAP32[$0>>2] = 10;
    break;
   }
   $250 = HEAP32[$name>>2]|0;
   $251 = (_strcmp($250,22113122)|0);
   $252 = ($251|0)!=(0);
   if (!($252)) {
    HEAP32[$0>>2] = 22;
    break;
   }
   $253 = HEAP32[$name>>2]|0;
   $254 = (_strcmp($253,22113136)|0);
   $255 = ($254|0)!=(0);
   if (!($255)) {
    HEAP32[$0>>2] = 23;
    break;
   }
   $256 = HEAP32[$name>>2]|0;
   $257 = (_strcmp($256,22113151)|0);
   $258 = ($257|0)!=(0);
   if (!($258)) {
    HEAP32[$0>>2] = 7;
    break;
   }
   $259 = HEAP32[$name>>2]|0;
   $260 = (_strcmp($259,22111872)|0);
   $261 = ($260|0)!=(0);
   if (!($261)) {
    HEAP32[$0>>2] = 1;
    break;
   }
   $262 = HEAP32[$name>>2]|0;
   $263 = (_strcmp($262,22113162)|0);
   $264 = ($263|0)!=(0);
   if (!($264)) {
    HEAP32[$0>>2] = 3;
    break;
   }
   $265 = HEAP32[$name>>2]|0;
   $266 = (_strcmp($265,22111971)|0);
   $267 = ($266|0)!=(0);
   if (!($267)) {
    HEAP32[$0>>2] = 21;
    break;
   }
   $268 = HEAP32[$name>>2]|0;
   $269 = (_strcmp($268,22112001)|0);
   $270 = ($269|0)!=(0);
   if (!($270)) {
    HEAP32[$0>>2] = 22;
    break;
   }
   $271 = HEAP32[$name>>2]|0;
   $272 = (_strcmp($271,22113178)|0);
   $273 = ($272|0)!=(0);
   if (!($273)) {
    HEAP32[$0>>2] = 11;
    break;
   }
   $274 = HEAP32[$name>>2]|0;
   $275 = (_strcmp($274,22113205)|0);
   $276 = ($275|0)!=(0);
   if (!($276)) {
    HEAP32[$0>>2] = 4;
    break;
   }
   $277 = HEAP32[$name>>2]|0;
   $278 = (_strcmp($277,22113219)|0);
   $279 = ($278|0)!=(0);
   if (!($279)) {
    HEAP32[$0>>2] = 12;
    break;
   }
   $280 = HEAP32[$name>>2]|0;
   $281 = (_strcmp($280,22111907)|0);
   $282 = ($281|0)!=(0);
   if (!($282)) {
    HEAP32[$0>>2] = 5;
    break;
   }
   $283 = HEAP32[$name>>2]|0;
   $284 = (_strcmp($283,22113239)|0);
   $285 = ($284|0)!=(0);
   if (!($285)) {
    HEAP32[$0>>2] = 6;
    break;
   }
   $286 = HEAP32[$name>>2]|0;
   $287 = (_strcmp($286,22113257)|0);
   $288 = ($287|0)!=(0);
   if (!($288)) {
    HEAP32[$0>>2] = 8;
    break;
   }
   $289 = HEAP32[$name>>2]|0;
   $290 = (_strcmp($289,22113269)|0);
   $291 = ($290|0)!=(0);
   if (!($291)) {
    HEAP32[$0>>2] = 24;
    break;
   }
   $292 = HEAP32[$name>>2]|0;
   $293 = (_strcmp($292,22113290)|0);
   $294 = ($293|0)!=(0);
   if (!($294)) {
    HEAP32[$0>>2] = 23;
    break;
   }
   $295 = HEAP32[$name>>2]|0;
   $296 = (_strcmp($295,22113308)|0);
   $297 = ($296|0)!=(0);
   if (!($297)) {
    HEAP32[$0>>2] = 24;
    break;
   }
   $298 = HEAP32[$name>>2]|0;
   $299 = (_strcmp($298,22113326)|0);
   $300 = ($299|0)!=(0);
   if (!($300)) {
    HEAP32[$0>>2] = 25;
    break;
   }
   $301 = HEAP32[$name>>2]|0;
   $302 = (_strcmp($301,22113347)|0);
   $303 = ($302|0)!=(0);
   if (!($303)) {
    HEAP32[$0>>2] = 13;
    break;
   }
   $304 = HEAP32[$name>>2]|0;
   $305 = (_strcmp($304,22113373)|0);
   $306 = ($305|0)!=(0);
   if (!($306)) {
    HEAP32[$0>>2] = 2;
    break;
   }
   $307 = HEAP32[$name>>2]|0;
   $308 = (_strcmp($307,22113396)|0);
   $309 = ($308|0)!=(0);
   if (!($309)) {
    HEAP32[$0>>2] = 14;
    break;
   }
   $310 = HEAP32[$name>>2]|0;
   $311 = (_strcmp($310,22113434)|0);
   $312 = ($311|0)!=(0);
   if (!($312)) {
    HEAP32[$0>>2] = 9;
    break;
   }
   $313 = HEAP32[$name>>2]|0;
   $314 = (_strcmp($313,22113450)|0);
   $315 = ($314|0)!=(0);
   if (!($315)) {
    HEAP32[$0>>2] = 7;
    break;
   }
   $316 = HEAP32[$name>>2]|0;
   $317 = (_strcmp($316,22113465)|0);
   $318 = ($317|0)!=(0);
   if (!($318)) {
    HEAP32[$0>>2] = 25;
    break;
   }
   $319 = HEAP32[$name>>2]|0;
   $320 = (_strcmp($319,22113488)|0);
   $321 = ($320|0)!=(0);
   if (!($321)) {
    HEAP32[$0>>2] = 15;
    break;
   }
   $322 = HEAP32[$name>>2]|0;
   $323 = (_strcmp($322,22113501)|0);
   $324 = ($323|0)!=(0);
   if (!($324)) {
    HEAP32[$0>>2] = 26;
    break;
   }
   $325 = HEAP32[$name>>2]|0;
   $326 = (_strcmp($325,22113515)|0);
   $327 = ($326|0)!=(0);
   if (!($327)) {
    HEAP32[$0>>2] = 27;
    break;
   }
   $328 = HEAP32[$name>>2]|0;
   $329 = (_strcmp($328,22113529)|0);
   $330 = ($329|0)!=(0);
   if (!($330)) {
    HEAP32[$0>>2] = 1;
    break;
   }
   $331 = HEAP32[$name>>2]|0;
   $332 = (_strcmp($331,22113549)|0);
   $333 = ($332|0)!=(0);
   if (!($333)) {
    HEAP32[$0>>2] = 8;
    break;
   }
   $334 = HEAP32[$name>>2]|0;
   $335 = (_strcmp($334,22113569)|0);
   $336 = ($335|0)!=(0);
   if (!($336)) {
    HEAP32[$0>>2] = 16;
    break;
   }
   $337 = HEAP32[$name>>2]|0;
   $338 = (_strcmp($337,22113585)|0);
   $339 = ($338|0)!=(0);
   if (!($339)) {
    HEAP32[$0>>2] = 17;
    break;
   }
   $340 = HEAP32[$name>>2]|0;
   $341 = (_strcmp($340,22113603)|0);
   $342 = ($341|0)!=(0);
   if (!($342)) {
    HEAP32[$0>>2] = 26;
    break;
   }
   $343 = HEAP32[$name>>2]|0;
   $344 = (_strcmp($343,22113619)|0);
   $345 = ($344|0)!=(0);
   if (!($345)) {
    HEAP32[$0>>2] = 18;
    break;
   }
   $346 = HEAP32[$name>>2]|0;
   $347 = (_strcmp($346,22113634)|0);
   $348 = ($347|0)!=(0);
   if (!($348)) {
    HEAP32[$0>>2] = 9;
    break;
   }
   $349 = HEAP32[$name>>2]|0;
   $350 = (_strcmp($349,22113656)|0);
   $351 = ($350|0)!=(0);
   if (!($351)) {
    HEAP32[$0>>2] = 28;
    break;
   }
   $352 = HEAP32[$name>>2]|0;
   $353 = (_strcmp($352,22113674)|0);
   $354 = ($353|0)!=(0);
   if (!($354)) {
    HEAP32[$0>>2] = 29;
    break;
   }
   $355 = HEAP32[$name>>2]|0;
   $356 = (_strcmp($355,22113695)|0);
   $357 = ($356|0)!=(0);
   if (!($357)) {
    HEAP32[$0>>2] = 10;
    break;
   }
   $358 = HEAP32[$name>>2]|0;
   $359 = (_strcmp($358,22113713)|0);
   $360 = ($359|0)!=(0);
   if (!($360)) {
    HEAP32[$0>>2] = 11;
    break;
   }
   $361 = HEAP32[$name>>2]|0;
   $362 = (_strcmp($361,22113726)|0);
   $363 = ($362|0)!=(0);
   if (!($363)) {
    HEAP32[$0>>2] = 2;
    break;
   }
   $364 = HEAP32[$name>>2]|0;
   $365 = (_strcmp($364,22113741)|0);
   $366 = ($365|0)!=(0);
   if (!($366)) {
    HEAP32[$0>>2] = 12;
    break;
   }
   $367 = HEAP32[$name>>2]|0;
   $368 = (_strcmp($367,22113755)|0);
   $369 = ($368|0)!=(0);
   if (!($369)) {
    HEAP32[$0>>2] = 1;
    break;
   }
   $370 = HEAP32[$name>>2]|0;
   $371 = (_strcmp($370,22113765)|0);
   $372 = ($371|0)!=(0);
   if (!($372)) {
    HEAP32[$0>>2] = 1;
    break;
   }
   $373 = HEAP32[$name>>2]|0;
   $374 = (_strcmp($373,22113775)|0);
   $375 = ($374|0)!=(0);
   if (!($375)) {
    HEAP32[$0>>2] = 2;
    break;
   }
   $376 = HEAP32[$name>>2]|0;
   $377 = (_strcmp($376,22113797)|0);
   $378 = ($377|0)!=(0);
   if (!($378)) {
    HEAP32[$0>>2] = 13;
    break;
   }
   $379 = HEAP32[$name>>2]|0;
   $380 = (_strcmp($379,22113823)|0);
   $381 = ($380|0)!=(0);
   if (!($381)) {
    HEAP32[$0>>2] = 14;
    break;
   }
   $382 = HEAP32[$name>>2]|0;
   $383 = (_strcmp($382,22113850)|0);
   $384 = ($383|0)!=(0);
   if (!($384)) {
    HEAP32[$0>>2] = 27;
    break;
   }
   $385 = HEAP32[$name>>2]|0;
   $386 = (_strcmp($385,22113863)|0);
   $387 = ($386|0)!=(0);
   if (!($387)) {
    HEAP32[$0>>2] = 19;
    break;
   }
   $388 = HEAP32[$name>>2]|0;
   $389 = (_strcmp($388,22113878)|0);
   $390 = ($389|0)!=(0);
   if (!($390)) {
    HEAP32[$0>>2] = 3;
    break;
   }
   $391 = HEAP32[$name>>2]|0;
   $392 = (_strcmp($391,22113893)|0);
   $393 = ($392|0)!=(0);
   if (!($393)) {
    HEAP32[$0>>2] = 3;
    break;
   }
   $394 = HEAP32[$name>>2]|0;
   $395 = (_strcmp($394,22113917)|0);
   $396 = ($395|0)!=(0);
   if (!($396)) {
    HEAP32[$0>>2] = 2;
    break;
   }
   $397 = HEAP32[$name>>2]|0;
   $398 = (_strcmp($397,22113928)|0);
   $399 = ($398|0)!=(0);
   if (!($399)) {
    HEAP32[$0>>2] = 30;
    break;
   }
   $400 = HEAP32[$name>>2]|0;
   $401 = (_strcmp($400,22113950)|0);
   $402 = ($401|0)!=(0);
   if (!($402)) {
    HEAP32[$0>>2] = 20;
    break;
   }
   $403 = HEAP32[$name>>2]|0;
   $404 = (_strcmp($403,22113972)|0);
   $405 = ($404|0)!=(0);
   if (!($405)) {
    HEAP32[$0>>2] = 4;
    break;
   }
   $406 = HEAP32[$name>>2]|0;
   $407 = (_strcmp($406,22113996)|0);
   $408 = ($407|0)!=(0);
   if (!($408)) {
    HEAP32[$0>>2] = 4;
    break;
   }
   $409 = HEAP32[$name>>2]|0;
   $410 = (_strcmp($409,22114005)|0);
   $411 = ($410|0)!=(0);
   if (!($411)) {
    HEAP32[$0>>2] = 5;
    break;
   }
   $412 = HEAP32[$name>>2]|0;
   $413 = (_strcmp($412,22114013)|0);
   $414 = ($413|0)!=(0);
   if (!($414)) {
    HEAP32[$0>>2] = 1;
    break;
   }
   $415 = HEAP32[$name>>2]|0;
   $416 = (_strcmp($415,22114026)|0);
   $417 = ($416|0)!=(0);
   if (!($417)) {
    HEAP32[$0>>2] = 2;
    break;
   }
   $418 = HEAP32[$name>>2]|0;
   $419 = (_strcmp($418,22114040)|0);
   $420 = ($419|0)!=(0);
   if (!($420)) {
    HEAP32[$0>>2] = 15;
    break;
   }
   $421 = HEAP32[$name>>2]|0;
   $422 = (_strcmp($421,22114052)|0);
   $423 = ($422|0)!=(0);
   if (!($423)) {
    HEAP32[$0>>2] = 16;
    break;
   }
   $424 = HEAP32[$name>>2]|0;
   $425 = (_strcmp($424,22114061)|0);
   $426 = ($425|0)!=(0);
   if (!($426)) {
    HEAP32[$0>>2] = 17;
    break;
   }
   $427 = HEAP32[$name>>2]|0;
   $428 = (_strcmp($427,22114071)|0);
   $429 = ($428|0)!=(0);
   if (!($429)) {
    HEAP32[$0>>2] = 18;
    break;
   }
   $430 = HEAP32[$name>>2]|0;
   $431 = (_strcmp($430,22114083)|0);
   $432 = ($431|0)!=(0);
   if (!($432)) {
    HEAP32[$0>>2] = 19;
    break;
   }
   $433 = HEAP32[$name>>2]|0;
   $434 = (_strcmp($433,22114094)|0);
   $435 = ($434|0)!=(0);
   if (!($435)) {
    HEAP32[$0>>2] = 20;
    break;
   }
   $436 = HEAP32[$name>>2]|0;
   $437 = (_strcmp($436,22114102)|0);
   $438 = ($437|0)!=(0);
   if (!($438)) {
    HEAP32[$0>>2] = 3;
    break;
   }
   $439 = HEAP32[$name>>2]|0;
   $440 = (_strcmp($439,22114114)|0);
   $441 = ($440|0)!=(0);
   if (!($441)) {
    HEAP32[$0>>2] = 21;
    break;
   }
   $442 = HEAP32[$name>>2]|0;
   $443 = (_strcmp($442,22114129)|0);
   $444 = ($443|0)!=(0);
   if (!($444)) {
    HEAP32[$0>>2] = 22;
    break;
   }
   $445 = HEAP32[$name>>2]|0;
   $446 = (_strcmp($445,22114141)|0);
   $447 = ($446|0)!=(0);
   if (!($447)) {
    HEAP32[$0>>2] = 23;
    break;
   }
   $448 = HEAP32[$name>>2]|0;
   $449 = (_strcmp($448,22114155)|0);
   $450 = ($449|0)!=(0);
   if (!($450)) {
    HEAP32[$0>>2] = 10;
    break;
   }
   $451 = HEAP32[$name>>2]|0;
   $452 = (_strcmp($451,22114180)|0);
   $453 = ($452|0)!=(0);
   if (!($453)) {
    HEAP32[$0>>2] = 24;
    break;
   }
   $454 = HEAP32[$name>>2]|0;
   $455 = (_strcmp($454,22114197)|0);
   $456 = ($455|0)!=(0);
   if (!($456)) {
    HEAP32[$0>>2] = 25;
    break;
   }
   $457 = HEAP32[$name>>2]|0;
   $458 = (_strcmp($457,22114213)|0);
   $459 = ($458|0)!=(0);
   if (!($459)) {
    HEAP32[$0>>2] = 26;
    break;
   }
   $460 = HEAP32[$name>>2]|0;
   $461 = (_strcmp($460,22114229)|0);
   $462 = ($461|0)!=(0);
   if (!($462)) {
    HEAP32[$0>>2] = 11;
    break;
   }
   $463 = HEAP32[$name>>2]|0;
   $464 = (_strcmp($463,22114241)|0);
   $465 = ($464|0)!=(0);
   if (!($465)) {
    HEAP32[$0>>2] = 31;
    break;
   }
   $466 = HEAP32[$name>>2]|0;
   $467 = (_strcmp($466,22114253)|0);
   $468 = ($467|0)!=(0);
   if (!($468)) {
    HEAP32[$0>>2] = 32;
    break;
   }
   $469 = HEAP32[$name>>2]|0;
   $470 = (_strcmp($469,22114277)|0);
   $471 = ($470|0)!=(0);
   if (!($471)) {
    HEAP32[$0>>2] = 1;
    break;
   }
   $472 = HEAP32[$name>>2]|0;
   $473 = (_strcmp($472,22114290)|0);
   $474 = ($473|0)!=(0);
   if (!($474)) {
    HEAP32[$0>>2] = 2;
    break;
   }
   $475 = HEAP32[$name>>2]|0;
   $476 = (_strcmp($475,22114304)|0);
   $477 = ($476|0)!=(0);
   if (!($477)) {
    HEAP32[$0>>2] = 33;
    break;
   }
   $478 = HEAP32[$name>>2]|0;
   $479 = (_strcmp($478,22114326)|0);
   $480 = ($479|0)!=(0);
   if (!($480)) {
    HEAP32[$0>>2] = 34;
    break;
   }
   $481 = HEAP32[$name>>2]|0;
   $482 = (_strcmp($481,22114333)|0);
   $483 = ($482|0)!=(0);
   if (!($483)) {
    HEAP32[$0>>2] = 3;
    break;
   }
   $484 = HEAP32[$name>>2]|0;
   $485 = (_strcmp($484,22114349)|0);
   $486 = ($485|0)!=(0);
   if (!($486)) {
    HEAP32[$0>>2] = 2;
    break;
   }
   $487 = HEAP32[$name>>2]|0;
   $488 = (_strcmp($487,22114366)|0);
   $489 = ($488|0)!=(0);
   if (!($489)) {
    HEAP32[$0>>2] = 1;
    break;
   }
   $490 = HEAP32[$name>>2]|0;
   $491 = (_strcmp($490,22114383)|0);
   $492 = ($491|0)!=(0);
   if (!($492)) {
    HEAP32[$0>>2] = 28;
    break;
   }
   $493 = HEAP32[$name>>2]|0;
   $494 = (_strcmp($493,22114399)|0);
   $495 = ($494|0)!=(0);
   if (!($495)) {
    HEAP32[$0>>2] = 1;
    break;
   }
   $496 = HEAP32[$name>>2]|0;
   $497 = (_strcmp($496,22114415)|0);
   $498 = ($497|0)!=(0);
   if (!($498)) {
    HEAP32[$0>>2] = 2;
    break;
   }
   $499 = HEAP32[$name>>2]|0;
   $500 = (_strcmp($499,22114432)|0);
   $501 = ($500|0)!=(0);
   if (!($501)) {
    HEAP32[$0>>2] = 29;
    break;
   }
   $502 = HEAP32[$name>>2]|0;
   $503 = (_strcmp($502,22114446)|0);
   $504 = ($503|0)!=(0);
   if (!($504)) {
    HEAP32[$0>>2] = 30;
    break;
   }
   $505 = HEAP32[$name>>2]|0;
   $506 = (_strcmp($505,22114458)|0);
   $507 = ($506|0)!=(0);
   if (!($507)) {
    HEAP32[$0>>2] = 21;
    break;
   }
   $508 = HEAP32[$name>>2]|0;
   $509 = (_strcmp($508,22114469)|0);
   $510 = ($509|0)!=(0);
   if (!($510)) {
    HEAP32[$0>>2] = 2;
    break;
   }
   $511 = HEAP32[$name>>2]|0;
   $512 = (_strcmp($511,22114482)|0);
   $513 = ($512|0)!=(0);
   if (!($513)) {
    HEAP32[$0>>2] = 22;
    break;
   }
   $514 = HEAP32[$name>>2]|0;
   $515 = (_strcmp($514,22114492)|0);
   $516 = ($515|0)!=(0);
   if (!($516)) {
    HEAP32[$0>>2] = 2;
    break;
   }
   $517 = HEAP32[$name>>2]|0;
   $518 = (_strcmp($517,22114509)|0);
   $519 = ($518|0)!=(0);
   if (!($519)) {
    HEAP32[$0>>2] = 23;
    break;
   }
   $520 = HEAP32[$name>>2]|0;
   $521 = (_strcmp($520,22114521)|0);
   $522 = ($521|0)!=(0);
   if (!($522)) {
    HEAP32[$0>>2] = 24;
    break;
   }
   $523 = HEAP32[$name>>2]|0;
   $524 = (_strcmp($523,22114543)|0);
   $525 = ($524|0)!=(0);
   if (!($525)) {
    HEAP32[$0>>2] = 25;
    break;
   }
   $526 = HEAP32[$name>>2]|0;
   $527 = (_strcmp($526,22114563)|0);
   $528 = ($527|0)!=(0);
   if (!($528)) {
    HEAP32[$0>>2] = 3;
    break;
   }
   $529 = HEAP32[$name>>2]|0;
   $530 = (_strcmp($529,22114576)|0);
   $531 = ($530|0)!=(0);
   if (!($531)) {
    HEAP32[$0>>2] = 26;
    break;
   }
   $532 = HEAP32[$name>>2]|0;
   $533 = (_strcmp($532,22114598)|0);
   $534 = ($533|0)!=(0);
   if (!($534)) {
    HEAP32[$0>>2] = 27;
    break;
   }
   $535 = HEAP32[$name>>2]|0;
   $536 = (_strcmp($535,22114618)|0);
   $537 = ($536|0)!=(0);
   if (!($537)) {
    HEAP32[$0>>2] = 2;
    break;
   }
   $538 = HEAP32[$name>>2]|0;
   $539 = (_strcmp($538,22114635)|0);
   $540 = ($539|0)!=(0);
   if (!($540)) {
    HEAP32[$0>>2] = 2;
    break;
   }
   $541 = HEAP32[$name>>2]|0;
   $542 = (_strcmp($541,22114652)|0);
   $543 = ($542|0)!=(0);
   if (!($543)) {
    HEAP32[$0>>2] = 3;
    break;
   }
   $544 = HEAP32[$name>>2]|0;
   $545 = (_strcmp($544,22114672)|0);
   $546 = ($545|0)!=(0);
   if ($546) {
    $547 = HEAP32[$1>>2]|0;
    $548 = HEAP32[$name>>2]|0;
    $549 = _emscripten_asm_const_2(0, ($547|0), ($548|0))|0;
    HEAP32[$0>>2] = 0;
    break;
   } else {
    HEAP32[$0>>2] = 35;
    break;
   }
  } else {
   HEAP32[$0>>2] = 3;
  }
 } while(0);
 $550 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($550|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 $1 = (($c) + -9)|0;
 $2 = ($1>>>0)<(5);
 $3 = $0 | $2;
 $4 = $3&1;
 return ($4|0);
}
function _strerror($e) {
 $e = $e|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $i$03 = 0;
 while(1) {
  $1 = (22114788 + ($i$03)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = ($3|0)==($e|0);
  if ($4) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $5 = (($i$03) + 1)|0;
  $6 = ($5|0)==(87);
  if ($6) {
   $i$12 = 87;$s$01 = 22114876;
   label = 5;
   break;
  } else {
   $i$03 = $5;
  }
 }
 if ((label|0) == 2) {
  $0 = ($i$03$lcssa|0)==(0);
  if ($0) {
   $s$0$lcssa = 22114876;
  } else {
   $i$12 = $i$03$lcssa;$s$01 = 22114876;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $s$1 = $s$01;
   while(1) {
    $7 = HEAP8[$s$1>>0]|0;
    $8 = ($7<<24>>24)==(0);
    $9 = ((($s$1)) + 1|0);
    if ($8) {
     $$lcssa = $9;
     break;
    } else {
     $s$1 = $9;
    }
   }
   $10 = (($i$12) + -1)|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $s$0$lcssa = $$lcssa;
    break;
   } else {
    $i$12 = $10;$s$01 = $$lcssa;
    label = 5;
   }
  }
 }
 return ($s$0$lcssa|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[22105680>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 22105936;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 60|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$0 = 0.0, $$0$i27 = 0.0, $$010$i = 0, $$07$i = 0, $$0710$i = 0, $$0711$i = 0, $$09$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$11$i = 0, $$18$i = 0, $$2$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3105$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa = 0, $$lcssa256 = 0;
 var $$lcssa256$lcssa = 0, $$lcssa257 = 0, $$lcssa257$lcssa = 0, $$lcssa263 = 0, $$lcssa264 = 0, $$lcssa265 = 0, $$lcssa275 = 0, $$lnz$0$i = 0, $$neg32$i = 0, $$not$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0, $$pre$i17 = 0, $$pre$phi42$iZ2D = 0.0, $$pre41$i = 0.0, $$promoted$i = 0, $$sink$off0$i = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0.0, $281 = 0.0, $282 = 0.0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0;
 var $424 = 0.0, $425 = 0.0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0.0;
 var $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0.0, $454 = 0.0, $455 = 0.0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0;
 var $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0.0, $466 = 0.0, $467 = 0.0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0;
 var $479 = 0.0, $48 = 0, $480 = 0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0.0, $492 = 0.0, $493 = 0, $494 = 0, $495 = 0, $496 = 0;
 var $497 = 0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0.0, $501 = 0, $502 = 0, $503 = 0, $504 = 0.0, $505 = 0.0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0.0, $510 = 0, $511 = 0, $512 = 0, $513 = 0;
 var $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0.0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0;
 var $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0;
 var $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0;
 var $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0;
 var $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0;
 var $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0.0, $62 = 0, $620 = 0, $621 = 0;
 var $622 = 0, $623 = 0, $624 = 0.0, $625 = 0.0, $626 = 0.0, $627 = 0, $628 = 0.0, $629 = 0.0, $63 = 0, $630 = 0.0, $631 = 0.0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0;
 var $640 = 0, $641 = 0, $642 = 0.0, $643 = 0.0, $644 = 0.0, $645 = 0, $646 = 0.0, $647 = 0.0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0.0, $652 = 0.0, $653 = 0.0, $654 = 0.0, $655 = 0, $656 = 0, $657 = 0.0, $658 = 0;
 var $659 = 0.0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0.0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0.0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0;
 var $677 = 0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0.0, $684 = 0, $685 = 0, $686 = 0.0, $687 = 0.0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0;
 var $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0;
 var $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0$lcssa151$i = 0, $a$085$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph38$i = 0, $a$3$i = 0, $a$3$i$lcssa248 = 0, $a$3$i249 = 0, $a$3$ph$i = 0, $a$3$ph157$i = 0, $a$478$i = 0, $a$5$i = 0, $a$5$i$lcssa = 0, $a$5$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i25 = 0.0, $bits$0$ph = 0, $brmerge$i28 = 0;
 var $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$179 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$377 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$087$i = 0, $carry1$0$i = 0, $carry1$1$i = 0, $carry1$1$i$lcssa = 0, $carry1$1$i$lcssa$lcssa = 0, $carry3$081$i = 0, $cond$i = 0, $d$0$i = 0;
 var $denormal$0$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$i19 = 0, $e2$0$ph$i = 0, $e2$1$i = 0, $e2$1$i246 = 0, $e2$1$ph$i = 0, $e2$1$ph156$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i$lcssa242 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa273 = 0;
 var $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3101$i = 0, $gotdig$3101$i$lcssa = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i14 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1102$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$078 = 0;
 var $i$1 = 0, $i$276 = 0, $i$3 = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0104$i = 0, $j$0104$i$lcssa = 0, $j$067$i = 0, $j$068$i = 0, $j$069$i = 0, $j$2$i = 0, $j$394$i = 0, $k$0$lcssa$i = 0, $k$0103$i = 0, $k$0103$i$lcssa = 0, $k$063$i = 0, $k$064$i = 0, $k$065$i = 0, $k$2$i = 0;
 var $k$3$i = 0, $k$486$i = 0, $k$5$i = 0, $k$5$in$i = 0, $k$5$z$2$i = 0, $k$679$i = 0, $lnz$0$lcssa$i = 0, $lnz$0100$i = 0, $lnz$0100$i$lcssa = 0, $lnz$057$i = 0, $lnz$058$i = 0, $lnz$059$i = 0, $lnz$2$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i16 = 0, $or$cond13$i = 0, $or$cond15$i = 0, $or$cond16$i = 0, $or$cond17$i = 0;
 var $or$cond182$i = 0, $or$cond19$i = 0, $or$cond20$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond5 = 0, $or$cond6$i = 0, $or$cond7 = 0, $or$cond8$i = 0, $or$cond9 = 0, $or$cond9$i = 0, $rp$0$lcssa152$i = 0, $rp$084$i = 0, $rp$1$i18 = 0, $rp$1$i18$lcssa = 0, $rp$2$ph36$i = 0, $rp$3$ph$i = 0, $rp$3$ph34$i = 0, $rp$477$i = 0, $rp$5$i = 0;
 var $rp$5$i$lcssa = 0, $rp$5$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$324$i = 0, $x$4$lcssa$i = 0, $x$419$i = 0, $x$5$i = 0, $x$6$i = 0, $x$i = 0, $y$0$i = 0.0;
 var $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i24 = 0.0, $y$2$i = 0.0, $y$2$i26 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$320$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$i = 0, $z$1$ph37$i = 0, $z$2$i = 0, $z$3$i = 0, $z$3$i$lcssa = 0, $z$3$i$lcssa$lcssa = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$7$1$i = 0;
 var $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0;
 $x$i = sp;
 switch ($prec|0) {
 case 0:  {
  $bits$0$ph = 24;$emin$0$ph = -149;
  label = 4;
  break;
 }
 case 1:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 case 2:  {
  $bits$0$ph = 53;$emin$0$ph = -1074;
  label = 4;
  break;
 }
 default: {
  $$0 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $0 = ((($f)) + 4|0);
   $1 = ((($f)) + 100|0);
   while(1) {
    $2 = HEAP32[$0>>2]|0;
    $3 = HEAP32[$1>>2]|0;
    $4 = ($2>>>0)<($3>>>0);
    if ($4) {
     $5 = ((($2)) + 1|0);
     HEAP32[$0>>2] = $5;
     $6 = HEAP8[$2>>0]|0;
     $7 = $6&255;
     $9 = $7;
    } else {
     $8 = (___shgetc($f)|0);
     $9 = $8;
    }
    $10 = (_isspace($9)|0);
    $11 = ($10|0)==(0);
    if ($11) {
     $$lcssa275 = $9;
     break;
    }
   }
   $12 = ($$lcssa275|0)==(45);
   L13: do {
    switch ($$lcssa275|0) {
    case 43: case 45:  {
     $13 = $12&1;
     $14 = $13 << 1;
     $15 = (1 - ($14))|0;
     $16 = HEAP32[$0>>2]|0;
     $17 = HEAP32[$1>>2]|0;
     $18 = ($16>>>0)<($17>>>0);
     if ($18) {
      $19 = ((($16)) + 1|0);
      HEAP32[$0>>2] = $19;
      $20 = HEAP8[$16>>0]|0;
      $21 = $20&255;
      $c$0 = $21;$sign$0 = $15;
      break L13;
     } else {
      $22 = (___shgetc($f)|0);
      $c$0 = $22;$sign$0 = $15;
      break L13;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa275;$sign$0 = 1;
    }
    }
   } while(0);
   $c$179 = $c$0;$i$078 = 0;
   while(1) {
    $23 = $c$179 | 32;
    $24 = (22116680 + ($i$078)|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25 << 24 >> 24;
    $27 = ($23|0)==($26|0);
    if (!($27)) {
     $c$1$lcssa = $c$179;$i$0$lcssa = $i$078;
     break;
    }
    $28 = ($i$078>>>0)<(7);
    do {
     if ($28) {
      $29 = HEAP32[$0>>2]|0;
      $30 = HEAP32[$1>>2]|0;
      $31 = ($29>>>0)<($30>>>0);
      if ($31) {
       $32 = ((($29)) + 1|0);
       HEAP32[$0>>2] = $32;
       $33 = HEAP8[$29>>0]|0;
       $34 = $33&255;
       $c$2 = $34;
       break;
      } else {
       $35 = (___shgetc($f)|0);
       $c$2 = $35;
       break;
      }
     } else {
      $c$2 = $c$179;
     }
    } while(0);
    $36 = (($i$078) + 1)|0;
    $37 = ($36>>>0)<(8);
    if ($37) {
     $c$179 = $c$2;$i$078 = $36;
    } else {
     $c$1$lcssa = $c$2;$i$0$lcssa = $36;
     break;
    }
   }
   L29: do {
    switch ($i$0$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $38 = ($i$0$lcssa>>>0)>(3);
     $39 = ($pok|0)!=(0);
     $or$cond5 = $39 & $38;
     if ($or$cond5) {
      $40 = ($i$0$lcssa|0)==(8);
      if ($40) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $53 = ($i$0$lcssa|0)==(0);
     L34: do {
      if ($53) {
       $c$377 = $c$1$lcssa;$i$276 = 0;
       while(1) {
        $54 = $c$377 | 32;
        $55 = (22118523 + ($i$276)|0);
        $56 = HEAP8[$55>>0]|0;
        $57 = $56 << 24 >> 24;
        $58 = ($54|0)==($57|0);
        if (!($58)) {
         $c$5 = $c$377;$i$3 = $i$276;
         break L34;
        }
        $59 = ($i$276>>>0)<(2);
        do {
         if ($59) {
          $60 = HEAP32[$0>>2]|0;
          $61 = HEAP32[$1>>2]|0;
          $62 = ($60>>>0)<($61>>>0);
          if ($62) {
           $63 = ((($60)) + 1|0);
           HEAP32[$0>>2] = $63;
           $64 = HEAP8[$60>>0]|0;
           $65 = $64&255;
           $c$4 = $65;
           break;
          } else {
           $66 = (___shgetc($f)|0);
           $c$4 = $66;
           break;
          }
         } else {
          $c$4 = $c$377;
         }
        } while(0);
        $67 = (($i$276) + 1)|0;
        $68 = ($67>>>0)<(3);
        if ($68) {
         $c$377 = $c$4;$i$276 = $67;
        } else {
         $c$5 = $c$4;$i$3 = $67;
         break;
        }
       }
      } else {
       $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
      }
     } while(0);
     switch ($i$3|0) {
     case 3:  {
      $69 = HEAP32[$0>>2]|0;
      $70 = HEAP32[$1>>2]|0;
      $71 = ($69>>>0)<($70>>>0);
      if ($71) {
       $72 = ((($69)) + 1|0);
       HEAP32[$0>>2] = $72;
       $73 = HEAP8[$69>>0]|0;
       $74 = $73&255;
       $76 = $74;
      } else {
       $75 = (___shgetc($f)|0);
       $76 = $75;
      }
      $77 = ($76|0)==(40);
      if ($77) {
       $i$4 = 1;
      } else {
       $78 = HEAP32[$1>>2]|0;
       $79 = ($78|0)==(0|0);
       if ($79) {
        $$0 = nan;
        break L4;
       }
       $80 = HEAP32[$0>>2]|0;
       $81 = ((($80)) + -1|0);
       HEAP32[$0>>2] = $81;
       $$0 = nan;
       break L4;
      }
      while(1) {
       $82 = HEAP32[$0>>2]|0;
       $83 = HEAP32[$1>>2]|0;
       $84 = ($82>>>0)<($83>>>0);
       if ($84) {
        $85 = ((($82)) + 1|0);
        HEAP32[$0>>2] = $85;
        $86 = HEAP8[$82>>0]|0;
        $87 = $86&255;
        $90 = $87;
       } else {
        $88 = (___shgetc($f)|0);
        $90 = $88;
       }
       $89 = (($90) + -48)|0;
       $91 = ($89>>>0)<(10);
       $92 = (($90) + -65)|0;
       $93 = ($92>>>0)<(26);
       $or$cond = $91 | $93;
       if (!($or$cond)) {
        $94 = (($90) + -97)|0;
        $95 = ($94>>>0)<(26);
        $96 = ($90|0)==(95);
        $or$cond7 = $96 | $95;
        if (!($or$cond7)) {
         $$lcssa = $90;$i$4$lcssa = $i$4;
         break;
        }
       }
       $108 = (($i$4) + 1)|0;
       $i$4 = $108;
      }
      $97 = ($$lcssa|0)==(41);
      if ($97) {
       $$0 = nan;
       break L4;
      }
      $98 = HEAP32[$1>>2]|0;
      $99 = ($98|0)==(0|0);
      if (!($99)) {
       $100 = HEAP32[$0>>2]|0;
       $101 = ((($100)) + -1|0);
       HEAP32[$0>>2] = $101;
      }
      if (!($39)) {
       $103 = (___errno_location()|0);
       HEAP32[$103>>2] = 22;
       ___shlim($f,0);
       $$0 = 0.0;
       break L4;
      }
      $102 = ($i$4$lcssa|0)==(0);
      if ($102) {
       $$0 = nan;
       break L4;
      } else {
       $$in = $i$4$lcssa;
      }
      while(1) {
       $104 = (($$in) + -1)|0;
       if (!($99)) {
        $105 = HEAP32[$0>>2]|0;
        $106 = ((($105)) + -1|0);
        HEAP32[$0>>2] = $106;
       }
       $107 = ($104|0)==(0);
       if ($107) {
        $$0 = nan;
        break L4;
       } else {
        $$in = $104;
       }
      }
      break;
     }
     case 0:  {
      $114 = ($c$5|0)==(48);
      do {
       if ($114) {
        $115 = HEAP32[$0>>2]|0;
        $116 = HEAP32[$1>>2]|0;
        $117 = ($115>>>0)<($116>>>0);
        if ($117) {
         $118 = ((($115)) + 1|0);
         HEAP32[$0>>2] = $118;
         $119 = HEAP8[$115>>0]|0;
         $120 = $119&255;
         $123 = $120;
        } else {
         $121 = (___shgetc($f)|0);
         $123 = $121;
        }
        $122 = $123 | 32;
        $124 = ($122|0)==(120);
        if (!($124)) {
         $326 = HEAP32[$1>>2]|0;
         $327 = ($326|0)==(0|0);
         if ($327) {
          $c$6 = 48;
          break;
         }
         $328 = HEAP32[$0>>2]|0;
         $329 = ((($328)) + -1|0);
         HEAP32[$0>>2] = $329;
         $c$6 = 48;
         break;
        }
        $125 = HEAP32[$0>>2]|0;
        $126 = HEAP32[$1>>2]|0;
        $127 = ($125>>>0)<($126>>>0);
        if ($127) {
         $128 = ((($125)) + 1|0);
         HEAP32[$0>>2] = $128;
         $129 = HEAP8[$125>>0]|0;
         $130 = $129&255;
         $c$0$i = $130;$gotdig$0$i = 0;
        } else {
         $131 = (___shgetc($f)|0);
         $c$0$i = $131;$gotdig$0$i = 0;
        }
        L94: while(1) {
         switch ($c$0$i|0) {
         case 46:  {
          $gotdig$0$i$lcssa242 = $gotdig$0$i;
          label = 74;
          break L94;
          break;
         }
         case 48:  {
          break;
         }
         default: {
          $168 = 0;$170 = 0;$694 = 0;$695 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
          break L94;
         }
         }
         $132 = HEAP32[$0>>2]|0;
         $133 = HEAP32[$1>>2]|0;
         $134 = ($132>>>0)<($133>>>0);
         if ($134) {
          $135 = ((($132)) + 1|0);
          HEAP32[$0>>2] = $135;
          $136 = HEAP8[$132>>0]|0;
          $137 = $136&255;
          $c$0$i = $137;$gotdig$0$i = 1;
          continue;
         } else {
          $138 = (___shgetc($f)|0);
          $c$0$i = $138;$gotdig$0$i = 1;
          continue;
         }
        }
        if ((label|0) == 74) {
         $139 = HEAP32[$0>>2]|0;
         $140 = HEAP32[$1>>2]|0;
         $141 = ($139>>>0)<($140>>>0);
         if ($141) {
          $142 = ((($139)) + 1|0);
          HEAP32[$0>>2] = $142;
          $143 = HEAP8[$139>>0]|0;
          $144 = $143&255;
          $c$1$ph$i = $144;
         } else {
          $145 = (___shgetc($f)|0);
          $c$1$ph$i = $145;
         }
         $146 = ($c$1$ph$i|0)==(48);
         if ($146) {
          $154 = 0;$155 = 0;
          while(1) {
           $147 = HEAP32[$0>>2]|0;
           $148 = HEAP32[$1>>2]|0;
           $149 = ($147>>>0)<($148>>>0);
           if ($149) {
            $150 = ((($147)) + 1|0);
            HEAP32[$0>>2] = $150;
            $151 = HEAP8[$147>>0]|0;
            $152 = $151&255;
            $158 = $152;
           } else {
            $153 = (___shgetc($f)|0);
            $158 = $153;
           }
           $156 = (_i64Add(($154|0),($155|0),-1,-1)|0);
           $157 = tempRet0;
           $159 = ($158|0)==(48);
           if ($159) {
            $154 = $156;$155 = $157;
           } else {
            $168 = 0;$170 = 0;$694 = $156;$695 = $157;$c$2$i = $158;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
            break;
           }
          }
         } else {
          $168 = 0;$170 = 0;$694 = 0;$695 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i$lcssa242;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
         }
        }
        while(1) {
         $160 = (($c$2$i) + -48)|0;
         $161 = ($160>>>0)<(10);
         $$pre$i = $c$2$i | 32;
         if ($161) {
          label = 86;
         } else {
          $162 = (($$pre$i) + -97)|0;
          $163 = ($162>>>0)<(6);
          $164 = ($c$2$i|0)==(46);
          $or$cond6$i = $164 | $163;
          if (!($or$cond6$i)) {
           $212 = $694;$213 = $170;$215 = $695;$216 = $168;$c$2$lcssa$i = $c$2$i;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
           break;
          }
          if ($164) {
           $165 = ($gotrad$0$i|0)==(0);
           if ($165) {
            $696 = $170;$697 = $168;$698 = $170;$699 = $168;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           } else {
            $212 = $694;$213 = $170;$215 = $695;$216 = $168;$c$2$lcssa$i = 46;$gotdig$2$i$lcssa = $gotdig$2$i;$gotrad$0$i$lcssa = $gotrad$0$i;$x$0$i$lcssa = $x$0$i;$y$0$i$lcssa = $y$0$i;
            break;
           }
          } else {
           label = 86;
          }
         }
         if ((label|0) == 86) {
          label = 0;
          $166 = ($c$2$i|0)>(57);
          $167 = (($$pre$i) + -87)|0;
          $d$0$i = $166 ? $167 : $160;
          $169 = ($168|0)<(0);
          $171 = ($170>>>0)<(8);
          $172 = ($168|0)==(0);
          $173 = $172 & $171;
          $174 = $169 | $173;
          do {
           if ($174) {
            $175 = $x$0$i << 4;
            $176 = (($d$0$i) + ($175))|0;
            $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $176;$y$1$i = $y$0$i;
           } else {
            $177 = ($168|0)<(0);
            $178 = ($170>>>0)<(14);
            $179 = ($168|0)==(0);
            $180 = $179 & $178;
            $181 = $177 | $180;
            if ($181) {
             $182 = (+($d$0$i|0));
             $183 = $scale$0$i * 0.0625;
             $184 = $183 * $182;
             $185 = $y$0$i + $184;
             $gottail$1$i = $gottail$0$i;$scale$1$i = $183;$x$1$i = $x$0$i;$y$1$i = $185;
             break;
            }
            $186 = ($d$0$i|0)==(0);
            $187 = ($gottail$0$i|0)!=(0);
            $or$cond$i = $187 | $186;
            if ($or$cond$i) {
             $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
            } else {
             $188 = $scale$0$i * 0.5;
             $189 = $y$0$i + $188;
             $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $189;
            }
           }
          } while(0);
          $190 = (_i64Add(($170|0),($168|0),1,0)|0);
          $191 = tempRet0;
          $696 = $694;$697 = $695;$698 = $190;$699 = $191;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
         }
         $192 = HEAP32[$0>>2]|0;
         $193 = HEAP32[$1>>2]|0;
         $194 = ($192>>>0)<($193>>>0);
         if ($194) {
          $195 = ((($192)) + 1|0);
          HEAP32[$0>>2] = $195;
          $196 = HEAP8[$192>>0]|0;
          $197 = $196&255;
          $168 = $699;$170 = $698;$694 = $696;$695 = $697;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         } else {
          $198 = (___shgetc($f)|0);
          $168 = $699;$170 = $698;$694 = $696;$695 = $697;$c$2$i = $198;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
          continue;
         }
        }
        $199 = ($gotdig$2$i$lcssa|0)==(0);
        if ($199) {
         $200 = HEAP32[$1>>2]|0;
         $201 = ($200|0)==(0|0);
         if (!($201)) {
          $202 = HEAP32[$0>>2]|0;
          $203 = ((($202)) + -1|0);
          HEAP32[$0>>2] = $203;
         }
         $204 = ($pok|0)==(0);
         if ($204) {
          ___shlim($f,0);
         } else {
          if (!($201)) {
           $205 = HEAP32[$0>>2]|0;
           $206 = ((($205)) + -1|0);
           HEAP32[$0>>2] = $206;
           $207 = ($gotrad$0$i$lcssa|0)==(0);
           if (!($207)) {
            $208 = ((($205)) + -2|0);
            HEAP32[$0>>2] = $208;
           }
          }
         }
         $209 = (+($sign$0|0));
         $210 = $209 * 0.0;
         $$0 = $210;
         break L4;
        }
        $211 = ($gotrad$0$i$lcssa|0)==(0);
        $214 = $211 ? $213 : $212;
        $217 = $211 ? $216 : $215;
        $218 = ($216|0)<(0);
        $219 = ($213>>>0)<(8);
        $220 = ($216|0)==(0);
        $221 = $220 & $219;
        $222 = $218 | $221;
        if ($222) {
         $224 = $213;$225 = $216;$x$324$i = $x$0$i$lcssa;
         while(1) {
          $223 = $x$324$i << 4;
          $226 = (_i64Add(($224|0),($225|0),1,0)|0);
          $227 = tempRet0;
          $228 = ($227|0)<(0);
          $229 = ($226>>>0)<(8);
          $230 = ($227|0)==(0);
          $231 = $230 & $229;
          $232 = $228 | $231;
          if ($232) {
           $224 = $226;$225 = $227;$x$324$i = $223;
          } else {
           $x$3$lcssa$i = $223;
           break;
          }
         }
        } else {
         $x$3$lcssa$i = $x$0$i$lcssa;
        }
        $233 = $c$2$lcssa$i | 32;
        $234 = ($233|0)==(112);
        if ($234) {
         $235 = (_scanexp($f,$pok)|0);
         $236 = tempRet0;
         $237 = ($235|0)==(0);
         $238 = ($236|0)==(-2147483648);
         $239 = $237 & $238;
         if ($239) {
          $240 = ($pok|0)==(0);
          if ($240) {
           ___shlim($f,0);
           $$0 = 0.0;
           break L4;
          }
          $241 = HEAP32[$1>>2]|0;
          $242 = ($241|0)==(0|0);
          if ($242) {
           $253 = 0;$254 = 0;
          } else {
           $243 = HEAP32[$0>>2]|0;
           $244 = ((($243)) + -1|0);
           HEAP32[$0>>2] = $244;
           $253 = 0;$254 = 0;
          }
         } else {
          $253 = $235;$254 = $236;
         }
        } else {
         $245 = HEAP32[$1>>2]|0;
         $246 = ($245|0)==(0|0);
         if ($246) {
          $253 = 0;$254 = 0;
         } else {
          $247 = HEAP32[$0>>2]|0;
          $248 = ((($247)) + -1|0);
          HEAP32[$0>>2] = $248;
          $253 = 0;$254 = 0;
         }
        }
        $249 = (_bitshift64Shl(($214|0),($217|0),2)|0);
        $250 = tempRet0;
        $251 = (_i64Add(($249|0),($250|0),-32,-1)|0);
        $252 = tempRet0;
        $255 = (_i64Add(($251|0),($252|0),($253|0),($254|0))|0);
        $256 = tempRet0;
        $257 = ($x$3$lcssa$i|0)==(0);
        if ($257) {
         $258 = (+($sign$0|0));
         $259 = $258 * 0.0;
         $$0 = $259;
         break L4;
        }
        $260 = (0 - ($emin$0$ph))|0;
        $261 = ($256|0)>(0);
        $262 = ($255>>>0)>($260>>>0);
        $263 = ($256|0)==(0);
        $264 = $263 & $262;
        $265 = $261 | $264;
        if ($265) {
         $266 = (___errno_location()|0);
         HEAP32[$266>>2] = 34;
         $267 = (+($sign$0|0));
         $268 = $267 * 1.7976931348623157E+308;
         $269 = $268 * 1.7976931348623157E+308;
         $$0 = $269;
         break L4;
        }
        $270 = (($emin$0$ph) + -106)|0;
        $271 = ($270|0)<(0);
        $272 = $271 << 31 >> 31;
        $273 = ($256|0)<($272|0);
        $274 = ($255>>>0)<($270>>>0);
        $275 = ($256|0)==($272|0);
        $276 = $275 & $274;
        $277 = $273 | $276;
        if ($277) {
         $279 = (___errno_location()|0);
         HEAP32[$279>>2] = 34;
         $280 = (+($sign$0|0));
         $281 = $280 * 2.2250738585072014E-308;
         $282 = $281 * 2.2250738585072014E-308;
         $$0 = $282;
         break L4;
        }
        $278 = ($x$3$lcssa$i|0)>(-1);
        if ($278) {
         $288 = $255;$289 = $256;$x$419$i = $x$3$lcssa$i;$y$320$i = $y$0$i$lcssa;
         while(1) {
          $283 = !($y$320$i >= 0.5);
          $284 = $x$419$i << 1;
          $285 = $y$320$i + -1.0;
          $286 = $283&1;
          $287 = $286 | $284;
          $x$5$i = $287 ^ 1;
          $$pn$i = $283 ? $y$320$i : $285;
          $y$4$i = $y$320$i + $$pn$i;
          $290 = (_i64Add(($288|0),($289|0),-1,-1)|0);
          $291 = tempRet0;
          $292 = ($287|0)>(-1);
          if ($292) {
           $288 = $290;$289 = $291;$x$419$i = $x$5$i;$y$320$i = $y$4$i;
          } else {
           $297 = $290;$298 = $291;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
           break;
          }
         }
        } else {
         $297 = $255;$298 = $256;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i$lcssa;
        }
        $293 = ($emin$0$ph|0)<(0);
        $294 = $293 << 31 >> 31;
        $295 = (_i64Subtract(32,0,($emin$0$ph|0),($294|0))|0);
        $296 = tempRet0;
        $299 = (_i64Add(($297|0),($298|0),($295|0),($296|0))|0);
        $300 = tempRet0;
        $301 = (0)>($300|0);
        $302 = ($bits$0$ph>>>0)>($299>>>0);
        $303 = (0)==($300|0);
        $304 = $303 & $302;
        $305 = $301 | $304;
        if ($305) {
         $306 = ($299|0)<(0);
         if ($306) {
          $$0710$i = 0;
          label = 127;
         } else {
          $$07$i = $299;
          label = 125;
         }
        } else {
         $$07$i = $bits$0$ph;
         label = 125;
        }
        if ((label|0) == 125) {
         $307 = ($$07$i|0)<(53);
         if ($307) {
          $$0710$i = $$07$i;
          label = 127;
         } else {
          $$pre41$i = (+($sign$0|0));
          $$0711$i = $$07$i;$$pre$phi42$iZ2D = $$pre41$i;$bias$0$i = 0.0;
         }
        }
        if ((label|0) == 127) {
         $308 = (84 - ($$0710$i))|0;
         $309 = (+_scalbn(1.0,$308));
         $310 = (+($sign$0|0));
         $311 = (+_copysignl($309,$310));
         $$0711$i = $$0710$i;$$pre$phi42$iZ2D = $310;$bias$0$i = $311;
        }
        $312 = ($$0711$i|0)<(32);
        $313 = $y$3$lcssa$i != 0.0;
        $or$cond4$i = $313 & $312;
        $314 = $x$4$lcssa$i & 1;
        $315 = ($314|0)==(0);
        $or$cond9$i = $315 & $or$cond4$i;
        $316 = $or$cond9$i&1;
        $x$6$i = (($316) + ($x$4$lcssa$i))|0;
        $y$5$i = $or$cond9$i ? 0.0 : $y$3$lcssa$i;
        $317 = (+($x$6$i>>>0));
        $318 = $$pre$phi42$iZ2D * $317;
        $319 = $bias$0$i + $318;
        $320 = $$pre$phi42$iZ2D * $y$5$i;
        $321 = $320 + $319;
        $322 = $321 - $bias$0$i;
        $323 = $322 != 0.0;
        if (!($323)) {
         $324 = (___errno_location()|0);
         HEAP32[$324>>2] = 34;
        }
        $325 = (+_scalbnl($322,$297));
        $$0 = $325;
        break L4;
       } else {
        $c$6 = $c$5;
       }
      } while(0);
      $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
      $330 = (0 - ($sum$i))|0;
      $$09$i = $c$6;$gotdig$0$i12 = 0;
      L184: while(1) {
       switch ($$09$i|0) {
       case 46:  {
        $gotdig$0$i12$lcssa273 = $gotdig$0$i12;
        label = 138;
        break L184;
        break;
       }
       case 48:  {
        break;
       }
       default: {
        $$2$i = $$09$i;$700 = 0;$701 = 0;$gotdig$2$i13 = $gotdig$0$i12;$gotrad$0$i14 = 0;
        break L184;
       }
       }
       $331 = HEAP32[$0>>2]|0;
       $332 = HEAP32[$1>>2]|0;
       $333 = ($331>>>0)<($332>>>0);
       if ($333) {
        $334 = ((($331)) + 1|0);
        HEAP32[$0>>2] = $334;
        $335 = HEAP8[$331>>0]|0;
        $336 = $335&255;
        $$09$i = $336;$gotdig$0$i12 = 1;
        continue;
       } else {
        $337 = (___shgetc($f)|0);
        $$09$i = $337;$gotdig$0$i12 = 1;
        continue;
       }
      }
      if ((label|0) == 138) {
       $338 = HEAP32[$0>>2]|0;
       $339 = HEAP32[$1>>2]|0;
       $340 = ($338>>>0)<($339>>>0);
       if ($340) {
        $341 = ((($338)) + 1|0);
        HEAP32[$0>>2] = $341;
        $342 = HEAP8[$338>>0]|0;
        $343 = $342&255;
        $$1$ph$i = $343;
       } else {
        $344 = (___shgetc($f)|0);
        $$1$ph$i = $344;
       }
       $345 = ($$1$ph$i|0)==(48);
       if ($345) {
        $346 = 0;$347 = 0;
        while(1) {
         $348 = (_i64Add(($346|0),($347|0),-1,-1)|0);
         $349 = tempRet0;
         $350 = HEAP32[$0>>2]|0;
         $351 = HEAP32[$1>>2]|0;
         $352 = ($350>>>0)<($351>>>0);
         if ($352) {
          $353 = ((($350)) + 1|0);
          HEAP32[$0>>2] = $353;
          $354 = HEAP8[$350>>0]|0;
          $355 = $354&255;
          $$1$be$i = $355;
         } else {
          $356 = (___shgetc($f)|0);
          $$1$be$i = $356;
         }
         $357 = ($$1$be$i|0)==(48);
         if ($357) {
          $346 = $348;$347 = $349;
         } else {
          $$2$i = $$1$be$i;$700 = $348;$701 = $349;$gotdig$2$i13 = 1;$gotrad$0$i14 = 1;
          break;
         }
        }
       } else {
        $$2$i = $$1$ph$i;$700 = 0;$701 = 0;$gotdig$2$i13 = $gotdig$0$i12$lcssa273;$gotrad$0$i14 = 1;
       }
      }
      HEAP32[$x$i>>2] = 0;
      $358 = (($$2$i) + -48)|0;
      $359 = ($358>>>0)<(10);
      $360 = ($$2$i|0)==(46);
      $361 = $360 | $359;
      L203: do {
       if ($361) {
        $362 = ((($x$i)) + 496|0);
        $$3105$i = $$2$i;$365 = 0;$366 = 0;$702 = $360;$703 = $358;$704 = $700;$705 = $701;$gotdig$3101$i = $gotdig$2$i13;$gotrad$1102$i = $gotrad$0$i14;$j$0104$i = 0;$k$0103$i = 0;$lnz$0100$i = 0;
        L205: while(1) {
         do {
          if ($702) {
           $cond$i = ($gotrad$1102$i|0)==(0);
           if ($cond$i) {
            $706 = $365;$707 = $366;$708 = $365;$709 = $366;$gotdig$4$i = $gotdig$3101$i;$gotrad$2$i = 1;$j$2$i = $j$0104$i;$k$2$i = $k$0103$i;$lnz$2$i = $lnz$0100$i;
           } else {
            $710 = $704;$711 = $705;$712 = $365;$713 = $366;$gotdig$3101$i$lcssa = $gotdig$3101$i;$j$0104$i$lcssa = $j$0104$i;$k$0103$i$lcssa = $k$0103$i;$lnz$0100$i$lcssa = $lnz$0100$i;
            break L205;
           }
          } else {
           $364 = ($k$0103$i|0)<(125);
           $367 = (_i64Add(($365|0),($366|0),1,0)|0);
           $368 = tempRet0;
           $369 = ($$3105$i|0)!=(48);
           if (!($364)) {
            if (!($369)) {
             $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = $gotdig$3101$i;$gotrad$2$i = $gotrad$1102$i;$j$2$i = $j$0104$i;$k$2$i = $k$0103$i;$lnz$2$i = $lnz$0100$i;
             break;
            }
            $379 = HEAP32[$362>>2]|0;
            $380 = $379 | 1;
            HEAP32[$362>>2] = $380;
            $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = $gotdig$3101$i;$gotrad$2$i = $gotrad$1102$i;$j$2$i = $j$0104$i;$k$2$i = $k$0103$i;$lnz$2$i = $lnz$0100$i;
            break;
           }
           $$lnz$0$i = $369 ? $367 : $lnz$0100$i;
           $370 = ($j$0104$i|0)==(0);
           $371 = (($x$i) + ($k$0103$i<<2)|0);
           if ($370) {
            $storemerge$i = $703;
           } else {
            $372 = HEAP32[$371>>2]|0;
            $373 = ($372*10)|0;
            $374 = (($$3105$i) + -48)|0;
            $375 = (($374) + ($373))|0;
            $storemerge$i = $375;
           }
           HEAP32[$371>>2] = $storemerge$i;
           $376 = (($j$0104$i) + 1)|0;
           $377 = ($376|0)==(9);
           $378 = $377&1;
           $$k$0$i = (($378) + ($k$0103$i))|0;
           $$11$i = $377 ? 0 : $376;
           $706 = $704;$707 = $705;$708 = $367;$709 = $368;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1102$i;$j$2$i = $$11$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
          }
         } while(0);
         $381 = HEAP32[$0>>2]|0;
         $382 = HEAP32[$1>>2]|0;
         $383 = ($381>>>0)<($382>>>0);
         if ($383) {
          $384 = ((($381)) + 1|0);
          HEAP32[$0>>2] = $384;
          $385 = HEAP8[$381>>0]|0;
          $386 = $385&255;
          $$3$be$i = $386;
         } else {
          $387 = (___shgetc($f)|0);
          $$3$be$i = $387;
         }
         $388 = (($$3$be$i) + -48)|0;
         $389 = ($388>>>0)<(10);
         $390 = ($$3$be$i|0)==(46);
         $391 = $390 | $389;
         if ($391) {
          $$3105$i = $$3$be$i;$365 = $708;$366 = $709;$702 = $390;$703 = $388;$704 = $706;$705 = $707;$gotdig$3101$i = $gotdig$4$i;$gotrad$1102$i = $gotrad$2$i;$j$0104$i = $j$2$i;$k$0103$i = $k$2$i;$lnz$0100$i = $lnz$2$i;
         } else {
          $$3$lcssa$i = $$3$be$i;$393 = $706;$394 = $708;$396 = $707;$397 = $709;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
          label = 161;
          break L203;
         }
        }
        $363 = ($gotdig$3101$i$lcssa|0)!=(0);
        $714 = $712;$715 = $713;$716 = $710;$717 = $711;$718 = $363;$j$069$i = $j$0104$i$lcssa;$k$065$i = $k$0103$i$lcssa;$lnz$059$i = $lnz$0100$i$lcssa;
        label = 169;
       } else {
        $$3$lcssa$i = $$2$i;$393 = $700;$394 = 0;$396 = $701;$397 = 0;$gotdig$3$lcssa$i = $gotdig$2$i13;$gotrad$1$lcssa$i = $gotrad$0$i14;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
        label = 161;
       }
      } while(0);
      do {
       if ((label|0) == 161) {
        $392 = ($gotrad$1$lcssa$i|0)==(0);
        $395 = $392 ? $394 : $393;
        $398 = $392 ? $397 : $396;
        $399 = ($gotdig$3$lcssa$i|0)!=(0);
        $400 = $$3$lcssa$i | 32;
        $401 = ($400|0)==(101);
        $or$cond13$i = $401 & $399;
        if (!($or$cond13$i)) {
         $416 = ($$3$lcssa$i|0)>(-1);
         if ($416) {
          $714 = $394;$715 = $397;$716 = $395;$717 = $398;$718 = $399;$j$069$i = $j$0$lcssa$i;$k$065$i = $k$0$lcssa$i;$lnz$059$i = $lnz$0$lcssa$i;
          label = 169;
          break;
         } else {
          $719 = $394;$720 = $397;$721 = $399;$722 = $395;$723 = $398;$j$068$i = $j$0$lcssa$i;$k$064$i = $k$0$lcssa$i;$lnz$058$i = $lnz$0$lcssa$i;
          label = 171;
          break;
         }
        }
        $402 = (_scanexp($f,$pok)|0);
        $403 = tempRet0;
        $404 = ($402|0)==(0);
        $405 = ($403|0)==(-2147483648);
        $406 = $404 & $405;
        if ($406) {
         $407 = ($pok|0)==(0);
         if ($407) {
          ___shlim($f,0);
          $$0$i27 = 0.0;
          break;
         }
         $408 = HEAP32[$1>>2]|0;
         $409 = ($408|0)==(0|0);
         if ($409) {
          $412 = 0;$413 = 0;
         } else {
          $410 = HEAP32[$0>>2]|0;
          $411 = ((($410)) + -1|0);
          HEAP32[$0>>2] = $411;
          $412 = 0;$413 = 0;
         }
        } else {
         $412 = $402;$413 = $403;
        }
        $414 = (_i64Add(($412|0),($413|0),($395|0),($398|0))|0);
        $415 = tempRet0;
        $426 = $414;$428 = $394;$429 = $415;$431 = $397;$j$067$i = $j$0$lcssa$i;$k$063$i = $k$0$lcssa$i;$lnz$057$i = $lnz$0$lcssa$i;
        label = 173;
       }
      } while(0);
      if ((label|0) == 169) {
       $417 = HEAP32[$1>>2]|0;
       $418 = ($417|0)==(0|0);
       if ($418) {
        $719 = $714;$720 = $715;$721 = $718;$722 = $716;$723 = $717;$j$068$i = $j$069$i;$k$064$i = $k$065$i;$lnz$058$i = $lnz$059$i;
        label = 171;
       } else {
        $419 = HEAP32[$0>>2]|0;
        $420 = ((($419)) + -1|0);
        HEAP32[$0>>2] = $420;
        if ($718) {
         $426 = $716;$428 = $714;$429 = $717;$431 = $715;$j$067$i = $j$069$i;$k$063$i = $k$065$i;$lnz$057$i = $lnz$059$i;
         label = 173;
        } else {
         label = 172;
        }
       }
      }
      if ((label|0) == 171) {
       if ($721) {
        $426 = $722;$428 = $719;$429 = $723;$431 = $720;$j$067$i = $j$068$i;$k$063$i = $k$064$i;$lnz$057$i = $lnz$058$i;
        label = 173;
       } else {
        label = 172;
       }
      }
      do {
       if ((label|0) == 172) {
        $421 = (___errno_location()|0);
        HEAP32[$421>>2] = 22;
        ___shlim($f,0);
        $$0$i27 = 0.0;
       }
       else if ((label|0) == 173) {
        $422 = HEAP32[$x$i>>2]|0;
        $423 = ($422|0)==(0);
        if ($423) {
         $424 = (+($sign$0|0));
         $425 = $424 * 0.0;
         $$0$i27 = $425;
         break;
        }
        $427 = ($426|0)==($428|0);
        $430 = ($429|0)==($431|0);
        $432 = $427 & $430;
        $433 = ($431|0)<(0);
        $434 = ($428>>>0)<(10);
        $435 = ($431|0)==(0);
        $436 = $435 & $434;
        $437 = $433 | $436;
        $or$cond$i16 = $437 & $432;
        if ($or$cond$i16) {
         $438 = ($bits$0$ph>>>0)>(30);
         $439 = $422 >>> $bits$0$ph;
         $440 = ($439|0)==(0);
         $or$cond15$i = $438 | $440;
         if ($or$cond15$i) {
          $441 = (+($sign$0|0));
          $442 = (+($422>>>0));
          $443 = $441 * $442;
          $$0$i27 = $443;
          break;
         }
        }
        $444 = (($emin$0$ph|0) / -2)&-1;
        $445 = ($444|0)<(0);
        $446 = $445 << 31 >> 31;
        $447 = ($429|0)>($446|0);
        $448 = ($426>>>0)>($444>>>0);
        $449 = ($429|0)==($446|0);
        $450 = $449 & $448;
        $451 = $447 | $450;
        if ($451) {
         $452 = (___errno_location()|0);
         HEAP32[$452>>2] = 34;
         $453 = (+($sign$0|0));
         $454 = $453 * 1.7976931348623157E+308;
         $455 = $454 * 1.7976931348623157E+308;
         $$0$i27 = $455;
         break;
        }
        $456 = (($emin$0$ph) + -106)|0;
        $457 = ($456|0)<(0);
        $458 = $457 << 31 >> 31;
        $459 = ($429|0)<($458|0);
        $460 = ($426>>>0)<($456>>>0);
        $461 = ($429|0)==($458|0);
        $462 = $461 & $460;
        $463 = $459 | $462;
        if ($463) {
         $464 = (___errno_location()|0);
         HEAP32[$464>>2] = 34;
         $465 = (+($sign$0|0));
         $466 = $465 * 2.2250738585072014E-308;
         $467 = $466 * 2.2250738585072014E-308;
         $$0$i27 = $467;
         break;
        }
        $468 = ($j$067$i|0)==(0);
        if ($468) {
         $k$3$i = $k$063$i;
        } else {
         $469 = ($j$067$i|0)<(9);
         if ($469) {
          $470 = (($x$i) + ($k$063$i<<2)|0);
          $$promoted$i = HEAP32[$470>>2]|0;
          $472 = $$promoted$i;$j$394$i = $j$067$i;
          while(1) {
           $471 = ($472*10)|0;
           $473 = (($j$394$i) + 1)|0;
           $exitcond$i = ($473|0)==(9);
           if ($exitcond$i) {
            $$lcssa265 = $471;
            break;
           } else {
            $472 = $471;$j$394$i = $473;
           }
          }
          HEAP32[$470>>2] = $$lcssa265;
         }
         $474 = (($k$063$i) + 1)|0;
         $k$3$i = $474;
        }
        $475 = ($lnz$057$i|0)<(9);
        if ($475) {
         $476 = ($lnz$057$i|0)<=($426|0);
         $477 = ($426|0)<(18);
         $or$cond3$i = $476 & $477;
         if ($or$cond3$i) {
          $478 = ($426|0)==(9);
          if ($478) {
           $479 = (+($sign$0|0));
           $480 = HEAP32[$x$i>>2]|0;
           $481 = (+($480>>>0));
           $482 = $479 * $481;
           $$0$i27 = $482;
           break;
          }
          $483 = ($426|0)<(9);
          if ($483) {
           $484 = (+($sign$0|0));
           $485 = HEAP32[$x$i>>2]|0;
           $486 = (+($485>>>0));
           $487 = $484 * $486;
           $488 = (8 - ($426))|0;
           $489 = (22105940 + ($488<<2)|0);
           $490 = HEAP32[$489>>2]|0;
           $491 = (+($490|0));
           $492 = $487 / $491;
           $$0$i27 = $492;
           break;
          }
          $$neg32$i = (($bits$0$ph) + 27)|0;
          $493 = Math_imul($426, -3)|0;
          $494 = (($$neg32$i) + ($493))|0;
          $495 = ($494|0)>(30);
          $$pre$i17 = HEAP32[$x$i>>2]|0;
          $496 = $$pre$i17 >>> $494;
          $497 = ($496|0)==(0);
          $or$cond182$i = $495 | $497;
          if ($or$cond182$i) {
           $498 = (+($sign$0|0));
           $499 = (+($$pre$i17>>>0));
           $500 = $498 * $499;
           $501 = (($426) + -10)|0;
           $502 = (22105940 + ($501<<2)|0);
           $503 = HEAP32[$502>>2]|0;
           $504 = (+($503|0));
           $505 = $500 * $504;
           $$0$i27 = $505;
           break;
          }
         }
        }
        $506 = (($426|0) % 9)&-1;
        $507 = ($506|0)==(0);
        if ($507) {
         $a$2$ph38$i = 0;$e2$0$ph$i = 0;$rp$2$ph36$i = $426;$z$1$ph37$i = $k$3$i;
        } else {
         $508 = ($426|0)>(-1);
         $509 = (($506) + 9)|0;
         $510 = $508 ? $506 : $509;
         $511 = (8 - ($510))|0;
         $512 = (22105940 + ($511<<2)|0);
         $513 = HEAP32[$512>>2]|0;
         $514 = ($k$3$i|0)==(0);
         if ($514) {
          $a$0$lcssa151$i = 0;$rp$0$lcssa152$i = $426;$z$0$i = 0;
         } else {
          $515 = (1000000000 / ($513|0))&-1;
          $a$085$i = 0;$carry$087$i = 0;$k$486$i = 0;$rp$084$i = $426;
          while(1) {
           $516 = (($x$i) + ($k$486$i<<2)|0);
           $517 = HEAP32[$516>>2]|0;
           $518 = (($517>>>0) % ($513>>>0))&-1;
           $519 = (($517>>>0) / ($513>>>0))&-1;
           $520 = (($519) + ($carry$087$i))|0;
           HEAP32[$516>>2] = $520;
           $521 = Math_imul($518, $515)|0;
           $522 = ($k$486$i|0)==($a$085$i|0);
           $523 = ($520|0)==(0);
           $or$cond16$i = $522 & $523;
           $524 = (($k$486$i) + 1)|0;
           $525 = $524 & 127;
           $526 = (($rp$084$i) + -9)|0;
           $rp$1$i18 = $or$cond16$i ? $526 : $rp$084$i;
           $a$1$i = $or$cond16$i ? $525 : $a$085$i;
           $527 = ($524|0)==($k$3$i|0);
           if ($527) {
            $$lcssa264 = $521;$a$1$i$lcssa = $a$1$i;$rp$1$i18$lcssa = $rp$1$i18;
            break;
           } else {
            $a$085$i = $a$1$i;$carry$087$i = $521;$k$486$i = $524;$rp$084$i = $rp$1$i18;
           }
          }
          $528 = ($$lcssa264|0)==(0);
          if ($528) {
           $a$0$lcssa151$i = $a$1$i$lcssa;$rp$0$lcssa152$i = $rp$1$i18$lcssa;$z$0$i = $k$3$i;
          } else {
           $529 = (($k$3$i) + 1)|0;
           $530 = (($x$i) + ($k$3$i<<2)|0);
           HEAP32[$530>>2] = $$lcssa264;
           $a$0$lcssa151$i = $a$1$i$lcssa;$rp$0$lcssa152$i = $rp$1$i18$lcssa;$z$0$i = $529;
          }
         }
         $531 = (9 - ($510))|0;
         $532 = (($531) + ($rp$0$lcssa152$i))|0;
         $a$2$ph38$i = $a$0$lcssa151$i;$e2$0$ph$i = 0;$rp$2$ph36$i = $532;$z$1$ph37$i = $z$0$i;
        }
        L284: while(1) {
         $533 = ($rp$2$ph36$i|0)<(18);
         $534 = ($rp$2$ph36$i|0)==(18);
         $535 = (($x$i) + ($a$2$ph38$i<<2)|0);
         $e2$0$i19 = $e2$0$ph$i;$z$1$i = $z$1$ph37$i;
         while(1) {
          if (!($533)) {
           if (!($534)) {
            $a$3$ph$i = $a$2$ph38$i;$e2$1$ph$i = $e2$0$i19;$rp$3$ph34$i = $rp$2$ph36$i;$z$5$ph$i = $z$1$i;
            break L284;
           }
           $536 = HEAP32[$535>>2]|0;
           $537 = ($536>>>0)<(9007199);
           if (!($537)) {
            $a$3$ph$i = $a$2$ph38$i;$e2$1$ph$i = $e2$0$i19;$rp$3$ph34$i = 18;$z$5$ph$i = $z$1$i;
            break L284;
           }
          }
          $538 = (($z$1$i) + 127)|0;
          $carry1$0$i = 0;$k$5$in$i = $538;$z$2$i = $z$1$i;
          while(1) {
           $k$5$i = $k$5$in$i & 127;
           $539 = (($x$i) + ($k$5$i<<2)|0);
           $540 = HEAP32[$539>>2]|0;
           $541 = (_bitshift64Shl(($540|0),0,29)|0);
           $542 = tempRet0;
           $543 = (_i64Add(($541|0),($542|0),($carry1$0$i|0),0)|0);
           $544 = tempRet0;
           $545 = ($544>>>0)>(0);
           $546 = ($543>>>0)>(1000000000);
           $547 = ($544|0)==(0);
           $548 = $547 & $546;
           $549 = $545 | $548;
           if ($549) {
            $550 = (___udivdi3(($543|0),($544|0),1000000000,0)|0);
            $551 = tempRet0;
            $552 = (___uremdi3(($543|0),($544|0),1000000000,0)|0);
            $553 = tempRet0;
            $$sink$off0$i = $552;$carry1$1$i = $550;
           } else {
            $$sink$off0$i = $543;$carry1$1$i = 0;
           }
           HEAP32[$539>>2] = $$sink$off0$i;
           $554 = (($z$2$i) + 127)|0;
           $555 = $554 & 127;
           $556 = ($k$5$i|0)!=($555|0);
           $557 = ($k$5$i|0)==($a$2$ph38$i|0);
           $or$cond17$i = $556 | $557;
           $558 = ($$sink$off0$i|0)==(0);
           $k$5$z$2$i = $558 ? $k$5$i : $z$2$i;
           $z$3$i = $or$cond17$i ? $z$2$i : $k$5$z$2$i;
           $559 = (($k$5$i) + -1)|0;
           if ($557) {
            $carry1$1$i$lcssa = $carry1$1$i;$z$3$i$lcssa = $z$3$i;
            break;
           } else {
            $carry1$0$i = $carry1$1$i;$k$5$in$i = $559;$z$2$i = $z$3$i;
           }
          }
          $560 = (($e2$0$i19) + -29)|0;
          $561 = ($carry1$1$i$lcssa|0)==(0);
          if ($561) {
           $e2$0$i19 = $560;$z$1$i = $z$3$i$lcssa;
          } else {
           $$lcssa263 = $560;$carry1$1$i$lcssa$lcssa = $carry1$1$i$lcssa;$z$3$i$lcssa$lcssa = $z$3$i$lcssa;
           break;
          }
         }
         $562 = (($rp$2$ph36$i) + 9)|0;
         $563 = (($a$2$ph38$i) + 127)|0;
         $564 = $563 & 127;
         $565 = ($564|0)==($z$3$i$lcssa$lcssa|0);
         if ($565) {
          $566 = (($z$3$i$lcssa$lcssa) + 127)|0;
          $567 = $566 & 127;
          $568 = (($x$i) + ($567<<2)|0);
          $569 = HEAP32[$568>>2]|0;
          $570 = (($z$3$i$lcssa$lcssa) + 126)|0;
          $571 = $570 & 127;
          $572 = (($x$i) + ($571<<2)|0);
          $573 = HEAP32[$572>>2]|0;
          $574 = $573 | $569;
          HEAP32[$572>>2] = $574;
          $z$4$i = $567;
         } else {
          $z$4$i = $z$3$i$lcssa$lcssa;
         }
         $575 = (($x$i) + ($564<<2)|0);
         HEAP32[$575>>2] = $carry1$1$i$lcssa$lcssa;
         $a$2$ph38$i = $564;$e2$0$ph$i = $$lcssa263;$rp$2$ph36$i = $562;$z$1$ph37$i = $z$4$i;
        }
        L302: while(1) {
         $606 = (($z$5$ph$i) + 1)|0;
         $603 = $606 & 127;
         $607 = (($z$5$ph$i) + 127)|0;
         $608 = $607 & 127;
         $609 = (($x$i) + ($608<<2)|0);
         $a$3$ph157$i = $a$3$ph$i;$e2$1$ph156$i = $e2$1$ph$i;$rp$3$ph$i = $rp$3$ph34$i;
         while(1) {
          $610 = ($rp$3$ph$i|0)==(18);
          $611 = ($rp$3$ph$i|0)>(27);
          $$18$i = $611 ? 9 : 1;
          $$not$i = $610 ^ 1;
          $a$3$i = $a$3$ph157$i;$e2$1$i = $e2$1$ph156$i;
          while(1) {
           $576 = $a$3$i & 127;
           $577 = ($576|0)==($z$5$ph$i|0);
           do {
            if ($577) {
             label = 219;
            } else {
             $578 = (($x$i) + ($576<<2)|0);
             $579 = HEAP32[$578>>2]|0;
             $580 = ($579>>>0)<(9007199);
             if ($580) {
              label = 219;
              break;
             }
             $581 = ($579>>>0)>(9007199);
             if ($581) {
              break;
             }
             $582 = (($a$3$i) + 1)|0;
             $583 = $582 & 127;
             $584 = ($583|0)==($z$5$ph$i|0);
             if ($584) {
              label = 219;
              break;
             }
             $690 = (($x$i) + ($583<<2)|0);
             $691 = HEAP32[$690>>2]|0;
             $692 = ($691>>>0)<(254740991);
             if ($692) {
              label = 219;
              break;
             }
             $693 = ($691>>>0)>(254740991);
             $brmerge$i28 = $693 | $$not$i;
             if (!($brmerge$i28)) {
              $617 = $576;$a$3$i249 = $a$3$i;$e2$1$i246 = $e2$1$i;$z$7$i = $z$5$ph$i;
              break L302;
             }
            }
           } while(0);
           if ((label|0) == 219) {
            label = 0;
            if ($610) {
             label = 220;
             break L302;
            }
           }
           $585 = (($e2$1$i) + ($$18$i))|0;
           $586 = ($a$3$i|0)==($z$5$ph$i|0);
           if ($586) {
            $a$3$i = $z$5$ph$i;$e2$1$i = $585;
           } else {
            $$lcssa256 = $585;$a$3$i$lcssa248 = $a$3$i;
            break;
           }
          }
          $587 = 1 << $$18$i;
          $588 = (($587) + -1)|0;
          $589 = 1000000000 >>> $$18$i;
          $a$478$i = $a$3$i$lcssa248;$carry3$081$i = 0;$k$679$i = $a$3$i$lcssa248;$rp$477$i = $rp$3$ph$i;
          while(1) {
           $590 = (($x$i) + ($k$679$i<<2)|0);
           $591 = HEAP32[$590>>2]|0;
           $592 = $591 & $588;
           $593 = $591 >>> $$18$i;
           $594 = (($593) + ($carry3$081$i))|0;
           HEAP32[$590>>2] = $594;
           $595 = Math_imul($592, $589)|0;
           $596 = ($k$679$i|0)==($a$478$i|0);
           $597 = ($594|0)==(0);
           $or$cond19$i = $596 & $597;
           $598 = (($k$679$i) + 1)|0;
           $599 = $598 & 127;
           $600 = (($rp$477$i) + -9)|0;
           $rp$5$i = $or$cond19$i ? $600 : $rp$477$i;
           $a$5$i = $or$cond19$i ? $599 : $a$478$i;
           $601 = ($599|0)==($z$5$ph$i|0);
           if ($601) {
            $$lcssa257 = $595;$a$5$i$lcssa = $a$5$i;$rp$5$i$lcssa = $rp$5$i;
            break;
           } else {
            $a$478$i = $a$5$i;$carry3$081$i = $595;$k$679$i = $599;$rp$477$i = $rp$5$i;
           }
          }
          $602 = ($$lcssa257|0)==(0);
          if ($602) {
           $a$3$ph157$i = $a$5$i$lcssa;$e2$1$ph156$i = $$lcssa256;$rp$3$ph$i = $rp$5$i$lcssa;
           continue;
          }
          $604 = ($603|0)==($a$5$i$lcssa|0);
          if (!($604)) {
           $$lcssa256$lcssa = $$lcssa256;$$lcssa257$lcssa = $$lcssa257;$a$5$i$lcssa$lcssa = $a$5$i$lcssa;$rp$5$i$lcssa$lcssa = $rp$5$i$lcssa;
           break;
          }
          $612 = HEAP32[$609>>2]|0;
          $613 = $612 | 1;
          HEAP32[$609>>2] = $613;
          $a$3$ph157$i = $a$5$i$lcssa;$e2$1$ph156$i = $$lcssa256;$rp$3$ph$i = $rp$5$i$lcssa;
         }
         $605 = (($x$i) + ($z$5$ph$i<<2)|0);
         HEAP32[$605>>2] = $$lcssa257$lcssa;
         $a$3$ph$i = $a$5$i$lcssa$lcssa;$e2$1$ph$i = $$lcssa256$lcssa;$rp$3$ph34$i = $rp$5$i$lcssa$lcssa;$z$5$ph$i = $603;
        }
        if ((label|0) == 220) {
         if ($577) {
          $614 = (($603) + -1)|0;
          $615 = (($x$i) + ($614<<2)|0);
          HEAP32[$615>>2] = 0;
          $617 = $z$5$ph$i;$a$3$i249 = $a$3$i;$e2$1$i246 = $e2$1$i;$z$7$i = $603;
         } else {
          $617 = $576;$a$3$i249 = $a$3$i;$e2$1$i246 = $e2$1$i;$z$7$i = $z$5$ph$i;
         }
        }
        $616 = (($x$i) + ($617<<2)|0);
        $618 = HEAP32[$616>>2]|0;
        $619 = (+($618>>>0));
        $620 = (($a$3$i249) + 1)|0;
        $621 = $620 & 127;
        $622 = ($621|0)==($z$7$i|0);
        if ($622) {
         $679 = (($a$3$i249) + 2)|0;
         $680 = $679 & 127;
         $681 = (($680) + -1)|0;
         $682 = (($x$i) + ($681<<2)|0);
         HEAP32[$682>>2] = 0;
         $z$7$1$i = $680;
        } else {
         $z$7$1$i = $z$7$i;
        }
        $683 = $619 * 1.0E+9;
        $684 = (($x$i) + ($621<<2)|0);
        $685 = HEAP32[$684>>2]|0;
        $686 = (+($685>>>0));
        $687 = $683 + $686;
        $643 = (+($sign$0|0));
        $625 = $643 * $687;
        $663 = (($e2$1$i246) + 53)|0;
        $669 = (($663) - ($emin$0$ph))|0;
        $670 = ($669|0)<($bits$0$ph|0);
        $688 = ($669|0)<(0);
        $$$i = $688 ? 0 : $669;
        $denormal$0$i = $670&1;
        $$010$i = $670 ? $$$i : $bits$0$ph;
        $689 = ($$010$i|0)<(53);
        if ($689) {
         $623 = (105 - ($$010$i))|0;
         $624 = (+_scalbn(1.0,$623));
         $626 = (+_copysignl($624,$625));
         $627 = (53 - ($$010$i))|0;
         $628 = (+_scalbn(1.0,$627));
         $629 = (+_fmodl($625,$628));
         $630 = $625 - $629;
         $631 = $626 + $630;
         $bias$0$i25 = $626;$frac$0$i = $629;$y$1$i24 = $631;
        } else {
         $bias$0$i25 = 0.0;$frac$0$i = 0.0;$y$1$i24 = $625;
        }
        $632 = (($a$3$i249) + 2)|0;
        $633 = $632 & 127;
        $634 = ($633|0)==($z$7$1$i|0);
        do {
         if ($634) {
          $frac$2$i = $frac$0$i;
         } else {
          $635 = (($x$i) + ($633<<2)|0);
          $636 = HEAP32[$635>>2]|0;
          $637 = ($636>>>0)<(500000000);
          do {
           if ($637) {
            $638 = ($636|0)==(0);
            if ($638) {
             $639 = (($a$3$i249) + 3)|0;
             $640 = $639 & 127;
             $641 = ($640|0)==($z$7$1$i|0);
             if ($641) {
              $frac$1$i = $frac$0$i;
              break;
             }
            }
            $642 = $643 * 0.25;
            $644 = $642 + $frac$0$i;
            $frac$1$i = $644;
           } else {
            $645 = ($636>>>0)>(500000000);
            if ($645) {
             $646 = $643 * 0.75;
             $647 = $646 + $frac$0$i;
             $frac$1$i = $647;
             break;
            }
            $648 = (($a$3$i249) + 3)|0;
            $649 = $648 & 127;
            $650 = ($649|0)==($z$7$1$i|0);
            if ($650) {
             $651 = $643 * 0.5;
             $652 = $651 + $frac$0$i;
             $frac$1$i = $652;
             break;
            } else {
             $653 = $643 * 0.75;
             $654 = $653 + $frac$0$i;
             $frac$1$i = $654;
             break;
            }
           }
          } while(0);
          $655 = (53 - ($$010$i))|0;
          $656 = ($655|0)>(1);
          if (!($656)) {
           $frac$2$i = $frac$1$i;
           break;
          }
          $657 = (+_fmodl($frac$1$i,1.0));
          $658 = $657 != 0.0;
          if ($658) {
           $frac$2$i = $frac$1$i;
           break;
          }
          $659 = $frac$1$i + 1.0;
          $frac$2$i = $659;
         }
        } while(0);
        $660 = $y$1$i24 + $frac$2$i;
        $661 = $660 - $bias$0$i25;
        $662 = $663 & 2147483647;
        $664 = (-2 - ($sum$i))|0;
        $665 = ($662|0)>($664|0);
        do {
         if ($665) {
          $666 = (+Math_abs((+$661)));
          $667 = !($666 >= 9007199254740992.0);
          if ($667) {
           $denormal$2$i = $denormal$0$i;$e2$2$i = $e2$1$i246;$y$2$i26 = $661;
          } else {
           $668 = ($$010$i|0)==($669|0);
           $or$cond20$i = $670 & $668;
           $denormal$1$i = $or$cond20$i ? 0 : $denormal$0$i;
           $671 = $661 * 0.5;
           $672 = (($e2$1$i246) + 1)|0;
           $denormal$2$i = $denormal$1$i;$e2$2$i = $672;$y$2$i26 = $671;
          }
          $673 = (($e2$2$i) + 50)|0;
          $674 = ($673|0)>($330|0);
          if (!($674)) {
           $675 = ($denormal$2$i|0)!=(0);
           $676 = $frac$2$i != 0.0;
           $or$cond8$i = $676 & $675;
           if (!($or$cond8$i)) {
            $e2$3$i = $e2$2$i;$y$3$i = $y$2$i26;
            break;
           }
          }
          $677 = (___errno_location()|0);
          HEAP32[$677>>2] = 34;
          $e2$3$i = $e2$2$i;$y$3$i = $y$2$i26;
         } else {
          $e2$3$i = $e2$1$i246;$y$3$i = $661;
         }
        } while(0);
        $678 = (+_scalbnl($y$3$i,$e2$3$i));
        $$0$i27 = $678;
       }
      } while(0);
      $$0 = $$0$i27;
      break L4;
      break;
     }
     default: {
      $109 = HEAP32[$1>>2]|0;
      $110 = ($109|0)==(0|0);
      if (!($110)) {
       $111 = HEAP32[$0>>2]|0;
       $112 = ((($111)) + -1|0);
       HEAP32[$0>>2] = $112;
      }
      $113 = (___errno_location()|0);
      HEAP32[$113>>2] = 22;
      ___shlim($f,0);
      $$0 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $41 = HEAP32[$1>>2]|0;
    $42 = ($41|0)==(0|0);
    if (!($42)) {
     $43 = HEAP32[$0>>2]|0;
     $44 = ((($43)) + -1|0);
     HEAP32[$0>>2] = $44;
    }
    $45 = ($pok|0)!=(0);
    $46 = ($i$0$lcssa>>>0)>(3);
    $or$cond9 = $45 & $46;
    if ($or$cond9) {
     $i$1 = $i$0$lcssa;
     while(1) {
      if (!($42)) {
       $47 = HEAP32[$0>>2]|0;
       $48 = ((($47)) + -1|0);
       HEAP32[$0>>2] = $48;
      }
      $49 = (($i$1) + -1)|0;
      $$old8 = ($49>>>0)>(3);
      if ($$old8) {
       $i$1 = $49;
      } else {
       break;
      }
     }
    }
   }
   $50 = (+($sign$0|0));
   $51 = $50 * inf;
   $52 = $51;
   $$0 = $52;
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$122 = 0, $$123 = 0, $$base21 = 0, $$lcssa = 0, $$lcssa130 = 0, $$lcssa131 = 0, $$lcssa132 = 0, $$lcssa133 = 0, $$lcssa134 = 0, $$lcssa135 = 0, $$sum = 0, $$sum14 = 0, $$sum1445 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum1865 = 0, $$sum19 = 0;
 var $$sum20 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$124 = 0, $c$2$be = 0, $c$2$be$lcssa = 0;
 var $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$371 = 0, $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$be$lcssa = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$753 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $neg$0$ = 0, $neg$1 = 0, $or$cond = 0, $or$cond12 = 0;
 var $or$cond40 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$082 = 0, $x$146 = 0, $x$266 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 L1: do {
  if ($2) {
   $5 = (___errno_location()|0);
   HEAP32[$5>>2] = 22;
   $286 = 0;$287 = 0;
  } else {
   $3 = ((($f)) + 4|0);
   $4 = ((($f)) + 100|0);
   while(1) {
    $6 = HEAP32[$3>>2]|0;
    $7 = HEAP32[$4>>2]|0;
    $8 = ($6>>>0)<($7>>>0);
    if ($8) {
     $9 = ((($6)) + 1|0);
     HEAP32[$3>>2] = $9;
     $10 = HEAP8[$6>>0]|0;
     $11 = $10&255;
     $13 = $11;
    } else {
     $12 = (___shgetc($f)|0);
     $13 = $12;
    }
    $14 = (_isspace($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $$lcssa135 = $13;
     break;
    }
   }
   $16 = ($$lcssa135|0)==(45);
   L11: do {
    switch ($$lcssa135|0) {
    case 43: case 45:  {
     $17 = $16 << 31 >> 31;
     $18 = HEAP32[$3>>2]|0;
     $19 = HEAP32[$4>>2]|0;
     $20 = ($18>>>0)<($19>>>0);
     if ($20) {
      $21 = ((($18)) + 1|0);
      HEAP32[$3>>2] = $21;
      $22 = HEAP8[$18>>0]|0;
      $23 = $22&255;
      $c$0 = $23;$neg$0 = $17;
      break L11;
     } else {
      $24 = (___shgetc($f)|0);
      $c$0 = $24;$neg$0 = $17;
      break L11;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa135;$neg$0 = 0;
    }
    }
   } while(0);
   $25 = ($base|0)==(0);
   $26 = $base & -17;
   $27 = ($26|0)==(0);
   $28 = ($c$0|0)==(48);
   $or$cond5 = $27 & $28;
   do {
    if ($or$cond5) {
     $29 = HEAP32[$3>>2]|0;
     $30 = HEAP32[$4>>2]|0;
     $31 = ($29>>>0)<($30>>>0);
     if ($31) {
      $32 = ((($29)) + 1|0);
      HEAP32[$3>>2] = $32;
      $33 = HEAP8[$29>>0]|0;
      $34 = $33&255;
      $37 = $34;
     } else {
      $35 = (___shgetc($f)|0);
      $37 = $35;
     }
     $36 = $37 | 32;
     $38 = ($36|0)==(120);
     if (!($38)) {
      if ($25) {
       $$123 = 8;$c$124 = $37;
       label = 46;
       break;
      } else {
       $$1 = $base;$c$1 = $37;
       label = 32;
       break;
      }
     }
     $39 = HEAP32[$3>>2]|0;
     $40 = HEAP32[$4>>2]|0;
     $41 = ($39>>>0)<($40>>>0);
     if ($41) {
      $42 = ((($39)) + 1|0);
      HEAP32[$3>>2] = $42;
      $43 = HEAP8[$39>>0]|0;
      $44 = $43&255;
      $46 = $44;
     } else {
      $45 = (___shgetc($f)|0);
      $46 = $45;
     }
     $$sum20 = (($46) + 1)|0;
     $47 = (22116689 + ($$sum20)|0);
     $48 = HEAP8[$47>>0]|0;
     $49 = ($48&255)>(15);
     if ($49) {
      $50 = HEAP32[$4>>2]|0;
      $51 = ($50|0)==(0|0);
      if (!($51)) {
       $52 = HEAP32[$3>>2]|0;
       $53 = ((($52)) + -1|0);
       HEAP32[$3>>2] = $53;
      }
      $54 = ($pok|0)==(0);
      if ($54) {
       ___shlim($f,0);
       $286 = 0;$287 = 0;
       break L1;
      }
      if ($51) {
       $286 = 0;$287 = 0;
       break L1;
      }
      $55 = HEAP32[$3>>2]|0;
      $56 = ((($55)) + -1|0);
      HEAP32[$3>>2] = $56;
      $286 = 0;$287 = 0;
      break L1;
     } else {
      $$123 = 16;$c$124 = $46;
      label = 46;
     }
    } else {
     $$base21 = $25 ? 10 : $base;
     $$sum = (($c$0) + 1)|0;
     $57 = (22116689 + ($$sum)|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = $58&255;
     $60 = ($59>>>0)<($$base21>>>0);
     if ($60) {
      $$1 = $$base21;$c$1 = $c$0;
      label = 32;
     } else {
      $61 = HEAP32[$4>>2]|0;
      $62 = ($61|0)==(0|0);
      if (!($62)) {
       $63 = HEAP32[$3>>2]|0;
       $64 = ((($63)) + -1|0);
       HEAP32[$3>>2] = $64;
      }
      ___shlim($f,0);
      $65 = (___errno_location()|0);
      HEAP32[$65>>2] = 22;
      $286 = 0;$287 = 0;
      break L1;
     }
    }
   } while(0);
   if ((label|0) == 32) {
    $66 = ($$1|0)==(10);
    if ($66) {
     $67 = (($c$1) + -48)|0;
     $68 = ($67>>>0)<(10);
     if ($68) {
      $71 = $67;$x$082 = 0;
      while(1) {
       $69 = ($x$082*10)|0;
       $70 = (($69) + ($71))|0;
       $72 = HEAP32[$3>>2]|0;
       $73 = HEAP32[$4>>2]|0;
       $74 = ($72>>>0)<($73>>>0);
       if ($74) {
        $75 = ((($72)) + 1|0);
        HEAP32[$3>>2] = $75;
        $76 = HEAP8[$72>>0]|0;
        $77 = $76&255;
        $c$2$be = $77;
       } else {
        $78 = (___shgetc($f)|0);
        $c$2$be = $78;
       }
       $79 = (($c$2$be) + -48)|0;
       $80 = ($79>>>0)<(10);
       $81 = ($70>>>0)<(429496729);
       $82 = $80 & $81;
       if ($82) {
        $71 = $79;$x$082 = $70;
       } else {
        $$lcssa134 = $70;$c$2$be$lcssa = $c$2$be;
        break;
       }
      }
      $288 = $$lcssa134;$289 = 0;$c$2$lcssa = $c$2$be$lcssa;
     } else {
      $288 = 0;$289 = 0;$c$2$lcssa = $c$1;
     }
     $83 = (($c$2$lcssa) + -48)|0;
     $84 = ($83>>>0)<(10);
     if ($84) {
      $85 = $288;$86 = $289;$89 = $83;$c$371 = $c$2$lcssa;
      while(1) {
       $87 = (___muldi3(($85|0),($86|0),10,0)|0);
       $88 = tempRet0;
       $90 = ($89|0)<(0);
       $91 = $90 << 31 >> 31;
       $92 = $89 ^ -1;
       $93 = $91 ^ -1;
       $94 = ($88>>>0)>($93>>>0);
       $95 = ($87>>>0)>($92>>>0);
       $96 = ($88|0)==($93|0);
       $97 = $96 & $95;
       $98 = $94 | $97;
       if ($98) {
        $$lcssa = $89;$290 = $85;$291 = $86;$c$3$lcssa = $c$371;
        break;
       }
       $99 = (_i64Add(($87|0),($88|0),($89|0),($91|0))|0);
       $100 = tempRet0;
       $101 = HEAP32[$3>>2]|0;
       $102 = HEAP32[$4>>2]|0;
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        $104 = ((($101)) + 1|0);
        HEAP32[$3>>2] = $104;
        $105 = HEAP8[$101>>0]|0;
        $106 = $105&255;
        $c$3$be = $106;
       } else {
        $107 = (___shgetc($f)|0);
        $c$3$be = $107;
       }
       $108 = (($c$3$be) + -48)|0;
       $109 = ($108>>>0)<(10);
       $110 = ($100>>>0)<(429496729);
       $111 = ($99>>>0)<(2576980378);
       $112 = ($100|0)==(429496729);
       $113 = $112 & $111;
       $114 = $110 | $113;
       $or$cond7 = $109 & $114;
       if ($or$cond7) {
        $85 = $99;$86 = $100;$89 = $108;$c$371 = $c$3$be;
       } else {
        $$lcssa = $108;$290 = $99;$291 = $100;$c$3$lcssa = $c$3$be;
        break;
       }
      }
      $115 = ($$lcssa>>>0)>(9);
      if ($115) {
       $259 = $291;$261 = $290;$neg$1 = $neg$0;
      } else {
       $$122 = 10;$292 = $290;$293 = $291;$c$8 = $c$3$lcssa;
       label = 72;
      }
     } else {
      $259 = $289;$261 = $288;$neg$1 = $neg$0;
     }
    } else {
     $$123 = $$1;$c$124 = $c$1;
     label = 46;
    }
   }
   L63: do {
    if ((label|0) == 46) {
     $116 = (($$123) + -1)|0;
     $117 = $116 & $$123;
     $118 = ($117|0)==(0);
     if ($118) {
      $123 = ($$123*23)|0;
      $124 = $123 >>> 5;
      $125 = $124 & 7;
      $126 = (22116946 + ($125)|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $$sum1445 = (($c$124) + 1)|0;
      $129 = (22116689 + ($$sum1445)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130&255;
      $132 = ($131>>>0)<($$123>>>0);
      if ($132) {
       $135 = $131;$x$146 = 0;
       while(1) {
        $133 = $x$146 << $128;
        $134 = $135 | $133;
        $136 = HEAP32[$3>>2]|0;
        $137 = HEAP32[$4>>2]|0;
        $138 = ($136>>>0)<($137>>>0);
        if ($138) {
         $139 = ((($136)) + 1|0);
         HEAP32[$3>>2] = $139;
         $140 = HEAP8[$136>>0]|0;
         $141 = $140&255;
         $c$4$be = $141;
        } else {
         $142 = (___shgetc($f)|0);
         $c$4$be = $142;
        }
        $$sum14 = (($c$4$be) + 1)|0;
        $143 = (22116689 + ($$sum14)|0);
        $144 = HEAP8[$143>>0]|0;
        $145 = $144&255;
        $146 = ($145>>>0)<($$123>>>0);
        $147 = ($134>>>0)<(134217728);
        $148 = $147 & $146;
        if ($148) {
         $135 = $145;$x$146 = $134;
        } else {
         $$lcssa130 = $134;$$lcssa131 = $144;$c$4$be$lcssa = $c$4$be;
         break;
        }
       }
       $152 = $$lcssa131;$154 = 0;$156 = $$lcssa130;$c$4$lcssa = $c$4$be$lcssa;
      } else {
       $152 = $130;$154 = 0;$156 = 0;$c$4$lcssa = $c$124;
      }
      $149 = (_bitshift64Lshr(-1,-1,($128|0))|0);
      $150 = tempRet0;
      $151 = $152&255;
      $153 = ($151>>>0)>=($$123>>>0);
      $155 = ($154>>>0)>($150>>>0);
      $157 = ($156>>>0)>($149>>>0);
      $158 = ($154|0)==($150|0);
      $159 = $158 & $157;
      $160 = $155 | $159;
      $or$cond40 = $153 | $160;
      if ($or$cond40) {
       $$122 = $$123;$292 = $156;$293 = $154;$c$8 = $c$4$lcssa;
       label = 72;
       break;
      } else {
       $161 = $156;$162 = $154;$166 = $152;
      }
      while(1) {
       $163 = (_bitshift64Shl(($161|0),($162|0),($128|0))|0);
       $164 = tempRet0;
       $165 = $166&255;
       $167 = $165 | $163;
       $168 = HEAP32[$3>>2]|0;
       $169 = HEAP32[$4>>2]|0;
       $170 = ($168>>>0)<($169>>>0);
       if ($170) {
        $171 = ((($168)) + 1|0);
        HEAP32[$3>>2] = $171;
        $172 = HEAP8[$168>>0]|0;
        $173 = $172&255;
        $c$5$be = $173;
       } else {
        $174 = (___shgetc($f)|0);
        $c$5$be = $174;
       }
       $$sum15 = (($c$5$be) + 1)|0;
       $175 = (22116689 + ($$sum15)|0);
       $176 = HEAP8[$175>>0]|0;
       $177 = $176&255;
       $178 = ($177>>>0)>=($$123>>>0);
       $179 = ($164>>>0)>($150>>>0);
       $180 = ($167>>>0)>($149>>>0);
       $181 = ($164|0)==($150|0);
       $182 = $181 & $180;
       $183 = $179 | $182;
       $or$cond = $178 | $183;
       if ($or$cond) {
        $$122 = $$123;$292 = $167;$293 = $164;$c$8 = $c$5$be;
        label = 72;
        break L63;
       } else {
        $161 = $167;$162 = $164;$166 = $176;
       }
      }
     }
     $$sum1865 = (($c$124) + 1)|0;
     $119 = (22116689 + ($$sum1865)|0);
     $120 = HEAP8[$119>>0]|0;
     $121 = $120&255;
     $122 = ($121>>>0)<($$123>>>0);
     if ($122) {
      $186 = $121;$x$266 = 0;
      while(1) {
       $184 = Math_imul($x$266, $$123)|0;
       $185 = (($186) + ($184))|0;
       $187 = HEAP32[$3>>2]|0;
       $188 = HEAP32[$4>>2]|0;
       $189 = ($187>>>0)<($188>>>0);
       if ($189) {
        $190 = ((($187)) + 1|0);
        HEAP32[$3>>2] = $190;
        $191 = HEAP8[$187>>0]|0;
        $192 = $191&255;
        $c$6$be = $192;
       } else {
        $193 = (___shgetc($f)|0);
        $c$6$be = $193;
       }
       $$sum18 = (($c$6$be) + 1)|0;
       $194 = (22116689 + ($$sum18)|0);
       $195 = HEAP8[$194>>0]|0;
       $196 = $195&255;
       $197 = ($196>>>0)<($$123>>>0);
       $198 = ($185>>>0)<(119304647);
       $199 = $198 & $197;
       if ($199) {
        $186 = $196;$x$266 = $185;
       } else {
        $$lcssa132 = $185;$$lcssa133 = $195;$c$6$be$lcssa = $c$6$be;
        break;
       }
      }
      $201 = $$lcssa133;$294 = $$lcssa132;$295 = 0;$c$6$lcssa = $c$6$be$lcssa;
     } else {
      $201 = $120;$294 = 0;$295 = 0;$c$6$lcssa = $c$124;
     }
     $200 = $201&255;
     $202 = ($200>>>0)<($$123>>>0);
     if ($202) {
      $203 = (___udivdi3(-1,-1,($$123|0),0)|0);
      $204 = tempRet0;
      $205 = $295;$207 = $294;$215 = $201;$c$753 = $c$6$lcssa;
      while(1) {
       $206 = ($205>>>0)>($204>>>0);
       $208 = ($207>>>0)>($203>>>0);
       $209 = ($205|0)==($204|0);
       $210 = $209 & $208;
       $211 = $206 | $210;
       if ($211) {
        $$122 = $$123;$292 = $207;$293 = $205;$c$8 = $c$753;
        label = 72;
        break L63;
       }
       $212 = (___muldi3(($207|0),($205|0),($$123|0),0)|0);
       $213 = tempRet0;
       $214 = $215&255;
       $216 = $214 ^ -1;
       $217 = ($213>>>0)>(4294967295);
       $218 = ($212>>>0)>($216>>>0);
       $219 = ($213|0)==(-1);
       $220 = $219 & $218;
       $221 = $217 | $220;
       if ($221) {
        $$122 = $$123;$292 = $207;$293 = $205;$c$8 = $c$753;
        label = 72;
        break L63;
       }
       $222 = (_i64Add(($214|0),0,($212|0),($213|0))|0);
       $223 = tempRet0;
       $224 = HEAP32[$3>>2]|0;
       $225 = HEAP32[$4>>2]|0;
       $226 = ($224>>>0)<($225>>>0);
       if ($226) {
        $227 = ((($224)) + 1|0);
        HEAP32[$3>>2] = $227;
        $228 = HEAP8[$224>>0]|0;
        $229 = $228&255;
        $c$7$be = $229;
       } else {
        $230 = (___shgetc($f)|0);
        $c$7$be = $230;
       }
       $$sum19 = (($c$7$be) + 1)|0;
       $231 = (22116689 + ($$sum19)|0);
       $232 = HEAP8[$231>>0]|0;
       $233 = $232&255;
       $234 = ($233>>>0)<($$123>>>0);
       if ($234) {
        $205 = $223;$207 = $222;$215 = $232;$c$753 = $c$7$be;
       } else {
        $$122 = $$123;$292 = $222;$293 = $223;$c$8 = $c$7$be;
        label = 72;
        break;
       }
      }
     } else {
      $$122 = $$123;$292 = $294;$293 = $295;$c$8 = $c$6$lcssa;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $$sum16 = (($c$8) + 1)|0;
    $235 = (22116689 + ($$sum16)|0);
    $236 = HEAP8[$235>>0]|0;
    $237 = $236&255;
    $238 = ($237>>>0)<($$122>>>0);
    if ($238) {
     while(1) {
      $239 = HEAP32[$3>>2]|0;
      $240 = HEAP32[$4>>2]|0;
      $241 = ($239>>>0)<($240>>>0);
      if ($241) {
       $242 = ((($239)) + 1|0);
       HEAP32[$3>>2] = $242;
       $243 = HEAP8[$239>>0]|0;
       $244 = $243&255;
       $c$9$be = $244;
      } else {
       $245 = (___shgetc($f)|0);
       $c$9$be = $245;
      }
      $$sum17 = (($c$9$be) + 1)|0;
      $246 = (22116689 + ($$sum17)|0);
      $247 = HEAP8[$246>>0]|0;
      $248 = $247&255;
      $249 = ($248>>>0)<($$122>>>0);
      if (!($249)) {
       break;
      }
     }
     $250 = (___errno_location()|0);
     HEAP32[$250>>2] = 34;
     $251 = $0 & 1;
     $252 = ($251|0)==(0);
     $253 = (0)==(0);
     $254 = $252 & $253;
     $neg$0$ = $254 ? $neg$0 : 0;
     $259 = $1;$261 = $0;$neg$1 = $neg$0$;
    } else {
     $259 = $293;$261 = $292;$neg$1 = $neg$0;
    }
   }
   $255 = HEAP32[$4>>2]|0;
   $256 = ($255|0)==(0|0);
   if (!($256)) {
    $257 = HEAP32[$3>>2]|0;
    $258 = ((($257)) + -1|0);
    HEAP32[$3>>2] = $258;
   }
   $260 = ($259>>>0)<($1>>>0);
   $262 = ($261>>>0)<($0>>>0);
   $263 = ($259|0)==($1|0);
   $264 = $263 & $262;
   $265 = $260 | $264;
   if (!($265)) {
    $266 = $0 & 1;
    $267 = ($266|0)!=(0);
    $268 = (0)!=(0);
    $269 = $267 | $268;
    $270 = ($neg$1|0)!=(0);
    $or$cond12 = $269 | $270;
    if (!($or$cond12)) {
     $271 = (___errno_location()|0);
     HEAP32[$271>>2] = 34;
     $272 = (_i64Add(($0|0),($1|0),-1,-1)|0);
     $273 = tempRet0;
     $286 = $273;$287 = $272;
     break;
    }
    $274 = ($259>>>0)>($1>>>0);
    $275 = ($261>>>0)>($0>>>0);
    $276 = ($259|0)==($1|0);
    $277 = $276 & $275;
    $278 = $274 | $277;
    if ($278) {
     $279 = (___errno_location()|0);
     HEAP32[$279>>2] = 34;
     $286 = $1;$287 = $0;
     break;
    }
   }
   $280 = ($neg$1|0)<(0);
   $281 = $280 << 31 >> 31;
   $282 = $261 ^ $neg$1;
   $283 = $259 ^ $281;
   $284 = (_i64Subtract(($282|0),($283|0),($neg$1|0),($281|0))|0);
   $285 = tempRet0;
   $286 = $285;$287 = $284;
  }
 } while(0);
 tempRet0 = ($286);
 return ($287|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = ((($f)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($f)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ((($f)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = (($4) + ($lim)|0);
  $12 = ((($f)) + 100|0);
  HEAP32[$12>>2] = $11;
 } else {
  $13 = ((($f)) + 100|0);
  HEAP32[$13>>2] = $5;
 }
 return;
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert3 = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = ((($f)) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if ($7) {
   label = 4;
  } else {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = ((($f)) + 8|0);
   if ($10) {
    $$pre = HEAP32[$$phi$trans$insert>>2]|0;
    $11 = $$pre;
    $26 = $$pre;$41 = $11;
    label = 9;
   } else {
    $12 = HEAP32[$$phi$trans$insert>>2]|0;
    $13 = ((($f)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $12;
    $16 = $14;
    $17 = (($15) - ($16))|0;
    $18 = ((($f)) + 108|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (($9) - ($19))|0;
    $21 = (($20) + -1)|0;
    $22 = ($17|0)>($21|0);
    if ($22) {
     $23 = (($14) + ($21)|0);
     $24 = ((($f)) + 100|0);
     HEAP32[$24>>2] = $23;
     $27 = $12;
    } else {
     $26 = $15;$41 = $12;
     label = 9;
    }
   }
   if ((label|0) == 9) {
    $25 = ((($f)) + 100|0);
    HEAP32[$25>>2] = $26;
    $27 = $41;
   }
   $28 = ($27|0)==(0|0);
   $$phi$trans$insert3 = ((($f)) + 4|0);
   $$pre4 = HEAP32[$$phi$trans$insert3>>2]|0;
   if (!($28)) {
    $29 = $27;
    $30 = $$pre4;
    $31 = ((($f)) + 108|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = (($29) + 1)|0;
    $34 = (($33) - ($30))|0;
    $35 = (($34) + ($32))|0;
    HEAP32[$31>>2] = $35;
   }
   $36 = ((($$pre4)) + -1|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = $37&255;
   $39 = ($38|0)==($6|0);
   if ($39) {
    $$0 = $6;
   } else {
    $40 = $6&255;
    HEAP8[$36>>0] = $40;
    $$0 = $6;
   }
  }
 }
 if ((label|0) == 4) {
  $8 = ((($f)) + 100|0);
  HEAP32[$8>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r>>>0)>(4294963200);
 if ($0) {
  $1 = (0 - ($r))|0;
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = $1;
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return ($$0|0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & 2147483647;
 $5 = $3 & -2147483648;
 $6 = $5 | $4;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
 return (+$7);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_copysign($x,$y));
 return (+$0);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa7 = 0, $$x = 0.0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0;
 var $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $12 = tempRet0;
 $13 = ($11|0)==(0);
 $14 = ($12|0)==(0);
 $15 = $13 & $14;
 L1: do {
  if ($15) {
   label = 3;
  } else {
   $16 = $3 & 2147483647;
   $17 = ($16>>>0)>(2146435072);
   $18 = ($2>>>0)>(0);
   $19 = ($16|0)==(2146435072);
   $20 = $19 & $18;
   $21 = $17 | $20;
   $22 = ($6|0)==(2047);
   $or$cond = $21 | $22;
   if ($or$cond) {
    label = 3;
   } else {
    $25 = (_bitshift64Shl(($0|0),($1|0),1)|0);
    $26 = tempRet0;
    $27 = ($26>>>0)>($12>>>0);
    $28 = ($25>>>0)>($11>>>0);
    $29 = ($26|0)==($12|0);
    $30 = $29 & $28;
    $31 = $27 | $30;
    if (!($31)) {
     $32 = ($25|0)==($11|0);
     $33 = ($26|0)==($12|0);
     $34 = $32 & $33;
     $35 = $x * 0.0;
     $$x = $34 ? $35 : $x;
     return (+$$x);
    }
    $36 = ($6|0)==(0);
    if ($36) {
     $37 = (_bitshift64Shl(($0|0),($1|0),12)|0);
     $38 = tempRet0;
     $39 = ($38|0)>(-1);
     $40 = ($37>>>0)>(4294967295);
     $41 = ($38|0)==(-1);
     $42 = $41 & $40;
     $43 = $39 | $42;
     if ($43) {
      $45 = $37;$46 = $38;$ex$026 = 0;
      while(1) {
       $44 = (($ex$026) + -1)|0;
       $47 = (_bitshift64Shl(($45|0),($46|0),1)|0);
       $48 = tempRet0;
       $49 = ($48|0)>(-1);
       $50 = ($47>>>0)>(4294967295);
       $51 = ($48|0)==(-1);
       $52 = $51 & $50;
       $53 = $49 | $52;
       if ($53) {
        $45 = $47;$46 = $48;$ex$026 = $44;
       } else {
        $ex$0$lcssa = $44;
        break;
       }
      }
     } else {
      $ex$0$lcssa = 0;
     }
     $54 = (1 - ($ex$0$lcssa))|0;
     $55 = (_bitshift64Shl(($0|0),($1|0),($54|0))|0);
     $56 = tempRet0;
     $83 = $55;$84 = $56;$ex$1 = $ex$0$lcssa;
    } else {
     $57 = $1 & 1048575;
     $58 = $57 | 1048576;
     $83 = $0;$84 = $58;$ex$1 = $6;
    }
    $59 = ($9|0)==(0);
    if ($59) {
     $60 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $61 = tempRet0;
     $62 = ($61|0)>(-1);
     $63 = ($60>>>0)>(4294967295);
     $64 = ($61|0)==(-1);
     $65 = $64 & $63;
     $66 = $62 | $65;
     if ($66) {
      $68 = $60;$69 = $61;$ey$020 = 0;
      while(1) {
       $67 = (($ey$020) + -1)|0;
       $70 = (_bitshift64Shl(($68|0),($69|0),1)|0);
       $71 = tempRet0;
       $72 = ($71|0)>(-1);
       $73 = ($70>>>0)>(4294967295);
       $74 = ($71|0)==(-1);
       $75 = $74 & $73;
       $76 = $72 | $75;
       if ($76) {
        $68 = $70;$69 = $71;$ey$020 = $67;
       } else {
        $ey$0$lcssa = $67;
        break;
       }
      }
     } else {
      $ey$0$lcssa = 0;
     }
     $77 = (1 - ($ey$0$lcssa))|0;
     $78 = (_bitshift64Shl(($2|0),($3|0),($77|0))|0);
     $79 = tempRet0;
     $85 = $78;$86 = $79;$ey$1$ph = $ey$0$lcssa;
    } else {
     $80 = $3 & 1048575;
     $81 = $80 | 1048576;
     $85 = $2;$86 = $81;$ey$1$ph = $9;
    }
    $82 = ($ex$1|0)>($ey$1$ph|0);
    $87 = (_i64Subtract(($83|0),($84|0),($85|0),($86|0))|0);
    $88 = tempRet0;
    $89 = ($88|0)>(-1);
    $90 = ($87>>>0)>(4294967295);
    $91 = ($88|0)==(-1);
    $92 = $91 & $90;
    $93 = $89 | $92;
    L23: do {
     if ($82) {
      $152 = $93;$153 = $87;$154 = $88;$94 = $83;$96 = $84;$ex$212 = $ex$1;
      while(1) {
       if ($152) {
        $95 = ($94|0)==($85|0);
        $97 = ($96|0)==($86|0);
        $98 = $95 & $97;
        if ($98) {
         break;
        } else {
         $100 = $153;$101 = $154;
        }
       } else {
        $100 = $94;$101 = $96;
       }
       $102 = (_bitshift64Shl(($100|0),($101|0),1)|0);
       $103 = tempRet0;
       $104 = (($ex$212) + -1)|0;
       $105 = ($104|0)>($ey$1$ph|0);
       $106 = (_i64Subtract(($102|0),($103|0),($85|0),($86|0))|0);
       $107 = tempRet0;
       $108 = ($107|0)>(-1);
       $109 = ($106>>>0)>(4294967295);
       $110 = ($107|0)==(-1);
       $111 = $110 & $109;
       $112 = $108 | $111;
       if ($105) {
        $152 = $112;$153 = $106;$154 = $107;$94 = $102;$96 = $103;$ex$212 = $104;
       } else {
        $$lcssa7 = $112;$113 = $102;$115 = $103;$155 = $106;$156 = $107;$ex$2$lcssa = $104;
        break L23;
       }
      }
      $99 = $x * 0.0;
      $$0 = $99;
      break L1;
     } else {
      $$lcssa7 = $93;$113 = $83;$115 = $84;$155 = $87;$156 = $88;$ex$2$lcssa = $ex$1;
     }
    } while(0);
    if ($$lcssa7) {
     $114 = ($113|0)==($85|0);
     $116 = ($115|0)==($86|0);
     $117 = $114 & $116;
     if ($117) {
      $125 = $x * 0.0;
      $$0 = $125;
      break;
     } else {
      $118 = $156;$120 = $155;
     }
    } else {
     $118 = $115;$120 = $113;
    }
    $119 = ($118>>>0)<(1048576);
    $121 = ($120>>>0)<(0);
    $122 = ($118|0)==(1048576);
    $123 = $122 & $121;
    $124 = $119 | $123;
    if ($124) {
     $126 = $120;$127 = $118;$ex$39 = $ex$2$lcssa;
     while(1) {
      $128 = (_bitshift64Shl(($126|0),($127|0),1)|0);
      $129 = tempRet0;
      $130 = (($ex$39) + -1)|0;
      $131 = ($129>>>0)<(1048576);
      $132 = ($128>>>0)<(0);
      $133 = ($129|0)==(1048576);
      $134 = $133 & $132;
      $135 = $131 | $134;
      if ($135) {
       $126 = $128;$127 = $129;$ex$39 = $130;
      } else {
       $137 = $128;$138 = $129;$ex$3$lcssa = $130;
       break;
      }
     }
    } else {
     $137 = $120;$138 = $118;$ex$3$lcssa = $ex$2$lcssa;
    }
    $136 = ($ex$3$lcssa|0)>(0);
    if ($136) {
     $139 = (_i64Add(($137|0),($138|0),0,-1048576)|0);
     $140 = tempRet0;
     $141 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
     $142 = tempRet0;
     $143 = $139 | $141;
     $144 = $140 | $142;
     $149 = $144;$151 = $143;
    } else {
     $145 = (1 - ($ex$3$lcssa))|0;
     $146 = (_bitshift64Lshr(($137|0),($138|0),($145|0))|0);
     $147 = tempRet0;
     $149 = $147;$151 = $146;
    }
    $148 = $149 | $10;
    HEAP32[tempDoublePtr>>2] = $151;HEAP32[tempDoublePtr+4>>2] = $148;$150 = +HEAPF64[tempDoublePtr>>3];
    $$0 = $150;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $23 = $x * $y;
  $24 = $23 / $23;
  $$0 = $24;
 }
 return (+$$0);
}
function _fmodf($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa = 0, $$lcssa6 = 0, $$x = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0.0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0.0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $ex$0$lcssa = 0, $ex$025 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$211 = 0, $ex$3$lcssa = 0, $ex$38 = 0, $ey$0$lcssa = 0, $ey$019 = 0, $ey$1$ph = 0, $i$026 = 0, $i$120 = 0;
 var $or$cond = 0, $uxi$0 = 0, $uxi$1$lcssa = 0, $uxi$112 = 0, $uxi$2 = 0, $uxi$3$lcssa = 0, $uxi$3$ph = 0, $uxi$39 = 0, $uxi$4 = 0, $uy$sroa$0$0$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (HEAPF32[tempDoublePtr>>2]=$x,HEAP32[tempDoublePtr>>2]|0);
 $1 = (HEAPF32[tempDoublePtr>>2]=$y,HEAP32[tempDoublePtr>>2]|0);
 $2 = $0 >>> 23;
 $3 = $2 & 255;
 $4 = $1 >>> 23;
 $5 = $4 & 255;
 $6 = $0 & -2147483648;
 $7 = $1 << 1;
 $8 = ($7|0)==(0);
 L1: do {
  if ($8) {
   label = 3;
  } else {
   $9 = $1 & 2147483647;
   $10 = ($9>>>0)>(2139095040);
   $11 = ($3|0)==(255);
   $or$cond = $10 | $11;
   if ($or$cond) {
    label = 3;
   } else {
    $14 = $0 << 1;
    $15 = ($14>>>0)>($7>>>0);
    if (!($15)) {
     $16 = ($14|0)==($7|0);
     $17 = $x * 0.0;
     $$x = $16 ? $17 : $x;
     return (+$$x);
    }
    $18 = ($3|0)==(0);
    if ($18) {
     $19 = $0 << 9;
     $20 = ($19|0)>(-1);
     if ($20) {
      $ex$025 = 0;$i$026 = $19;
      while(1) {
       $21 = (($ex$025) + -1)|0;
       $22 = $i$026 << 1;
       $23 = ($22|0)>(-1);
       if ($23) {
        $ex$025 = $21;$i$026 = $22;
       } else {
        $ex$0$lcssa = $21;
        break;
       }
      }
     } else {
      $ex$0$lcssa = 0;
     }
     $24 = (1 - ($ex$0$lcssa))|0;
     $25 = $0 << $24;
     $ex$1 = $ex$0$lcssa;$uxi$0 = $25;
    } else {
     $26 = $0 & 8388607;
     $27 = $26 | 8388608;
     $ex$1 = $3;$uxi$0 = $27;
    }
    $28 = ($5|0)==(0);
    if ($28) {
     $29 = $1 << 9;
     $30 = ($29|0)>(-1);
     if ($30) {
      $ey$019 = 0;$i$120 = $29;
      while(1) {
       $31 = (($ey$019) + -1)|0;
       $32 = $i$120 << 1;
       $33 = ($32|0)>(-1);
       if ($33) {
        $ey$019 = $31;$i$120 = $32;
       } else {
        $ey$0$lcssa = $31;
        break;
       }
      }
     } else {
      $ey$0$lcssa = 0;
     }
     $34 = (1 - ($ey$0$lcssa))|0;
     $35 = $1 << $34;
     $ey$1$ph = $ey$0$lcssa;$uy$sroa$0$0$ph = $35;
    } else {
     $36 = $1 & 8388607;
     $37 = $36 | 8388608;
     $ey$1$ph = $5;$uy$sroa$0$0$ph = $37;
    }
    $38 = ($ex$1|0)>($ey$1$ph|0);
    $39 = (($uxi$0) - ($uy$sroa$0$0$ph))|0;
    $40 = ($39|0)>(-1);
    L23: do {
     if ($38) {
      $62 = $40;$63 = $39;$ex$211 = $ex$1;$uxi$112 = $uxi$0;
      while(1) {
       if ($62) {
        $41 = ($uxi$112|0)==($uy$sroa$0$0$ph|0);
        if ($41) {
         break;
        } else {
         $uxi$2 = $63;
        }
       } else {
        $uxi$2 = $uxi$112;
       }
       $43 = $uxi$2 << 1;
       $44 = (($ex$211) + -1)|0;
       $45 = ($44|0)>($ey$1$ph|0);
       $46 = (($43) - ($uy$sroa$0$0$ph))|0;
       $47 = ($46|0)>(-1);
       if ($45) {
        $62 = $47;$63 = $46;$ex$211 = $44;$uxi$112 = $43;
       } else {
        $$lcssa = $46;$$lcssa6 = $47;$ex$2$lcssa = $44;$uxi$1$lcssa = $43;
        break L23;
       }
      }
      $42 = $x * 0.0;
      $$0 = $42;
      break L1;
     } else {
      $$lcssa = $39;$$lcssa6 = $40;$ex$2$lcssa = $ex$1;$uxi$1$lcssa = $uxi$0;
     }
    } while(0);
    if ($$lcssa6) {
     $48 = ($uxi$1$lcssa|0)==($uy$sroa$0$0$ph|0);
     if ($48) {
      $50 = $x * 0.0;
      $$0 = $50;
      break;
     } else {
      $uxi$3$ph = $$lcssa;
     }
    } else {
     $uxi$3$ph = $uxi$1$lcssa;
    }
    $49 = ($uxi$3$ph>>>0)<(8388608);
    if ($49) {
     $ex$38 = $ex$2$lcssa;$uxi$39 = $uxi$3$ph;
     while(1) {
      $51 = $uxi$39 << 1;
      $52 = (($ex$38) + -1)|0;
      $53 = ($51>>>0)<(8388608);
      if ($53) {
       $ex$38 = $52;$uxi$39 = $51;
      } else {
       $ex$3$lcssa = $52;$uxi$3$lcssa = $51;
       break;
      }
     }
    } else {
     $ex$3$lcssa = $ex$2$lcssa;$uxi$3$lcssa = $uxi$3$ph;
    }
    $54 = ($ex$3$lcssa|0)>(0);
    if ($54) {
     $55 = (($uxi$3$lcssa) + -8388608)|0;
     $56 = $ex$3$lcssa << 23;
     $57 = $55 | $56;
     $uxi$4 = $57;
    } else {
     $58 = (1 - ($ex$3$lcssa))|0;
     $59 = $uxi$3$lcssa >>> $58;
     $uxi$4 = $59;
    }
    $60 = $uxi$4 | $6;
    $61 = (HEAP32[tempDoublePtr>>2]=$60,+HEAPF32[tempDoublePtr>>2]);
    $$0 = $61;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $12 = $x * $y;
  $13 = $12 / $12;
  $$0 = $13;
 }
 return (+$$0);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_fmod($x,$y));
 return (+$0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4|0) {
 case 0:  {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  break;
 }
 case 2047:  {
  $$0 = $x;
  break;
 }
 default: {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
 }
 }
 return (+$$0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$024 = 0, $$1 = 0, $$lcssa = 0, $$lcssa35 = 0, $$st = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$05 = 0, $c$1 = 0, $c$2 = 0, $dummy = 0, $dummy$wc = 0, $s$06 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $dummy = sp;
 $0 = ($st|0)==(0|0);
 $$st = $0 ? 22105972 : $st;
 $1 = HEAP32[$$st>>2]|0;
 $2 = ($src|0)==(0|0);
 L1: do {
  if ($2) {
   $3 = ($1|0)==(0);
   if ($3) {
    $$0 = 0;
   } else {
    label = 15;
   }
  } else {
   $4 = ($wc|0)==(0|0);
   $dummy$wc = $4 ? $dummy : $wc;
   $5 = ($n|0)==(0);
   if ($5) {
    $$0 = -2;
   } else {
    $6 = ($1|0)==(0);
    if ($6) {
     $7 = HEAP8[$src>>0]|0;
     $8 = $7&255;
     $9 = ($7<<24>>24)>(-1);
     if ($9) {
      HEAP32[$dummy$wc>>2] = $8;
      $10 = ($7<<24>>24)!=(0);
      $11 = $10&1;
      $$0 = $11;
      break;
     }
     $12 = (($8) + -194)|0;
     $13 = ($12>>>0)>(50);
     if ($13) {
      label = 15;
      break;
     }
     $14 = ((($src)) + 1|0);
     $15 = (22105724 + ($12<<2)|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = (($n) + -1)|0;
     $18 = ($17|0)==(0);
     if ($18) {
      $c$2 = $16;
     } else {
      $$024 = $17;$c$05 = $16;$s$06 = $14;
      label = 9;
     }
    } else {
     $$024 = $n;$c$05 = $1;$s$06 = $src;
     label = 9;
    }
    L11: do {
     if ((label|0) == 9) {
      $19 = HEAP8[$s$06>>0]|0;
      $20 = $19&255;
      $21 = $20 >>> 3;
      $22 = (($21) + -16)|0;
      $23 = $c$05 >> 26;
      $24 = (($21) + ($23))|0;
      $25 = $22 | $24;
      $26 = ($25>>>0)>(7);
      if ($26) {
       label = 15;
       break L1;
      } else {
       $$1 = $$024;$30 = $19;$c$1 = $c$05;$s$1 = $s$06;
      }
      while(1) {
       $27 = $c$1 << 6;
       $28 = ((($s$1)) + 1|0);
       $29 = $30&255;
       $31 = (($29) + -128)|0;
       $32 = $31 | $27;
       $33 = (($$1) + -1)|0;
       $34 = ($32|0)<(0);
       if (!($34)) {
        $$lcssa = $32;$$lcssa35 = $33;
        break;
       }
       $36 = ($33|0)==(0);
       if ($36) {
        $c$2 = $32;
        break L11;
       }
       $37 = HEAP8[$28>>0]|0;
       $38 = $37 & -64;
       $39 = ($38<<24>>24)==(-128);
       if ($39) {
        $$1 = $33;$30 = $37;$c$1 = $32;$s$1 = $28;
       } else {
        label = 15;
        break L1;
       }
      }
      HEAP32[$$st>>2] = 0;
      HEAP32[$dummy$wc>>2] = $$lcssa;
      $35 = (($n) - ($$lcssa35))|0;
      $$0 = $35;
      break L1;
     }
    } while(0);
    HEAP32[$$st>>2] = $c$2;
    $$0 = -2;
   }
  }
 } while(0);
 if ((label|0) == 15) {
  HEAP32[$$st>>2] = 0;
  $40 = (___errno_location()|0);
  HEAP32[$40>>2] = 84;
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 if ($0) {
  $4 = 1;
 } else {
  $1 = HEAP32[$st>>2]|0;
  $2 = ($1|0)==(0);
  $4 = $2;
 }
 $3 = $4&1;
 return ($3|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = ($wc>>>0)<(128);
   if ($1) {
    $2 = $wc&255;
    HEAP8[$s>>0] = $2;
    $$0 = 1;
    break;
   }
   $3 = ($wc>>>0)<(2048);
   if ($3) {
    $4 = $wc >>> 6;
    $5 = $4 | 192;
    $6 = $5&255;
    $7 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $6;
    $8 = $wc & 63;
    $9 = $8 | 128;
    $10 = $9&255;
    HEAP8[$7>>0] = $10;
    $$0 = 2;
    break;
   }
   $11 = ($wc>>>0)<(55296);
   $12 = $wc & -8192;
   $13 = ($12|0)==(57344);
   $or$cond = $11 | $13;
   if ($or$cond) {
    $14 = $wc >>> 12;
    $15 = $14 | 224;
    $16 = $15&255;
    $17 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $16;
    $18 = $wc >>> 6;
    $19 = $18 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    $22 = ((($s)) + 2|0);
    HEAP8[$17>>0] = $21;
    $23 = $wc & 63;
    $24 = $23 | 128;
    $25 = $24&255;
    HEAP8[$22>>0] = $25;
    $$0 = 3;
    break;
   }
   $26 = (($wc) + -65536)|0;
   $27 = ($26>>>0)<(1048576);
   if ($27) {
    $28 = $wc >>> 18;
    $29 = $28 | 240;
    $30 = $29&255;
    $31 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $30;
    $32 = $wc >>> 12;
    $33 = $32 & 63;
    $34 = $33 | 128;
    $35 = $34&255;
    $36 = ((($s)) + 2|0);
    HEAP8[$31>>0] = $35;
    $37 = $wc >>> 6;
    $38 = $37 & 63;
    $39 = $38 | 128;
    $40 = $39&255;
    $41 = ((($s)) + 3|0);
    HEAP8[$36>>0] = $40;
    $42 = $wc & 63;
    $43 = $42 | 128;
    $44 = $43&255;
    HEAP8[$41>>0] = $44;
    $$0 = 4;
    break;
   } else {
    $45 = (___errno_location()|0);
    HEAP32[$45>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _fclose($f) {
 $f = $f|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  (___lockfile($f)|0);
 }
 $3 = HEAP32[$f>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  ___lock(((22105708)|0));
  $6 = ((($f)) + 52|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  $9 = $7;
  $$pre = ((($f)) + 56|0);
  if (!($8)) {
   $10 = HEAP32[$$pre>>2]|0;
   $11 = ((($7)) + 56|0);
   HEAP32[$11>>2] = $10;
  }
  $12 = HEAP32[$$pre>>2]|0;
  $13 = ($12|0)==(0|0);
  $14 = $12;
  if (!($13)) {
   $15 = ((($12)) + 52|0);
   HEAP32[$15>>2] = $9;
  }
  $16 = HEAP32[(22105704)>>2]|0;
  $17 = ($16|0)==($f|0);
  if ($17) {
   HEAP32[(22105704)>>2] = $14;
  }
  ___unlock(((22105708)|0));
 }
 $18 = (_fflush($f)|0);
 $19 = ((($f)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (FUNCTION_TABLE_ii[$20 & 15]($f)|0);
 $22 = $21 | $18;
 $23 = ((($f)) + 92|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  _free($24);
 }
 if (!($5)) {
  _free($f);
 }
 return ($22|0);
}
function _fflush($f) {
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($f|0)==(0|0);
 do {
  if ($0) {
   $7 = HEAP32[22105932>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $27 = 0;
   } else {
    $9 = HEAP32[22105932>>2]|0;
    $10 = (_fflush($9)|0);
    $27 = $10;
   }
   ___lock(((22105708)|0));
   $$012 = HEAP32[(22105704)>>2]|0;
   $11 = ($$012|0)==(0|0);
   if ($11) {
    $r$0$lcssa = $27;
   } else {
    $$014 = $$012;$r$03 = $27;
    while(1) {
     $12 = ((($$014)) + 76|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)>(-1);
     if ($14) {
      $15 = (___lockfile($$014)|0);
      $23 = $15;
     } else {
      $23 = 0;
     }
     $16 = ((($$014)) + 20|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($$014)) + 28|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($17>>>0)>($19>>>0);
     if ($20) {
      $21 = (___fflush_unlocked($$014)|0);
      $22 = $21 | $r$03;
      $r$1 = $22;
     } else {
      $r$1 = $r$03;
     }
     $24 = ($23|0)==(0);
     if (!($24)) {
      ___unlockfile($$014);
     }
     $25 = ((($$014)) + 56|0);
     $$01 = HEAP32[$25>>2]|0;
     $26 = ($$01|0)==(0|0);
     if ($26) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $$014 = $$01;$r$03 = $r$1;
     }
    }
   }
   ___unlock(((22105708)|0));
   $$0 = $r$0$lcssa;
  } else {
   $1 = ((($f)) + 76|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(-1);
   if (!($3)) {
    $4 = (___fflush_unlocked($f)|0);
    $$0 = $4;
    break;
   }
   $5 = (___lockfile($f)|0);
   $phitmp = ($5|0)==(0);
   $6 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $$0 = $6;
   } else {
    ___unlockfile($f);
    $$0 = $6;
   }
  }
 } while(0);
 return ($$0|0);
}
function _fopen($filename,$mode) {
 $filename = $filename|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(22116955,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (___fmodeflags($mode)|0);
  $5 = $4 | 32768;
  HEAP32[$vararg_buffer>>2] = $filename;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $5;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $6 = (___syscall5(5,($vararg_buffer|0))|0);
  $7 = (___syscall_ret($6)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   $$0 = 0;
  } else {
   $9 = (___fdopen($7,$mode)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    HEAP32[$vararg_buffer3>>2] = $7;
    (___syscall6(6,($vararg_buffer3|0))|0);
    $$0 = 0;
   } else {
    $$0 = $9;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _fprintf($f,$fmt,$varargs) {
 $f = $f|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vfprintf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _fread($destv,$size,$nmemb,$f) {
 $destv = $destv|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $dest$0$ph = 0, $dest$02 = 0, $l$0$ph = 0, $l$03 = 0, $l$03$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($f)|0);
  $31 = $4;
 } else {
  $31 = 0;
 }
 $5 = ((($f)) + 74|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 << 24 >> 24;
 $8 = (($7) + 255)|0;
 $9 = $8 | $7;
 $10 = $9&255;
 HEAP8[$5>>0] = $10;
 $11 = ((($f)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($f)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 $18 = ($17|0)>(0);
 if ($18) {
  $19 = ($17>>>0)<($0>>>0);
  $$ = $19 ? $17 : $0;
  _memcpy(($destv|0),($14|0),($$|0))|0;
  $20 = (($14) + ($$)|0);
  HEAP32[$13>>2] = $20;
  $21 = (($destv) + ($$)|0);
  $22 = (($0) - ($$))|0;
  $dest$0$ph = $21;$l$0$ph = $22;
 } else {
  $dest$0$ph = $destv;$l$0$ph = $0;
 }
 $23 = ($l$0$ph|0)==(0);
 L7: do {
  if ($23) {
   label = 13;
  } else {
   $24 = ((($f)) + 32|0);
   $dest$02 = $dest$0$ph;$l$03 = $l$0$ph;
   while(1) {
    $25 = (___toread($f)|0);
    $26 = ($25|0)==(0);
    if (!($26)) {
     $l$03$lcssa = $l$03;
     break;
    }
    $27 = HEAP32[$24>>2]|0;
    $28 = (FUNCTION_TABLE_iiii[$27 & 7]($f,$dest$02,$l$03)|0);
    $29 = (($28) + 1)|0;
    $30 = ($29>>>0)<(2);
    if ($30) {
     $l$03$lcssa = $l$03;
     break;
    }
    $35 = (($l$03) - ($28))|0;
    $36 = (($dest$02) + ($28)|0);
    $37 = ($l$03|0)==($28|0);
    if ($37) {
     label = 13;
     break L7;
    } else {
     $dest$02 = $36;$l$03 = $35;
    }
   }
   $32 = ($31|0)==(0);
   if (!($32)) {
    ___unlockfile($f);
   }
   $33 = (($0) - ($l$03$lcssa))|0;
   $34 = (($33>>>0) / ($size>>>0))&-1;
   $$0 = $34;
  }
 } while(0);
 if ((label|0) == 13) {
  $38 = ($31|0)==(0);
  if ($38) {
   $$0 = $nmemb;
  } else {
   ___unlockfile($f);
   $$0 = $nmemb;
  }
 }
 return ($$0|0);
}
function ___fseeko_unlocked($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($whence|0)==(1);
 if ($0) {
  $1 = ((($f)) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($f)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = $2;
  $6 = $4;
  $7 = (($off) - ($5))|0;
  $8 = (($7) + ($6))|0;
  $$01 = $8;
 } else {
  $$01 = $off;
 }
 $9 = ((($f)) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($f)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($10>>>0)>($12>>>0);
 if ($13) {
  $14 = ((($f)) + 36|0);
  $15 = HEAP32[$14>>2]|0;
  (FUNCTION_TABLE_iiii[$15 & 7]($f,0,0)|0);
  $16 = HEAP32[$9>>2]|0;
  $17 = ($16|0)==(0|0);
  if ($17) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $18 = ((($f)) + 16|0);
  HEAP32[$18>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $19 = ((($f)) + 40|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (FUNCTION_TABLE_iiii[$20 & 7]($f,$$01,$whence)|0);
  $22 = ($21|0)<(0);
  if ($22) {
   $$0 = -1;
  } else {
   $23 = ((($f)) + 8|0);
   HEAP32[$23>>2] = 0;
   $24 = ((($f)) + 4|0);
   HEAP32[$24>>2] = 0;
   $25 = HEAP32[$f>>2]|0;
   $26 = $25 & -17;
   HEAP32[$f>>2] = $26;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function ___fseeko($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $4 = (___lockfile($f)|0);
  $phitmp = ($4|0)==(0);
  $5 = (___fseeko_unlocked($f,$off,$whence)|0);
  if ($phitmp) {
   $6 = $5;
  } else {
   ___unlockfile($f);
   $6 = $5;
  }
 } else {
  $3 = (___fseeko_unlocked($f,$off,$whence)|0);
  $6 = $3;
 }
 return ($6|0);
}
function _fseek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___fseeko($f,$off,$whence)|0);
 return ($0|0);
}
function ___ftello_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$f>>2]|0;
 $3 = $2 & 128;
 $4 = ($3|0)==(0);
 if ($4) {
  $10 = 1;
 } else {
  $5 = ((($f)) + 20|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($f)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6>>>0)>($8>>>0);
  $phitmp = $9 ? 2 : 1;
  $10 = $phitmp;
 }
 $11 = (FUNCTION_TABLE_iiii[$1 & 7]($f,0,$10)|0);
 $12 = ($11|0)<(0);
 if ($12) {
  $$0 = $11;
 } else {
  $13 = ((($f)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($f)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = $14;
  $18 = $16;
  $19 = ((($f)) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($f)) + 28|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $20;
  $24 = $22;
  $25 = (($11) - ($17))|0;
  $26 = (($25) + ($18))|0;
  $27 = (($26) + ($23))|0;
  $28 = (($27) - ($24))|0;
  $$0 = $28;
 }
 return ($$0|0);
}
function ___ftello($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $4 = (___lockfile($f)|0);
  $phitmp = ($4|0)==(0);
  $5 = (___ftello_unlocked($f)|0);
  if ($phitmp) {
   $6 = $5;
  } else {
   ___unlockfile($f);
   $6 = $5;
  }
 } else {
  $3 = (___ftello_unlocked($f)|0);
  $6 = $3;
 }
 return ($6|0);
}
function _ftell($f) {
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___ftello($f)|0);
 return ($0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa10 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___towrite($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   $$pre = HEAP32[$0>>2]|0;
   $7 = $$pre;
   label = 4;
  } else {
   $$0 = 0;
  }
 } else {
  $7 = $1;
  label = 4;
 }
 L4: do {
  if ((label|0) == 4) {
   $5 = ((($f)) + 20|0);
   $6 = HEAP32[$5>>2]|0;
   $8 = $7;
   $9 = $6;
   $10 = (($8) - ($9))|0;
   $11 = ($10>>>0)<($l>>>0);
   if ($11) {
    $12 = ((($f)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (FUNCTION_TABLE_iiii[$13 & 7]($f,$s,$l)|0);
    $$0 = $14;
    break;
   }
   $15 = ((($f)) + 75|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)>(-1);
   L9: do {
    if ($17) {
     $i$0 = $l;
     while(1) {
      $18 = ($i$0|0)==(0);
      if ($18) {
       $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
       break L9;
      }
      $19 = (($i$0) + -1)|0;
      $20 = (($s) + ($19)|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = ($21<<24>>24)==(10);
      if ($22) {
       $i$0$lcssa10 = $i$0;
       break;
      } else {
       $i$0 = $19;
      }
     }
     $23 = ((($f)) + 36|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_iiii[$24 & 7]($f,$s,$i$0$lcssa10)|0);
     $26 = ($25>>>0)<($i$0$lcssa10>>>0);
     if ($26) {
      $$0 = $i$0$lcssa10;
      break L4;
     }
     $27 = (($s) + ($i$0$lcssa10)|0);
     $28 = (($l) - ($i$0$lcssa10))|0;
     $$pre6 = HEAP32[$5>>2]|0;
     $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa10;
    } else {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
    }
   } while(0);
   _memcpy(($29|0),($$02|0),($$01|0))|0;
   $30 = HEAP32[$5>>2]|0;
   $31 = (($30) + ($$01)|0);
   HEAP32[$5>>2] = $31;
   $32 = (($i$1) + ($$01))|0;
   $$0 = $32;
  }
 } while(0);
 return ($$0|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0;
 var $ret$1 = 0, $ret$1$ = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0;
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = ((($f)) + 76|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(-1);
  if ($4) {
   $5 = (___lockfile($f)|0);
   $32 = $5;
  } else {
   $32 = 0;
  }
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 & 32;
  $8 = ((($f)) + 74|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)<(1);
  if ($10) {
   $11 = $6 & -33;
   HEAP32[$f>>2] = $11;
  }
  $12 = ((($f)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $16 = ((($f)) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$16>>2] = $internal_buf;
   $18 = ((($f)) + 28|0);
   HEAP32[$18>>2] = $internal_buf;
   $19 = ((($f)) + 20|0);
   HEAP32[$19>>2] = $internal_buf;
   HEAP32[$12>>2] = 80;
   $20 = ((($internal_buf)) + 80|0);
   $21 = ((($f)) + 16|0);
   HEAP32[$21>>2] = $20;
   $22 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $23 = ($17|0)==(0|0);
   if ($23) {
    $ret$1 = $22;
   } else {
    $24 = ((($f)) + 36|0);
    $25 = HEAP32[$24>>2]|0;
    (FUNCTION_TABLE_iiii[$25 & 7]($f,0,0)|0);
    $26 = HEAP32[$19>>2]|0;
    $27 = ($26|0)==(0|0);
    $$ = $27 ? -1 : $22;
    HEAP32[$16>>2] = $17;
    HEAP32[$12>>2] = 0;
    HEAP32[$21>>2] = 0;
    HEAP32[$18>>2] = 0;
    HEAP32[$19>>2] = 0;
    $ret$1 = $$;
   }
  } else {
   $15 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $ret$1 = $15;
  }
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 & 32;
  $30 = ($29|0)==(0);
  $ret$1$ = $30 ? $ret$1 : -1;
  $31 = $28 | $7;
  HEAP32[$f>>2] = $31;
  $33 = ($32|0)==(0);
  if (!($33)) {
   ___unlockfile($f);
  }
  $$0 = $ret$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$10 = 0, $$11 = 0, $$12 = 0, $$9 = 0, $$lcssa = 0, $$lcssa38 = 0, $$lcssa384 = 0, $$not = 0, $$old4 = 0, $$pre = 0, $$pre$phi182Z2D = 0, $$pre168 = 0, $$pre170 = 0, $$pre172 = 0, $$pre174 = 0, $$pre176 = 0, $$pre178 = 0, $$pre180 = 0, $$pre181 = 0;
 var $$size$0 = 0, $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0;
 var $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0;
 var $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0;
 var $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0;
 var $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0;
 var $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0;
 var $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0;
 var $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0.0, $311 = 0;
 var $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$0400 = 0, $alloc$1 = 0;
 var $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $base$0 = 0, $c$0100 = 0, $dest$0 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $factor = 0;
 var $factor16 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph$phi = 0, $i$0$ph20 = 0, $i$0$ph20$lcssa = 0, $i$1 = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $invert$0 = 0, $isdigit = 0, $isdigit7 = 0, $isdigit795 = 0, $isdigittmp = 0, $isdigittmp6 = 0, $isdigittmp694 = 0, $k$0$ph = 0;
 var $k$1$ph = 0, $matches$0$ = 0, $matches$0104 = 0, $matches$0104$lcssa = 0, $matches$0104376 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0, $not$ = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond8 = 0, $p$0109 = 0, $p$1 = 0, $p$1$lcssa = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0;
 var $p$396 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0108 = 0, $pos$1 = 0, $pos$2 = 0, $s$0107 = 0, $s$0107$lcssa = 0, $s$1 = 0, $s$2$ph = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0;
 var $s$8 = 0, $scanset = 0, $size$0 = 0, $st = 0, $vacopy_currentptr = 0, $wc = 0, $wcs$0103 = 0, $wcs$0103$lcssa = 0, $wcs$1 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph$lcssa = 0, $wcs$4 = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$8 = 0, $wcs$9 = 0, $width$0$lcssa = 0, $width$097 = 0;
 var $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0;
 $ap2$i = sp + 16|0;
 $st = sp + 8|0;
 $scanset = sp + 33|0;
 $wc = sp;
 $0 = sp + 32|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($f)|0);
  $333 = $4;
 } else {
  $333 = 0;
 }
 $5 = HEAP8[$fmt>>0]|0;
 $6 = ($5<<24>>24)==(0);
 L4: do {
  if ($6) {
   $matches$3 = 0;
  } else {
   $7 = ((($f)) + 4|0);
   $8 = ((($f)) + 100|0);
   $9 = ((($f)) + 108|0);
   $10 = ((($f)) + 8|0);
   $11 = ((($scanset)) + 10|0);
   $12 = ((($scanset)) + 33|0);
   $13 = ((($st)) + 4|0);
   $14 = ((($scanset)) + 46|0);
   $15 = ((($scanset)) + 94|0);
   $17 = $5;$matches$0104 = 0;$p$0109 = $fmt;$pos$0108 = 0;$s$0107 = 0;$wcs$0103 = 0;
   L6: while(1) {
    $16 = $17&255;
    $18 = (_isspace($16)|0);
    $19 = ($18|0)==(0);
    L8: do {
     if ($19) {
      $46 = HEAP8[$p$0109>>0]|0;
      $47 = ($46<<24>>24)==(37);
      L10: do {
       if ($47) {
        $48 = ((($p$0109)) + 1|0);
        $49 = HEAP8[$48>>0]|0;
        L12: do {
         switch ($49<<24>>24) {
         case 37:  {
          break L10;
          break;
         }
         case 42:  {
          $70 = ((($p$0109)) + 2|0);
          $dest$0 = 0;$p$2 = $70;
          break;
         }
         default: {
          $71 = $49&255;
          $isdigittmp = (($71) + -48)|0;
          $isdigit = ($isdigittmp>>>0)<(10);
          if ($isdigit) {
           $72 = ((($p$0109)) + 2|0);
           $73 = HEAP8[$72>>0]|0;
           $74 = ($73<<24>>24)==(36);
           if ($74) {
            $vacopy_currentptr = HEAP32[$ap>>2]|0;
            HEAP32[$ap2$i>>2] = $vacopy_currentptr;
            $i$0$i = $isdigittmp;
            while(1) {
             $75 = ($i$0$i>>>0)>(1);
             $arglist_current = HEAP32[$ap2$i>>2]|0;
             $76 = $arglist_current;
             $77 = ((0) + 4|0);
             $expanded4 = $77;
             $expanded = (($expanded4) - 1)|0;
             $78 = (($76) + ($expanded))|0;
             $79 = ((0) + 4|0);
             $expanded8 = $79;
             $expanded7 = (($expanded8) - 1)|0;
             $expanded6 = $expanded7 ^ -1;
             $80 = $78 & $expanded6;
             $81 = $80;
             $82 = HEAP32[$81>>2]|0;
             $arglist_next = ((($81)) + 4|0);
             HEAP32[$ap2$i>>2] = $arglist_next;
             $83 = (($i$0$i) + -1)|0;
             if ($75) {
              $i$0$i = $83;
             } else {
              $$lcssa = $82;
              break;
             }
            }
            $84 = ((($p$0109)) + 3|0);
            $dest$0 = $$lcssa;$p$2 = $84;
            break L12;
           }
          }
          $arglist_current2 = HEAP32[$ap>>2]|0;
          $85 = $arglist_current2;
          $86 = ((0) + 4|0);
          $expanded11 = $86;
          $expanded10 = (($expanded11) - 1)|0;
          $87 = (($85) + ($expanded10))|0;
          $88 = ((0) + 4|0);
          $expanded15 = $88;
          $expanded14 = (($expanded15) - 1)|0;
          $expanded13 = $expanded14 ^ -1;
          $89 = $87 & $expanded13;
          $90 = $89;
          $91 = HEAP32[$90>>2]|0;
          $arglist_next3 = ((($90)) + 4|0);
          HEAP32[$ap>>2] = $arglist_next3;
          $dest$0 = $91;$p$2 = $48;
         }
         }
        } while(0);
        $92 = HEAP8[$p$2>>0]|0;
        $93 = $92&255;
        $isdigittmp694 = (($93) + -48)|0;
        $isdigit795 = ($isdigittmp694>>>0)<(10);
        if ($isdigit795) {
         $97 = $93;$p$396 = $p$2;$width$097 = 0;
         while(1) {
          $94 = ($width$097*10)|0;
          $95 = (($94) + -48)|0;
          $96 = (($95) + ($97))|0;
          $98 = ((($p$396)) + 1|0);
          $99 = HEAP8[$98>>0]|0;
          $100 = $99&255;
          $isdigittmp6 = (($100) + -48)|0;
          $isdigit7 = ($isdigittmp6>>>0)<(10);
          if ($isdigit7) {
           $97 = $100;$p$396 = $98;$width$097 = $96;
          } else {
           $$lcssa38 = $99;$p$3$lcssa = $98;$width$0$lcssa = $96;
           break;
          }
         }
        } else {
         $$lcssa38 = $92;$p$3$lcssa = $p$2;$width$0$lcssa = 0;
        }
        $101 = ($$lcssa38<<24>>24)==(109);
        if ($101) {
         $102 = ($dest$0|0)!=(0|0);
         $103 = $102&1;
         $104 = ((($p$3$lcssa)) + 1|0);
         $$pre168 = HEAP8[$104>>0]|0;
         $107 = $$pre168;$alloc$0 = $103;$p$4 = $104;$s$1 = 0;$wcs$1 = 0;
        } else {
         $107 = $$lcssa38;$alloc$0 = 0;$p$4 = $p$3$lcssa;$s$1 = $s$0107;$wcs$1 = $wcs$0103;
        }
        $105 = ((($p$4)) + 1|0);
        $106 = $107&255;
        switch ($106|0) {
        case 104:  {
         $108 = HEAP8[$105>>0]|0;
         $109 = ($108<<24>>24)==(104);
         $110 = ((($p$4)) + 2|0);
         $$9 = $109 ? $110 : $105;
         $$10 = $109 ? -2 : -1;
         $p$5 = $$9;$size$0 = $$10;
         break;
        }
        case 108:  {
         $111 = HEAP8[$105>>0]|0;
         $112 = ($111<<24>>24)==(108);
         $113 = ((($p$4)) + 2|0);
         $$11 = $112 ? $113 : $105;
         $$12 = $112 ? 3 : 1;
         $p$5 = $$11;$size$0 = $$12;
         break;
        }
        case 106:  {
         $p$5 = $105;$size$0 = 3;
         break;
        }
        case 116: case 122:  {
         $p$5 = $105;$size$0 = 1;
         break;
        }
        case 76:  {
         $p$5 = $105;$size$0 = 2;
         break;
        }
        case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
         $p$5 = $p$4;$size$0 = 0;
         break;
        }
        default: {
         $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = $s$1;$wcs$7 = $wcs$1;
         label = 152;
         break L6;
        }
        }
        $114 = HEAP8[$p$5>>0]|0;
        $115 = $114&255;
        $116 = $115 & 47;
        $117 = ($116|0)==(3);
        $118 = $115 | 32;
        $$ = $117 ? $118 : $115;
        $$size$0 = $117 ? 1 : $size$0;
        switch ($$|0) {
        case 99:  {
         $119 = ($width$0$lcssa|0)<(1);
         $$width$0 = $119 ? 1 : $width$0$lcssa;
         $pos$1 = $pos$0108;$width$1 = $$width$0;
         break;
        }
        case 91:  {
         $pos$1 = $pos$0108;$width$1 = $width$0$lcssa;
         break;
        }
        case 110:  {
         $120 = ($pos$0108|0)<(0);
         $121 = $120 << 31 >> 31;
         $122 = ($dest$0|0)==(0|0);
         if ($122) {
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
         }
         switch ($$size$0|0) {
         case -2:  {
          $123 = $pos$0108&255;
          HEAP8[$dest$0>>0] = $123;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         case -1:  {
          $124 = $pos$0108&65535;
          HEAP16[$dest$0>>1] = $124;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         case 0:  {
          HEAP32[$dest$0>>2] = $pos$0108;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         case 1:  {
          HEAP32[$dest$0>>2] = $pos$0108;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         case 3:  {
          $125 = $dest$0;
          $126 = $125;
          HEAP32[$126>>2] = $pos$0108;
          $127 = (($125) + 4)|0;
          $128 = $127;
          HEAP32[$128>>2] = $121;
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
          break;
         }
         default: {
          $matches$1 = $matches$0104;$p$11 = $p$5;$pos$2 = $pos$0108;$s$5 = $s$1;$wcs$6 = $wcs$1;
          break L8;
         }
         }
         break;
        }
        default: {
         ___shlim($f,0);
         while(1) {
          $129 = HEAP32[$7>>2]|0;
          $130 = HEAP32[$8>>2]|0;
          $131 = ($129>>>0)<($130>>>0);
          if ($131) {
           $132 = ((($129)) + 1|0);
           HEAP32[$7>>2] = $132;
           $133 = HEAP8[$129>>0]|0;
           $134 = $133&255;
           $136 = $134;
          } else {
           $135 = (___shgetc($f)|0);
           $136 = $135;
          }
          $137 = (_isspace($136)|0);
          $138 = ($137|0)==(0);
          if ($138) {
           break;
          }
         }
         $139 = HEAP32[$8>>2]|0;
         $140 = ($139|0)==(0|0);
         $$pre170 = HEAP32[$7>>2]|0;
         if ($140) {
          $144 = $$pre170;
         } else {
          $141 = ((($$pre170)) + -1|0);
          HEAP32[$7>>2] = $141;
          $144 = $141;
         }
         $142 = HEAP32[$9>>2]|0;
         $143 = HEAP32[$10>>2]|0;
         $145 = $144;
         $146 = $143;
         $147 = (($142) + ($pos$0108))|0;
         $148 = (($147) + ($145))|0;
         $149 = (($148) - ($146))|0;
         $pos$1 = $149;$width$1 = $width$0$lcssa;
        }
        }
        ___shlim($f,$width$1);
        $150 = HEAP32[$7>>2]|0;
        $151 = HEAP32[$8>>2]|0;
        $152 = ($150>>>0)<($151>>>0);
        if ($152) {
         $153 = ((($150)) + 1|0);
         HEAP32[$7>>2] = $153;
         $156 = $151;
        } else {
         $154 = (___shgetc($f)|0);
         $155 = ($154|0)<(0);
         if ($155) {
          $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = $s$1;$wcs$7 = $wcs$1;
          label = 152;
          break L6;
         }
         $$pre172 = HEAP32[$8>>2]|0;
         $156 = $$pre172;
        }
        $157 = ($156|0)==(0|0);
        if (!($157)) {
         $158 = HEAP32[$7>>2]|0;
         $159 = ((($158)) + -1|0);
         HEAP32[$7>>2] = $159;
        }
        L67: do {
         switch ($$|0) {
         case 91: case 99: case 115:  {
          $160 = ($$|0)==(99);
          $161 = $$ & 239;
          $162 = ($161|0)==(99);
          L69: do {
           if ($162) {
            $163 = ($$|0)==(115);
            _memset(($scanset|0),-1,257)|0;
            HEAP8[$scanset>>0] = 0;
            if ($163) {
             HEAP8[$12>>0] = 0;
             ;HEAP8[$11>>0]=0|0;HEAP8[$11+1>>0]=0|0;HEAP8[$11+2>>0]=0|0;HEAP8[$11+3>>0]=0|0;HEAP8[$11+4>>0]=0|0;
             $p$9 = $p$5;
            } else {
             $p$9 = $p$5;
            }
           } else {
            $164 = ((($p$5)) + 1|0);
            $165 = HEAP8[$164>>0]|0;
            $166 = ($165<<24>>24)==(94);
            $167 = ((($p$5)) + 2|0);
            $invert$0 = $166&1;
            $168 = $166 ? $164 : $p$5;
            $p$6 = $166 ? $167 : $164;
            $169 = $166&1;
            _memset(($scanset|0),($169|0),257)|0;
            HEAP8[$scanset>>0] = 0;
            $170 = HEAP8[$p$6>>0]|0;
            switch ($170<<24>>24) {
            case 45:  {
             $171 = ((($168)) + 2|0);
             $172 = $invert$0 ^ 1;
             $173 = $172&255;
             HEAP8[$14>>0] = $173;
             $$pre$phi182Z2D = $173;$p$7$ph = $171;
             break;
            }
            case 93:  {
             $174 = ((($168)) + 2|0);
             $175 = $invert$0 ^ 1;
             $176 = $175&255;
             HEAP8[$15>>0] = $176;
             $$pre$phi182Z2D = $176;$p$7$ph = $174;
             break;
            }
            default: {
             $$pre180 = $invert$0 ^ 1;
             $$pre181 = $$pre180&255;
             $$pre$phi182Z2D = $$pre181;$p$7$ph = $p$6;
            }
            }
            $p$7 = $p$7$ph;
            while(1) {
             $177 = HEAP8[$p$7>>0]|0;
             L80: do {
              switch ($177<<24>>24) {
              case 0:  {
               $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = $s$1;$wcs$7 = $wcs$1;
               label = 152;
               break L6;
               break;
              }
              case 93:  {
               $p$9 = $p$7;
               break L69;
               break;
              }
              case 45:  {
               $178 = ((($p$7)) + 1|0);
               $179 = HEAP8[$178>>0]|0;
               switch ($179<<24>>24) {
               case 93: case 0:  {
                $190 = 45;$p$8 = $p$7;
                break L80;
                break;
               }
               default: {
               }
               }
               $180 = ((($p$7)) + -1|0);
               $181 = HEAP8[$180>>0]|0;
               $182 = ($181&255)<($179&255);
               if ($182) {
                $183 = $181&255;
                $c$0100 = $183;
                while(1) {
                 $184 = (($c$0100) + 1)|0;
                 $185 = (($scanset) + ($184)|0);
                 HEAP8[$185>>0] = $$pre$phi182Z2D;
                 $186 = HEAP8[$178>>0]|0;
                 $187 = $186&255;
                 $188 = ($184|0)<($187|0);
                 if ($188) {
                  $c$0100 = $184;
                 } else {
                  $190 = $186;$p$8 = $178;
                  break;
                 }
                }
               } else {
                $190 = $179;$p$8 = $178;
               }
               break;
              }
              default: {
               $190 = $177;$p$8 = $p$7;
              }
              }
             } while(0);
             $189 = $190&255;
             $191 = (($189) + 1)|0;
             $192 = (($scanset) + ($191)|0);
             HEAP8[$192>>0] = $$pre$phi182Z2D;
             $193 = ((($p$8)) + 1|0);
             $p$7 = $193;
            }
           }
          } while(0);
          $194 = (($width$1) + 1)|0;
          $195 = $160 ? $194 : 31;
          $196 = ($$size$0|0)==(1);
          $197 = ($alloc$0|0)!=(0);
          L88: do {
           if ($196) {
            if ($197) {
             $198 = $195 << 2;
             $199 = (_malloc($198)|0);
             $200 = ($199|0)==(0|0);
             if ($200) {
              $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = $199;
              label = 152;
              break L6;
             } else {
              $wcs$2 = $199;
             }
            } else {
             $wcs$2 = $dest$0;
            }
            HEAP32[$st>>2] = 0;
            HEAP32[$13>>2] = 0;
            $i$0$ph = 0;$k$0$ph = $195;$wcs$3$ph = $wcs$2;
            L94: while(1) {
             $201 = ($wcs$3$ph|0)==(0|0);
             $i$0$ph20 = $i$0$ph;
             while(1) {
              L98: while(1) {
               $202 = HEAP32[$7>>2]|0;
               $203 = HEAP32[$8>>2]|0;
               $204 = ($202>>>0)<($203>>>0);
               if ($204) {
                $205 = ((($202)) + 1|0);
                HEAP32[$7>>2] = $205;
                $206 = HEAP8[$202>>0]|0;
                $207 = $206&255;
                $210 = $207;
               } else {
                $208 = (___shgetc($f)|0);
                $210 = $208;
               }
               $209 = (($210) + 1)|0;
               $211 = (($scanset) + ($209)|0);
               $212 = HEAP8[$211>>0]|0;
               $213 = ($212<<24>>24)==(0);
               if ($213) {
                $i$0$ph20$lcssa = $i$0$ph20;$wcs$3$ph$lcssa = $wcs$3$ph;
                break L94;
               }
               $214 = $210&255;
               HEAP8[$0>>0] = $214;
               $215 = (_mbrtowc($wc,$0,1,$st)|0);
               switch ($215|0) {
               case -1:  {
                $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = $wcs$3$ph;
                label = 152;
                break L6;
                break;
               }
               case -2:  {
                break;
               }
               default: {
                break L98;
               }
               }
              }
              if ($201) {
               $i$1 = $i$0$ph20;
              } else {
               $216 = HEAP32[$wc>>2]|0;
               $217 = (($i$0$ph20) + 1)|0;
               $218 = (($wcs$3$ph) + ($i$0$ph20<<2)|0);
               HEAP32[$218>>2] = $216;
               $i$1 = $217;
              }
              $219 = ($i$1|0)==($k$0$ph|0);
              $or$cond = $197 & $219;
              if ($or$cond) {
               break;
              } else {
               $i$0$ph20 = $i$1;
              }
             }
             $factor = $k$0$ph << 1;
             $220 = $factor | 1;
             $221 = $220 << 2;
             $222 = (_realloc($wcs$3$ph,$221)|0);
             $223 = ($222|0)==(0|0);
             if ($223) {
              $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = $wcs$3$ph;
              label = 152;
              break L6;
             }
             $i$0$ph$phi = $k$0$ph;$k$0$ph = $220;$wcs$3$ph = $222;$i$0$ph = $i$0$ph$phi;
            }
            $224 = (_mbsinit($st)|0);
            $225 = ($224|0)==(0);
            if ($225) {
             $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = $wcs$3$ph$lcssa;
             label = 152;
             break L6;
            } else {
             $i$4 = $i$0$ph20$lcssa;$s$3 = 0;$wcs$4 = $wcs$3$ph$lcssa;
            }
           } else {
            if ($197) {
             $226 = (_malloc($195)|0);
             $227 = ($226|0)==(0|0);
             if ($227) {
              $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = 0;$wcs$7 = 0;
              label = 152;
              break L6;
             } else {
              $i$2$ph = 0;$k$1$ph = $195;$s$2$ph = $226;
             }
             while(1) {
              $i$2 = $i$2$ph;
              while(1) {
               $228 = HEAP32[$7>>2]|0;
               $229 = HEAP32[$8>>2]|0;
               $230 = ($228>>>0)<($229>>>0);
               if ($230) {
                $231 = ((($228)) + 1|0);
                HEAP32[$7>>2] = $231;
                $232 = HEAP8[$228>>0]|0;
                $233 = $232&255;
                $236 = $233;
               } else {
                $234 = (___shgetc($f)|0);
                $236 = $234;
               }
               $235 = (($236) + 1)|0;
               $237 = (($scanset) + ($235)|0);
               $238 = HEAP8[$237>>0]|0;
               $239 = ($238<<24>>24)==(0);
               if ($239) {
                $i$4 = $i$2;$s$3 = $s$2$ph;$wcs$4 = 0;
                break L88;
               }
               $240 = $236&255;
               $241 = (($i$2) + 1)|0;
               $242 = (($s$2$ph) + ($i$2)|0);
               HEAP8[$242>>0] = $240;
               $243 = ($241|0)==($k$1$ph|0);
               if ($243) {
                break;
               } else {
                $i$2 = $241;
               }
              }
              $factor16 = $k$1$ph << 1;
              $244 = $factor16 | 1;
              $245 = (_realloc($s$2$ph,$244)|0);
              $246 = ($245|0)==(0|0);
              if ($246) {
               $alloc$0400 = $alloc$0;$matches$0104376 = $matches$0104;$s$6 = $s$2$ph;$wcs$7 = 0;
               label = 152;
               break L6;
              } else {
               $i$2$ph$phi = $k$1$ph;$k$1$ph = $244;$s$2$ph = $245;$i$2$ph = $i$2$ph$phi;
              }
             }
            }
            $247 = ($dest$0|0)==(0|0);
            if ($247) {
             $265 = $156;
             while(1) {
              $263 = HEAP32[$7>>2]|0;
              $264 = ($263>>>0)<($265>>>0);
              if ($264) {
               $266 = ((($263)) + 1|0);
               HEAP32[$7>>2] = $266;
               $267 = HEAP8[$263>>0]|0;
               $268 = $267&255;
               $271 = $268;
              } else {
               $269 = (___shgetc($f)|0);
               $271 = $269;
              }
              $270 = (($271) + 1)|0;
              $272 = (($scanset) + ($270)|0);
              $273 = HEAP8[$272>>0]|0;
              $274 = ($273<<24>>24)==(0);
              if ($274) {
               $i$4 = 0;$s$3 = 0;$wcs$4 = 0;
               break L88;
              }
              $$pre176 = HEAP32[$8>>2]|0;
              $265 = $$pre176;
             }
            } else {
             $250 = $156;$i$3 = 0;
             while(1) {
              $248 = HEAP32[$7>>2]|0;
              $249 = ($248>>>0)<($250>>>0);
              if ($249) {
               $251 = ((($248)) + 1|0);
               HEAP32[$7>>2] = $251;
               $252 = HEAP8[$248>>0]|0;
               $253 = $252&255;
               $256 = $253;
              } else {
               $254 = (___shgetc($f)|0);
               $256 = $254;
              }
              $255 = (($256) + 1)|0;
              $257 = (($scanset) + ($255)|0);
              $258 = HEAP8[$257>>0]|0;
              $259 = ($258<<24>>24)==(0);
              if ($259) {
               $i$4 = $i$3;$s$3 = $dest$0;$wcs$4 = 0;
               break L88;
              }
              $260 = $256&255;
              $261 = (($i$3) + 1)|0;
              $262 = (($dest$0) + ($i$3)|0);
              HEAP8[$262>>0] = $260;
              $$pre174 = HEAP32[$8>>2]|0;
              $250 = $$pre174;$i$3 = $261;
             }
            }
           }
          } while(0);
          $275 = HEAP32[$8>>2]|0;
          $276 = ($275|0)==(0|0);
          $$pre178 = HEAP32[$7>>2]|0;
          if ($276) {
           $280 = $$pre178;
          } else {
           $277 = ((($$pre178)) + -1|0);
           HEAP32[$7>>2] = $277;
           $280 = $277;
          }
          $278 = HEAP32[$9>>2]|0;
          $279 = HEAP32[$10>>2]|0;
          $281 = $280;
          $282 = $279;
          $283 = (($281) - ($282))|0;
          $284 = (($283) + ($278))|0;
          $285 = ($284|0)==(0);
          if ($285) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0104;$s$8 = $s$3;$wcs$9 = $wcs$4;
           break L6;
          }
          $$not = $160 ^ 1;
          $286 = ($284|0)==($width$1|0);
          $or$cond8 = $286 | $$not;
          if (!($or$cond8)) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0104;$s$8 = $s$3;$wcs$9 = $wcs$4;
           break L6;
          }
          do {
           if ($197) {
            if ($196) {
             HEAP32[$dest$0>>2] = $wcs$4;
             break;
            } else {
             HEAP32[$dest$0>>2] = $s$3;
             break;
            }
           }
          } while(0);
          if ($160) {
           $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
          } else {
           $287 = ($wcs$4|0)==(0|0);
           if (!($287)) {
            $288 = (($wcs$4) + ($i$4<<2)|0);
            HEAP32[$288>>2] = 0;
           }
           $289 = ($s$3|0)==(0|0);
           if ($289) {
            $p$10 = $p$9;$s$4 = 0;$wcs$5 = $wcs$4;
            break L67;
           }
           $290 = (($s$3) + ($i$4)|0);
           HEAP8[$290>>0] = 0;
           $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
          }
          break;
         }
         case 120: case 88: case 112:  {
          $base$0 = 16;
          label = 134;
          break;
         }
         case 111:  {
          $base$0 = 8;
          label = 134;
          break;
         }
         case 117: case 100:  {
          $base$0 = 10;
          label = 134;
          break;
         }
         case 105:  {
          $base$0 = 0;
          label = 134;
          break;
         }
         case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
          $310 = (+___floatscan($f,$$size$0,0));
          $311 = HEAP32[$9>>2]|0;
          $312 = HEAP32[$7>>2]|0;
          $313 = HEAP32[$10>>2]|0;
          $314 = $312;
          $315 = $313;
          $316 = (($315) - ($314))|0;
          $317 = ($311|0)==($316|0);
          if ($317) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0104;$s$8 = $s$1;$wcs$9 = $wcs$1;
           break L6;
          }
          $318 = ($dest$0|0)==(0|0);
          if ($318) {
           $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          } else {
           switch ($$size$0|0) {
           case 0:  {
            $319 = $310;
            HEAPF32[$dest$0>>2] = $319;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L67;
            break;
           }
           case 1:  {
            HEAPF64[$dest$0>>3] = $310;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L67;
            break;
           }
           case 2:  {
            HEAPF64[$dest$0>>3] = $310;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L67;
            break;
           }
           default: {
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L67;
           }
           }
          }
          break;
         }
         default: {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
         }
         }
        } while(0);
        L168: do {
         if ((label|0) == 134) {
          label = 0;
          $291 = (___intscan($f,$base$0,0,-1,-1)|0);
          $292 = tempRet0;
          $293 = HEAP32[$9>>2]|0;
          $294 = HEAP32[$7>>2]|0;
          $295 = HEAP32[$10>>2]|0;
          $296 = $294;
          $297 = $295;
          $298 = (($297) - ($296))|0;
          $299 = ($293|0)==($298|0);
          if ($299) {
           $alloc$2 = $alloc$0;$matches$2 = $matches$0104;$s$8 = $s$1;$wcs$9 = $wcs$1;
           break L6;
          }
          $300 = ($$|0)==(112);
          $301 = ($dest$0|0)!=(0|0);
          $or$cond3 = $301 & $300;
          if ($or$cond3) {
           $302 = $291;
           HEAP32[$dest$0>>2] = $302;
           $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
           break;
          }
          $303 = ($dest$0|0)==(0|0);
          if ($303) {
           $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          } else {
           switch ($$size$0|0) {
           case -2:  {
            $304 = $291&255;
            HEAP8[$dest$0>>0] = $304;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           case -1:  {
            $305 = $291&65535;
            HEAP16[$dest$0>>1] = $305;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           case 0:  {
            HEAP32[$dest$0>>2] = $291;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           case 1:  {
            HEAP32[$dest$0>>2] = $291;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           case 3:  {
            $306 = $dest$0;
            $307 = $306;
            HEAP32[$307>>2] = $291;
            $308 = (($306) + 4)|0;
            $309 = $308;
            HEAP32[$309>>2] = $292;
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
            break;
           }
           default: {
            $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
            break L168;
           }
           }
          }
         }
        } while(0);
        $320 = HEAP32[$9>>2]|0;
        $321 = HEAP32[$7>>2]|0;
        $322 = HEAP32[$10>>2]|0;
        $323 = $321;
        $324 = $322;
        $325 = (($320) + ($pos$1))|0;
        $326 = (($325) + ($323))|0;
        $327 = (($326) - ($324))|0;
        $not$ = ($dest$0|0)!=(0|0);
        $328 = $not$&1;
        $matches$0$ = (($328) + ($matches$0104))|0;
        $matches$1 = $matches$0$;$p$11 = $p$10;$pos$2 = $327;$s$5 = $s$4;$wcs$6 = $wcs$5;
        break L8;
       }
      } while(0);
      $50 = $47&1;
      $51 = (($p$0109) + ($50)|0);
      ___shlim($f,0);
      $52 = HEAP32[$7>>2]|0;
      $53 = HEAP32[$8>>2]|0;
      $54 = ($52>>>0)<($53>>>0);
      if ($54) {
       $55 = ((($52)) + 1|0);
       HEAP32[$7>>2] = $55;
       $56 = HEAP8[$52>>0]|0;
       $57 = $56&255;
       $61 = $57;
      } else {
       $58 = (___shgetc($f)|0);
       $61 = $58;
      }
      $59 = HEAP8[$51>>0]|0;
      $60 = $59&255;
      $62 = ($61|0)==($60|0);
      if (!($62)) {
       $$lcssa384 = $61;$matches$0104$lcssa = $matches$0104;$s$0107$lcssa = $s$0107;$wcs$0103$lcssa = $wcs$0103;
       label = 21;
       break L6;
      }
      $69 = (($pos$0108) + 1)|0;
      $matches$1 = $matches$0104;$p$11 = $51;$pos$2 = $69;$s$5 = $s$0107;$wcs$6 = $wcs$0103;
     } else {
      $p$1 = $p$0109;
      while(1) {
       $20 = ((($p$1)) + 1|0);
       $21 = HEAP8[$20>>0]|0;
       $22 = $21&255;
       $23 = (_isspace($22)|0);
       $24 = ($23|0)==(0);
       if ($24) {
        $p$1$lcssa = $p$1;
        break;
       } else {
        $p$1 = $20;
       }
      }
      ___shlim($f,0);
      while(1) {
       $25 = HEAP32[$7>>2]|0;
       $26 = HEAP32[$8>>2]|0;
       $27 = ($25>>>0)<($26>>>0);
       if ($27) {
        $28 = ((($25)) + 1|0);
        HEAP32[$7>>2] = $28;
        $29 = HEAP8[$25>>0]|0;
        $30 = $29&255;
        $32 = $30;
       } else {
        $31 = (___shgetc($f)|0);
        $32 = $31;
       }
       $33 = (_isspace($32)|0);
       $34 = ($33|0)==(0);
       if ($34) {
        break;
       }
      }
      $35 = HEAP32[$8>>2]|0;
      $36 = ($35|0)==(0|0);
      $$pre = HEAP32[$7>>2]|0;
      if ($36) {
       $40 = $$pre;
      } else {
       $37 = ((($$pre)) + -1|0);
       HEAP32[$7>>2] = $37;
       $40 = $37;
      }
      $38 = HEAP32[$9>>2]|0;
      $39 = HEAP32[$10>>2]|0;
      $41 = $40;
      $42 = $39;
      $43 = (($38) + ($pos$0108))|0;
      $44 = (($43) + ($41))|0;
      $45 = (($44) - ($42))|0;
      $matches$1 = $matches$0104;$p$11 = $p$1$lcssa;$pos$2 = $45;$s$5 = $s$0107;$wcs$6 = $wcs$0103;
     }
    } while(0);
    $329 = ((($p$11)) + 1|0);
    $330 = HEAP8[$329>>0]|0;
    $331 = ($330<<24>>24)==(0);
    if ($331) {
     $matches$3 = $matches$1;
     break L4;
    } else {
     $17 = $330;$matches$0104 = $matches$1;$p$0109 = $329;$pos$0108 = $pos$2;$s$0107 = $s$5;$wcs$0103 = $wcs$6;
    }
   }
   if ((label|0) == 21) {
    $63 = HEAP32[$8>>2]|0;
    $64 = ($63|0)==(0|0);
    if (!($64)) {
     $65 = HEAP32[$7>>2]|0;
     $66 = ((($65)) + -1|0);
     HEAP32[$7>>2] = $66;
    }
    $67 = ($$lcssa384|0)>(-1);
    $68 = ($matches$0104$lcssa|0)!=(0);
    $or$cond5 = $68 | $67;
    if ($or$cond5) {
     $matches$3 = $matches$0104$lcssa;
     break;
    } else {
     $alloc$1 = 0;$s$7 = $s$0107$lcssa;$wcs$8 = $wcs$0103$lcssa;
     label = 153;
    }
   }
   else if ((label|0) == 152) {
    $$old4 = ($matches$0104376|0)==(0);
    if ($$old4) {
     $alloc$1 = $alloc$0400;$s$7 = $s$6;$wcs$8 = $wcs$7;
     label = 153;
    } else {
     $alloc$2 = $alloc$0400;$matches$2 = $matches$0104376;$s$8 = $s$6;$wcs$9 = $wcs$7;
    }
   }
   if ((label|0) == 153) {
    $alloc$2 = $alloc$1;$matches$2 = -1;$s$8 = $s$7;$wcs$9 = $wcs$8;
   }
   $332 = ($alloc$2|0)==(0);
   if ($332) {
    $matches$3 = $matches$2;
   } else {
    _free($s$8);
    _free($wcs$9);
    $matches$3 = $matches$2;
   }
  }
 } while(0);
 $334 = ($333|0)==(0);
 if (!($334)) {
  ___unlockfile($f);
 }
 STACKTOP = sp;return ($matches$3|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f = sp;
 dest=$f; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = ((($f)) + 32|0);
 HEAP32[$0>>2] = 5;
 $1 = ((($f)) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ((($f)) + 76|0);
 HEAP32[$2>>2] = -1;
 $3 = ((($f)) + 84|0);
 HEAP32[$3>>2] = $s;
 $4 = (_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($4|0);
}
function ___fdopen($fd,$mode) {
 $fd = $fd|0;
 $mode = $mode|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $tio = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $tio = sp + 52|0;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(22116955,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (_malloc(1144)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$0 = 0;
  } else {
   dest=$4; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $6 = (_strchr($mode,43)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $8 = ($0<<24>>24)==(114);
    $9 = $8 ? 8 : 4;
    HEAP32[$4>>2] = $9;
   }
   $10 = (_strchr($mode,101)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $12 = $0;
   } else {
    HEAP32[$vararg_buffer>>2] = $fd;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$mode>>0]|0;
    $12 = $$pre;
   }
   $13 = ($12<<24>>24)==(97);
   if ($13) {
    HEAP32[$vararg_buffer3>>2] = $fd;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $14 = (___syscall221(221,($vararg_buffer3|0))|0);
    $15 = $14 & 1024;
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = $14 | 1024;
     HEAP32[$vararg_buffer7>>2] = $fd;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $17;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $18 = HEAP32[$4>>2]|0;
    $19 = $18 | 128;
    HEAP32[$4>>2] = $19;
    $26 = $19;
   } else {
    $$pre1 = HEAP32[$4>>2]|0;
    $26 = $$pre1;
   }
   $20 = ((($4)) + 60|0);
   HEAP32[$20>>2] = $fd;
   $21 = ((($4)) + 120|0);
   $22 = ((($4)) + 44|0);
   HEAP32[$22>>2] = $21;
   $23 = ((($4)) + 48|0);
   HEAP32[$23>>2] = 1024;
   $24 = ((($4)) + 75|0);
   HEAP8[$24>>0] = -1;
   $25 = $26 & 8;
   $27 = ($25|0)==(0);
   if ($27) {
    HEAP32[$vararg_buffer12>>2] = $fd;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21505;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $tio;
    $28 = (___syscall54(54,($vararg_buffer12|0))|0);
    $29 = ($28|0)==(0);
    if ($29) {
     HEAP8[$24>>0] = 10;
    }
   }
   $30 = ((($4)) + 32|0);
   HEAP32[$30>>2] = 6;
   $31 = ((($4)) + 36|0);
   HEAP32[$31>>2] = 1;
   $32 = ((($4)) + 40|0);
   HEAP32[$32>>2] = 2;
   $33 = ((($4)) + 12|0);
   HEAP32[$33>>2] = 1;
   $34 = HEAP32[(22105684)>>2]|0;
   $35 = ($34|0)==(0);
   if ($35) {
    $36 = ((($4)) + 76|0);
    HEAP32[$36>>2] = -1;
   }
   ___lock(((22105708)|0));
   $37 = HEAP32[(22105704)>>2]|0;
   $38 = ((($4)) + 56|0);
   HEAP32[$38>>2] = $37;
   $39 = ($37|0)==(0);
   if (!($39)) {
    $40 = $37;
    $41 = ((($40)) + 52|0);
    HEAP32[$41>>2] = $4;
   }
   HEAP32[(22105704)>>2] = $4;
   ___unlock(((22105708)|0));
   $$0 = $4;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($mode) {
 $mode = $mode|0;
 var $$ = 0, $$flags$4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags$0 = 0, $flags$0$ = 0, $flags$2 = 0;
 var $flags$2$ = 0, $flags$4 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strchr($mode,43)|0);
 $1 = ($0|0)==(0|0);
 $2 = HEAP8[$mode>>0]|0;
 $not$ = ($2<<24>>24)!=(114);
 $$ = $not$&1;
 $flags$0 = $1 ? $$ : 2;
 $3 = (_strchr($mode,120)|0);
 $4 = ($3|0)==(0|0);
 $5 = $flags$0 | 128;
 $flags$0$ = $4 ? $flags$0 : $5;
 $6 = (_strchr($mode,101)|0);
 $7 = ($6|0)==(0|0);
 $8 = $flags$0$ | 524288;
 $flags$2 = $7 ? $flags$0$ : $8;
 $9 = ($2<<24>>24)==(114);
 $10 = $flags$2 | 64;
 $flags$2$ = $9 ? $flags$2 : $10;
 $11 = ($2<<24>>24)==(119);
 $12 = $flags$2$ | 512;
 $flags$4 = $11 ? $12 : $flags$2$;
 $13 = ($2<<24>>24)==(97);
 $14 = $flags$4 | 1024;
 $$flags$4 = $13 ? $14 : $flags$4;
 return ($$flags$4|0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $vararg_buffer = sp;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___stdio_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cnt$0 = 0, $iov = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iov = sp + 32|0;
 HEAP32[$iov>>2] = $buf;
 $0 = ((($iov)) + 4|0);
 $1 = ((($f)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 $4 = $3&1;
 $5 = (($len) - ($4))|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($iov)) + 8|0);
 $7 = ((($f)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = ((($iov)) + 12|0);
 HEAP32[$9>>2] = $2;
 $10 = HEAP32[22105680>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $16 = ((($f)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $17;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $iov;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 2;
  $18 = (___syscall145(145,($vararg_buffer3|0))|0);
  $19 = (___syscall_ret($18)|0);
  $cnt$0 = $19;
 } else {
  _pthread_cleanup_push((27|0),($f|0));
  $12 = ((($f)) + 60|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $iov;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2;
  $14 = (___syscall145(145,($vararg_buffer|0))|0);
  $15 = (___syscall_ret($14)|0);
  _pthread_cleanup_pop(0);
  $cnt$0 = $15;
 }
 $20 = ($cnt$0|0)<(1);
 if ($20) {
  $21 = $cnt$0 & 48;
  $22 = $21 ^ 16;
  $23 = HEAP32[$f>>2]|0;
  $24 = $23 | $22;
  HEAP32[$f>>2] = $24;
  $25 = ((($f)) + 8|0);
  HEAP32[$25>>2] = 0;
  $26 = ((($f)) + 4|0);
  HEAP32[$26>>2] = 0;
  $$0 = $cnt$0;
 } else {
  $27 = HEAP32[$0>>2]|0;
  $28 = ($cnt$0>>>0)>($27>>>0);
  if ($28) {
   $29 = (($cnt$0) - ($27))|0;
   $30 = HEAP32[$7>>2]|0;
   $31 = ((($f)) + 4|0);
   HEAP32[$31>>2] = $30;
   $32 = $30;
   $33 = (($32) + ($29)|0);
   $34 = ((($f)) + 8|0);
   HEAP32[$34>>2] = $33;
   $35 = HEAP32[$1>>2]|0;
   $36 = ($35|0)==(0);
   if ($36) {
    $$0 = $len;
   } else {
    $37 = ((($32)) + 1|0);
    HEAP32[$31>>2] = $37;
    $38 = HEAP8[$32>>0]|0;
    $39 = (($len) + -1)|0;
    $40 = (($buf) + ($39)|0);
    HEAP8[$40>>0] = $38;
    $$0 = $len;
   }
  } else {
   $$0 = $cnt$0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdio_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0;
 $vararg_buffer = sp;
 $ret = sp + 20|0;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $off;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $ret;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $2 = (___syscall140(140,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  HEAP32[$ret>>2] = -1;
  $5 = -1;
 } else {
  $$pre = HEAP32[$ret>>2]|0;
  $5 = $$pre;
 }
 STACKTOP = sp;return ($5|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0;
 var $iovcnt$0$lcssa12 = 0, $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iovs = sp + 32|0;
 $0 = ((($f)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$iovs>>2] = $1;
 $2 = ((($iovs)) + 4|0);
 $3 = ((($f)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4;
 $6 = (($5) - ($1))|0;
 HEAP32[$2>>2] = $6;
 $7 = ((($iovs)) + 8|0);
 HEAP32[$7>>2] = $buf;
 $8 = ((($iovs)) + 12|0);
 HEAP32[$8>>2] = $len;
 $9 = (($6) + ($len))|0;
 $10 = ((($f)) + 60|0);
 $11 = ((($f)) + 44|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $9;
 while(1) {
  $12 = HEAP32[22105680>>2]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   $17 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $17;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $iov$0;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
   $18 = (___syscall146(146,($vararg_buffer3|0))|0);
   $19 = (___syscall_ret($18)|0);
   $cnt$0 = $19;
  } else {
   _pthread_cleanup_push((28|0),($f|0));
   $14 = HEAP32[$10>>2]|0;
   HEAP32[$vararg_buffer>>2] = $14;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $iov$0;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
   $15 = (___syscall146(146,($vararg_buffer|0))|0);
   $16 = (___syscall_ret($15)|0);
   _pthread_cleanup_pop(0);
   $cnt$0 = $16;
  }
  $20 = ($rem$0|0)==($cnt$0|0);
  if ($20) {
   label = 6;
   break;
  }
  $27 = ($cnt$0|0)<(0);
  if ($27) {
   $iov$0$lcssa11 = $iov$0;$iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $35 = (($rem$0) - ($cnt$0))|0;
  $36 = ((($iov$0)) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($cnt$0>>>0)>($37>>>0);
  if ($38) {
   $39 = HEAP32[$11>>2]|0;
   HEAP32[$0>>2] = $39;
   HEAP32[$3>>2] = $39;
   $40 = (($cnt$0) - ($37))|0;
   $41 = ((($iov$0)) + 8|0);
   $42 = (($iovcnt$0) + -1)|0;
   $$phi$trans$insert = ((($iov$0)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $50 = $$pre;$cnt$1 = $40;$iov$1 = $41;$iovcnt$1 = $42;
  } else {
   $43 = ($iovcnt$0|0)==(2);
   if ($43) {
    $44 = HEAP32[$0>>2]|0;
    $45 = (($44) + ($cnt$0)|0);
    HEAP32[$0>>2] = $45;
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
   } else {
    $50 = $37;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
   }
  }
  $46 = HEAP32[$iov$1>>2]|0;
  $47 = (($46) + ($cnt$1)|0);
  HEAP32[$iov$1>>2] = $47;
  $48 = ((($iov$1)) + 4|0);
  $49 = (($50) - ($cnt$1))|0;
  HEAP32[$48>>2] = $49;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $35;
 }
 if ((label|0) == 6) {
  $21 = HEAP32[$11>>2]|0;
  $22 = ((($f)) + 48|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($21) + ($23)|0);
  $25 = ((($f)) + 16|0);
  HEAP32[$25>>2] = $24;
  $26 = $21;
  HEAP32[$0>>2] = $26;
  HEAP32[$3>>2] = $26;
  $$0 = $len;
 }
 else if ((label|0) == 8) {
  $28 = ((($f)) + 16|0);
  HEAP32[$28>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$3>>2] = 0;
  $29 = HEAP32[$f>>2]|0;
  $30 = $29 | 32;
  HEAP32[$f>>2] = $30;
  $31 = ($iovcnt$0$lcssa12|0)==(2);
  if ($31) {
   $$0 = 0;
  } else {
   $32 = ((($iov$0$lcssa11)) + 4|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = (($len) - ($33))|0;
   $$0 = $34;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0;
 $vararg_buffer = sp;
 $tio = sp + 12|0;
 $0 = ((($f)) + 36|0);
 HEAP32[$0>>2] = 1;
 $1 = HEAP32[$f>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($f)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $tio;
  $6 = (___syscall54(54,($vararg_buffer|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = ((($f)) + 75|0);
   HEAP8[$8>>0] = -1;
  }
 }
 $9 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($9|0);
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$0$len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($len) + 256)|0;
 $3 = (_memchr($1,0,$2)|0);
 $4 = ($3|0)==(0|0);
 $5 = $3;
 $6 = $1;
 $7 = (($5) - ($6))|0;
 $k$0 = $4 ? $2 : $7;
 $8 = ($k$0>>>0)<($len>>>0);
 $k$0$len = $8 ? $k$0 : $len;
 _memcpy(($buf|0),($1|0),($k$0$len|0))|0;
 $9 = (($1) + ($k$0$len)|0);
 $10 = ((($f)) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = (($1) + ($k$0)|0);
 $12 = ((($f)) + 8|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$0>>2] = $11;
 return ($k$0$len|0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = ((($f)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($f)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = ((($f)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 7]($f,0,0)|0);
 }
 $13 = ((($f)) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($f)) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = ((($f)) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($f)) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
 } else {
  $18 = $15 & 4;
  $19 = ($18|0)==(0);
  if ($19) {
   $$0 = -1;
  } else {
   $20 = $15 | 32;
   HEAP32[$f>>2] = $20;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0;
 $c = sp;
 $0 = ((($f)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = ((($f)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 7]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _qsort($base,$nel,$width,$cmp) {
 $base = $base|0;
 $nel = $nel|0;
 $width = $width|0;
 $cmp = $cmp|0;
 var $$0$i = 0, $$0$i30 = 0, $$02$i$i = 0, $$02$i3$i = 0, $$lcssa = 0, $$lcssa57 = 0, $$phi$trans$insert$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i11 = 0, $$pre$i20 = 0, $$pre$i5 = 0, $$pre$i8 = 0, $$pre1$i = 0, $$pre1$i12 = 0, $$pre1$i27$pre = 0, $$pre1$i6 = 0, $$pre1$i9 = 0, $$sum = 0, $$sum2 = 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $8$phi = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $head$0$lcssa = 0, $head$036 = 0;
 var $head$1$be = 0, $head$153 = 0, $i$0 = 0, $lp = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $nTrailingZeros$03$i2$i$lcssa = 0, $or$cond = 0, $or$cond48 = 0, $or$cond4852 = 0, $or$cond51 = 0, $p = 0, $pshift$0$lcssa = 0, $pshift$037 = 0, $pshift$1 = 0, $pshift$2$be = 0, $pshift$254 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0;
 $lp = sp + 8|0;
 $p = sp;
 $0 = Math_imul($width, $nel)|0;
 $1 = $p;
 $2 = $1;
 HEAP32[$2>>2] = 1;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 $5 = ($0|0)==(0);
 if (!($5)) {
  $$sum = (($0) - ($width))|0;
  $6 = ((($lp)) + 4|0);
  HEAP32[$6>>2] = $width;
  HEAP32[$lp>>2] = $width;
  $10 = $width;$8 = $width;$i$0 = 2;
  while(1) {
   $7 = (($8) + ($width))|0;
   $9 = (($7) + ($10))|0;
   $11 = (($lp) + ($i$0<<2)|0);
   HEAP32[$11>>2] = $9;
   $12 = ($9>>>0)<($0>>>0);
   $13 = (($i$0) + 1)|0;
   if ($12) {
    $8$phi = $10;$10 = $9;$i$0 = $13;$8 = $8$phi;
   } else {
    break;
   }
  }
  $14 = (0 - ($width))|0;
  $15 = (($base) + ($$sum)|0);
  $16 = ($$sum|0)>(0);
  $$phi$trans$insert$i = ((($p)) + 4|0);
  if ($16) {
   $17 = $15;
   $19 = 1;$head$036 = $base;$pshift$037 = 1;
   while(1) {
    $18 = $19 & 3;
    $20 = ($18|0)==(3);
    do {
     if ($20) {
      _sift($head$036,$width,$cmp,$pshift$037,$lp);
      $$pre$i = HEAP32[$p>>2]|0;
      $$pre1$i = HEAP32[$$phi$trans$insert$i>>2]|0;
      $21 = $$pre$i >>> 2;
      $22 = $$pre1$i << 30;
      $23 = $22 | $21;
      HEAP32[$p>>2] = $23;
      $24 = $$pre1$i >>> 2;
      HEAP32[$$phi$trans$insert$i>>2] = $24;
      $25 = (($pshift$037) + 2)|0;
      $48 = $23;$pshift$1 = $25;
     } else {
      $26 = (($pshift$037) + -1)|0;
      $27 = (($lp) + ($26<<2)|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = $head$036;
      $30 = (($17) - ($29))|0;
      $31 = ($28>>>0)<($30>>>0);
      if ($31) {
       _sift($head$036,$width,$cmp,$pshift$037,$lp);
      } else {
       _trinkle($head$036,$width,$cmp,$p,$pshift$037,0,$lp);
      }
      $32 = ($pshift$037|0)==(1);
      if ($32) {
       $$pre$i5 = HEAP32[$$phi$trans$insert$i>>2]|0;
       $$pre1$i6 = HEAP32[$p>>2]|0;
       $33 = $$pre$i5 << 1;
       $34 = $$pre1$i6 >>> 31;
       $35 = $34 | $33;
       HEAP32[$$phi$trans$insert$i>>2] = $35;
       $36 = $$pre1$i6 << 1;
       HEAP32[$p>>2] = $36;
       $48 = $36;$pshift$1 = 0;
       break;
      }
      $37 = ($26>>>0)>(31);
      if ($37) {
       $38 = (($pshift$037) + -33)|0;
       $39 = HEAP32[$p>>2]|0;
       HEAP32[$$phi$trans$insert$i>>2] = $39;
       HEAP32[$p>>2] = 0;
       $$0$i = $38;$41 = $39;$44 = 0;
      } else {
       $$pre$i11 = HEAP32[$$phi$trans$insert$i>>2]|0;
       $$pre1$i12 = HEAP32[$p>>2]|0;
       $$0$i = $26;$41 = $$pre$i11;$44 = $$pre1$i12;
      }
      $40 = $41 << $$0$i;
      $42 = (32 - ($$0$i))|0;
      $43 = $44 >>> $42;
      $45 = $43 | $40;
      HEAP32[$$phi$trans$insert$i>>2] = $45;
      $46 = $44 << $$0$i;
      HEAP32[$p>>2] = $46;
      $48 = $46;$pshift$1 = 1;
     }
    } while(0);
    $47 = $48 | 1;
    HEAP32[$p>>2] = $47;
    $49 = (($head$036) + ($width)|0);
    $50 = ($49>>>0)<($15>>>0);
    if ($50) {
     $19 = $47;$head$036 = $49;$pshift$037 = $pshift$1;
    } else {
     $head$0$lcssa = $49;$pshift$0$lcssa = $pshift$1;
     break;
    }
   }
  } else {
   $head$0$lcssa = $base;$pshift$0$lcssa = 1;
  }
  _trinkle($head$0$lcssa,$width,$cmp,$p,$pshift$0$lcssa,0,$lp);
  $51 = ((($p)) + 4|0);
  $52 = ($pshift$0$lcssa|0)==(1);
  $53 = HEAP32[$p>>2]|0;
  $54 = ($53|0)==(1);
  $or$cond51 = $52 & $54;
  $55 = HEAP32[$51>>2]|0;
  $56 = ($55|0)==(0);
  $or$cond4852 = $or$cond51 & $56;
  if (!($or$cond4852)) {
   $59 = $53;$head$153 = $head$0$lcssa;$pshift$254 = $pshift$0$lcssa;
   while(1) {
    $57 = ($pshift$254|0)<(2);
    if ($57) {
     $58 = (($59) + -1)|0;
     $60 = ($58|0)==(0);
     do {
      if ($60) {
       $81 = 32;
       label = 30;
      } else {
       $61 = $58 & 1;
       $62 = ($61|0)==(0);
       if ($62) {
        $$02$i$i = $58;$nTrailingZeros$03$i$i = 0;
        while(1) {
         $63 = (($nTrailingZeros$03$i$i) + 1)|0;
         $64 = $$02$i$i >>> 1;
         $65 = $64 & 1;
         $66 = ($65|0)==(0);
         if ($66) {
          $$02$i$i = $64;$nTrailingZeros$03$i$i = $63;
         } else {
          $$lcssa = $63;
          break;
         }
        }
        $67 = ($$lcssa|0)==(0);
        if ($67) {
         label = 24;
        } else {
         $78 = $$lcssa;
        }
       } else {
        label = 24;
       }
       if ((label|0) == 24) {
        label = 0;
        $68 = HEAP32[$$phi$trans$insert$i>>2]|0;
        $69 = ($68|0)==(0);
        if ($69) {
         $81 = 64;
         label = 30;
         break;
        }
        $70 = $68 & 1;
        $71 = ($70|0)==(0);
        if ($71) {
         $$02$i3$i = $68;$nTrailingZeros$03$i2$i = 0;
        } else {
         $$0$i30 = 0;$84 = $59;$87 = $68;$91 = 0;
         break;
        }
        while(1) {
         $72 = (($nTrailingZeros$03$i2$i) + 1)|0;
         $73 = $$02$i3$i >>> 1;
         $74 = $73 & 1;
         $75 = ($74|0)==(0);
         if ($75) {
          $$02$i3$i = $73;$nTrailingZeros$03$i2$i = $72;
         } else {
          $$lcssa57 = $72;$nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
          break;
         }
        }
        $76 = (($nTrailingZeros$03$i2$i$lcssa) + 33)|0;
        $77 = ($$lcssa57|0)==(0);
        if ($77) {
         $$0$i30 = 0;$84 = $59;$87 = $68;$91 = 0;
         break;
        } else {
         $78 = $76;
        }
       }
       $79 = ($78>>>0)>(31);
       if ($79) {
        $81 = $78;
        label = 30;
       } else {
        $$pre1$i27$pre = HEAP32[$$phi$trans$insert$i>>2]|0;
        $$0$i30 = $78;$84 = $59;$87 = $$pre1$i27$pre;$91 = $78;
       }
      }
     } while(0);
     if ((label|0) == 30) {
      label = 0;
      $80 = (($81) + -32)|0;
      $82 = HEAP32[$$phi$trans$insert$i>>2]|0;
      HEAP32[$p>>2] = $82;
      HEAP32[$$phi$trans$insert$i>>2] = 0;
      $$0$i30 = $80;$84 = $82;$87 = 0;$91 = $81;
     }
     $83 = $84 >>> $$0$i30;
     $85 = (32 - ($$0$i30))|0;
     $86 = $87 << $85;
     $88 = $86 | $83;
     HEAP32[$p>>2] = $88;
     $89 = $87 >>> $$0$i30;
     HEAP32[$$phi$trans$insert$i>>2] = $89;
     $90 = (($91) + ($pshift$254))|0;
     $$pre = (($head$153) + ($14)|0);
     $head$1$be = $$pre;$pshift$2$be = $90;
    } else {
     $$pre$i20 = HEAP32[$$phi$trans$insert$i>>2]|0;
     $92 = $$pre$i20 << 2;
     $93 = $59 >>> 30;
     $94 = $93 | $92;
     $95 = (($pshift$254) + -2)|0;
     $96 = $59 << 1;
     $97 = $96 & 2147483646;
     $98 = $93 << 31;
     $99 = $97 | $98;
     $100 = $99 ^ 3;
     HEAP32[$p>>2] = $100;
     $101 = $94 >>> 1;
     HEAP32[$$phi$trans$insert$i>>2] = $101;
     $102 = (($lp) + ($95<<2)|0);
     $103 = HEAP32[$102>>2]|0;
     $sum = (($103) + ($width))|0;
     $$sum2 = (0 - ($sum))|0;
     $104 = (($head$153) + ($$sum2)|0);
     $105 = (($pshift$254) + -1)|0;
     _trinkle($104,$width,$cmp,$p,$105,1,$lp);
     $$pre$i8 = HEAP32[$$phi$trans$insert$i>>2]|0;
     $$pre1$i9 = HEAP32[$p>>2]|0;
     $106 = $$pre$i8 << 1;
     $107 = $$pre1$i9 >>> 31;
     $108 = $107 | $106;
     HEAP32[$$phi$trans$insert$i>>2] = $108;
     $109 = $$pre1$i9 << 1;
     $110 = $109 | 1;
     HEAP32[$p>>2] = $110;
     $111 = (($head$153) + ($14)|0);
     _trinkle($111,$width,$cmp,$p,$95,1,$lp);
     $head$1$be = $111;$pshift$2$be = $95;
    }
    $112 = ($pshift$2$be|0)==(1);
    $113 = HEAP32[$p>>2]|0;
    $114 = ($113|0)==(1);
    $or$cond = $112 & $114;
    $115 = HEAP32[$51>>2]|0;
    $116 = ($115|0)==(0);
    $or$cond48 = $or$cond & $116;
    if ($or$cond48) {
     break;
    } else {
     $59 = $113;$head$153 = $head$1$be;$pshift$254 = $pshift$2$be;
    }
   }
  }
 }
 STACKTOP = sp;return;
}
function _strtoll($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtox555($s,$p,$base,0,-2147483648)|0);
 $1 = tempRet0;
 tempRet0 = ($1);
 return ($0|0);
}
function _strtol($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtox555($s,$p,$base,-2147483648,0)|0);
 $1 = tempRet0;
 return ($0|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa44 = $$019;$s$0$lcssa43 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa44 = $$0$lcssa;$s$0$lcssa43 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa43>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa44;$s$2 = $s$0$lcssa43;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa44>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa44;$w$011 = $s$0$lcssa43;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa44;$w$0$lcssa = $s$0$lcssa43;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     $$lcssa = $1;$$lcssa19 = $2;
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = ((($l$04)) + 1|0);
    $6 = ((($r$05)) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $$lcssa&255;
   $9 = $$lcssa19&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 return ($11|0);
}
function ___stpcpy($d,$s) {
 $d = $d|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa = 0, $$0115 = 0, $$016 = 0, $$03 = 0, $$1$ph = 0, $$12$ph = 0, $$128 = 0, $$19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $wd$0$lcssa = 0, $wd$010 = 0, $ws$0$lcssa = 0, $ws$011 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $d;
 $2 = $0 ^ $1;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 L1: do {
  if ($4) {
   $5 = $0 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$0$lcssa = $s;$$01$lcssa = $d;
   } else {
    $$0115 = $d;$$016 = $s;
    while(1) {
     $7 = HEAP8[$$016>>0]|0;
     HEAP8[$$0115>>0] = $7;
     $8 = ($7<<24>>24)==(0);
     if ($8) {
      $$03 = $$0115;
      break L1;
     }
     $9 = ((($$016)) + 1|0);
     $10 = ((($$0115)) + 1|0);
     $11 = $9;
     $12 = $11 & 3;
     $13 = ($12|0)==(0);
     if ($13) {
      $$0$lcssa = $9;$$01$lcssa = $10;
      break;
     } else {
      $$0115 = $10;$$016 = $9;
     }
    }
   }
   $14 = HEAP32[$$0$lcssa>>2]|0;
   $15 = (($14) + -16843009)|0;
   $16 = $14 & -2139062144;
   $17 = $16 ^ -2139062144;
   $18 = $17 & $15;
   $19 = ($18|0)==(0);
   if ($19) {
    $22 = $14;$wd$010 = $$01$lcssa;$ws$011 = $$0$lcssa;
    while(1) {
     $20 = ((($ws$011)) + 4|0);
     $21 = ((($wd$010)) + 4|0);
     HEAP32[$wd$010>>2] = $22;
     $23 = HEAP32[$20>>2]|0;
     $24 = (($23) + -16843009)|0;
     $25 = $23 & -2139062144;
     $26 = $25 ^ -2139062144;
     $27 = $26 & $24;
     $28 = ($27|0)==(0);
     if ($28) {
      $22 = $23;$wd$010 = $21;$ws$011 = $20;
     } else {
      $wd$0$lcssa = $21;$ws$0$lcssa = $20;
      break;
     }
    }
   } else {
    $wd$0$lcssa = $$01$lcssa;$ws$0$lcssa = $$0$lcssa;
   }
   $$1$ph = $ws$0$lcssa;$$12$ph = $wd$0$lcssa;
   label = 8;
  } else {
   $$1$ph = $s;$$12$ph = $d;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $29 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$12$ph>>0] = $29;
  $30 = ($29<<24>>24)==(0);
  if ($30) {
   $$03 = $$12$ph;
  } else {
   $$128 = $$12$ph;$$19 = $$1$ph;
   while(1) {
    $31 = ((($$19)) + 1|0);
    $32 = ((($$128)) + 1|0);
    $33 = HEAP8[$31>>0]|0;
    HEAP8[$32>>0] = $33;
    $34 = ($33<<24>>24)==(0);
    if ($34) {
     $$03 = $32;
     break;
    } else {
     $$128 = $32;$$19 = $31;
    }
   }
  }
 }
 return ($$03|0);
}
function ___stpncpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa60 = 0, $$031 = 0, $$04$lcssa = 0, $$04$lcssa61 = 0, $$0430 = 0, $$06$lcssa = 0, $$06$lcssa62 = 0, $$0629 = 0, $$1$lcssa = 0, $$117 = 0, $$15$ph = 0, $$1511 = 0, $$17$ph = 0, $$1710 = 0, $$2$ph = 0, $$212 = 0, $$28 = 0, $$3 = 0, $$lcssa = 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond28 = 0, $wd$0$lcssa = 0;
 var $wd$018 = 0, $ws$0$lcssa = 0, $ws$019 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $d;
 $2 = $0 ^ $1;
 $3 = $2 & 3;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = $0 & 3;
   $6 = ($5|0)!=(0);
   $7 = ($n|0)!=(0);
   $or$cond28 = $7 & $6;
   L3: do {
    if ($or$cond28) {
     $$031 = $n;$$0430 = $s;$$0629 = $d;
     while(1) {
      $8 = HEAP8[$$0430>>0]|0;
      HEAP8[$$0629>>0] = $8;
      $9 = ($8<<24>>24)==(0);
      if ($9) {
       $$0$lcssa60 = $$031;$$04$lcssa61 = $$0430;$$06$lcssa62 = $$0629;
       break L3;
      }
      $10 = (($$031) + -1)|0;
      $11 = ((($$0430)) + 1|0);
      $12 = ((($$0629)) + 1|0);
      $13 = $11;
      $14 = $13 & 3;
      $15 = ($14|0)!=(0);
      $16 = ($10|0)!=(0);
      $or$cond = $16 & $15;
      if ($or$cond) {
       $$031 = $10;$$0430 = $11;$$0629 = $12;
      } else {
       $$0$lcssa = $10;$$04$lcssa = $11;$$06$lcssa = $12;$$lcssa = $16;
       label = 5;
       break;
      }
     }
    } else {
     $$0$lcssa = $n;$$04$lcssa = $s;$$06$lcssa = $d;$$lcssa = $7;
     label = 5;
    }
   } while(0);
   if ((label|0) == 5) {
    if ($$lcssa) {
     $$0$lcssa60 = $$0$lcssa;$$04$lcssa61 = $$04$lcssa;$$06$lcssa62 = $$06$lcssa;
    } else {
     $$28 = $$06$lcssa;$$3 = 0;
     break;
    }
   }
   $17 = HEAP8[$$04$lcssa61>>0]|0;
   $18 = ($17<<24>>24)==(0);
   if ($18) {
    $$28 = $$06$lcssa62;$$3 = $$0$lcssa60;
   } else {
    $19 = ($$0$lcssa60>>>0)>(3);
    L11: do {
     if ($19) {
      $$117 = $$0$lcssa60;$wd$018 = $$06$lcssa62;$ws$019 = $$04$lcssa61;
      while(1) {
       $20 = HEAP32[$ws$019>>2]|0;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$1$lcssa = $$117;$wd$0$lcssa = $wd$018;$ws$0$lcssa = $ws$019;
        break L11;
       }
       HEAP32[$wd$018>>2] = $20;
       $26 = (($$117) + -4)|0;
       $27 = ((($ws$019)) + 4|0);
       $28 = ((($wd$018)) + 4|0);
       $29 = ($26>>>0)>(3);
       if ($29) {
        $$117 = $26;$wd$018 = $28;$ws$019 = $27;
       } else {
        $$1$lcssa = $26;$wd$0$lcssa = $28;$ws$0$lcssa = $27;
        break;
       }
      }
     } else {
      $$1$lcssa = $$0$lcssa60;$wd$0$lcssa = $$06$lcssa62;$ws$0$lcssa = $$04$lcssa61;
     }
    } while(0);
    $$15$ph = $ws$0$lcssa;$$17$ph = $wd$0$lcssa;$$2$ph = $$1$lcssa;
    label = 11;
   }
  } else {
   $$15$ph = $s;$$17$ph = $d;$$2$ph = $n;
   label = 11;
  }
 } while(0);
 L16: do {
  if ((label|0) == 11) {
   $30 = ($$2$ph|0)==(0);
   if ($30) {
    $$28 = $$17$ph;$$3 = 0;
   } else {
    $$1511 = $$15$ph;$$1710 = $$17$ph;$$212 = $$2$ph;
    while(1) {
     $31 = HEAP8[$$1511>>0]|0;
     HEAP8[$$1710>>0] = $31;
     $32 = ($31<<24>>24)==(0);
     if ($32) {
      $$28 = $$1710;$$3 = $$212;
      break L16;
     }
     $33 = (($$212) + -1)|0;
     $34 = ((($$1511)) + 1|0);
     $35 = ((($$1710)) + 1|0);
     $36 = ($33|0)==(0);
     if ($36) {
      $$28 = $35;$$3 = 0;
      break;
     } else {
      $$1511 = $34;$$1710 = $35;$$212 = $33;
     }
    }
   }
  }
 } while(0);
 _memset(($$28|0),0,($$3|0))|0;
 return ($$28|0);
}
function _strcat($dest,$src) {
 $dest = $dest|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($dest)|0);
 $1 = (($dest) + ($0)|0);
 (_strcpy($1,$src)|0);
 return ($dest|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $6 = (_strlen($s)|0);
   $7 = (($s) + ($6)|0);
   $$0 = $7;
  } else {
   $2 = $s;
   $3 = $2 & 3;
   $4 = ($3|0)==(0);
   if ($4) {
    $$02$lcssa = $s;
   } else {
    $5 = $c&255;
    $$0211 = $s;
    while(1) {
     $8 = HEAP8[$$0211>>0]|0;
     $9 = ($8<<24>>24)==(0);
     $10 = ($8<<24>>24)==($5<<24>>24);
     $or$cond = $9 | $10;
     if ($or$cond) {
      $$0 = $$0211;
      break L1;
     }
     $11 = ((($$0211)) + 1|0);
     $12 = $11;
     $13 = $12 & 3;
     $14 = ($13|0)==(0);
     if ($14) {
      $$02$lcssa = $11;
      break;
     } else {
      $$0211 = $11;
     }
    }
   }
   $15 = Math_imul($0, 16843009)|0;
   $16 = HEAP32[$$02$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   L10: do {
    if ($21) {
     $23 = $16;$w$08 = $$02$lcssa;
     while(1) {
      $22 = $23 ^ $15;
      $24 = (($22) + -16843009)|0;
      $25 = $22 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $w$0$lcssa = $w$08;
       break L10;
      }
      $29 = ((($w$08)) + 4|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($30) + -16843009)|0;
      $32 = $30 & -2139062144;
      $33 = $32 ^ -2139062144;
      $34 = $33 & $31;
      $35 = ($34|0)==(0);
      if ($35) {
       $23 = $30;$w$08 = $29;
      } else {
       $w$0$lcssa = $29;
       break;
      }
     }
    } else {
     $w$0$lcssa = $$02$lcssa;
    }
   } while(0);
   $36 = $c&255;
   $$1 = $w$0$lcssa;
   while(1) {
    $37 = HEAP8[$$1>>0]|0;
    $38 = ($37<<24>>24)==(0);
    $39 = ($37<<24>>24)==($36<<24>>24);
    $or$cond5 = $38 | $39;
    $40 = ((($$1)) + 1|0);
    if ($or$cond5) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $40;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $3 | $2;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = ((($$014)) + 1|0);
   $5 = ((($$05)) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $9 | $8;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function _strcpy($dest,$src) {
 $dest = $dest|0;
 $src = $src|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($dest,$src)|0);
 return ($dest|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$01$lcssa = $s;
   label = 4;
  } else {
   $$014 = $s;$21 = $0;
   while(1) {
    $3 = HEAP8[$$014>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$pn = $21;
     break L1;
    }
    $5 = ((($$014)) + 1|0);
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     $$01$lcssa = $5;
     label = 4;
     break;
    } else {
     $$014 = $5;$21 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0 = $$01$lcssa;
  while(1) {
   $9 = HEAP32[$w$0>>2]|0;
   $10 = (($9) + -16843009)|0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13|0)==(0);
   $15 = ((($w$0)) + 4|0);
   if ($14) {
    $w$0 = $15;
   } else {
    $$lcssa20 = $9;$w$0$lcssa = $w$0;
    break;
   }
  }
  $16 = $$lcssa20&255;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   $$1$lcssa = $w$0$lcssa;
  } else {
   $$pn15 = $w$0$lcssa;
   while(1) {
    $18 = ((($$pn15)) + 1|0);
    $$pre = HEAP8[$18>>0]|0;
    $19 = ($$pre<<24>>24)==(0);
    if ($19) {
     $$1$lcssa = $18;
     break;
    } else {
     $$pn15 = $18;
    }
   }
  }
  $20 = $$1$lcssa;
  $$pn = $20;
 }
 $$0 = (($$pn) - ($0))|0;
 return ($$0|0);
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $l$06 = 0, $or$cond = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
 } else {
  $1 = HEAP8[$_l>>0]|0;
  $2 = ($1<<24>>24)==(0);
  L3: do {
   if ($2) {
    $13 = 0;$r$0$lcssa = $_r;
   } else {
    $$08$in = $n;$6 = $1;$l$06 = $_l;$r$07 = $_r;
    while(1) {
     $$08 = (($$08$in) + -1)|0;
     $3 = HEAP8[$r$07>>0]|0;
     $4 = ($3<<24>>24)!=(0);
     $5 = ($$08|0)!=(0);
     $or$cond = $5 & $4;
     $7 = ($6<<24>>24)==($3<<24>>24);
     $or$cond4 = $7 & $or$cond;
     if (!($or$cond4)) {
      $13 = $6;$r$0$lcssa = $r$07;
      break L3;
     }
     $8 = ((($l$06)) + 1|0);
     $9 = ((($r$07)) + 1|0);
     $10 = HEAP8[$8>>0]|0;
     $11 = ($10<<24>>24)==(0);
     if ($11) {
      $13 = 0;$r$0$lcssa = $9;
      break;
     } else {
      $$08$in = $$08;$6 = $10;$l$06 = $8;$r$07 = $9;
     }
    }
   }
  } while(0);
  $12 = $13&255;
  $14 = HEAP8[$r$0$lcssa>>0]|0;
  $15 = $14&255;
  $16 = (($12) - ($15))|0;
  $$03 = $16;
 }
 return ($$03|0);
}
function _strncpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpncpy($d,$s,$n)|0);
 return ($d|0);
}
function _strstr($h,$n) {
 $h = $h|0;
 $n = $n|0;
 var $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$0$lcssa$i11 = 0, $$01$i = 0, $$02$i = 0, $$02$i7 = 0, $$03$i = 0, $$lcssa$i = 0, $$lcssa$i10 = 0, $$lcssa$i4 = 0, $$lcssa281 = 0, $$lcssa284 = 0, $$lcssa287 = 0, $$lcssa301 = 0, $$lcssa304 = 0, $$lcssa307 = 0, $$lcssa322 = 0, $$pr$i = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $233$phi = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $byteset$i = 0, $div$i = 0, $div4$i = 0, $hw$0$in2$i = 0, $hw$03$i = 0, $hw$03$i6 = 0, $ip$0$ph$lcssa$i = 0, $ip$0$ph$lcssa143$i = 0, $ip$0$ph76$i = 0, $ip$1$ip$0$$i = 0, $ip$1$ip$0$i = 0, $ip$1$ph$lcssa$i = 0, $ip$1$ph55$i = 0, $jp$0$ph13$ph70$i = 0, $jp$0$ph1365$i = 0, $jp$0$ph1365$i$lcssa = 0, $jp$0$ph1365$i$lcssa$lcssa = 0, $jp$0$ph77$i = 0, $jp$1$ph56$i = 0, $jp$1$ph9$ph49$i = 0;
 var $jp$1$ph944$i = 0, $jp$1$ph944$i$lcssa = 0, $jp$1$ph944$i$lcssa$lcssa = 0, $k$059$i = 0, $k$139$i = 0, $k$2$i = 0, $k$338$i = 0, $k$338$i$lcssa = 0, $k$4$i = 0, $l$080$i = 0, $l$080$i$lcssa321 = 0, $mem$0$i = 0, $mem0$0$i = 0, $or$cond$i = 0, $or$cond$i2 = 0, $or$cond$i8 = 0, $or$cond5$i = 0, $p$0$ph$ph$lcssa32$i = 0, $p$0$ph$ph$lcssa32147$i = 0, $p$0$ph$ph71$i = 0;
 var $p$1$p$0$i = 0, $p$1$ph$ph$lcssa23$i = 0, $p$1$ph$ph50$i = 0, $p$3$i = 0, $shift$i = 0, $z$0$i = 0, $z$1$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0;
 $byteset$i = sp + 1024|0;
 $shift$i = sp;
 $0 = HEAP8[$n>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $$0 = $h;
  } else {
   $2 = $0 << 24 >> 24;
   $3 = (_strchr($h,$2)|0);
   $4 = ($3|0)==(0|0);
   if ($4) {
    $$0 = 0;
   } else {
    $5 = ((($n)) + 1|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==(0);
    if ($7) {
     $$0 = $3;
    } else {
     $8 = ((($3)) + 1|0);
     $9 = HEAP8[$8>>0]|0;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$0 = 0;
     } else {
      $11 = ((($n)) + 2|0);
      $12 = HEAP8[$11>>0]|0;
      $13 = ($12<<24>>24)==(0);
      if ($13) {
       $14 = $0&255;
       $15 = $14 << 8;
       $16 = $6&255;
       $17 = $16 | $15;
       $18 = HEAP8[$3>>0]|0;
       $19 = $18&255;
       $20 = $19 << 8;
       $21 = $9&255;
       $22 = $20 | $21;
       $$01$i = $8;$232 = $9;$233 = $3;$hw$0$in2$i = $22;
       while(1) {
        $23 = $hw$0$in2$i & 65535;
        $24 = ($23|0)==($17|0);
        if ($24) {
         $$lcssa$i = $233;$31 = $232;
         break;
        }
        $25 = $23 << 8;
        $26 = ((($$01$i)) + 1|0);
        $27 = HEAP8[$26>>0]|0;
        $28 = $27&255;
        $29 = $28 | $25;
        $30 = ($27<<24>>24)==(0);
        if ($30) {
         $$lcssa$i = $$01$i;$31 = 0;
         break;
        } else {
         $233$phi = $$01$i;$$01$i = $26;$232 = $27;$hw$0$in2$i = $29;$233 = $233$phi;
        }
       }
       $32 = ($31<<24>>24)!=(0);
       $33 = $32 ? $$lcssa$i : 0;
       $$0 = $33;
       break;
      }
      $34 = ((($3)) + 2|0);
      $35 = HEAP8[$34>>0]|0;
      $36 = ($35<<24>>24)==(0);
      if ($36) {
       $$0 = 0;
      } else {
       $37 = ((($n)) + 3|0);
       $38 = HEAP8[$37>>0]|0;
       $39 = ($38<<24>>24)==(0);
       if ($39) {
        $40 = $0&255;
        $41 = $40 << 24;
        $42 = $6&255;
        $43 = $42 << 16;
        $44 = $43 | $41;
        $45 = $12&255;
        $46 = $45 << 8;
        $47 = $44 | $46;
        $48 = HEAP8[$3>>0]|0;
        $49 = $48&255;
        $50 = $49 << 24;
        $51 = $9&255;
        $52 = $51 << 16;
        $53 = $35&255;
        $54 = $53 << 8;
        $55 = $54 | $52;
        $56 = $55 | $50;
        $57 = ($56|0)==($47|0);
        if ($57) {
         $$0$lcssa$i = $34;$$lcssa$i4 = $35;
        } else {
         $$02$i = $34;$hw$03$i = $56;
         while(1) {
          $58 = ((($$02$i)) + 1|0);
          $59 = HEAP8[$58>>0]|0;
          $60 = $59&255;
          $61 = $60 | $hw$03$i;
          $62 = $61 << 8;
          $63 = ($59<<24>>24)==(0);
          $64 = ($62|0)==($47|0);
          $or$cond$i2 = $63 | $64;
          if ($or$cond$i2) {
           $$0$lcssa$i = $58;$$lcssa$i4 = $59;
           break;
          } else {
           $$02$i = $58;$hw$03$i = $62;
          }
         }
        }
        $65 = ($$lcssa$i4<<24>>24)!=(0);
        $66 = ((($$0$lcssa$i)) + -2|0);
        $67 = $65 ? $66 : 0;
        $$0 = $67;
        break;
       }
       $68 = ((($3)) + 3|0);
       $69 = HEAP8[$68>>0]|0;
       $70 = ($69<<24>>24)==(0);
       if ($70) {
        $$0 = 0;
       } else {
        $71 = ((($n)) + 4|0);
        $72 = HEAP8[$71>>0]|0;
        $73 = ($72<<24>>24)==(0);
        if ($73) {
         $74 = $0&255;
         $75 = $74 << 24;
         $76 = $6&255;
         $77 = $76 << 16;
         $78 = $77 | $75;
         $79 = $12&255;
         $80 = $79 << 8;
         $81 = $78 | $80;
         $82 = $38&255;
         $83 = $81 | $82;
         $84 = HEAP8[$3>>0]|0;
         $85 = $84&255;
         $86 = $85 << 24;
         $87 = $9&255;
         $88 = $87 << 16;
         $89 = $35&255;
         $90 = $89 << 8;
         $91 = $69&255;
         $92 = $90 | $88;
         $93 = $92 | $91;
         $94 = $93 | $86;
         $95 = ($94|0)==($83|0);
         if ($95) {
          $$0$lcssa$i11 = $68;$$lcssa$i10 = $69;
         } else {
          $$02$i7 = $68;$hw$03$i6 = $94;
          while(1) {
           $96 = $hw$03$i6 << 8;
           $97 = ((($$02$i7)) + 1|0);
           $98 = HEAP8[$97>>0]|0;
           $99 = $98&255;
           $100 = $99 | $96;
           $101 = ($98<<24>>24)==(0);
           $102 = ($100|0)==($83|0);
           $or$cond$i8 = $101 | $102;
           if ($or$cond$i8) {
            $$0$lcssa$i11 = $97;$$lcssa$i10 = $98;
            break;
           } else {
            $$02$i7 = $97;$hw$03$i6 = $100;
           }
          }
         }
         $103 = ($$lcssa$i10<<24>>24)!=(0);
         $104 = ((($$0$lcssa$i11)) + -3|0);
         $105 = $103 ? $104 : 0;
         $$0 = $105;
         break;
        }
        ;HEAP32[$byteset$i>>2]=0|0;HEAP32[$byteset$i+4>>2]=0|0;HEAP32[$byteset$i+8>>2]=0|0;HEAP32[$byteset$i+12>>2]=0|0;HEAP32[$byteset$i+16>>2]=0|0;HEAP32[$byteset$i+20>>2]=0|0;HEAP32[$byteset$i+24>>2]=0|0;HEAP32[$byteset$i+28>>2]=0|0;
        $110 = $0;$l$080$i = 0;
        while(1) {
         $106 = (($3) + ($l$080$i)|0);
         $107 = HEAP8[$106>>0]|0;
         $108 = ($107<<24>>24)==(0);
         if ($108) {
          $$0$i = 0;
          break;
         }
         $109 = $110 & 31;
         $111 = $109&255;
         $112 = 1 << $111;
         $div4$i = ($110&255) >>> 5;
         $113 = $div4$i&255;
         $114 = (($byteset$i) + ($113<<2)|0);
         $115 = HEAP32[$114>>2]|0;
         $116 = $115 | $112;
         HEAP32[$114>>2] = $116;
         $117 = (($l$080$i) + 1)|0;
         $118 = $110&255;
         $119 = (($shift$i) + ($118<<2)|0);
         HEAP32[$119>>2] = $117;
         $120 = (($n) + ($117)|0);
         $121 = HEAP8[$120>>0]|0;
         $122 = ($121<<24>>24)==(0);
         if ($122) {
          $$lcssa322 = $117;$l$080$i$lcssa321 = $l$080$i;
          label = 23;
          break;
         } else {
          $110 = $121;$l$080$i = $117;
         }
        }
        L32: do {
         if ((label|0) == 23) {
          $123 = ($$lcssa322>>>0)>(1);
          L34: do {
           if ($123) {
            $234 = 1;$ip$0$ph76$i = -1;$jp$0$ph77$i = 0;
            L35: while(1) {
             $235 = $234;$jp$0$ph13$ph70$i = $jp$0$ph77$i;$p$0$ph$ph71$i = 1;
             while(1) {
              $236 = $235;$jp$0$ph1365$i = $jp$0$ph13$ph70$i;
              L39: while(1) {
               $133 = $236;$k$059$i = 1;
               while(1) {
                $129 = (($k$059$i) + ($ip$0$ph76$i))|0;
                $130 = (($n) + ($129)|0);
                $131 = HEAP8[$130>>0]|0;
                $132 = (($n) + ($133)|0);
                $134 = HEAP8[$132>>0]|0;
                $135 = ($131<<24>>24)==($134<<24>>24);
                if (!($135)) {
                 $$lcssa301 = $133;$$lcssa304 = $131;$$lcssa307 = $134;$jp$0$ph1365$i$lcssa = $jp$0$ph1365$i;
                 break L39;
                }
                $136 = ($k$059$i|0)==($p$0$ph$ph71$i|0);
                $127 = (($k$059$i) + 1)|0;
                if ($136) {
                 break;
                }
                $126 = (($127) + ($jp$0$ph1365$i))|0;
                $128 = ($126>>>0)<($$lcssa322>>>0);
                if ($128) {
                 $133 = $126;$k$059$i = $127;
                } else {
                 $ip$0$ph$lcssa$i = $ip$0$ph76$i;$p$0$ph$ph$lcssa32$i = $p$0$ph$ph71$i;
                 break L35;
                }
               }
               $137 = (($jp$0$ph1365$i) + ($p$0$ph$ph71$i))|0;
               $138 = (($137) + 1)|0;
               $139 = ($138>>>0)<($$lcssa322>>>0);
               if ($139) {
                $236 = $138;$jp$0$ph1365$i = $137;
               } else {
                $ip$0$ph$lcssa$i = $ip$0$ph76$i;$p$0$ph$ph$lcssa32$i = $p$0$ph$ph71$i;
                break L35;
               }
              }
              $140 = ($$lcssa304&255)>($$lcssa307&255);
              $141 = (($$lcssa301) - ($ip$0$ph76$i))|0;
              if (!($140)) {
               $jp$0$ph1365$i$lcssa$lcssa = $jp$0$ph1365$i$lcssa;
               break;
              }
              $124 = (($$lcssa301) + 1)|0;
              $125 = ($124>>>0)<($$lcssa322>>>0);
              if ($125) {
               $235 = $124;$jp$0$ph13$ph70$i = $$lcssa301;$p$0$ph$ph71$i = $141;
              } else {
               $ip$0$ph$lcssa$i = $ip$0$ph76$i;$p$0$ph$ph$lcssa32$i = $141;
               break L35;
              }
             }
             $142 = (($jp$0$ph1365$i$lcssa$lcssa) + 1)|0;
             $143 = (($jp$0$ph1365$i$lcssa$lcssa) + 2)|0;
             $144 = ($143>>>0)<($$lcssa322>>>0);
             if ($144) {
              $234 = $143;$ip$0$ph76$i = $jp$0$ph1365$i$lcssa$lcssa;$jp$0$ph77$i = $142;
             } else {
              $ip$0$ph$lcssa$i = $jp$0$ph1365$i$lcssa$lcssa;$p$0$ph$ph$lcssa32$i = 1;
              break;
             }
            }
            $237 = 1;$ip$1$ph55$i = -1;$jp$1$ph56$i = 0;
            while(1) {
             $239 = $237;$jp$1$ph9$ph49$i = $jp$1$ph56$i;$p$1$ph$ph50$i = 1;
             while(1) {
              $238 = $239;$jp$1$ph944$i = $jp$1$ph9$ph49$i;
              L54: while(1) {
               $152 = $238;$k$139$i = 1;
               while(1) {
                $148 = (($k$139$i) + ($ip$1$ph55$i))|0;
                $149 = (($n) + ($148)|0);
                $150 = HEAP8[$149>>0]|0;
                $151 = (($n) + ($152)|0);
                $153 = HEAP8[$151>>0]|0;
                $154 = ($150<<24>>24)==($153<<24>>24);
                if (!($154)) {
                 $$lcssa281 = $152;$$lcssa284 = $150;$$lcssa287 = $153;$jp$1$ph944$i$lcssa = $jp$1$ph944$i;
                 break L54;
                }
                $155 = ($k$139$i|0)==($p$1$ph$ph50$i|0);
                $146 = (($k$139$i) + 1)|0;
                if ($155) {
                 break;
                }
                $145 = (($146) + ($jp$1$ph944$i))|0;
                $147 = ($145>>>0)<($$lcssa322>>>0);
                if ($147) {
                 $152 = $145;$k$139$i = $146;
                } else {
                 $ip$0$ph$lcssa143$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i;$p$0$ph$ph$lcssa32147$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $p$1$ph$ph50$i;
                 break L34;
                }
               }
               $156 = (($jp$1$ph944$i) + ($p$1$ph$ph50$i))|0;
               $157 = (($156) + 1)|0;
               $158 = ($157>>>0)<($$lcssa322>>>0);
               if ($158) {
                $238 = $157;$jp$1$ph944$i = $156;
               } else {
                $ip$0$ph$lcssa143$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i;$p$0$ph$ph$lcssa32147$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $p$1$ph$ph50$i;
                break L34;
               }
              }
              $159 = ($$lcssa284&255)<($$lcssa287&255);
              $160 = (($$lcssa281) - ($ip$1$ph55$i))|0;
              if (!($159)) {
               $jp$1$ph944$i$lcssa$lcssa = $jp$1$ph944$i$lcssa;
               break;
              }
              $164 = (($$lcssa281) + 1)|0;
              $165 = ($164>>>0)<($$lcssa322>>>0);
              if ($165) {
               $239 = $164;$jp$1$ph9$ph49$i = $$lcssa281;$p$1$ph$ph50$i = $160;
              } else {
               $ip$0$ph$lcssa143$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $ip$1$ph55$i;$p$0$ph$ph$lcssa32147$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = $160;
               break L34;
              }
             }
             $161 = (($jp$1$ph944$i$lcssa$lcssa) + 1)|0;
             $162 = (($jp$1$ph944$i$lcssa$lcssa) + 2)|0;
             $163 = ($162>>>0)<($$lcssa322>>>0);
             if ($163) {
              $237 = $162;$ip$1$ph55$i = $jp$1$ph944$i$lcssa$lcssa;$jp$1$ph56$i = $161;
             } else {
              $ip$0$ph$lcssa143$i = $ip$0$ph$lcssa$i;$ip$1$ph$lcssa$i = $jp$1$ph944$i$lcssa$lcssa;$p$0$ph$ph$lcssa32147$i = $p$0$ph$ph$lcssa32$i;$p$1$ph$ph$lcssa23$i = 1;
              break;
             }
            }
           } else {
            $ip$0$ph$lcssa143$i = -1;$ip$1$ph$lcssa$i = -1;$p$0$ph$ph$lcssa32147$i = 1;$p$1$ph$ph$lcssa23$i = 1;
           }
          } while(0);
          $166 = (($ip$1$ph$lcssa$i) + 1)|0;
          $167 = (($ip$0$ph$lcssa143$i) + 1)|0;
          $168 = ($166>>>0)>($167>>>0);
          $p$1$p$0$i = $168 ? $p$1$ph$ph$lcssa23$i : $p$0$ph$ph$lcssa32147$i;
          $ip$1$ip$0$i = $168 ? $ip$1$ph$lcssa$i : $ip$0$ph$lcssa143$i;
          $169 = (($n) + ($p$1$p$0$i)|0);
          $170 = (($ip$1$ip$0$i) + 1)|0;
          $171 = (_memcmp($n,$169,$170)|0);
          $172 = ($171|0)==(0);
          if ($172) {
           $177 = (($$lcssa322) - ($p$1$p$0$i))|0;
           $mem0$0$i = $177;$p$3$i = $p$1$p$0$i;
          } else {
           $173 = (($$lcssa322) - ($ip$1$ip$0$i))|0;
           $174 = (($173) + -1)|0;
           $175 = ($ip$1$ip$0$i>>>0)>($174>>>0);
           $ip$1$ip$0$$i = $175 ? $ip$1$ip$0$i : $174;
           $176 = (($ip$1$ip$0$$i) + 1)|0;
           $mem0$0$i = 0;$p$3$i = $176;
          }
          $178 = $$lcssa322 | 63;
          $179 = ($mem0$0$i|0)!=(0);
          $180 = (($$lcssa322) - ($p$3$i))|0;
          $$03$i = $3;$mem$0$i = 0;$z$0$i = $3;
          L69: while(1) {
           $181 = $z$0$i;
           $182 = $$03$i;
           $183 = (($181) - ($182))|0;
           $184 = ($183>>>0)<($$lcssa322>>>0);
           do {
            if ($184) {
             $185 = (_memchr($z$0$i,0,$178)|0);
             $186 = ($185|0)==(0|0);
             if ($186) {
              $190 = (($z$0$i) + ($178)|0);
              $z$1$i = $190;
              break;
             } else {
              $187 = $185;
              $188 = (($187) - ($182))|0;
              $189 = ($188>>>0)<($$lcssa322>>>0);
              if ($189) {
               $$0$i = 0;
               break L32;
              } else {
               $z$1$i = $185;
               break;
              }
             }
            } else {
             $z$1$i = $z$0$i;
            }
           } while(0);
           $191 = (($$03$i) + ($l$080$i$lcssa321)|0);
           $192 = HEAP8[$191>>0]|0;
           $div$i = ($192&255) >>> 5;
           $193 = $div$i&255;
           $194 = (($byteset$i) + ($193<<2)|0);
           $195 = HEAP32[$194>>2]|0;
           $196 = $192 & 31;
           $197 = $196&255;
           $198 = 1 << $197;
           $199 = $198 & $195;
           $200 = ($199|0)==(0);
           if ($200) {
            $209 = (($$03$i) + ($$lcssa322)|0);
            $$03$i = $209;$mem$0$i = 0;$z$0$i = $z$1$i;
            continue;
           }
           $201 = $192&255;
           $202 = (($shift$i) + ($201<<2)|0);
           $203 = HEAP32[$202>>2]|0;
           $204 = (($$lcssa322) - ($203))|0;
           $205 = ($$lcssa322|0)==($203|0);
           if (!($205)) {
            $206 = ($mem$0$i|0)!=(0);
            $or$cond$i = $179 & $206;
            $207 = ($204>>>0)<($p$3$i>>>0);
            $or$cond5$i = $or$cond$i & $207;
            $k$2$i = $or$cond5$i ? $180 : $204;
            $208 = (($$03$i) + ($k$2$i)|0);
            $$03$i = $208;$mem$0$i = 0;$z$0$i = $z$1$i;
            continue;
           }
           $210 = ($170>>>0)>($mem$0$i>>>0);
           $211 = $210 ? $170 : $mem$0$i;
           $212 = (($n) + ($211)|0);
           $213 = HEAP8[$212>>0]|0;
           $214 = ($213<<24>>24)==(0);
           L83: do {
            if ($214) {
             $k$4$i = $170;
            } else {
             $$pr$i = $213;$k$338$i = $211;
             while(1) {
              $215 = (($$03$i) + ($k$338$i)|0);
              $216 = HEAP8[$215>>0]|0;
              $217 = ($$pr$i<<24>>24)==($216<<24>>24);
              if (!($217)) {
               $k$338$i$lcssa = $k$338$i;
               break;
              }
              $218 = (($k$338$i) + 1)|0;
              $219 = (($n) + ($218)|0);
              $220 = HEAP8[$219>>0]|0;
              $221 = ($220<<24>>24)==(0);
              if ($221) {
               $k$4$i = $170;
               break L83;
              } else {
               $$pr$i = $220;$k$338$i = $218;
              }
             }
             $222 = (($k$338$i$lcssa) - ($ip$1$ip$0$i))|0;
             $223 = (($$03$i) + ($222)|0);
             $$03$i = $223;$mem$0$i = 0;$z$0$i = $z$1$i;
             continue L69;
            }
           } while(0);
           while(1) {
            $224 = ($k$4$i>>>0)>($mem$0$i>>>0);
            if (!($224)) {
             $$0$i = $$03$i;
             break L32;
            }
            $225 = (($k$4$i) + -1)|0;
            $226 = (($n) + ($225)|0);
            $227 = HEAP8[$226>>0]|0;
            $228 = (($$03$i) + ($225)|0);
            $229 = HEAP8[$228>>0]|0;
            $230 = ($227<<24>>24)==($229<<24>>24);
            if ($230) {
             $k$4$i = $225;
            } else {
             break;
            }
           }
           $231 = (($$03$i) + ($p$3$i)|0);
           $$03$i = $231;$mem$0$i = $mem0$0$i;$z$0$i = $z$1$i;
          }
         }
        } while(0);
        $$0 = $$0$i;
       }
      }
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $$lcssa22 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$112 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $x$013 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = ((($1)) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $9 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $9 = $8;
 }
 $10 = ($9|0)==(45);
 switch ($9|0) {
 case 43: case 45:  {
  $11 = $10&1;
  $12 = HEAP32[$0>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($12>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($12)) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$12>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $22 & $21;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $11;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = ((($25)) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $11;
   }
  } else {
   $c$0 = $20;$neg$0 = $11;
  }
  break;
 }
 default: {
  $c$0 = $9;$neg$0 = 0;
 }
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $98 = -2147483648;$99 = 0;
  } else {
   $31 = HEAP32[$0>>2]|0;
   $32 = ((($31)) + -1|0);
   HEAP32[$0>>2] = $32;
   $98 = -2147483648;$99 = 0;
  }
 } else {
  $c$112 = $c$0;$x$013 = 0;
  while(1) {
   $33 = ($x$013*10)|0;
   $34 = (($c$112) + -48)|0;
   $35 = (($34) + ($33))|0;
   $36 = HEAP32[$0>>2]|0;
   $37 = HEAP32[$2>>2]|0;
   $38 = ($36>>>0)<($37>>>0);
   if ($38) {
    $39 = ((($36)) + 1|0);
    HEAP32[$0>>2] = $39;
    $40 = HEAP8[$36>>0]|0;
    $41 = $40&255;
    $c$1$be = $41;
   } else {
    $42 = (___shgetc($f)|0);
    $c$1$be = $42;
   }
   $43 = (($c$1$be) + -48)|0;
   $44 = ($43>>>0)<(10);
   $45 = ($35|0)<(214748364);
   $46 = $44 & $45;
   if ($46) {
    $c$112 = $c$1$be;$x$013 = $35;
   } else {
    $$lcssa22 = $35;$c$1$be$lcssa = $c$1$be;
    break;
   }
  }
  $47 = ($$lcssa22|0)<(0);
  $48 = $47 << 31 >> 31;
  $49 = (($c$1$be$lcssa) + -48)|0;
  $50 = ($49>>>0)<(10);
  if ($50) {
   $53 = $$lcssa22;$54 = $48;$c$27 = $c$1$be$lcssa;
   while(1) {
    $55 = (___muldi3(($53|0),($54|0),10,0)|0);
    $56 = tempRet0;
    $57 = ($c$27|0)<(0);
    $58 = $57 << 31 >> 31;
    $59 = (_i64Add(($c$27|0),($58|0),-48,-1)|0);
    $60 = tempRet0;
    $61 = (_i64Add(($59|0),($60|0),($55|0),($56|0))|0);
    $62 = tempRet0;
    $63 = HEAP32[$0>>2]|0;
    $64 = HEAP32[$2>>2]|0;
    $65 = ($63>>>0)<($64>>>0);
    if ($65) {
     $66 = ((($63)) + 1|0);
     HEAP32[$0>>2] = $66;
     $67 = HEAP8[$63>>0]|0;
     $68 = $67&255;
     $c$2$be = $68;
    } else {
     $69 = (___shgetc($f)|0);
     $c$2$be = $69;
    }
    $70 = (($c$2$be) + -48)|0;
    $71 = ($70>>>0)<(10);
    $72 = ($62|0)<(21474836);
    $73 = ($61>>>0)<(2061584302);
    $74 = ($62|0)==(21474836);
    $75 = $74 & $73;
    $76 = $72 | $75;
    $77 = $71 & $76;
    if ($77) {
     $53 = $61;$54 = $62;$c$27 = $c$2$be;
    } else {
     $92 = $61;$93 = $62;$c$2$lcssa = $c$2$be;
     break;
    }
   }
  } else {
   $92 = $$lcssa22;$93 = $48;$c$2$lcssa = $c$1$be$lcssa;
  }
  $51 = (($c$2$lcssa) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   while(1) {
    $78 = HEAP32[$0>>2]|0;
    $79 = HEAP32[$2>>2]|0;
    $80 = ($78>>>0)<($79>>>0);
    if ($80) {
     $81 = ((($78)) + 1|0);
     HEAP32[$0>>2] = $81;
     $82 = HEAP8[$78>>0]|0;
     $83 = $82&255;
     $c$3$be = $83;
    } else {
     $84 = (___shgetc($f)|0);
     $c$3$be = $84;
    }
    $85 = (($c$3$be) + -48)|0;
    $86 = ($85>>>0)<(10);
    if (!($86)) {
     break;
    }
   }
  }
  $87 = HEAP32[$2>>2]|0;
  $88 = ($87|0)==(0|0);
  if (!($88)) {
   $89 = HEAP32[$0>>2]|0;
   $90 = ((($89)) + -1|0);
   HEAP32[$0>>2] = $90;
  }
  $91 = ($neg$0|0)!=(0);
  $94 = (_i64Subtract(0,0,($92|0),($93|0))|0);
  $95 = tempRet0;
  $96 = $91 ? $94 : $92;
  $97 = $91 ? $95 : $93;
  $98 = $97;$99 = $96;
 }
 tempRet0 = ($98);
 return ($99|0);
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>($3>>>0);
 if ($4) {
  $5 = ((($f)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  (FUNCTION_TABLE_iiii[$6 & 7]($f,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $9 = ((($f)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($f)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($f)) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $10;
   $17 = $12;
   $18 = (($16) - ($17))|0;
   (FUNCTION_TABLE_iiii[$15 & 7]($f,$18,1)|0);
  }
  $19 = ((($f)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$2>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$21$i = 0, $$210$$22$i = 0, $$210$$24$i = 0, $$210$i = 0, $$23$i = 0, $$3$i = 0.0, $$31$i = 0;
 var $$311$i = 0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41276$i = 0, $$5$lcssa$i = 0, $$51 = 0, $$587$i = 0, $$a$3$i = 0, $$a$3185$i = 0, $$a$3186$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa159$i = 0, $$lcssa318 = 0, $$lcssa323 = 0, $$lcssa324 = 0, $$lcssa325 = 0, $$lcssa326 = 0, $$lcssa327 = 0;
 var $$lcssa329 = 0, $$lcssa339 = 0, $$lcssa342 = 0.0, $$lcssa344 = 0, $$neg52$i = 0, $$neg53$i = 0, $$p$$i = 0, $$p$0 = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr47$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi184$iZ2D = 0, $$pre179$i = 0, $$pre182$i = 0, $$pre183$i = 0, $$pre193 = 0;
 var $$sum$i = 0, $$sum15$i = 0, $$sum16$i = 0, $$z$3$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0.0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0.0, $392 = 0.0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0.0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0.0, $443 = 0.0, $444 = 0.0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0.0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0.0, $486 = 0.0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0.0, $597 = 0.0, $598 = 0;
 var $599 = 0.0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1147$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3134$i = 0, $a$5$lcssa$i = 0, $a$5109$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
 var $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0140$i = 0, $carry3$0128$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0139$i = 0, $d$0141$i = 0, $d$1127$i = 0, $d$2$lcssa$i = 0, $d$2108$i = 0, $d$3$i = 0, $d$482$i = 0, $d$575$i = 0, $d$686$i = 0, $e$0123$i = 0;
 var $e$1$i = 0, $e$2104$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$193$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0;
 var $expanded8 = 0, $fl$0109 = 0, $fl$062 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $fmt39$lcssa = 0, $fmt39101 = 0, $fmt40 = 0, $fmt41 = 0, $fmt42 = 0, $fmt44 = 0, $fmt44$lcssa321 = 0, $fmt45 = 0, $i$0$lcssa = 0, $i$0$lcssa200 = 0, $i$0114 = 0, $i$0122$i = 0;
 var $i$03$i = 0, $i$03$i25 = 0, $i$1$lcssa$i = 0, $i$1116$i = 0, $i$1125 = 0, $i$2100 = 0, $i$2100$lcssa = 0, $i$2103$i = 0, $i$398 = 0, $i$399$i = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i27 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0;
 var $isdigittmp$i26 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i24 = 0, $isdigittmp9 = 0, $j$0$i = 0, $j$0115$i = 0, $j$0117$i = 0, $j$1100$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1113 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0;
 var $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond20 = 0, $or$cond240 = 0, $or$cond29$i = 0, $or$cond3$not$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0;
 var $p$4198 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$169$i = 0, $round$068$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s1$0$i = 0;
 var $s7$079$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$070$i = 0, $s9$0$i = 0, $s9$183$i = 0, $s9$2$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa322 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8108 = 0, $storemerge860 = 0, $sum = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0;
 var $w$1 = 0, $w$2 = 0, $w$30$i = 0, $wc = 0, $ws$0115 = 0, $ws$1126 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0102 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1146$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3133$i = 0, $z$4$i = 0, $z$6$$i = 0, $z$6$i = 0;
 var $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0;
 $big$i = sp + 24|0;
 $e2$i = sp + 16|0;
 $buf$i = sp + 588|0;
 $ebuf0$i = sp + 576|0;
 $arg = sp;
 $buf = sp + 536|0;
 $wc = sp + 8|0;
 $mb = sp + 528|0;
 $0 = ($f|0)!=(0|0);
 $1 = ((($buf)) + 40|0);
 $2 = $1;
 $3 = ((($buf)) + 39|0);
 $4 = ((($wc)) + 4|0);
 $5 = ((($ebuf0$i)) + 12|0);
 $6 = ((($ebuf0$i)) + 11|0);
 $7 = $buf$i;
 $8 = $5;
 $9 = (($8) - ($7))|0;
 $10 = (-2 - ($7))|0;
 $11 = (($8) + 2)|0;
 $12 = ((($big$i)) + 288|0);
 $13 = ((($buf$i)) + 9|0);
 $14 = $13;
 $15 = ((($buf$i)) + 8|0);
 $cnt$0 = 0;$fmt41 = $fmt;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $16 = ($cnt$0|0)>(-1);
  do {
   if ($16) {
    $17 = (2147483647 - ($cnt$0))|0;
    $18 = ($l$0|0)>($17|0);
    if ($18) {
     $19 = (___errno_location()|0);
     HEAP32[$19>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $20 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $20;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $21 = HEAP8[$fmt41>>0]|0;
  $22 = ($21<<24>>24)==(0);
  if ($22) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 245;
   break;
  } else {
   $23 = $21;$fmt40 = $fmt41;
  }
  L9: while(1) {
   switch ($23<<24>>24) {
   case 37:  {
    $fmt39101 = $fmt40;$z$0102 = $fmt40;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $fmt39$lcssa = $fmt40;$z$0$lcssa = $fmt40;
    break L9;
    break;
   }
   default: {
   }
   }
   $24 = ((($fmt40)) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $23 = $$pre;$fmt40 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $25 = ((($fmt39101)) + 1|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)==(37);
     if (!($27)) {
      $fmt39$lcssa = $fmt39101;$z$0$lcssa = $z$0102;
      break L12;
     }
     $28 = ((($z$0102)) + 1|0);
     $29 = ((($fmt39101)) + 2|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = ($30<<24>>24)==(37);
     if ($31) {
      $fmt39101 = $29;$z$0102 = $28;
      label = 9;
     } else {
      $fmt39$lcssa = $29;$z$0$lcssa = $28;
      break;
     }
    }
   }
  } while(0);
  $32 = $z$0$lcssa;
  $33 = $fmt41;
  $34 = (($32) - ($33))|0;
  if ($0) {
   $35 = HEAP32[$f>>2]|0;
   $36 = $35 & 32;
   $37 = ($36|0)==(0);
   if ($37) {
    (___fwritex($fmt41,$34,$f)|0);
   }
  }
  $38 = ($z$0$lcssa|0)==($fmt41|0);
  if (!($38)) {
   $l10n$0$phi = $l10n$0;$cnt$0 = $cnt$1;$fmt41 = $fmt39$lcssa;$l$0 = $34;$l10n$0 = $l10n$0$phi;
   continue;
  }
  $39 = ((($fmt39$lcssa)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $isdigittmp = (($41) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $42 = ((($fmt39$lcssa)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(36);
   $45 = ((($fmt39$lcssa)) + 3|0);
   $$51 = $44 ? $45 : $39;
   $$l10n$0 = $44 ? 1 : $l10n$0;
   $isdigittmp$ = $44 ? $isdigittmp : -1;
   $$pre193 = HEAP8[$$51>>0]|0;
   $47 = $$pre193;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$51;
  } else {
   $47 = $40;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $39;
  }
  $46 = $47 << 24 >> 24;
  $48 = $46 & -32;
  $49 = ($48|0)==(32);
  L25: do {
   if ($49) {
    $51 = $46;$56 = $47;$fl$0109 = 0;$storemerge8108 = $storemerge;
    while(1) {
     $50 = (($51) + -32)|0;
     $52 = 1 << $50;
     $53 = $52 & 75913;
     $54 = ($53|0)==(0);
     if ($54) {
      $65 = $56;$fl$062 = $fl$0109;$storemerge860 = $storemerge8108;
      break L25;
     }
     $55 = $56 << 24 >> 24;
     $57 = (($55) + -32)|0;
     $58 = 1 << $57;
     $59 = $58 | $fl$0109;
     $60 = ((($storemerge8108)) + 1|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61 << 24 >> 24;
     $63 = $62 & -32;
     $64 = ($63|0)==(32);
     if ($64) {
      $51 = $62;$56 = $61;$fl$0109 = $59;$storemerge8108 = $60;
     } else {
      $65 = $61;$fl$062 = $59;$storemerge860 = $60;
      break;
     }
    }
   } else {
    $65 = $47;$fl$062 = 0;$storemerge860 = $storemerge;
   }
  } while(0);
  $66 = ($65<<24>>24)==(42);
  do {
   if ($66) {
    $67 = ((($storemerge860)) + 1|0);
    $68 = HEAP8[$67>>0]|0;
    $69 = $68 << 24 >> 24;
    $isdigittmp11 = (($69) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $70 = ((($storemerge860)) + 2|0);
     $71 = HEAP8[$70>>0]|0;
     $72 = ($71<<24>>24)==(36);
     if ($72) {
      $73 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$73>>2] = 10;
      $74 = HEAP8[$67>>0]|0;
      $75 = $74 << 24 >> 24;
      $76 = (($75) + -48)|0;
      $77 = (($nl_arg) + ($76<<3)|0);
      $78 = $77;
      $79 = $78;
      $80 = HEAP32[$79>>2]|0;
      $81 = (($78) + 4)|0;
      $82 = $81;
      $83 = HEAP32[$82>>2]|0;
      $84 = ((($storemerge860)) + 3|0);
      $l10n$2 = 1;$storemerge13 = $84;$w$0 = $80;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $85 = ($l10n$1|0)==(0);
     if (!($85)) {
      $$0 = -1;
      break L1;
     }
     if (!($0)) {
      $fl$1 = $fl$062;$fmt42 = $67;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $86 = $arglist_current;
     $87 = ((0) + 4|0);
     $expanded4 = $87;
     $expanded = (($expanded4) - 1)|0;
     $88 = (($86) + ($expanded))|0;
     $89 = ((0) + 4|0);
     $expanded8 = $89;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $90 = $88 & $expanded6;
     $91 = $90;
     $92 = HEAP32[$91>>2]|0;
     $arglist_next = ((($91)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $67;$w$0 = $92;
    }
    $93 = ($w$0|0)<(0);
    if ($93) {
     $94 = $fl$062 | 8192;
     $95 = (0 - ($w$0))|0;
     $fl$1 = $94;$fmt42 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $95;
    } else {
     $fl$1 = $fl$062;$fmt42 = $storemerge13;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $96 = $65 << 24 >> 24;
    $isdigittmp1$i = (($96) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $100 = $storemerge860;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $97 = ($i$03$i*10)|0;
      $98 = (($97) + ($isdigittmp4$i))|0;
      $99 = ((($100)) + 1|0);
      $101 = HEAP8[$99>>0]|0;
      $102 = $101 << 24 >> 24;
      $isdigittmp$i = (($102) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $100 = $99;$i$03$i = $98;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa = $98;$$lcssa318 = $99;
       break;
      }
     }
     $103 = ($$lcssa|0)<(0);
     if ($103) {
      $$0 = -1;
      break L1;
     } else {
      $fl$1 = $fl$062;$fmt42 = $$lcssa318;$l10n$3 = $l10n$1;$w$1 = $$lcssa;
     }
    } else {
     $fl$1 = $fl$062;$fmt42 = $storemerge860;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $104 = HEAP8[$fmt42>>0]|0;
  $105 = ($104<<24>>24)==(46);
  L46: do {
   if ($105) {
    $106 = ((($fmt42)) + 1|0);
    $107 = HEAP8[$106>>0]|0;
    $108 = ($107<<24>>24)==(42);
    if (!($108)) {
     $135 = $107 << 24 >> 24;
     $isdigittmp1$i22 = (($135) + -48)|0;
     $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
     if ($isdigit2$i23) {
      $139 = $106;$i$03$i25 = 0;$isdigittmp4$i24 = $isdigittmp1$i22;
     } else {
      $fmt45 = $106;$p$0 = 0;
      break;
     }
     while(1) {
      $136 = ($i$03$i25*10)|0;
      $137 = (($136) + ($isdigittmp4$i24))|0;
      $138 = ((($139)) + 1|0);
      $140 = HEAP8[$138>>0]|0;
      $141 = $140 << 24 >> 24;
      $isdigittmp$i26 = (($141) + -48)|0;
      $isdigit$i27 = ($isdigittmp$i26>>>0)<(10);
      if ($isdigit$i27) {
       $139 = $138;$i$03$i25 = $137;$isdigittmp4$i24 = $isdigittmp$i26;
      } else {
       $fmt45 = $138;$p$0 = $137;
       break L46;
      }
     }
    }
    $109 = ((($fmt42)) + 2|0);
    $110 = HEAP8[$109>>0]|0;
    $111 = $110 << 24 >> 24;
    $isdigittmp9 = (($111) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $112 = ((($fmt42)) + 3|0);
     $113 = HEAP8[$112>>0]|0;
     $114 = ($113<<24>>24)==(36);
     if ($114) {
      $115 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$115>>2] = 10;
      $116 = HEAP8[$109>>0]|0;
      $117 = $116 << 24 >> 24;
      $118 = (($117) + -48)|0;
      $119 = (($nl_arg) + ($118<<3)|0);
      $120 = $119;
      $121 = $120;
      $122 = HEAP32[$121>>2]|0;
      $123 = (($120) + 4)|0;
      $124 = $123;
      $125 = HEAP32[$124>>2]|0;
      $126 = ((($fmt42)) + 4|0);
      $fmt45 = $126;$p$0 = $122;
      break;
     }
    }
    $127 = ($l10n$3|0)==(0);
    if (!($127)) {
     $$0 = -1;
     break L1;
    }
    if ($0) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $128 = $arglist_current2;
     $129 = ((0) + 4|0);
     $expanded11 = $129;
     $expanded10 = (($expanded11) - 1)|0;
     $130 = (($128) + ($expanded10))|0;
     $131 = ((0) + 4|0);
     $expanded15 = $131;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $132 = $130 & $expanded13;
     $133 = $132;
     $134 = HEAP32[$133>>2]|0;
     $arglist_next3 = ((($133)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $fmt45 = $109;$p$0 = $134;
    } else {
     $fmt45 = $109;$p$0 = 0;
    }
   } else {
    $fmt45 = $fmt42;$p$0 = -1;
   }
  } while(0);
  $fmt44 = $fmt45;$st$0 = 0;
  while(1) {
   $142 = HEAP8[$fmt44>>0]|0;
   $143 = $142 << 24 >> 24;
   $144 = (($143) + -65)|0;
   $145 = ($144>>>0)>(57);
   if ($145) {
    $$0 = -1;
    break L1;
   }
   $146 = ((($fmt44)) + 1|0);
   $147 = ((22117999 + (($st$0*58)|0)|0) + ($144)|0);
   $148 = HEAP8[$147>>0]|0;
   $149 = $148&255;
   $150 = (($149) + -1)|0;
   $151 = ($150>>>0)<(8);
   if ($151) {
    $fmt44 = $146;$st$0 = $149;
   } else {
    $$lcssa323 = $146;$$lcssa324 = $148;$$lcssa325 = $149;$fmt44$lcssa321 = $fmt44;$st$0$lcssa322 = $st$0;
    break;
   }
  }
  $152 = ($$lcssa324<<24>>24)==(0);
  if ($152) {
   $$0 = -1;
   break;
  }
  $153 = ($$lcssa324<<24>>24)==(19);
  $154 = ($argpos$0|0)>(-1);
  do {
   if ($153) {
    if ($154) {
     $$0 = -1;
     break L1;
    } else {
     label = 52;
    }
   } else {
    if ($154) {
     $155 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$155>>2] = $$lcssa325;
     $156 = (($nl_arg) + ($argpos$0<<3)|0);
     $157 = $156;
     $158 = $157;
     $159 = HEAP32[$158>>2]|0;
     $160 = (($157) + 4)|0;
     $161 = $160;
     $162 = HEAP32[$161>>2]|0;
     $163 = $arg;
     $164 = $163;
     HEAP32[$164>>2] = $159;
     $165 = (($163) + 4)|0;
     $166 = $165;
     HEAP32[$166>>2] = $162;
     label = 52;
     break;
    }
    if (!($0)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($arg,$$lcssa325,$ap);
   }
  } while(0);
  if ((label|0) == 52) {
   label = 0;
   if (!($0)) {
    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
    continue;
   }
  }
  $167 = HEAP8[$fmt44$lcssa321>>0]|0;
  $168 = $167 << 24 >> 24;
  $169 = ($st$0$lcssa322|0)!=(0);
  $170 = $168 & 15;
  $171 = ($170|0)==(3);
  $or$cond15 = $169 & $171;
  $172 = $168 & -33;
  $t$0 = $or$cond15 ? $172 : $168;
  $173 = $fl$1 & 8192;
  $174 = ($173|0)==(0);
  $175 = $fl$1 & -65537;
  $fl$1$ = $174 ? $fl$1 : $175;
  L75: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0$lcssa322|0) {
    case 0:  {
     $182 = HEAP32[$arg>>2]|0;
     HEAP32[$182>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $183 = HEAP32[$arg>>2]|0;
     HEAP32[$183>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $184 = ($cnt$1|0)<(0);
     $185 = $184 << 31 >> 31;
     $186 = HEAP32[$arg>>2]|0;
     $187 = $186;
     $188 = $187;
     HEAP32[$188>>2] = $cnt$1;
     $189 = (($187) + 4)|0;
     $190 = $189;
     HEAP32[$190>>2] = $185;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 3:  {
     $191 = $cnt$1&65535;
     $192 = HEAP32[$arg>>2]|0;
     HEAP16[$192>>1] = $191;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $193 = $cnt$1&255;
     $194 = HEAP32[$arg>>2]|0;
     HEAP8[$194>>0] = $193;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $195 = HEAP32[$arg>>2]|0;
     HEAP32[$195>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $196 = ($cnt$1|0)<(0);
     $197 = $196 << 31 >> 31;
     $198 = HEAP32[$arg>>2]|0;
     $199 = $198;
     $200 = $199;
     HEAP32[$200>>2] = $cnt$1;
     $201 = (($199) + 4)|0;
     $202 = $201;
     HEAP32[$202>>2] = $197;
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $203 = ($p$0>>>0)>(8);
    $204 = $203 ? $p$0 : 8;
    $205 = $fl$1$ | 8;
    $fl$3 = $205;$p$1 = $204;$t$1 = 120;
    label = 64;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 64;
    break;
   }
   case 111:  {
    $243 = $arg;
    $244 = $243;
    $245 = HEAP32[$244>>2]|0;
    $246 = (($243) + 4)|0;
    $247 = $246;
    $248 = HEAP32[$247>>2]|0;
    $249 = ($245|0)==(0);
    $250 = ($248|0)==(0);
    $251 = $249 & $250;
    if ($251) {
     $$0$lcssa$i = $1;
    } else {
     $$03$i33 = $1;$253 = $245;$257 = $248;
     while(1) {
      $252 = $253 & 7;
      $254 = $252 | 48;
      $255 = $254&255;
      $256 = ((($$03$i33)) + -1|0);
      HEAP8[$256>>0] = $255;
      $258 = (_bitshift64Lshr(($253|0),($257|0),3)|0);
      $259 = tempRet0;
      $260 = ($258|0)==(0);
      $261 = ($259|0)==(0);
      $262 = $260 & $261;
      if ($262) {
       $$0$lcssa$i = $256;
       break;
      } else {
       $$03$i33 = $256;$253 = $258;$257 = $259;
      }
     }
    }
    $263 = $fl$1$ & 8;
    $264 = ($263|0)==(0);
    if ($264) {
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 22118479;
     label = 77;
    } else {
     $265 = $$0$lcssa$i;
     $266 = (($2) - ($265))|0;
     $267 = (($266) + 1)|0;
     $268 = ($p$0|0)<($267|0);
     $$p$0 = $268 ? $267 : $p$0;
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $$p$0;$pl$1 = 0;$prefix$1 = 22118479;
     label = 77;
    }
    break;
   }
   case 105: case 100:  {
    $269 = $arg;
    $270 = $269;
    $271 = HEAP32[$270>>2]|0;
    $272 = (($269) + 4)|0;
    $273 = $272;
    $274 = HEAP32[$273>>2]|0;
    $275 = ($274|0)<(0);
    if ($275) {
     $276 = (_i64Subtract(0,0,($271|0),($274|0))|0);
     $277 = tempRet0;
     $278 = $arg;
     $279 = $278;
     HEAP32[$279>>2] = $276;
     $280 = (($278) + 4)|0;
     $281 = $280;
     HEAP32[$281>>2] = $277;
     $286 = $276;$287 = $277;$pl$0 = 1;$prefix$0 = 22118479;
     label = 76;
     break L75;
    }
    $282 = $fl$1$ & 2048;
    $283 = ($282|0)==(0);
    if ($283) {
     $284 = $fl$1$ & 1;
     $285 = ($284|0)==(0);
     $$ = $285 ? 22118479 : (22118481);
     $286 = $271;$287 = $274;$pl$0 = $284;$prefix$0 = $$;
     label = 76;
    } else {
     $286 = $271;$287 = $274;$pl$0 = 1;$prefix$0 = (22118480);
     label = 76;
    }
    break;
   }
   case 117:  {
    $176 = $arg;
    $177 = $176;
    $178 = HEAP32[$177>>2]|0;
    $179 = (($176) + 4)|0;
    $180 = $179;
    $181 = HEAP32[$180>>2]|0;
    $286 = $178;$287 = $181;$pl$0 = 0;$prefix$0 = 22118479;
    label = 76;
    break;
   }
   case 99:  {
    $307 = $arg;
    $308 = $307;
    $309 = HEAP32[$308>>2]|0;
    $310 = (($307) + 4)|0;
    $311 = $310;
    $312 = HEAP32[$311>>2]|0;
    $313 = $309&255;
    HEAP8[$3>>0] = $313;
    $a$2 = $3;$fl$6 = $175;$p$5 = 1;$pl$2 = 0;$prefix$2 = 22118479;$z$2 = $1;
    break;
   }
   case 109:  {
    $314 = (___errno_location()|0);
    $315 = HEAP32[$314>>2]|0;
    $316 = (_strerror($315)|0);
    $a$1 = $316;
    label = 82;
    break;
   }
   case 115:  {
    $317 = HEAP32[$arg>>2]|0;
    $318 = ($317|0)!=(0|0);
    $319 = $318 ? $317 : 22118489;
    $a$1 = $319;
    label = 82;
    break;
   }
   case 67:  {
    $326 = $arg;
    $327 = $326;
    $328 = HEAP32[$327>>2]|0;
    $329 = (($326) + 4)|0;
    $330 = $329;
    $331 = HEAP32[$330>>2]|0;
    HEAP32[$wc>>2] = $328;
    HEAP32[$4>>2] = 0;
    HEAP32[$arg>>2] = $wc;
    $p$4198 = -1;
    label = 86;
    break;
   }
   case 83:  {
    $332 = ($p$0|0)==(0);
    if ($332) {
     _pad($f,32,$w$1,0,$fl$1$);
     $i$0$lcssa200 = 0;
     label = 98;
    } else {
     $p$4198 = $p$0;
     label = 86;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $359 = +HEAPF64[$arg>>3];
    HEAP32[$e2$i>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $359;$360 = HEAP32[tempDoublePtr>>2]|0;
    $361 = HEAP32[tempDoublePtr+4>>2]|0;
    $362 = ($361|0)<(0);
    if ($362) {
     $363 = -$359;
     $$07$i = $363;$pl$0$i = 1;$prefix$0$i = 22118496;
    } else {
     $364 = $fl$1$ & 2048;
     $365 = ($364|0)==(0);
     if ($365) {
      $366 = $fl$1$ & 1;
      $367 = ($366|0)==(0);
      $$$i = $367 ? (22118497) : (22118502);
      $$07$i = $359;$pl$0$i = $366;$prefix$0$i = $$$i;
     } else {
      $$07$i = $359;$pl$0$i = 1;$prefix$0$i = (22118499);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$368 = HEAP32[tempDoublePtr>>2]|0;
    $369 = HEAP32[tempDoublePtr+4>>2]|0;
    $370 = $369 & 2146435072;
    $371 = ($370>>>0)<(2146435072);
    $372 = (0)<(0);
    $373 = ($370|0)==(2146435072);
    $374 = $373 & $372;
    $375 = $371 | $374;
    do {
     if ($375) {
      $391 = (+_frexpl($$07$i,$e2$i));
      $392 = $391 * 2.0;
      $393 = $392 != 0.0;
      if ($393) {
       $394 = HEAP32[$e2$i>>2]|0;
       $395 = (($394) + -1)|0;
       HEAP32[$e2$i>>2] = $395;
      }
      $396 = $t$0 | 32;
      $397 = ($396|0)==(97);
      if ($397) {
       $398 = $t$0 & 32;
       $399 = ($398|0)==(0);
       $400 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $399 ? $prefix$0$i : $400;
       $401 = $pl$0$i | 2;
       $402 = ($p$0>>>0)>(11);
       $403 = (12 - ($p$0))|0;
       $404 = ($403|0)==(0);
       $405 = $402 | $404;
       do {
        if ($405) {
         $$1$i = $392;
        } else {
         $re$169$i = $403;$round$068$i = 8.0;
         while(1) {
          $406 = (($re$169$i) + -1)|0;
          $407 = $round$068$i * 16.0;
          $408 = ($406|0)==(0);
          if ($408) {
           $$lcssa342 = $407;
           break;
          } else {
           $re$169$i = $406;$round$068$i = $407;
          }
         }
         $409 = HEAP8[$prefix$0$$i>>0]|0;
         $410 = ($409<<24>>24)==(45);
         if ($410) {
          $411 = -$392;
          $412 = $411 - $$lcssa342;
          $413 = $$lcssa342 + $412;
          $414 = -$413;
          $$1$i = $414;
          break;
         } else {
          $415 = $392 + $$lcssa342;
          $416 = $415 - $$lcssa342;
          $$1$i = $416;
          break;
         }
        }
       } while(0);
       $417 = HEAP32[$e2$i>>2]|0;
       $418 = ($417|0)<(0);
       $419 = (0 - ($417))|0;
       $420 = $418 ? $419 : $417;
       $421 = ($420|0)<(0);
       $422 = $421 << 31 >> 31;
       $423 = (_fmt_u($420,$422,$5)|0);
       $424 = ($423|0)==($5|0);
       if ($424) {
        HEAP8[$6>>0] = 48;
        $estr$0$i = $6;
       } else {
        $estr$0$i = $423;
       }
       $425 = $417 >> 31;
       $426 = $425 & 2;
       $427 = (($426) + 43)|0;
       $428 = $427&255;
       $429 = ((($estr$0$i)) + -1|0);
       HEAP8[$429>>0] = $428;
       $430 = (($t$0) + 15)|0;
       $431 = $430&255;
       $432 = ((($estr$0$i)) + -2|0);
       HEAP8[$432>>0] = $431;
       $notrhs$i = ($p$0|0)<(1);
       $433 = $fl$1$ & 8;
       $434 = ($433|0)==(0);
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $435 = (~~(($$2$i)));
        $436 = (22118463 + ($435)|0);
        $437 = HEAP8[$436>>0]|0;
        $438 = $437&255;
        $439 = $438 | $398;
        $440 = $439&255;
        $441 = ((($s$0$i)) + 1|0);
        HEAP8[$s$0$i>>0] = $440;
        $442 = (+($435|0));
        $443 = $$2$i - $442;
        $444 = $443 * 16.0;
        $445 = $441;
        $446 = (($445) - ($7))|0;
        $447 = ($446|0)==(1);
        do {
         if ($447) {
          $notlhs$i = $444 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $434 & $or$cond3$not$i;
          if ($or$cond$i) {
           $s$1$i = $441;
           break;
          }
          $448 = ((($s$0$i)) + 2|0);
          HEAP8[$441>>0] = 46;
          $s$1$i = $448;
         } else {
          $s$1$i = $441;
         }
        } while(0);
        $449 = $444 != 0.0;
        if ($449) {
         $$2$i = $444;$s$0$i = $s$1$i;
        } else {
         $s$1$i$lcssa = $s$1$i;
         break;
        }
       }
       $450 = ($p$0|0)!=(0);
       $$pre182$i = $s$1$i$lcssa;
       $451 = (($10) + ($$pre182$i))|0;
       $452 = ($451|0)<($p$0|0);
       $or$cond240 = $450 & $452;
       $453 = $432;
       $454 = (($11) + ($p$0))|0;
       $455 = (($454) - ($453))|0;
       $456 = $432;
       $457 = (($9) - ($456))|0;
       $458 = (($457) + ($$pre182$i))|0;
       $l$0$i = $or$cond240 ? $455 : $458;
       $459 = (($l$0$i) + ($401))|0;
       _pad($f,32,$w$1,$459,$fl$1$);
       $460 = HEAP32[$f>>2]|0;
       $461 = $460 & 32;
       $462 = ($461|0)==(0);
       if ($462) {
        (___fwritex($prefix$0$$i,$401,$f)|0);
       }
       $463 = $fl$1$ ^ 65536;
       _pad($f,48,$w$1,$459,$463);
       $464 = (($$pre182$i) - ($7))|0;
       $465 = HEAP32[$f>>2]|0;
       $466 = $465 & 32;
       $467 = ($466|0)==(0);
       if ($467) {
        (___fwritex($buf$i,$464,$f)|0);
       }
       $468 = $432;
       $469 = (($8) - ($468))|0;
       $sum = (($464) + ($469))|0;
       $470 = (($l$0$i) - ($sum))|0;
       _pad($f,48,$470,0,0);
       $471 = HEAP32[$f>>2]|0;
       $472 = $471 & 32;
       $473 = ($472|0)==(0);
       if ($473) {
        (___fwritex($432,$469,$f)|0);
       }
       $474 = $fl$1$ ^ 8192;
       _pad($f,32,$w$1,$459,$474);
       $475 = ($459|0)<($w$1|0);
       $w$$i = $475 ? $w$1 : $459;
       $$0$i = $w$$i;
       break;
      }
      $476 = ($p$0|0)<(0);
      $$p$i = $476 ? 6 : $p$0;
      if ($393) {
       $477 = $392 * 268435456.0;
       $478 = HEAP32[$e2$i>>2]|0;
       $479 = (($478) + -28)|0;
       HEAP32[$e2$i>>2] = $479;
       $$3$i = $477;$480 = $479;
      } else {
       $$pre179$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $392;$480 = $$pre179$i;
      }
      $481 = ($480|0)<(0);
      $$31$i = $481 ? $big$i : $12;
      $482 = $$31$i;
      $$4$i = $$3$i;$z$0$i = $$31$i;
      while(1) {
       $483 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $483;
       $484 = ((($z$0$i)) + 4|0);
       $485 = (+($483>>>0));
       $486 = $$4$i - $485;
       $487 = $486 * 1.0E+9;
       $488 = $487 != 0.0;
       if ($488) {
        $$4$i = $487;$z$0$i = $484;
       } else {
        $$lcssa326 = $484;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $489 = ($$pr$i|0)>(0);
      if ($489) {
       $490 = $$pr$i;$a$1147$i = $$31$i;$z$1146$i = $$lcssa326;
       while(1) {
        $491 = ($490|0)>(29);
        $492 = $491 ? 29 : $490;
        $d$0139$i = ((($z$1146$i)) + -4|0);
        $493 = ($d$0139$i>>>0)<($a$1147$i>>>0);
        do {
         if ($493) {
          $a$2$ph$i = $a$1147$i;
         } else {
          $carry$0140$i = 0;$d$0141$i = $d$0139$i;
          while(1) {
           $494 = HEAP32[$d$0141$i>>2]|0;
           $495 = (_bitshift64Shl(($494|0),0,($492|0))|0);
           $496 = tempRet0;
           $497 = (_i64Add(($495|0),($496|0),($carry$0140$i|0),0)|0);
           $498 = tempRet0;
           $499 = (___uremdi3(($497|0),($498|0),1000000000,0)|0);
           $500 = tempRet0;
           HEAP32[$d$0141$i>>2] = $499;
           $501 = (___udivdi3(($497|0),($498|0),1000000000,0)|0);
           $502 = tempRet0;
           $d$0$i = ((($d$0141$i)) + -4|0);
           $503 = ($d$0$i>>>0)<($a$1147$i>>>0);
           if ($503) {
            $$lcssa327 = $501;
            break;
           } else {
            $carry$0140$i = $501;$d$0141$i = $d$0$i;
           }
          }
          $504 = ($$lcssa327|0)==(0);
          if ($504) {
           $a$2$ph$i = $a$1147$i;
           break;
          }
          $505 = ((($a$1147$i)) + -4|0);
          HEAP32[$505>>2] = $$lcssa327;
          $a$2$ph$i = $505;
         }
        } while(0);
        $z$2$i = $z$1146$i;
        while(1) {
         $506 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($506)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $507 = ((($z$2$i)) + -4|0);
         $508 = HEAP32[$507>>2]|0;
         $509 = ($508|0)==(0);
         if ($509) {
          $z$2$i = $507;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $510 = HEAP32[$e2$i>>2]|0;
        $511 = (($510) - ($492))|0;
        HEAP32[$e2$i>>2] = $511;
        $512 = ($511|0)>(0);
        if ($512) {
         $490 = $511;$a$1147$i = $a$2$ph$i;$z$1146$i = $z$2$i$lcssa;
        } else {
         $$pr47$i = $511;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr47$i = $$pr$i;$a$1$lcssa$i = $$31$i;$z$1$lcssa$i = $$lcssa326;
      }
      $513 = ($$pr47$i|0)<(0);
      if ($513) {
       $514 = (($$p$i) + 25)|0;
       $515 = (($514|0) / 9)&-1;
       $516 = (($515) + 1)|0;
       $517 = ($396|0)==(102);
       $519 = $$pr47$i;$a$3134$i = $a$1$lcssa$i;$z$3133$i = $z$1$lcssa$i;
       while(1) {
        $518 = (0 - ($519))|0;
        $520 = ($518|0)>(9);
        $521 = $520 ? 9 : $518;
        $522 = ($a$3134$i>>>0)<($z$3133$i>>>0);
        do {
         if ($522) {
          $526 = 1 << $521;
          $527 = (($526) + -1)|0;
          $528 = 1000000000 >>> $521;
          $carry3$0128$i = 0;$d$1127$i = $a$3134$i;
          while(1) {
           $529 = HEAP32[$d$1127$i>>2]|0;
           $530 = $529 & $527;
           $531 = $529 >>> $521;
           $532 = (($531) + ($carry3$0128$i))|0;
           HEAP32[$d$1127$i>>2] = $532;
           $533 = Math_imul($530, $528)|0;
           $534 = ((($d$1127$i)) + 4|0);
           $535 = ($534>>>0)<($z$3133$i>>>0);
           if ($535) {
            $carry3$0128$i = $533;$d$1127$i = $534;
           } else {
            $$lcssa329 = $533;
            break;
           }
          }
          $536 = HEAP32[$a$3134$i>>2]|0;
          $537 = ($536|0)==(0);
          $538 = ((($a$3134$i)) + 4|0);
          $$a$3$i = $537 ? $538 : $a$3134$i;
          $539 = ($$lcssa329|0)==(0);
          if ($539) {
           $$a$3186$i = $$a$3$i;$z$4$i = $z$3133$i;
           break;
          }
          $540 = ((($z$3133$i)) + 4|0);
          HEAP32[$z$3133$i>>2] = $$lcssa329;
          $$a$3186$i = $$a$3$i;$z$4$i = $540;
         } else {
          $523 = HEAP32[$a$3134$i>>2]|0;
          $524 = ($523|0)==(0);
          $525 = ((($a$3134$i)) + 4|0);
          $$a$3185$i = $524 ? $525 : $a$3134$i;
          $$a$3186$i = $$a$3185$i;$z$4$i = $z$3133$i;
         }
        } while(0);
        $541 = $517 ? $$31$i : $$a$3186$i;
        $542 = $z$4$i;
        $543 = $541;
        $544 = (($542) - ($543))|0;
        $545 = $544 >> 2;
        $546 = ($545|0)>($516|0);
        $547 = (($541) + ($516<<2)|0);
        $$z$4$i = $546 ? $547 : $z$4$i;
        $548 = HEAP32[$e2$i>>2]|0;
        $549 = (($548) + ($521))|0;
        HEAP32[$e2$i>>2] = $549;
        $550 = ($549|0)<(0);
        if ($550) {
         $519 = $549;$a$3134$i = $$a$3186$i;$z$3133$i = $$z$4$i;
        } else {
         $a$3$lcssa$i = $$a$3186$i;$z$3$lcssa$i = $$z$4$i;
         break;
        }
       }
      } else {
       $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
      }
      $551 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($551) {
        $552 = $a$3$lcssa$i;
        $553 = (($482) - ($552))|0;
        $554 = $553 >> 2;
        $555 = ($554*9)|0;
        $556 = HEAP32[$a$3$lcssa$i>>2]|0;
        $557 = ($556>>>0)<(10);
        if ($557) {
         $e$1$i = $555;
         break;
        } else {
         $e$0123$i = $555;$i$0122$i = 10;
        }
        while(1) {
         $558 = ($i$0122$i*10)|0;
         $559 = (($e$0123$i) + 1)|0;
         $560 = ($556>>>0)<($558>>>0);
         if ($560) {
          $e$1$i = $559;
          break;
         } else {
          $e$0123$i = $559;$i$0122$i = $558;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $561 = ($396|0)!=(102);
      $562 = $561 ? $e$1$i : 0;
      $563 = (($$p$i) - ($562))|0;
      $564 = ($396|0)==(103);
      $565 = ($$p$i|0)!=(0);
      $566 = $565 & $564;
      $$neg52$i = $566 << 31 >> 31;
      $567 = (($563) + ($$neg52$i))|0;
      $568 = $z$3$lcssa$i;
      $569 = (($568) - ($482))|0;
      $570 = $569 >> 2;
      $571 = ($570*9)|0;
      $572 = (($571) + -9)|0;
      $573 = ($567|0)<($572|0);
      if ($573) {
       $574 = (($567) + 9216)|0;
       $575 = (($574|0) / 9)&-1;
       $$sum$i = (($575) + -1023)|0;
       $576 = (($$31$i) + ($$sum$i<<2)|0);
       $577 = (($574|0) % 9)&-1;
       $j$0115$i = (($577) + 1)|0;
       $578 = ($j$0115$i|0)<(9);
       if ($578) {
        $i$1116$i = 10;$j$0117$i = $j$0115$i;
        while(1) {
         $579 = ($i$1116$i*10)|0;
         $j$0$i = (($j$0117$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $579;
          break;
         } else {
          $i$1116$i = $579;$j$0117$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $580 = HEAP32[$576>>2]|0;
       $581 = (($580>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $582 = ($581|0)==(0);
       if ($582) {
        $$sum15$i = (($575) + -1022)|0;
        $583 = (($$31$i) + ($$sum15$i<<2)|0);
        $584 = ($583|0)==($z$3$lcssa$i|0);
        if ($584) {
         $a$7$i = $a$3$lcssa$i;$d$3$i = $576;$e$3$i = $e$1$i;
        } else {
         label = 163;
        }
       } else {
        label = 163;
       }
       do {
        if ((label|0) == 163) {
         label = 0;
         $585 = (($580>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $586 = $585 & 1;
         $587 = ($586|0)==(0);
         $$20$i = $587 ? 9007199254740992.0 : 9007199254740994.0;
         $588 = (($i$1$lcssa$i|0) / 2)&-1;
         $589 = ($581>>>0)<($588>>>0);
         do {
          if ($589) {
           $small$0$i = 0.5;
          } else {
           $590 = ($581|0)==($588|0);
           if ($590) {
            $$sum16$i = (($575) + -1022)|0;
            $591 = (($$31$i) + ($$sum16$i<<2)|0);
            $592 = ($591|0)==($z$3$lcssa$i|0);
            if ($592) {
             $small$0$i = 1.0;
             break;
            }
           }
           $small$0$i = 1.5;
          }
         } while(0);
         $593 = ($pl$0$i|0)==(0);
         do {
          if ($593) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $594 = HEAP8[$prefix$0$i>>0]|0;
           $595 = ($594<<24>>24)==(45);
           if (!($595)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $596 = -$$20$i;
           $597 = -$small$0$i;
           $round6$1$i = $596;$small$1$i = $597;
          }
         } while(0);
         $598 = (($580) - ($581))|0;
         HEAP32[$576>>2] = $598;
         $599 = $round6$1$i + $small$1$i;
         $600 = $599 != $round6$1$i;
         if (!($600)) {
          $a$7$i = $a$3$lcssa$i;$d$3$i = $576;$e$3$i = $e$1$i;
          break;
         }
         $601 = (($598) + ($i$1$lcssa$i))|0;
         HEAP32[$576>>2] = $601;
         $602 = ($601>>>0)>(999999999);
         if ($602) {
          $a$5109$i = $a$3$lcssa$i;$d$2108$i = $576;
          while(1) {
           $603 = ((($d$2108$i)) + -4|0);
           HEAP32[$d$2108$i>>2] = 0;
           $604 = ($603>>>0)<($a$5109$i>>>0);
           if ($604) {
            $605 = ((($a$5109$i)) + -4|0);
            HEAP32[$605>>2] = 0;
            $a$6$i = $605;
           } else {
            $a$6$i = $a$5109$i;
           }
           $606 = HEAP32[$603>>2]|0;
           $607 = (($606) + 1)|0;
           HEAP32[$603>>2] = $607;
           $608 = ($607>>>0)>(999999999);
           if ($608) {
            $a$5109$i = $a$6$i;$d$2108$i = $603;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $603;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $576;
         }
         $609 = $a$5$lcssa$i;
         $610 = (($482) - ($609))|0;
         $611 = $610 >> 2;
         $612 = ($611*9)|0;
         $613 = HEAP32[$a$5$lcssa$i>>2]|0;
         $614 = ($613>>>0)<(10);
         if ($614) {
          $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $612;
          break;
         } else {
          $e$2104$i = $612;$i$2103$i = 10;
         }
         while(1) {
          $615 = ($i$2103$i*10)|0;
          $616 = (($e$2104$i) + 1)|0;
          $617 = ($613>>>0)<($615>>>0);
          if ($617) {
           $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $616;
           break;
          } else {
           $e$2104$i = $616;$i$2103$i = $615;
          }
         }
        }
       } while(0);
       $618 = ((($d$3$i)) + 4|0);
       $619 = ($z$3$lcssa$i>>>0)>($618>>>0);
       $$z$3$i = $619 ? $618 : $z$3$lcssa$i;
       $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
      } else {
       $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
      }
      $620 = (0 - ($e$4$ph$i))|0;
      $z$6$i = $z$6$ph$i;
      while(1) {
       $621 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
       if (!($621)) {
        $$lcssa159$i = 0;$z$6$i$lcssa = $z$6$i;
        break;
       }
       $622 = ((($z$6$i)) + -4|0);
       $623 = HEAP32[$622>>2]|0;
       $624 = ($623|0)==(0);
       if ($624) {
        $z$6$i = $622;
       } else {
        $$lcssa159$i = 1;$z$6$i$lcssa = $z$6$i;
        break;
       }
      }
      do {
       if ($564) {
        $625 = $565&1;
        $626 = $625 ^ 1;
        $$p$$i = (($626) + ($$p$i))|0;
        $627 = ($$p$$i|0)>($e$4$ph$i|0);
        $628 = ($e$4$ph$i|0)>(-5);
        $or$cond6$i = $627 & $628;
        if ($or$cond6$i) {
         $629 = (($t$0) + -1)|0;
         $$neg53$i = (($$p$$i) + -1)|0;
         $630 = (($$neg53$i) - ($e$4$ph$i))|0;
         $$013$i = $629;$$210$i = $630;
        } else {
         $631 = (($t$0) + -2)|0;
         $632 = (($$p$$i) + -1)|0;
         $$013$i = $631;$$210$i = $632;
        }
        $633 = $fl$1$ & 8;
        $634 = ($633|0)==(0);
        if (!($634)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi184$iZ2D = $633;
         break;
        }
        do {
         if ($$lcssa159$i) {
          $635 = ((($z$6$i$lcssa)) + -4|0);
          $636 = HEAP32[$635>>2]|0;
          $637 = ($636|0)==(0);
          if ($637) {
           $j$2$i = 9;
           break;
          }
          $638 = (($636>>>0) % 10)&-1;
          $639 = ($638|0)==(0);
          if ($639) {
           $i$399$i = 10;$j$1100$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $640 = ($i$399$i*10)|0;
           $641 = (($j$1100$i) + 1)|0;
           $642 = (($636>>>0) % ($640>>>0))&-1;
           $643 = ($642|0)==(0);
           if ($643) {
            $i$399$i = $640;$j$1100$i = $641;
           } else {
            $j$2$i = $641;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $644 = $$013$i | 32;
        $645 = ($644|0)==(102);
        $646 = $z$6$i$lcssa;
        $647 = (($646) - ($482))|0;
        $648 = $647 >> 2;
        $649 = ($648*9)|0;
        $650 = (($649) + -9)|0;
        if ($645) {
         $651 = (($650) - ($j$2$i))|0;
         $652 = ($651|0)<(0);
         $$21$i = $652 ? 0 : $651;
         $653 = ($$210$i|0)<($$21$i|0);
         $$210$$22$i = $653 ? $$210$i : $$21$i;
         $$114$i = $$013$i;$$311$i = $$210$$22$i;$$pre$phi184$iZ2D = 0;
         break;
        } else {
         $654 = (($650) + ($e$4$ph$i))|0;
         $655 = (($654) - ($j$2$i))|0;
         $656 = ($655|0)<(0);
         $$23$i = $656 ? 0 : $655;
         $657 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $657 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi184$iZ2D = 0;
         break;
        }
       } else {
        $$pre183$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi184$iZ2D = $$pre183$i;
       }
      } while(0);
      $658 = $$311$i | $$pre$phi184$iZ2D;
      $659 = ($658|0)!=(0);
      $660 = $659&1;
      $661 = $$114$i | 32;
      $662 = ($661|0)==(102);
      if ($662) {
       $663 = ($e$4$ph$i|0)>(0);
       $664 = $663 ? $e$4$ph$i : 0;
       $$pn$i = $664;$estr$2$i = 0;
      } else {
       $665 = ($e$4$ph$i|0)<(0);
       $666 = $665 ? $620 : $e$4$ph$i;
       $667 = ($666|0)<(0);
       $668 = $667 << 31 >> 31;
       $669 = (_fmt_u($666,$668,$5)|0);
       $670 = $669;
       $671 = (($8) - ($670))|0;
       $672 = ($671|0)<(2);
       if ($672) {
        $estr$193$i = $669;
        while(1) {
         $673 = ((($estr$193$i)) + -1|0);
         HEAP8[$673>>0] = 48;
         $674 = $673;
         $675 = (($8) - ($674))|0;
         $676 = ($675|0)<(2);
         if ($676) {
          $estr$193$i = $673;
         } else {
          $estr$1$lcssa$i = $673;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $669;
       }
       $677 = $e$4$ph$i >> 31;
       $678 = $677 & 2;
       $679 = (($678) + 43)|0;
       $680 = $679&255;
       $681 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$681>>0] = $680;
       $682 = $$114$i&255;
       $683 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$683>>0] = $682;
       $684 = $683;
       $685 = (($8) - ($684))|0;
       $$pn$i = $685;$estr$2$i = $683;
      }
      $686 = (($pl$0$i) + 1)|0;
      $687 = (($686) + ($$311$i))|0;
      $l$1$i = (($687) + ($660))|0;
      $688 = (($l$1$i) + ($$pn$i))|0;
      _pad($f,32,$w$1,$688,$fl$1$);
      $689 = HEAP32[$f>>2]|0;
      $690 = $689 & 32;
      $691 = ($690|0)==(0);
      if ($691) {
       (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      }
      $692 = $fl$1$ ^ 65536;
      _pad($f,48,$w$1,$688,$692);
      do {
       if ($662) {
        $693 = ($a$8$ph$i>>>0)>($$31$i>>>0);
        $r$0$a$8$i = $693 ? $$31$i : $a$8$ph$i;
        $d$482$i = $r$0$a$8$i;
        while(1) {
         $694 = HEAP32[$d$482$i>>2]|0;
         $695 = (_fmt_u($694,0,$13)|0);
         $696 = ($d$482$i|0)==($r$0$a$8$i|0);
         do {
          if ($696) {
           $700 = ($695|0)==($13|0);
           if (!($700)) {
            $s7$1$i = $695;
            break;
           }
           HEAP8[$15>>0] = 48;
           $s7$1$i = $15;
          } else {
           $697 = ($695>>>0)>($buf$i>>>0);
           if ($697) {
            $s7$079$i = $695;
           } else {
            $s7$1$i = $695;
            break;
           }
           while(1) {
            $698 = ((($s7$079$i)) + -1|0);
            HEAP8[$698>>0] = 48;
            $699 = ($698>>>0)>($buf$i>>>0);
            if ($699) {
             $s7$079$i = $698;
            } else {
             $s7$1$i = $698;
             break;
            }
           }
          }
         } while(0);
         $701 = HEAP32[$f>>2]|0;
         $702 = $701 & 32;
         $703 = ($702|0)==(0);
         if ($703) {
          $704 = $s7$1$i;
          $705 = (($14) - ($704))|0;
          (___fwritex($s7$1$i,$705,$f)|0);
         }
         $706 = ((($d$482$i)) + 4|0);
         $707 = ($706>>>0)>($$31$i>>>0);
         if ($707) {
          $$lcssa339 = $706;
          break;
         } else {
          $d$482$i = $706;
         }
        }
        $708 = ($658|0)==(0);
        do {
         if (!($708)) {
          $709 = HEAP32[$f>>2]|0;
          $710 = $709 & 32;
          $711 = ($710|0)==(0);
          if (!($711)) {
           break;
          }
          (___fwritex(22118531,1,$f)|0);
         }
        } while(0);
        $712 = ($$lcssa339>>>0)<($z$6$i$lcssa>>>0);
        $713 = ($$311$i|0)>(0);
        $714 = $713 & $712;
        if ($714) {
         $$41276$i = $$311$i;$d$575$i = $$lcssa339;
         while(1) {
          $715 = HEAP32[$d$575$i>>2]|0;
          $716 = (_fmt_u($715,0,$13)|0);
          $717 = ($716>>>0)>($buf$i>>>0);
          if ($717) {
           $s8$070$i = $716;
           while(1) {
            $718 = ((($s8$070$i)) + -1|0);
            HEAP8[$718>>0] = 48;
            $719 = ($718>>>0)>($buf$i>>>0);
            if ($719) {
             $s8$070$i = $718;
            } else {
             $s8$0$lcssa$i = $718;
             break;
            }
           }
          } else {
           $s8$0$lcssa$i = $716;
          }
          $720 = HEAP32[$f>>2]|0;
          $721 = $720 & 32;
          $722 = ($721|0)==(0);
          if ($722) {
           $723 = ($$41276$i|0)>(9);
           $724 = $723 ? 9 : $$41276$i;
           (___fwritex($s8$0$lcssa$i,$724,$f)|0);
          }
          $725 = ((($d$575$i)) + 4|0);
          $726 = (($$41276$i) + -9)|0;
          $727 = ($725>>>0)<($z$6$i$lcssa>>>0);
          $728 = ($$41276$i|0)>(9);
          $729 = $728 & $727;
          if ($729) {
           $$41276$i = $726;$d$575$i = $725;
          } else {
           $$412$lcssa$i = $726;
           break;
          }
         }
        } else {
         $$412$lcssa$i = $$311$i;
        }
        $730 = (($$412$lcssa$i) + 9)|0;
        _pad($f,48,$730,9,0);
       } else {
        $731 = ((($a$8$ph$i)) + 4|0);
        $z$6$$i = $$lcssa159$i ? $z$6$i$lcssa : $731;
        $732 = ($$311$i|0)>(-1);
        if ($732) {
         $733 = ($$pre$phi184$iZ2D|0)==(0);
         $$587$i = $$311$i;$d$686$i = $a$8$ph$i;
         while(1) {
          $734 = HEAP32[$d$686$i>>2]|0;
          $735 = (_fmt_u($734,0,$13)|0);
          $736 = ($735|0)==($13|0);
          if ($736) {
           HEAP8[$15>>0] = 48;
           $s9$0$i = $15;
          } else {
           $s9$0$i = $735;
          }
          $737 = ($d$686$i|0)==($a$8$ph$i|0);
          do {
           if ($737) {
            $741 = ((($s9$0$i)) + 1|0);
            $742 = HEAP32[$f>>2]|0;
            $743 = $742 & 32;
            $744 = ($743|0)==(0);
            if ($744) {
             (___fwritex($s9$0$i,1,$f)|0);
            }
            $745 = ($$587$i|0)<(1);
            $or$cond29$i = $733 & $745;
            if ($or$cond29$i) {
             $s9$2$i = $741;
             break;
            }
            $746 = HEAP32[$f>>2]|0;
            $747 = $746 & 32;
            $748 = ($747|0)==(0);
            if (!($748)) {
             $s9$2$i = $741;
             break;
            }
            (___fwritex(22118531,1,$f)|0);
            $s9$2$i = $741;
           } else {
            $738 = ($s9$0$i>>>0)>($buf$i>>>0);
            if ($738) {
             $s9$183$i = $s9$0$i;
            } else {
             $s9$2$i = $s9$0$i;
             break;
            }
            while(1) {
             $739 = ((($s9$183$i)) + -1|0);
             HEAP8[$739>>0] = 48;
             $740 = ($739>>>0)>($buf$i>>>0);
             if ($740) {
              $s9$183$i = $739;
             } else {
              $s9$2$i = $739;
              break;
             }
            }
           }
          } while(0);
          $749 = $s9$2$i;
          $750 = (($14) - ($749))|0;
          $751 = HEAP32[$f>>2]|0;
          $752 = $751 & 32;
          $753 = ($752|0)==(0);
          if ($753) {
           $754 = ($$587$i|0)>($750|0);
           $755 = $754 ? $750 : $$587$i;
           (___fwritex($s9$2$i,$755,$f)|0);
          }
          $756 = (($$587$i) - ($750))|0;
          $757 = ((($d$686$i)) + 4|0);
          $758 = ($757>>>0)<($z$6$$i>>>0);
          $759 = ($756|0)>(-1);
          $760 = $758 & $759;
          if ($760) {
           $$587$i = $756;$d$686$i = $757;
          } else {
           $$5$lcssa$i = $756;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$311$i;
        }
        $761 = (($$5$lcssa$i) + 18)|0;
        _pad($f,48,$761,18,0);
        $762 = HEAP32[$f>>2]|0;
        $763 = $762 & 32;
        $764 = ($763|0)==(0);
        if (!($764)) {
         break;
        }
        $765 = $estr$2$i;
        $766 = (($8) - ($765))|0;
        (___fwritex($estr$2$i,$766,$f)|0);
       }
      } while(0);
      $767 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$688,$767);
      $768 = ($688|0)<($w$1|0);
      $w$30$i = $768 ? $w$1 : $688;
      $$0$i = $w$30$i;
     } else {
      $376 = $t$0 & 32;
      $377 = ($376|0)!=(0);
      $378 = $377 ? 22118515 : 22118519;
      $379 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $380 = $377 ? 22118523 : 22118527;
      $pl$1$i = $379 ? 0 : $pl$0$i;
      $s1$0$i = $379 ? $380 : $378;
      $381 = (($pl$1$i) + 3)|0;
      _pad($f,32,$w$1,$381,$175);
      $382 = HEAP32[$f>>2]|0;
      $383 = $382 & 32;
      $384 = ($383|0)==(0);
      if ($384) {
       (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
       $$pre$i = HEAP32[$f>>2]|0;
       $386 = $$pre$i;
      } else {
       $386 = $382;
      }
      $385 = $386 & 32;
      $387 = ($385|0)==(0);
      if ($387) {
       (___fwritex($s1$0$i,3,$f)|0);
      }
      $388 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$381,$388);
      $389 = ($381|0)<($w$1|0);
      $390 = $389 ? $w$1 : $381;
      $$0$i = $390;
     }
    } while(0);
    $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $$0$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   default: {
    $a$2 = $fmt41;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 22118479;$z$2 = $1;
   }
   }
  } while(0);
  L313: do {
   if ((label|0) == 64) {
    label = 0;
    $206 = $arg;
    $207 = $206;
    $208 = HEAP32[$207>>2]|0;
    $209 = (($206) + 4)|0;
    $210 = $209;
    $211 = HEAP32[$210>>2]|0;
    $212 = $t$1 & 32;
    $213 = ($208|0)==(0);
    $214 = ($211|0)==(0);
    $215 = $213 & $214;
    if ($215) {
     $a$0 = $1;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 22118479;
     label = 77;
    } else {
     $$012$i = $1;$217 = $208;$224 = $211;
     while(1) {
      $216 = $217 & 15;
      $218 = (22118463 + ($216)|0);
      $219 = HEAP8[$218>>0]|0;
      $220 = $219&255;
      $221 = $220 | $212;
      $222 = $221&255;
      $223 = ((($$012$i)) + -1|0);
      HEAP8[$223>>0] = $222;
      $225 = (_bitshift64Lshr(($217|0),($224|0),4)|0);
      $226 = tempRet0;
      $227 = ($225|0)==(0);
      $228 = ($226|0)==(0);
      $229 = $227 & $228;
      if ($229) {
       $$lcssa344 = $223;
       break;
      } else {
       $$012$i = $223;$217 = $225;$224 = $226;
      }
     }
     $230 = $arg;
     $231 = $230;
     $232 = HEAP32[$231>>2]|0;
     $233 = (($230) + 4)|0;
     $234 = $233;
     $235 = HEAP32[$234>>2]|0;
     $236 = ($232|0)==(0);
     $237 = ($235|0)==(0);
     $238 = $236 & $237;
     $239 = $fl$3 & 8;
     $240 = ($239|0)==(0);
     $or$cond17 = $240 | $238;
     if ($or$cond17) {
      $a$0 = $$lcssa344;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 22118479;
      label = 77;
     } else {
      $241 = $t$1 >> 4;
      $242 = (22118479 + ($241)|0);
      $a$0 = $$lcssa344;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $242;
      label = 77;
     }
    }
   }
   else if ((label|0) == 76) {
    label = 0;
    $288 = (_fmt_u($286,$287,$1)|0);
    $a$0 = $288;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 77;
   }
   else if ((label|0) == 82) {
    label = 0;
    $320 = (_memchr($a$1,0,$p$0)|0);
    $321 = ($320|0)==(0|0);
    $322 = $320;
    $323 = $a$1;
    $324 = (($322) - ($323))|0;
    $325 = (($a$1) + ($p$0)|0);
    $z$1 = $321 ? $325 : $320;
    $p$3 = $321 ? $p$0 : $324;
    $a$2 = $a$1;$fl$6 = $175;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 22118479;$z$2 = $z$1;
   }
   else if ((label|0) == 86) {
    label = 0;
    $333 = HEAP32[$arg>>2]|0;
    $i$0114 = 0;$l$1113 = 0;$ws$0115 = $333;
    while(1) {
     $334 = HEAP32[$ws$0115>>2]|0;
     $335 = ($334|0)==(0);
     if ($335) {
      $i$0$lcssa = $i$0114;$l$2 = $l$1113;
      break;
     }
     $336 = (_wctomb($mb,$334)|0);
     $337 = ($336|0)<(0);
     $338 = (($p$4198) - ($i$0114))|0;
     $339 = ($336>>>0)>($338>>>0);
     $or$cond20 = $337 | $339;
     if ($or$cond20) {
      $i$0$lcssa = $i$0114;$l$2 = $336;
      break;
     }
     $340 = ((($ws$0115)) + 4|0);
     $341 = (($336) + ($i$0114))|0;
     $342 = ($p$4198>>>0)>($341>>>0);
     if ($342) {
      $i$0114 = $341;$l$1113 = $336;$ws$0115 = $340;
     } else {
      $i$0$lcssa = $341;$l$2 = $336;
      break;
     }
    }
    $343 = ($l$2|0)<(0);
    if ($343) {
     $$0 = -1;
     break L1;
    }
    _pad($f,32,$w$1,$i$0$lcssa,$fl$1$);
    $344 = ($i$0$lcssa|0)==(0);
    if ($344) {
     $i$0$lcssa200 = 0;
     label = 98;
    } else {
     $345 = HEAP32[$arg>>2]|0;
     $i$1125 = 0;$ws$1126 = $345;
     while(1) {
      $346 = HEAP32[$ws$1126>>2]|0;
      $347 = ($346|0)==(0);
      if ($347) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $348 = ((($ws$1126)) + 4|0);
      $349 = (_wctomb($mb,$346)|0);
      $350 = (($349) + ($i$1125))|0;
      $351 = ($350|0)>($i$0$lcssa|0);
      if ($351) {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break L313;
      }
      $352 = HEAP32[$f>>2]|0;
      $353 = $352 & 32;
      $354 = ($353|0)==(0);
      if ($354) {
       (___fwritex($mb,$349,$f)|0);
      }
      $355 = ($350>>>0)<($i$0$lcssa>>>0);
      if ($355) {
       $i$1125 = $350;$ws$1126 = $348;
      } else {
       $i$0$lcssa200 = $i$0$lcssa;
       label = 98;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 98) {
   label = 0;
   $356 = $fl$1$ ^ 8192;
   _pad($f,32,$w$1,$i$0$lcssa200,$356);
   $357 = ($w$1|0)>($i$0$lcssa200|0);
   $358 = $357 ? $w$1 : $i$0$lcssa200;
   $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $358;$l10n$0 = $l10n$3;
   continue;
  }
  if ((label|0) == 77) {
   label = 0;
   $289 = ($p$2|0)>(-1);
   $290 = $fl$4 & -65537;
   $$fl$4 = $289 ? $290 : $fl$4;
   $291 = $arg;
   $292 = $291;
   $293 = HEAP32[$292>>2]|0;
   $294 = (($291) + 4)|0;
   $295 = $294;
   $296 = HEAP32[$295>>2]|0;
   $297 = ($293|0)!=(0);
   $298 = ($296|0)!=(0);
   $299 = $297 | $298;
   $300 = ($p$2|0)!=(0);
   $or$cond = $300 | $299;
   if ($or$cond) {
    $301 = $a$0;
    $302 = (($2) - ($301))|0;
    $303 = $299&1;
    $304 = $303 ^ 1;
    $305 = (($304) + ($302))|0;
    $306 = ($p$2|0)>($305|0);
    $p$2$ = $306 ? $p$2 : $305;
    $a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   } else {
    $a$2 = $1;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   }
  }
  $769 = $z$2;
  $770 = $a$2;
  $771 = (($769) - ($770))|0;
  $772 = ($p$5|0)<($771|0);
  $$p$5 = $772 ? $771 : $p$5;
  $773 = (($pl$2) + ($$p$5))|0;
  $774 = ($w$1|0)<($773|0);
  $w$2 = $774 ? $773 : $w$1;
  _pad($f,32,$w$2,$773,$fl$6);
  $775 = HEAP32[$f>>2]|0;
  $776 = $775 & 32;
  $777 = ($776|0)==(0);
  if ($777) {
   (___fwritex($prefix$2,$pl$2,$f)|0);
  }
  $778 = $fl$6 ^ 65536;
  _pad($f,48,$w$2,$773,$778);
  _pad($f,48,$$p$5,$771,0);
  $779 = HEAP32[$f>>2]|0;
  $780 = $779 & 32;
  $781 = ($780|0)==(0);
  if ($781) {
   (___fwritex($a$2,$771,$f)|0);
  }
  $782 = $fl$6 ^ 8192;
  _pad($f,32,$w$2,$773,$782);
  $cnt$0 = $cnt$1;$fmt41 = $$lcssa323;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 L348: do {
  if ((label|0) == 245) {
   $783 = ($f|0)==(0|0);
   if ($783) {
    $784 = ($l10n$0$lcssa|0)==(0);
    if ($784) {
     $$0 = 0;
    } else {
     $i$2100 = 1;
     while(1) {
      $785 = (($nl_type) + ($i$2100<<2)|0);
      $786 = HEAP32[$785>>2]|0;
      $787 = ($786|0)==(0);
      if ($787) {
       $i$2100$lcssa = $i$2100;
       break;
      }
      $789 = (($nl_arg) + ($i$2100<<3)|0);
      _pop_arg($789,$786,$ap);
      $790 = (($i$2100) + 1)|0;
      $791 = ($790|0)<(10);
      if ($791) {
       $i$2100 = $790;
      } else {
       $$0 = 1;
       break L348;
      }
     }
     $788 = ($i$2100$lcssa|0)<(10);
     if ($788) {
      $i$398 = $i$2100$lcssa;
      while(1) {
       $794 = (($nl_type) + ($i$398<<2)|0);
       $795 = HEAP32[$794>>2]|0;
       $796 = ($795|0)==(0);
       $792 = (($i$398) + 1)|0;
       if (!($796)) {
        $$0 = -1;
        break L348;
       }
       $793 = ($792|0)<(10);
       if ($793) {
        $i$398 = $792;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $cnt$1$lcssa;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _do_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___string_read($f,$buf,$len)|0);
 return ($0|0);
}
function _cleanup521($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function _cleanup526($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function _sift($head,$width,$cmp,$pshift,$lp) {
 $head = $head|0;
 $width = $width|0;
 $cmp = $cmp|0;
 $pshift = $pshift|0;
 $lp = $lp|0;
 var $$0$be = 0, $$01$be = 0, $$012 = 0, $$03 = 0, $$pre = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ar = 0, $i$0$lcssa = 0, $i$04 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $ar = sp;
 HEAP32[$ar>>2] = $head;
 $0 = ($pshift|0)>(1);
 L1: do {
  if ($0) {
   $1 = (0 - ($width))|0;
   $$012 = $pshift;$$03 = $head;$7 = $head;$i$04 = 1;
   while(1) {
    $2 = (($$03) + ($1)|0);
    $3 = (($$012) + -2)|0;
    $4 = (($lp) + ($3<<2)|0);
    $5 = HEAP32[$4>>2]|0;
    $sum = (($5) + ($width))|0;
    $$sum = (0 - ($sum))|0;
    $6 = (($$03) + ($$sum)|0);
    $8 = (FUNCTION_TABLE_iii[$cmp & 3]($7,$6)|0);
    $9 = ($8|0)>(-1);
    if ($9) {
     $10 = (FUNCTION_TABLE_iii[$cmp & 3]($7,$2)|0);
     $11 = ($10|0)>(-1);
     if ($11) {
      $i$0$lcssa = $i$04;
      break L1;
     }
    }
    $12 = (FUNCTION_TABLE_iii[$cmp & 3]($6,$2)|0);
    $13 = ($12|0)>(-1);
    $14 = (($i$04) + 1)|0;
    $15 = (($ar) + ($i$04<<2)|0);
    if ($13) {
     HEAP32[$15>>2] = $6;
     $16 = (($$012) + -1)|0;
     $$0$be = $6;$$01$be = $16;
    } else {
     HEAP32[$15>>2] = $2;
     $$0$be = $2;$$01$be = $3;
    }
    $17 = ($$01$be|0)>(1);
    if (!($17)) {
     $i$0$lcssa = $14;
     break L1;
    }
    $$pre = HEAP32[$ar>>2]|0;
    $$012 = $$01$be;$$03 = $$0$be;$7 = $$pre;$i$04 = $14;
   }
  } else {
   $i$0$lcssa = 1;
  }
 } while(0);
 _cycle($width,$ar,$i$0$lcssa);
 STACKTOP = sp;return;
}
function _trinkle($head,$width,$cmp,$pp,$pshift,$trusty,$lp) {
 $head = $head|0;
 $width = $width|0;
 $cmp = $cmp|0;
 $pp = $pp|0;
 $pshift = $pshift|0;
 $trusty = $trusty|0;
 $lp = $lp|0;
 var $$0$i = 0, $$0$lcssa = 0, $$0$lcssa49 = 0, $$01162 = 0, $$01162$phi = 0, $$02$i$i = 0, $$02$i3$i = 0, $$02$lcssa = 0, $$02$lcssa51 = 0, $$02964 = 0, $$03$lcssa = 0, $$03865 = 0, $$lcssa = 0, $$lcssa75 = 0, $$pre = 0, $$sum = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $ar = 0, $i$0$lcssa = 0, $i$0$lcssa50 = 0, $i$01063 = 0, $nTrailingZeros$03$i$i = 0, $nTrailingZeros$03$i2$i = 0, $nTrailingZeros$03$i2$i$lcssa = 0, $or$cond = 0, $phitmp = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0;
 $ar = sp;
 $0 = HEAP32[$pp>>2]|0;
 $1 = ((($pp)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$ar>>2] = $head;
 $3 = (0 - ($width))|0;
 $4 = ($0|0)!=(1);
 $5 = ($2|0)!=(0);
 $6 = $5 | $4;
 L1: do {
  if ($6) {
   $7 = (($lp) + ($pshift<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (0 - ($8))|0;
   $10 = (($head) + ($9)|0);
   $11 = (FUNCTION_TABLE_iii[$cmp & 3]($10,$head)|0);
   $12 = ($11|0)<(1);
   if ($12) {
    $$0$lcssa = $head;$$02$lcssa = $pshift;$$03$lcssa = $trusty;$i$0$lcssa = 1;
    label = 19;
   } else {
    $phitmp = ($trusty|0)==(0);
    $$01162 = $head;$$02964 = $pshift;$$03865 = $phitmp;$18 = $10;$27 = $0;$36 = $2;$i$01063 = 1;
    while(1) {
     $13 = ($$02964|0)>(1);
     $or$cond = $$03865 & $13;
     if ($or$cond) {
      $14 = (($$01162) + ($3)|0);
      $15 = (($$02964) + -2)|0;
      $16 = (($lp) + ($15<<2)|0);
      $17 = HEAP32[$16>>2]|0;
      $19 = (FUNCTION_TABLE_iii[$cmp & 3]($14,$18)|0);
      $20 = ($19|0)>(-1);
      if ($20) {
       $$0$lcssa49 = $$01162;$$02$lcssa51 = $$02964;$i$0$lcssa50 = $i$01063;
       label = 20;
       break L1;
      }
      $sum = (($17) + ($width))|0;
      $$sum = (0 - ($sum))|0;
      $21 = (($$01162) + ($$sum)|0);
      $22 = (FUNCTION_TABLE_iii[$cmp & 3]($21,$18)|0);
      $23 = ($22|0)>(-1);
      if ($23) {
       $$0$lcssa49 = $$01162;$$02$lcssa51 = $$02964;$i$0$lcssa50 = $i$01063;
       label = 20;
       break L1;
      }
     }
     $24 = (($i$01063) + 1)|0;
     $25 = (($ar) + ($i$01063<<2)|0);
     HEAP32[$25>>2] = $18;
     $26 = (($27) + -1)|0;
     $28 = ($26|0)==(0);
     do {
      if ($28) {
       $49 = 32;
       label = 16;
      } else {
       $29 = $26 & 1;
       $30 = ($29|0)==(0);
       if ($30) {
        $$02$i$i = $26;$nTrailingZeros$03$i$i = 0;
        while(1) {
         $31 = (($nTrailingZeros$03$i$i) + 1)|0;
         $32 = $$02$i$i >>> 1;
         $33 = $32 & 1;
         $34 = ($33|0)==(0);
         if ($34) {
          $$02$i$i = $32;$nTrailingZeros$03$i$i = $31;
         } else {
          $$lcssa = $31;
          break;
         }
        }
        $35 = ($$lcssa|0)==(0);
        if ($35) {
         label = 11;
        } else {
         $46 = $$lcssa;
        }
       } else {
        label = 11;
       }
       if ((label|0) == 11) {
        label = 0;
        $37 = ($36|0)==(0);
        if ($37) {
         $49 = 64;
         label = 16;
         break;
        }
        $38 = $36 & 1;
        $39 = ($38|0)==(0);
        if ($39) {
         $$02$i3$i = $36;$nTrailingZeros$03$i2$i = 0;
        } else {
         $$0$i = 0;$51 = $27;$54 = $36;$58 = 0;
         break;
        }
        while(1) {
         $40 = (($nTrailingZeros$03$i2$i) + 1)|0;
         $41 = $$02$i3$i >>> 1;
         $42 = $41 & 1;
         $43 = ($42|0)==(0);
         if ($43) {
          $$02$i3$i = $41;$nTrailingZeros$03$i2$i = $40;
         } else {
          $$lcssa75 = $40;$nTrailingZeros$03$i2$i$lcssa = $nTrailingZeros$03$i2$i;
          break;
         }
        }
        $44 = (($nTrailingZeros$03$i2$i$lcssa) + 33)|0;
        $45 = ($$lcssa75|0)==(0);
        if ($45) {
         $$0$i = 0;$51 = $27;$54 = $36;$58 = 0;
         break;
        } else {
         $46 = $44;
        }
       }
       $47 = ($46>>>0)>(31);
       if ($47) {
        $49 = $46;
        label = 16;
       } else {
        $$0$i = $46;$51 = $27;$54 = $36;$58 = $46;
       }
      }
     } while(0);
     if ((label|0) == 16) {
      label = 0;
      $48 = (($49) + -32)|0;
      $$0$i = $48;$51 = $36;$54 = 0;$58 = $49;
     }
     $50 = $51 >>> $$0$i;
     $52 = (32 - ($$0$i))|0;
     $53 = $54 << $52;
     $55 = $53 | $50;
     $56 = $54 >>> $$0$i;
     $57 = (($58) + ($$02964))|0;
     $59 = ($55|0)!=(1);
     $60 = ($56|0)!=(0);
     $61 = $60 | $59;
     if (!($61)) {
      $$0$lcssa49 = $18;$$02$lcssa51 = $57;$i$0$lcssa50 = $24;
      label = 20;
      break L1;
     }
     $$pre = HEAP32[$ar>>2]|0;
     $62 = (($lp) + ($57<<2)|0);
     $63 = HEAP32[$62>>2]|0;
     $64 = (0 - ($63))|0;
     $65 = (($18) + ($64)|0);
     $66 = (FUNCTION_TABLE_iii[$cmp & 3]($65,$$pre)|0);
     $67 = ($66|0)<(1);
     if ($67) {
      $$0$lcssa = $18;$$02$lcssa = $57;$$03$lcssa = 0;$i$0$lcssa = $24;
      label = 19;
      break;
     } else {
      $$01162$phi = $18;$$02964 = $57;$$03865 = 1;$18 = $65;$27 = $55;$36 = $56;$i$01063 = $24;$$01162 = $$01162$phi;
     }
    }
   }
  } else {
   $$0$lcssa = $head;$$02$lcssa = $pshift;$$03$lcssa = $trusty;$i$0$lcssa = 1;
   label = 19;
  }
 } while(0);
 if ((label|0) == 19) {
  $68 = ($$03$lcssa|0)==(0);
  if ($68) {
   $$0$lcssa49 = $$0$lcssa;$$02$lcssa51 = $$02$lcssa;$i$0$lcssa50 = $i$0$lcssa;
   label = 20;
  }
 }
 if ((label|0) == 20) {
  _cycle($width,$ar,$i$0$lcssa50);
  _sift($$0$lcssa49,$width,$cmp,$$02$lcssa51,$lp);
 }
 STACKTOP = sp;return;
}
function _strtox555($s,$p,$base,$0,$1) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0;
 $f = sp;
 HEAP32[$f>>2] = 0;
 $2 = ((($f)) + 4|0);
 HEAP32[$2>>2] = $s;
 $3 = ((($f)) + 44|0);
 HEAP32[$3>>2] = $s;
 $4 = ($s|0)<(0|0);
 $5 = ((($s)) + 2147483647|0);
 $$sink = $4 ? (-1) : $5;
 $6 = ((($f)) + 8|0);
 HEAP32[$6>>2] = $$sink;
 $7 = ((($f)) + 76|0);
 HEAP32[$7>>2] = -1;
 ___shlim($f,0);
 $8 = (___intscan($f,$base,1,$0,$1)|0);
 $9 = tempRet0;
 $10 = ($p|0)==(0|0);
 if (!($10)) {
  $11 = ((($f)) + 108|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = HEAP32[$6>>2]|0;
  $15 = $13;
  $16 = $14;
  $17 = (($15) + ($12))|0;
  $18 = (($17) - ($16))|0;
  $19 = (($s) + ($18)|0);
  HEAP32[$p>>2] = $19;
 }
 tempRet0 = ($9);
 STACKTOP = sp;return ($8|0);
}
function _cycle($width,$ar,$n) {
 $width = $width|0;
 $ar = $ar|0;
 $n = $n|0;
 var $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $i$01 = 0;
 var $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $tmp = sp;
 $0 = ($n|0)<(2);
 L1: do {
  if (!($0)) {
   $1 = (($ar) + ($n<<2)|0);
   HEAP32[$1>>2] = $tmp;
   $2 = ($width|0)==(0);
   if (!($2)) {
    $$02 = $width;$6 = $tmp;
    while(1) {
     $3 = ($$02>>>0)>(256);
     $4 = $3 ? 256 : $$02;
     $5 = HEAP32[$ar>>2]|0;
     _memcpy(($6|0),($5|0),($4|0))|0;
     $i$01 = 0;
     while(1) {
      $7 = (($ar) + ($i$01<<2)|0);
      $8 = HEAP32[$7>>2]|0;
      $9 = (($i$01) + 1)|0;
      $10 = (($ar) + ($9<<2)|0);
      $11 = HEAP32[$10>>2]|0;
      _memcpy(($8|0),($11|0),($4|0))|0;
      $12 = HEAP32[$7>>2]|0;
      $13 = (($12) + ($4)|0);
      HEAP32[$7>>2] = $13;
      $exitcond = ($9|0)==($n|0);
      if ($exitcond) {
       break;
      } else {
       $i$01 = $9;
      }
     }
     $14 = ($$02|0)==($4|0);
     if ($14) {
      break L1;
     }
     $15 = (($$02) - ($4))|0;
     $$pre = HEAP32[$1>>2]|0;
     $$02 = $15;$6 = $$pre;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _pop_arg($arg,$type,$ap) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type>>>0)>(20);
 L1: do {
  if (!($0)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $1 = $arglist_current;
     $2 = ((0) + 4|0);
     $expanded28 = $2;
     $expanded = (($expanded28) - 1)|0;
     $3 = (($1) + ($expanded))|0;
     $4 = ((0) + 4|0);
     $expanded32 = $4;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $5 = $3 & $expanded30;
     $6 = $5;
     $7 = HEAP32[$6>>2]|0;
     $arglist_next = ((($6)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $7;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $8 = $arglist_current2;
     $9 = ((0) + 4|0);
     $expanded35 = $9;
     $expanded34 = (($expanded35) - 1)|0;
     $10 = (($8) + ($expanded34))|0;
     $11 = ((0) + 4|0);
     $expanded39 = $11;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $12 = $10 & $expanded37;
     $13 = $12;
     $14 = HEAP32[$13>>2]|0;
     $arglist_next3 = ((($13)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $15 = ($14|0)<(0);
     $16 = $15 << 31 >> 31;
     $17 = $arg;
     $18 = $17;
     HEAP32[$18>>2] = $14;
     $19 = (($17) + 4)|0;
     $20 = $19;
     HEAP32[$20>>2] = $16;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $21 = $arglist_current5;
     $22 = ((0) + 4|0);
     $expanded42 = $22;
     $expanded41 = (($expanded42) - 1)|0;
     $23 = (($21) + ($expanded41))|0;
     $24 = ((0) + 4|0);
     $expanded46 = $24;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $25 = $23 & $expanded44;
     $26 = $25;
     $27 = HEAP32[$26>>2]|0;
     $arglist_next6 = ((($26)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $28 = $arg;
     $29 = $28;
     HEAP32[$29>>2] = $27;
     $30 = (($28) + 4)|0;
     $31 = $30;
     HEAP32[$31>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $32 = $arglist_current8;
     $33 = ((0) + 8|0);
     $expanded49 = $33;
     $expanded48 = (($expanded49) - 1)|0;
     $34 = (($32) + ($expanded48))|0;
     $35 = ((0) + 8|0);
     $expanded53 = $35;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $36 = $34 & $expanded51;
     $37 = $36;
     $38 = $37;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($38) + 4)|0;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $arglist_next9 = ((($37)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $44 = $arg;
     $45 = $44;
     HEAP32[$45>>2] = $40;
     $46 = (($44) + 4)|0;
     $47 = $46;
     HEAP32[$47>>2] = $43;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $48 = $arglist_current11;
     $49 = ((0) + 4|0);
     $expanded56 = $49;
     $expanded55 = (($expanded56) - 1)|0;
     $50 = (($48) + ($expanded55))|0;
     $51 = ((0) + 4|0);
     $expanded60 = $51;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $52 = $50 & $expanded58;
     $53 = $52;
     $54 = HEAP32[$53>>2]|0;
     $arglist_next12 = ((($53)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $55 = $54&65535;
     $56 = $55 << 16 >> 16;
     $57 = ($56|0)<(0);
     $58 = $57 << 31 >> 31;
     $59 = $arg;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     $61 = (($59) + 4)|0;
     $62 = $61;
     HEAP32[$62>>2] = $58;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $63 = $arglist_current14;
     $64 = ((0) + 4|0);
     $expanded63 = $64;
     $expanded62 = (($expanded63) - 1)|0;
     $65 = (($63) + ($expanded62))|0;
     $66 = ((0) + 4|0);
     $expanded67 = $66;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $67 = $65 & $expanded65;
     $68 = $67;
     $69 = HEAP32[$68>>2]|0;
     $arglist_next15 = ((($68)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $$mask1 = $69 & 65535;
     $70 = $arg;
     $71 = $70;
     HEAP32[$71>>2] = $$mask1;
     $72 = (($70) + 4)|0;
     $73 = $72;
     HEAP32[$73>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $74 = $arglist_current17;
     $75 = ((0) + 4|0);
     $expanded70 = $75;
     $expanded69 = (($expanded70) - 1)|0;
     $76 = (($74) + ($expanded69))|0;
     $77 = ((0) + 4|0);
     $expanded74 = $77;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $78 = $76 & $expanded72;
     $79 = $78;
     $80 = HEAP32[$79>>2]|0;
     $arglist_next18 = ((($79)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $81 = $80&255;
     $82 = $81 << 24 >> 24;
     $83 = ($82|0)<(0);
     $84 = $83 << 31 >> 31;
     $85 = $arg;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $84;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $89 = $arglist_current20;
     $90 = ((0) + 4|0);
     $expanded77 = $90;
     $expanded76 = (($expanded77) - 1)|0;
     $91 = (($89) + ($expanded76))|0;
     $92 = ((0) + 4|0);
     $expanded81 = $92;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $93 = $91 & $expanded79;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $arglist_next21 = ((($94)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $$mask = $95 & 255;
     $96 = $arg;
     $97 = $96;
     HEAP32[$97>>2] = $$mask;
     $98 = (($96) + 4)|0;
     $99 = $98;
     HEAP32[$99>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $100 = $arglist_current23;
     $101 = ((0) + 8|0);
     $expanded84 = $101;
     $expanded83 = (($expanded84) - 1)|0;
     $102 = (($100) + ($expanded83))|0;
     $103 = ((0) + 8|0);
     $expanded88 = $103;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $104 = $102 & $expanded86;
     $105 = $104;
     $106 = +HEAPF64[$105>>3];
     $arglist_next24 = ((($105)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $106;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$ap>>2]|0;
     $107 = $arglist_current26;
     $108 = ((0) + 8|0);
     $expanded91 = $108;
     $expanded90 = (($expanded91) - 1)|0;
     $109 = (($107) + ($expanded90))|0;
     $110 = ((0) + 8|0);
     $expanded95 = $110;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $111 = $109 & $expanded93;
     $112 = $111;
     $113 = +HEAPF64[$112>>3];
     $arglist_next27 = ((($112)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next27;
     HEAPF64[$arg>>3] = $113;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa20 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $$05 = $s;$7 = $0;$8 = $1;
  while(1) {
   $9 = (___uremdi3(($7|0),($8|0),10,0)|0);
   $10 = tempRet0;
   $11 = $9 | 48;
   $12 = $11&255;
   $13 = ((($$05)) + -1|0);
   HEAP8[$13>>0] = $12;
   $14 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $15 = tempRet0;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $$05 = $13;$7 = $14;$8 = $15;
   } else {
    $$lcssa20 = $13;$28 = $14;$29 = $15;
    break;
   }
  }
  $$0$lcssa = $$lcssa20;$$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;$$01$lcssa$off0 = $0;
 }
 $21 = ($$01$lcssa$off0|0)==(0);
 if ($21) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$12 = $$0$lcssa;$y$03 = $$01$lcssa$off0;
  while(1) {
   $22 = (($y$03>>>0) % 10)&-1;
   $23 = $22 | 48;
   $24 = $23&255;
   $25 = ((($$12)) + -1|0);
   HEAP8[$25>>0] = $24;
   $26 = (($y$03>>>0) / 10)&-1;
   $27 = ($y$03>>>0)<(10);
   if ($27) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;$y$03 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _pad($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $$0$lcssa6 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $pad = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0;
 $pad = sp;
 $0 = $fl & 73728;
 $1 = ($0|0)==(0);
 $2 = ($w|0)>($l|0);
 $or$cond = $2 & $1;
 do {
  if ($or$cond) {
   $3 = (($w) - ($l))|0;
   $4 = ($3>>>0)>(256);
   $5 = $4 ? 256 : $3;
   _memset(($pad|0),($c|0),($5|0))|0;
   $6 = ($3>>>0)>(255);
   $7 = HEAP32[$f>>2]|0;
   $8 = $7 & 32;
   $9 = ($8|0)==(0);
   if ($6) {
    $10 = (($w) - ($l))|0;
    $$02 = $3;$17 = $7;$18 = $9;
    while(1) {
     if ($18) {
      (___fwritex($pad,256,$f)|0);
      $$pre = HEAP32[$f>>2]|0;
      $14 = $$pre;
     } else {
      $14 = $17;
     }
     $11 = (($$02) + -256)|0;
     $12 = ($11>>>0)>(255);
     $13 = $14 & 32;
     $15 = ($13|0)==(0);
     if ($12) {
      $$02 = $11;$17 = $14;$18 = $15;
     } else {
      break;
     }
    }
    $16 = $10 & 255;
    if ($15) {
     $$0$lcssa6 = $16;
    } else {
     break;
    }
   } else {
    if ($9) {
     $$0$lcssa6 = $3;
    } else {
     break;
    }
   }
   (___fwritex($pad,$$0$lcssa6,$f)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0;
 var $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i14$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0;
 var $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i15$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0;
 var $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
 var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0;
 var $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0;
 var $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0;
 var $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0;
 var $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0;
 var $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0;
 var $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0;
 var $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0;
 var $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[22106200>>2]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (22106240 + ($13<<2)|0);
    $$sum10 = (($13) + 2)|0;
    $15 = (22106240 + ($$sum10<<2)|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[22106200>>2] = $22;
     } else {
      $23 = HEAP32[(22106216)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    return ($mem$0|0);
   }
   $34 = HEAP32[(22106208)>>2]|0;
   $35 = ($4>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $5;
     $38 = 2 << $5;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = (22106240 + ($65<<2)|0);
     $$sum4 = (($65) + 2)|0;
     $67 = (22106240 + ($$sum4<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ((($68)) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[22106200>>2] = $74;
       $88 = $34;
      } else {
       $75 = HEAP32[(22106216)>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = ((($70)) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[(22106208)>>2]|0;
        $88 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($4))|0;
     $82 = $4 | 3;
     $83 = ((($68)) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($4)|0);
     $85 = $81 | 1;
     $$sum56 = $4 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $89 = ($88|0)==(0);
     if (!($89)) {
      $90 = HEAP32[(22106220)>>2]|0;
      $91 = $88 >>> 3;
      $92 = $91 << 1;
      $93 = (22106240 + ($92<<2)|0);
      $94 = HEAP32[22106200>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[22106200>>2] = $98;
       $$pre105 = (($92) + 2)|0;
       $$pre106 = (22106240 + ($$pre105<<2)|0);
       $$pre$phiZ2D = $$pre106;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = (22106240 + ($$sum9<<2)|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[(22106216)>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = ((($F4$0)) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = ((($90)) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = ((($90)) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[(22106208)>>2] = $81;
     HEAP32[(22106220)>>2] = $84;
     $mem$0 = $69;
     return ($mem$0|0);
    }
    $106 = HEAP32[(22106204)>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $4;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = (22106504 + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ((($132)) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($4))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = ((($t$0$i)) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = ((($t$0$i)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = ((($144)) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($4))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[(22106216)>>2]|0;
     $150 = ($v$0$i$lcssa>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i$lcssa) + ($4)|0);
     $152 = ($v$0$i$lcssa>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = ((($v$0$i$lcssa)) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ((($v$0$i$lcssa)) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i$lcssa|0);
     do {
      if ($157) {
       $167 = ((($v$0$i$lcssa)) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = ((($v$0$i$lcssa)) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = ((($R$0$i)) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = ((($R$0$i)) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;$RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i$lcssa>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i$lcssa>>2] = 0;
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = ((($v$0$i$lcssa)) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = ((($159)) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i$lcssa|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = ((($156)) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i$lcssa|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = ((($v$0$i$lcssa)) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = (22106504 + ($182<<2)|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i$lcssa|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[(22106204)>>2]|0;
         $189 = $188 & $187;
         HEAP32[(22106204)>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[(22106216)>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = ((($154)) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i$lcssa|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = ((($154)) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[(22106216)>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = ((($R$1$i)) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = ((($v$0$i$lcssa)) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = ((($R$1$i)) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = ((($201)) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = ((($v$0$i$lcssa)) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[(22106216)>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = ((($R$1$i)) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = ((($207)) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i$lcssa) + ($4))|0;
      $215 = $214 | 3;
      $216 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i$lcssa) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $4 | 3;
      $221 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i35 = $4 | 4;
      $223 = (($v$0$i$lcssa) + ($$sum$i35)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i$lcssa) + ($4))|0;
      $224 = (($v$0$i$lcssa) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i$lcssa;
      $225 = HEAP32[(22106208)>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[(22106220)>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = (22106240 + ($229<<2)|0);
       $231 = HEAP32[22106200>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[22106200>>2] = $235;
        $$pre$i = (($229) + 2)|0;
        $$pre8$i = (22106240 + ($$pre$i<<2)|0);
        $$pre$phi$iZ2D = $$pre8$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = (22106240 + ($$sum3$i<<2)|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(22106216)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = ((($F1$0$i)) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = ((($227)) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = ((($227)) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[(22106208)>>2] = $rsize$0$i$lcssa;
      HEAP32[(22106220)>>2] = $151;
     }
     $243 = ((($v$0$i$lcssa)) + 8|0);
     $mem$0 = $243;
     return ($mem$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(22106204)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = (22106504 + ($idx$0$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
       label = 86;
      } else {
       $278 = ($idx$0$i|0)==(31);
       $279 = $idx$0$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $282;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = ((($t$0$i14)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$331$i = $286;$t$230$i = $t$0$i14;$v$332$i = $t$0$i14;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = ((($t$0$i14)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = (((($t$0$i14)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $298 = ($t$1$i|0)==(0|0);
      $299 = ($v$2$i|0)==(0|0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = (0 - ($300))|0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303|0)==(0);
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = (0 - ($303))|0;
       $306 = $303 & $305;
       $307 = (($306) + -1)|0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = (($325) + ($326))|0;
       $328 = (22106504 + ($327<<2)|0);
       $329 = HEAP32[$328>>2]|0;
       $t$2$ph$i = $329;$v$3$ph$i = 0;
      } else {
       $t$2$ph$i = $t$1$i;$v$3$ph$i = $v$2$i;
      }
      $330 = ($t$2$ph$i|0)==(0|0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$3$ph$i;
      } else {
       $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$3$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $331 = ((($t$230$i)) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = ((($t$230$i)) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        label = 90;
        continue;
       }
       $339 = ((($t$230$i)) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
        label = 90;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[(22106208)>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[(22106216)>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = ((($v$3$lcssa$i)) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = ((($v$3$lcssa$i)) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = ((($v$3$lcssa$i)) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = ((($v$3$lcssa$i)) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = ((($R$0$i18)) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = ((($R$0$i18)) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;$RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17$lcssa>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17$lcssa>>2] = 0;
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = ((($v$3$lcssa$i)) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = ((($356)) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = ((($353)) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = ((($v$3$lcssa$i)) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = (22106504 + ($379<<2)|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[(22106204)>>2]|0;
           $386 = $385 & $384;
           HEAP32[(22106204)>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[(22106216)>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($351)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = ((($351)) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[(22106216)>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($R$1$i20)) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = ((($v$3$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($R$1$i20)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = ((($v$3$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[(22106216)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($R$1$i20)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L199: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = ((($v$3$lcssa$i)) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2334)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = (22106240 + ($424<<2)|0);
          $426 = HEAP32[22106200>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          if ($429) {
           $430 = $426 | $427;
           HEAP32[22106200>>2] = $430;
           $$pre$i25 = (($424) + 2)|0;
           $$pre43$i = (22106240 + ($$pre$i25<<2)|0);
           $$pre$phi$i26Z2D = $$pre43$i;$F5$0$i = $425;
          } else {
           $$sum17$i = (($424) + 2)|0;
           $431 = (22106240 + ($$sum17$i<<2)|0);
           $432 = HEAP32[$431>>2]|0;
           $433 = HEAP32[(22106216)>>2]|0;
           $434 = ($432>>>0)<($433>>>0);
           if ($434) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
           }
          }
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = ((($F5$0$i)) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = (22106504 + ($I7$0$i<<2)|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[(22106204)>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[(22106204)>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ((($475)) + 4|0);
         $477 = HEAP32[$476>>2]|0;
         $478 = $477 & -8;
         $479 = ($478|0)==($rsize$3$lcssa$i|0);
         L217: do {
          if ($479) {
           $T$0$lcssa$i = $475;
          } else {
           $480 = ($I7$0$i|0)==(31);
           $481 = $I7$0$i >>> 1;
           $482 = (25 - ($481))|0;
           $483 = $480 ? 0 : $482;
           $484 = $rsize$3$lcssa$i << $483;
           $K12$029$i = $484;$T$028$i = $475;
           while(1) {
            $491 = $K12$029$i >>> 31;
            $492 = (((($T$028$i)) + 16|0) + ($491<<2)|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             $$lcssa232 = $492;$T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = ((($487)) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L217;
            } else {
             $K12$029$i = $485;$T$028$i = $487;
            }
           }
           $494 = HEAP32[(22106216)>>2]|0;
           $495 = ($$lcssa232>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$$lcssa232>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$028$i$lcssa;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L199;
           }
          }
         } while(0);
         $499 = ((($T$0$lcssa$i)) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[(22106216)>>2]|0;
         $502 = ($500>>>0)>=($501>>>0);
         $not$$i = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = $502 & $not$$i;
         if ($503) {
          $504 = ((($500)) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = ((($v$3$lcssa$i)) + 8|0);
       $mem$0 = $508;
       return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(22106208)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(22106220)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(22106220)>>2] = $514;
   HEAP32[(22106208)>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(22106208)>>2] = 0;
   HEAP32[(22106220)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = ((($512)) + 8|0);
  $mem$0 = $525;
  return ($mem$0|0);
 }
 $526 = HEAP32[(22106212)>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[(22106212)>>2] = $528;
  $529 = HEAP32[(22106224)>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[(22106224)>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = ((($529)) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = ((($529)) + 8|0);
  $mem$0 = $535;
  return ($mem$0|0);
 }
 $536 = HEAP32[22106672>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[(22106680)>>2] = $538;
    HEAP32[(22106676)>>2] = $538;
    HEAP32[(22106684)>>2] = -1;
    HEAP32[(22106688)>>2] = -1;
    HEAP32[(22106692)>>2] = 0;
    HEAP32[(22106644)>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[22106672>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[(22106680)>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $552 = HEAP32[(22106640)>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[(22106632)>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return ($mem$0|0);
  }
 }
 $558 = HEAP32[(22106644)>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L258: do {
  if ($560) {
   $561 = HEAP32[(22106224)>>2]|0;
   $562 = ($561|0)==(0|0);
   L260: do {
    if ($562) {
     label = 174;
    } else {
     $sp$0$i$i = (22106648);
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = ((($sp$0$i$i)) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        $$lcssa228 = $sp$0$i$i;$$lcssa230 = $565;
        break;
       }
      }
      $569 = ((($sp$0$i$i)) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 174;
       break L260;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $594 = HEAP32[(22106212)>>2]|0;
     $595 = (($548) - ($594))|0;
     $596 = $595 & $549;
     $597 = ($596>>>0)<(2147483647);
     if ($597) {
      $598 = (_sbrk(($596|0))|0);
      $599 = HEAP32[$$lcssa228>>2]|0;
      $600 = HEAP32[$$lcssa230>>2]|0;
      $601 = (($599) + ($600)|0);
      $602 = ($598|0)==($601|0);
      $$3$i = $602 ? $596 : 0;
      if ($602) {
       $603 = ($598|0)==((-1)|0);
       if ($603) {
        $tsize$0323944$i = $$3$i;
       } else {
        $tbase$255$i = $598;$tsize$254$i = $$3$i;
        label = 194;
        break L258;
       }
      } else {
       $br$0$ph$i = $598;$ssize$1$ph$i = $596;$tsize$0$ph$i = $$3$i;
       label = 184;
      }
     } else {
      $tsize$0323944$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 174) {
     $572 = (_sbrk(0)|0);
     $573 = ($572|0)==((-1)|0);
     if ($573) {
      $tsize$0323944$i = 0;
     } else {
      $574 = $572;
      $575 = HEAP32[(22106676)>>2]|0;
      $576 = (($575) + -1)|0;
      $577 = $576 & $574;
      $578 = ($577|0)==(0);
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = (($576) + ($574))|0;
       $580 = (0 - ($575))|0;
       $581 = $579 & $580;
       $582 = (($550) - ($574))|0;
       $583 = (($582) + ($581))|0;
       $ssize$0$i = $583;
      }
      $584 = HEAP32[(22106632)>>2]|0;
      $585 = (($584) + ($ssize$0$i))|0;
      $586 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $587 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = HEAP32[(22106640)>>2]|0;
       $589 = ($588|0)==(0);
       if (!($589)) {
        $590 = ($585>>>0)<=($584>>>0);
        $591 = ($585>>>0)>($588>>>0);
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0323944$i = 0;
         break;
        }
       }
       $592 = (_sbrk(($ssize$0$i|0))|0);
       $593 = ($592|0)==($572|0);
       $ssize$0$$i = $593 ? $ssize$0$i : 0;
       if ($593) {
        $tbase$255$i = $572;$tsize$254$i = $ssize$0$$i;
        label = 194;
        break L258;
       } else {
        $br$0$ph$i = $592;$ssize$1$ph$i = $ssize$0$i;$tsize$0$ph$i = $ssize$0$$i;
        label = 184;
       }
      } else {
       $tsize$0323944$i = 0;
      }
     }
    }
   } while(0);
   L280: do {
    if ((label|0) == 184) {
     $604 = (0 - ($ssize$1$ph$i))|0;
     $605 = ($br$0$ph$i|0)!=((-1)|0);
     $606 = ($ssize$1$ph$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $605;
     $607 = ($545>>>0)>($ssize$1$ph$i>>>0);
     $or$cond6$i = $607 & $or$cond5$i;
     do {
      if ($or$cond6$i) {
       $608 = HEAP32[(22106680)>>2]|0;
       $609 = (($547) - ($ssize$1$ph$i))|0;
       $610 = (($609) + ($608))|0;
       $611 = (0 - ($608))|0;
       $612 = $610 & $611;
       $613 = ($612>>>0)<(2147483647);
       if ($613) {
        $614 = (_sbrk(($612|0))|0);
        $615 = ($614|0)==((-1)|0);
        if ($615) {
         (_sbrk(($604|0))|0);
         $tsize$0323944$i = $tsize$0$ph$i;
         break L280;
        } else {
         $616 = (($612) + ($ssize$1$ph$i))|0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while(0);
     $617 = ($br$0$ph$i|0)==((-1)|0);
     if ($617) {
      $tsize$0323944$i = $tsize$0$ph$i;
     } else {
      $tbase$255$i = $br$0$ph$i;$tsize$254$i = $ssize$2$i;
      label = 194;
      break L258;
     }
    }
   } while(0);
   $618 = HEAP32[(22106644)>>2]|0;
   $619 = $618 | 4;
   HEAP32[(22106644)>>2] = $619;
   $tsize$1$i = $tsize$0323944$i;
   label = 191;
  } else {
   $tsize$1$i = 0;
   label = 191;
  }
 } while(0);
 if ((label|0) == 191) {
  $620 = ($550>>>0)<(2147483647);
  if ($620) {
   $621 = (_sbrk(($550|0))|0);
   $622 = (_sbrk(0)|0);
   $623 = ($621|0)!=((-1)|0);
   $624 = ($622|0)!=((-1)|0);
   $or$cond3$i = $623 & $624;
   $625 = ($621>>>0)<($622>>>0);
   $or$cond8$i = $625 & $or$cond3$i;
   if ($or$cond8$i) {
    $626 = $622;
    $627 = $621;
    $628 = (($626) - ($627))|0;
    $629 = (($nb$0) + 40)|0;
    $630 = ($628>>>0)>($629>>>0);
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$255$i = $621;$tsize$254$i = $$tsize$1$i;
     label = 194;
    }
   }
  }
 }
 if ((label|0) == 194) {
  $631 = HEAP32[(22106632)>>2]|0;
  $632 = (($631) + ($tsize$254$i))|0;
  HEAP32[(22106632)>>2] = $632;
  $633 = HEAP32[(22106636)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(22106636)>>2] = $632;
  }
  $635 = HEAP32[(22106224)>>2]|0;
  $636 = ($635|0)==(0|0);
  L299: do {
   if ($636) {
    $637 = HEAP32[(22106216)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$255$i>>>0)<($637>>>0);
    $or$cond9$i = $638 | $639;
    if ($or$cond9$i) {
     HEAP32[(22106216)>>2] = $tbase$255$i;
    }
    HEAP32[(22106648)>>2] = $tbase$255$i;
    HEAP32[(22106652)>>2] = $tsize$254$i;
    HEAP32[(22106660)>>2] = 0;
    $640 = HEAP32[22106672>>2]|0;
    HEAP32[(22106236)>>2] = $640;
    HEAP32[(22106232)>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $641 = $i$02$i$i << 1;
     $642 = (22106240 + ($641<<2)|0);
     $$sum$i$i = (($641) + 3)|0;
     $643 = (22106240 + ($$sum$i$i<<2)|0);
     HEAP32[$643>>2] = $642;
     $$sum1$i$i = (($641) + 2)|0;
     $644 = (22106240 + ($$sum1$i$i<<2)|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = (($tsize$254$i) + -40)|0;
    $647 = ((($tbase$255$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$255$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(22106224)>>2] = $654;
    HEAP32[(22106212)>>2] = $655;
    $656 = $655 | 1;
    $$sum$i13$i = (($653) + 4)|0;
    $657 = (($tbase$255$i) + ($$sum$i13$i)|0);
    HEAP32[$657>>2] = $656;
    $$sum2$i$i = (($tsize$254$i) + -36)|0;
    $658 = (($tbase$255$i) + ($$sum2$i$i)|0);
    HEAP32[$658>>2] = 40;
    $659 = HEAP32[(22106688)>>2]|0;
    HEAP32[(22106228)>>2] = $659;
   } else {
    $sp$084$i = (22106648);
    while(1) {
     $660 = HEAP32[$sp$084$i>>2]|0;
     $661 = ((($sp$084$i)) + 4|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = (($660) + ($662)|0);
     $664 = ($tbase$255$i|0)==($663|0);
     if ($664) {
      $$lcssa222 = $660;$$lcssa224 = $661;$$lcssa226 = $662;$sp$084$i$lcssa = $sp$084$i;
      label = 204;
      break;
     }
     $665 = ((($sp$084$i)) + 8|0);
     $666 = HEAP32[$665>>2]|0;
     $667 = ($666|0)==(0|0);
     if ($667) {
      break;
     } else {
      $sp$084$i = $666;
     }
    }
    if ((label|0) == 204) {
     $668 = ((($sp$084$i$lcssa)) + 12|0);
     $669 = HEAP32[$668>>2]|0;
     $670 = $669 & 8;
     $671 = ($670|0)==(0);
     if ($671) {
      $672 = ($635>>>0)>=($$lcssa222>>>0);
      $673 = ($635>>>0)<($tbase$255$i>>>0);
      $or$cond57$i = $673 & $672;
      if ($or$cond57$i) {
       $674 = (($$lcssa226) + ($tsize$254$i))|0;
       HEAP32[$$lcssa224>>2] = $674;
       $675 = HEAP32[(22106212)>>2]|0;
       $676 = (($675) + ($tsize$254$i))|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($676) - ($683))|0;
       HEAP32[(22106224)>>2] = $684;
       HEAP32[(22106212)>>2] = $685;
       $686 = $685 | 1;
       $$sum$i17$i = (($683) + 4)|0;
       $687 = (($635) + ($$sum$i17$i)|0);
       HEAP32[$687>>2] = $686;
       $$sum2$i18$i = (($676) + 4)|0;
       $688 = (($635) + ($$sum2$i18$i)|0);
       HEAP32[$688>>2] = 40;
       $689 = HEAP32[(22106688)>>2]|0;
       HEAP32[(22106228)>>2] = $689;
       break;
      }
     }
    }
    $690 = HEAP32[(22106216)>>2]|0;
    $691 = ($tbase$255$i>>>0)<($690>>>0);
    if ($691) {
     HEAP32[(22106216)>>2] = $tbase$255$i;
     $755 = $tbase$255$i;
    } else {
     $755 = $690;
    }
    $692 = (($tbase$255$i) + ($tsize$254$i)|0);
    $sp$183$i = (22106648);
    while(1) {
     $693 = HEAP32[$sp$183$i>>2]|0;
     $694 = ($693|0)==($692|0);
     if ($694) {
      $$lcssa219 = $sp$183$i;$sp$183$i$lcssa = $sp$183$i;
      label = 212;
      break;
     }
     $695 = ((($sp$183$i)) + 8|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = ($696|0)==(0|0);
     if ($697) {
      $sp$0$i$i$i = (22106648);
      break;
     } else {
      $sp$183$i = $696;
     }
    }
    if ((label|0) == 212) {
     $698 = ((($sp$183$i$lcssa)) + 12|0);
     $699 = HEAP32[$698>>2]|0;
     $700 = $699 & 8;
     $701 = ($700|0)==(0);
     if ($701) {
      HEAP32[$$lcssa219>>2] = $tbase$255$i;
      $702 = ((($sp$183$i$lcssa)) + 4|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = (($703) + ($tsize$254$i))|0;
      HEAP32[$702>>2] = $704;
      $705 = ((($tbase$255$i)) + 8|0);
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707|0)==(0);
      $709 = (0 - ($706))|0;
      $710 = $709 & 7;
      $711 = $708 ? 0 : $710;
      $712 = (($tbase$255$i) + ($711)|0);
      $$sum112$i = (($tsize$254$i) + 8)|0;
      $713 = (($tbase$255$i) + ($$sum112$i)|0);
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715|0)==(0);
      $717 = (0 - ($714))|0;
      $718 = $717 & 7;
      $719 = $716 ? 0 : $718;
      $$sum113$i = (($719) + ($tsize$254$i))|0;
      $720 = (($tbase$255$i) + ($$sum113$i)|0);
      $721 = $720;
      $722 = $712;
      $723 = (($721) - ($722))|0;
      $$sum$i19$i = (($711) + ($nb$0))|0;
      $724 = (($tbase$255$i) + ($$sum$i19$i)|0);
      $725 = (($723) - ($nb$0))|0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = (($711) + 4)|0;
      $727 = (($tbase$255$i) + ($$sum1$i20$i)|0);
      HEAP32[$727>>2] = $726;
      $728 = ($720|0)==($635|0);
      L324: do {
       if ($728) {
        $729 = HEAP32[(22106212)>>2]|0;
        $730 = (($729) + ($725))|0;
        HEAP32[(22106212)>>2] = $730;
        HEAP32[(22106224)>>2] = $724;
        $731 = $730 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $732 = (($tbase$255$i) + ($$sum42$i$i)|0);
        HEAP32[$732>>2] = $731;
       } else {
        $733 = HEAP32[(22106220)>>2]|0;
        $734 = ($720|0)==($733|0);
        if ($734) {
         $735 = HEAP32[(22106208)>>2]|0;
         $736 = (($735) + ($725))|0;
         HEAP32[(22106208)>>2] = $736;
         HEAP32[(22106220)>>2] = $724;
         $737 = $736 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $738 = (($tbase$255$i) + ($$sum40$i$i)|0);
         HEAP32[$738>>2] = $737;
         $$sum41$i$i = (($736) + ($$sum$i19$i))|0;
         $739 = (($tbase$255$i) + ($$sum41$i$i)|0);
         HEAP32[$739>>2] = $736;
         break;
        }
        $$sum2$i21$i = (($tsize$254$i) + 4)|0;
        $$sum114$i = (($$sum2$i21$i) + ($719))|0;
        $740 = (($tbase$255$i) + ($$sum114$i)|0);
        $741 = HEAP32[$740>>2]|0;
        $742 = $741 & 3;
        $743 = ($742|0)==(1);
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = ($741>>>0)<(256);
         L332: do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum124$i = (($$sum3738$i$i) + ($tsize$254$i))|0;
           $747 = (($tbase$255$i) + ($$sum124$i)|0);
           $748 = HEAP32[$747>>2]|0;
           $$sum39$i$i = (($tsize$254$i) + 12)|0;
           $$sum125$i = (($$sum39$i$i) + ($719))|0;
           $749 = (($tbase$255$i) + ($$sum125$i)|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = $745 << 1;
           $752 = (22106240 + ($751<<2)|0);
           $753 = ($748|0)==($752|0);
           do {
            if (!($753)) {
             $754 = ($748>>>0)<($755>>>0);
             if ($754) {
              _abort();
              // unreachable;
             }
             $756 = ((($748)) + 12|0);
             $757 = HEAP32[$756>>2]|0;
             $758 = ($757|0)==($720|0);
             if ($758) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $759 = ($750|0)==($748|0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = HEAP32[22106200>>2]|0;
            $763 = $762 & $761;
            HEAP32[22106200>>2] = $763;
            break;
           }
           $764 = ($750|0)==($752|0);
           do {
            if ($764) {
             $$pre57$i$i = ((($750)) + 8|0);
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $765 = ($750>>>0)<($755>>>0);
             if ($765) {
              _abort();
              // unreachable;
             }
             $766 = ((($750)) + 8|0);
             $767 = HEAP32[$766>>2]|0;
             $768 = ($767|0)==($720|0);
             if ($768) {
              $$pre$phi58$i$iZ2D = $766;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $769 = ((($748)) + 12|0);
           HEAP32[$769>>2] = $750;
           HEAP32[$$pre$phi58$i$iZ2D>>2] = $748;
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum115$i = (($$sum34$i$i) + ($tsize$254$i))|0;
           $770 = (($tbase$255$i) + ($$sum115$i)|0);
           $771 = HEAP32[$770>>2]|0;
           $$sum5$i$i = (($tsize$254$i) + 12)|0;
           $$sum116$i = (($$sum5$i$i) + ($719))|0;
           $772 = (($tbase$255$i) + ($$sum116$i)|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ($773|0)==($720|0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum122$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $784 = (($tbase$255$i) + ($$sum122$i)|0);
             $785 = HEAP32[$784>>2]|0;
             $786 = ($785|0)==(0|0);
             if ($786) {
              $$sum123$i = (($$sum67$i$i) + ($tsize$254$i))|0;
              $787 = (($tbase$255$i) + ($$sum123$i)|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $788;$RP$0$i$i = $787;
              }
             } else {
              $R$0$i$i = $785;$RP$0$i$i = $784;
             }
             while(1) {
              $790 = ((($R$0$i$i)) + 20|0);
              $791 = HEAP32[$790>>2]|0;
              $792 = ($791|0)==(0|0);
              if (!($792)) {
               $R$0$i$i = $791;$RP$0$i$i = $790;
               continue;
              }
              $793 = ((($R$0$i$i)) + 16|0);
              $794 = HEAP32[$793>>2]|0;
              $795 = ($794|0)==(0|0);
              if ($795) {
               $R$0$i$i$lcssa = $R$0$i$i;$RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $794;$RP$0$i$i = $793;
              }
             }
             $796 = ($RP$0$i$i$lcssa>>>0)<($755>>>0);
             if ($796) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i$lcssa>>2] = 0;
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum117$i = (($$sum3536$i$i) + ($tsize$254$i))|0;
             $775 = (($tbase$255$i) + ($$sum117$i)|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776>>>0)<($755>>>0);
             if ($777) {
              _abort();
              // unreachable;
             }
             $778 = ((($776)) + 12|0);
             $779 = HEAP32[$778>>2]|0;
             $780 = ($779|0)==($720|0);
             if (!($780)) {
              _abort();
              // unreachable;
             }
             $781 = ((($773)) + 8|0);
             $782 = HEAP32[$781>>2]|0;
             $783 = ($782|0)==($720|0);
             if ($783) {
              HEAP32[$778>>2] = $773;
              HEAP32[$781>>2] = $776;
              $R$1$i$i = $773;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $797 = ($771|0)==(0|0);
           if ($797) {
            break;
           }
           $$sum30$i$i = (($tsize$254$i) + 28)|0;
           $$sum118$i = (($$sum30$i$i) + ($719))|0;
           $798 = (($tbase$255$i) + ($$sum118$i)|0);
           $799 = HEAP32[$798>>2]|0;
           $800 = (22106504 + ($799<<2)|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = ($720|0)==($801|0);
           do {
            if ($802) {
             HEAP32[$800>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = HEAP32[(22106204)>>2]|0;
             $806 = $805 & $804;
             HEAP32[(22106204)>>2] = $806;
             break L332;
            } else {
             $807 = HEAP32[(22106216)>>2]|0;
             $808 = ($771>>>0)<($807>>>0);
             if ($808) {
              _abort();
              // unreachable;
             }
             $809 = ((($771)) + 16|0);
             $810 = HEAP32[$809>>2]|0;
             $811 = ($810|0)==($720|0);
             if ($811) {
              HEAP32[$809>>2] = $R$1$i$i;
             } else {
              $812 = ((($771)) + 20|0);
              HEAP32[$812>>2] = $R$1$i$i;
             }
             $813 = ($R$1$i$i|0)==(0|0);
             if ($813) {
              break L332;
             }
            }
           } while(0);
           $814 = HEAP32[(22106216)>>2]|0;
           $815 = ($R$1$i$i>>>0)<($814>>>0);
           if ($815) {
            _abort();
            // unreachable;
           }
           $816 = ((($R$1$i$i)) + 24|0);
           HEAP32[$816>>2] = $771;
           $$sum3132$i$i = $719 | 16;
           $$sum119$i = (($$sum3132$i$i) + ($tsize$254$i))|0;
           $817 = (($tbase$255$i) + ($$sum119$i)|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           do {
            if (!($819)) {
             $820 = ($818>>>0)<($814>>>0);
             if ($820) {
              _abort();
              // unreachable;
             } else {
              $821 = ((($R$1$i$i)) + 16|0);
              HEAP32[$821>>2] = $818;
              $822 = ((($818)) + 24|0);
              HEAP32[$822>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum120$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $823 = (($tbase$255$i) + ($$sum120$i)|0);
           $824 = HEAP32[$823>>2]|0;
           $825 = ($824|0)==(0|0);
           if ($825) {
            break;
           }
           $826 = HEAP32[(22106216)>>2]|0;
           $827 = ($824>>>0)<($826>>>0);
           if ($827) {
            _abort();
            // unreachable;
           } else {
            $828 = ((($R$1$i$i)) + 20|0);
            HEAP32[$828>>2] = $824;
            $829 = ((($824)) + 24|0);
            HEAP32[$829>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $744 | $719;
         $$sum121$i = (($$sum9$i$i) + ($tsize$254$i))|0;
         $830 = (($tbase$255$i) + ($$sum121$i)|0);
         $831 = (($744) + ($725))|0;
         $oldfirst$0$i$i = $830;$qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;$qsize$0$i$i = $725;
        }
        $832 = ((($oldfirst$0$i$i)) + 4|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = $833 & -2;
        HEAP32[$832>>2] = $834;
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $836 = (($tbase$255$i) + ($$sum10$i$i)|0);
        HEAP32[$836>>2] = $835;
        $$sum11$i$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $837 = (($tbase$255$i) + ($$sum11$i$i)|0);
        HEAP32[$837>>2] = $qsize$0$i$i;
        $838 = $qsize$0$i$i >>> 3;
        $839 = ($qsize$0$i$i>>>0)<(256);
        if ($839) {
         $840 = $838 << 1;
         $841 = (22106240 + ($840<<2)|0);
         $842 = HEAP32[22106200>>2]|0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844|0)==(0);
         do {
          if ($845) {
           $846 = $842 | $843;
           HEAP32[22106200>>2] = $846;
           $$pre$i22$i = (($840) + 2)|0;
           $$pre56$i$i = (22106240 + ($$pre$i22$i<<2)|0);
           $$pre$phi$i23$iZ2D = $$pre56$i$i;$F4$0$i$i = $841;
          } else {
           $$sum29$i$i = (($840) + 2)|0;
           $847 = (22106240 + ($$sum29$i$i<<2)|0);
           $848 = HEAP32[$847>>2]|0;
           $849 = HEAP32[(22106216)>>2]|0;
           $850 = ($848>>>0)<($849>>>0);
           if (!($850)) {
            $$pre$phi$i23$iZ2D = $847;$F4$0$i$i = $848;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i23$iZ2D>>2] = $724;
         $851 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$851>>2] = $724;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $852 = (($tbase$255$i) + ($$sum27$i$i)|0);
         HEAP32[$852>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $853 = (($tbase$255$i) + ($$sum28$i$i)|0);
         HEAP32[$853>>2] = $841;
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854|0)==(0);
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = ($qsize$0$i$i>>>0)>(16777215);
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = (($854) + 1048320)|0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = (($860) + 520192)|0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = (($865) + 245760)|0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = (14 - ($869))|0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = (($870) + ($872))|0;
          $874 = $873 << 1;
          $875 = (($873) + 7)|0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while(0);
        $879 = (22106504 + ($I7$0$i$i<<2)|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $880 = (($tbase$255$i) + ($$sum12$i$i)|0);
        HEAP32[$880>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $881 = (($tbase$255$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $882 = (($tbase$255$i) + ($$sum14$i$i)|0);
        HEAP32[$882>>2] = 0;
        HEAP32[$881>>2] = 0;
        $883 = HEAP32[(22106204)>>2]|0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885|0)==(0);
        if ($886) {
         $887 = $883 | $884;
         HEAP32[(22106204)>>2] = $887;
         HEAP32[$879>>2] = $724;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $888 = (($tbase$255$i) + ($$sum15$i$i)|0);
         HEAP32[$888>>2] = $879;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $889 = (($tbase$255$i) + ($$sum16$i$i)|0);
         HEAP32[$889>>2] = $724;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $890 = (($tbase$255$i) + ($$sum17$i$i)|0);
         HEAP32[$890>>2] = $724;
         break;
        }
        $891 = HEAP32[$879>>2]|0;
        $892 = ((($891)) + 4|0);
        $893 = HEAP32[$892>>2]|0;
        $894 = $893 & -8;
        $895 = ($894|0)==($qsize$0$i$i|0);
        L418: do {
         if ($895) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $896 = ($I7$0$i$i|0)==(31);
          $897 = $I7$0$i$i >>> 1;
          $898 = (25 - ($897))|0;
          $899 = $896 ? 0 : $898;
          $900 = $qsize$0$i$i << $899;
          $K8$051$i$i = $900;$T$050$i$i = $891;
          while(1) {
           $907 = $K8$051$i$i >>> 31;
           $908 = (((($T$050$i$i)) + 16|0) + ($907<<2)|0);
           $903 = HEAP32[$908>>2]|0;
           $909 = ($903|0)==(0|0);
           if ($909) {
            $$lcssa = $908;$T$050$i$i$lcssa = $T$050$i$i;
            break;
           }
           $901 = $K8$051$i$i << 1;
           $902 = ((($903)) + 4|0);
           $904 = HEAP32[$902>>2]|0;
           $905 = $904 & -8;
           $906 = ($905|0)==($qsize$0$i$i|0);
           if ($906) {
            $T$0$lcssa$i25$i = $903;
            break L418;
           } else {
            $K8$051$i$i = $901;$T$050$i$i = $903;
           }
          }
          $910 = HEAP32[(22106216)>>2]|0;
          $911 = ($$lcssa>>>0)<($910>>>0);
          if ($911) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa>>2] = $724;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $912 = (($tbase$255$i) + ($$sum23$i$i)|0);
           HEAP32[$912>>2] = $T$050$i$i$lcssa;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $913 = (($tbase$255$i) + ($$sum24$i$i)|0);
           HEAP32[$913>>2] = $724;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $914 = (($tbase$255$i) + ($$sum25$i$i)|0);
           HEAP32[$914>>2] = $724;
           break L324;
          }
         }
        } while(0);
        $915 = ((($T$0$lcssa$i25$i)) + 8|0);
        $916 = HEAP32[$915>>2]|0;
        $917 = HEAP32[(22106216)>>2]|0;
        $918 = ($916>>>0)>=($917>>>0);
        $not$$i26$i = ($T$0$lcssa$i25$i>>>0)>=($917>>>0);
        $919 = $918 & $not$$i26$i;
        if ($919) {
         $920 = ((($916)) + 12|0);
         HEAP32[$920>>2] = $724;
         HEAP32[$915>>2] = $724;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $921 = (($tbase$255$i) + ($$sum20$i$i)|0);
         HEAP32[$921>>2] = $916;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $922 = (($tbase$255$i) + ($$sum21$i$i)|0);
         HEAP32[$922>>2] = $T$0$lcssa$i25$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $923 = (($tbase$255$i) + ($$sum22$i$i)|0);
         HEAP32[$923>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $711 | 8;
      $924 = (($tbase$255$i) + ($$sum1819$i$i)|0);
      $mem$0 = $924;
      return ($mem$0|0);
     } else {
      $sp$0$i$i$i = (22106648);
     }
    }
    while(1) {
     $925 = HEAP32[$sp$0$i$i$i>>2]|0;
     $926 = ($925>>>0)>($635>>>0);
     if (!($926)) {
      $927 = ((($sp$0$i$i$i)) + 4|0);
      $928 = HEAP32[$927>>2]|0;
      $929 = (($925) + ($928)|0);
      $930 = ($929>>>0)>($635>>>0);
      if ($930) {
       $$lcssa215 = $925;$$lcssa216 = $928;$$lcssa217 = $929;
       break;
      }
     }
     $931 = ((($sp$0$i$i$i)) + 8|0);
     $932 = HEAP32[$931>>2]|0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i14$i = (($$lcssa216) + -47)|0;
    $$sum1$i15$i = (($$lcssa216) + -39)|0;
    $933 = (($$lcssa215) + ($$sum1$i15$i)|0);
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935|0)==(0);
    $937 = (0 - ($934))|0;
    $938 = $937 & 7;
    $939 = $936 ? 0 : $938;
    $$sum2$i16$i = (($$sum$i14$i) + ($939))|0;
    $940 = (($$lcssa215) + ($$sum2$i16$i)|0);
    $941 = ((($635)) + 16|0);
    $942 = ($940>>>0)<($941>>>0);
    $943 = $942 ? $635 : $940;
    $944 = ((($943)) + 8|0);
    $945 = (($tsize$254$i) + -40)|0;
    $946 = ((($tbase$255$i)) + 8|0);
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948|0)==(0);
    $950 = (0 - ($947))|0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = (($tbase$255$i) + ($952)|0);
    $954 = (($945) - ($952))|0;
    HEAP32[(22106224)>>2] = $953;
    HEAP32[(22106212)>>2] = $954;
    $955 = $954 | 1;
    $$sum$i$i$i = (($952) + 4)|0;
    $956 = (($tbase$255$i) + ($$sum$i$i$i)|0);
    HEAP32[$956>>2] = $955;
    $$sum2$i$i$i = (($tsize$254$i) + -36)|0;
    $957 = (($tbase$255$i) + ($$sum2$i$i$i)|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(22106688)>>2]|0;
    HEAP32[(22106228)>>2] = $958;
    $959 = ((($943)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$944>>2]=HEAP32[(22106648)>>2]|0;HEAP32[$944+4>>2]=HEAP32[(22106648)+4>>2]|0;HEAP32[$944+8>>2]=HEAP32[(22106648)+8>>2]|0;HEAP32[$944+12>>2]=HEAP32[(22106648)+12>>2]|0;
    HEAP32[(22106648)>>2] = $tbase$255$i;
    HEAP32[(22106652)>>2] = $tsize$254$i;
    HEAP32[(22106660)>>2] = 0;
    HEAP32[(22106656)>>2] = $944;
    $960 = ((($943)) + 28|0);
    HEAP32[$960>>2] = 7;
    $961 = ((($943)) + 32|0);
    $962 = ($961>>>0)<($$lcssa217>>>0);
    if ($962) {
     $964 = $960;
     while(1) {
      $963 = ((($964)) + 4|0);
      HEAP32[$963>>2] = 7;
      $965 = ((($964)) + 8|0);
      $966 = ($965>>>0)<($$lcssa217>>>0);
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943|0)==($635|0);
    if (!($967)) {
     $968 = $943;
     $969 = $635;
     $970 = (($968) - ($969))|0;
     $971 = HEAP32[$959>>2]|0;
     $972 = $971 & -2;
     HEAP32[$959>>2] = $972;
     $973 = $970 | 1;
     $974 = ((($635)) + 4|0);
     HEAP32[$974>>2] = $973;
     HEAP32[$943>>2] = $970;
     $975 = $970 >>> 3;
     $976 = ($970>>>0)<(256);
     if ($976) {
      $977 = $975 << 1;
      $978 = (22106240 + ($977<<2)|0);
      $979 = HEAP32[22106200>>2]|0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981|0)==(0);
      if ($982) {
       $983 = $979 | $980;
       HEAP32[22106200>>2] = $983;
       $$pre$i$i = (($977) + 2)|0;
       $$pre14$i$i = (22106240 + ($$pre$i$i<<2)|0);
       $$pre$phi$i$iZ2D = $$pre14$i$i;$F$0$i$i = $978;
      } else {
       $$sum4$i$i = (($977) + 2)|0;
       $984 = (22106240 + ($$sum4$i$i<<2)|0);
       $985 = HEAP32[$984>>2]|0;
       $986 = HEAP32[(22106216)>>2]|0;
       $987 = ($985>>>0)<($986>>>0);
       if ($987) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $984;$F$0$i$i = $985;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $988 = ((($F$0$i$i)) + 12|0);
      HEAP32[$988>>2] = $635;
      $989 = ((($635)) + 8|0);
      HEAP32[$989>>2] = $F$0$i$i;
      $990 = ((($635)) + 12|0);
      HEAP32[$990>>2] = $978;
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991|0)==(0);
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = ($970>>>0)>(16777215);
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = (($991) + 1048320)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = (($997) + 520192)|0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = (($1002) + 245760)|0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = (14 - ($1006))|0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = (($1007) + ($1009))|0;
       $1011 = $1010 << 1;
       $1012 = (($1010) + 7)|0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = (22106504 + ($I1$0$i$i<<2)|0);
     $1017 = ((($635)) + 28|0);
     HEAP32[$1017>>2] = $I1$0$i$i;
     $1018 = ((($635)) + 20|0);
     HEAP32[$1018>>2] = 0;
     HEAP32[$941>>2] = 0;
     $1019 = HEAP32[(22106204)>>2]|0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021|0)==(0);
     if ($1022) {
      $1023 = $1019 | $1020;
      HEAP32[(22106204)>>2] = $1023;
      HEAP32[$1016>>2] = $635;
      $1024 = ((($635)) + 24|0);
      HEAP32[$1024>>2] = $1016;
      $1025 = ((($635)) + 12|0);
      HEAP32[$1025>>2] = $635;
      $1026 = ((($635)) + 8|0);
      HEAP32[$1026>>2] = $635;
      break;
     }
     $1027 = HEAP32[$1016>>2]|0;
     $1028 = ((($1027)) + 4|0);
     $1029 = HEAP32[$1028>>2]|0;
     $1030 = $1029 & -8;
     $1031 = ($1030|0)==($970|0);
     L459: do {
      if ($1031) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1032 = ($I1$0$i$i|0)==(31);
       $1033 = $I1$0$i$i >>> 1;
       $1034 = (25 - ($1033))|0;
       $1035 = $1032 ? 0 : $1034;
       $1036 = $970 << $1035;
       $K2$07$i$i = $1036;$T$06$i$i = $1027;
       while(1) {
        $1043 = $K2$07$i$i >>> 31;
        $1044 = (((($T$06$i$i)) + 16|0) + ($1043<<2)|0);
        $1039 = HEAP32[$1044>>2]|0;
        $1045 = ($1039|0)==(0|0);
        if ($1045) {
         $$lcssa211 = $1044;$T$06$i$i$lcssa = $T$06$i$i;
         break;
        }
        $1037 = $K2$07$i$i << 1;
        $1038 = ((($1039)) + 4|0);
        $1040 = HEAP32[$1038>>2]|0;
        $1041 = $1040 & -8;
        $1042 = ($1041|0)==($970|0);
        if ($1042) {
         $T$0$lcssa$i$i = $1039;
         break L459;
        } else {
         $K2$07$i$i = $1037;$T$06$i$i = $1039;
        }
       }
       $1046 = HEAP32[(22106216)>>2]|0;
       $1047 = ($$lcssa211>>>0)<($1046>>>0);
       if ($1047) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$lcssa211>>2] = $635;
        $1048 = ((($635)) + 24|0);
        HEAP32[$1048>>2] = $T$06$i$i$lcssa;
        $1049 = ((($635)) + 12|0);
        HEAP32[$1049>>2] = $635;
        $1050 = ((($635)) + 8|0);
        HEAP32[$1050>>2] = $635;
        break L299;
       }
      }
     } while(0);
     $1051 = ((($T$0$lcssa$i$i)) + 8|0);
     $1052 = HEAP32[$1051>>2]|0;
     $1053 = HEAP32[(22106216)>>2]|0;
     $1054 = ($1052>>>0)>=($1053>>>0);
     $not$$i$i = ($T$0$lcssa$i$i>>>0)>=($1053>>>0);
     $1055 = $1054 & $not$$i$i;
     if ($1055) {
      $1056 = ((($1052)) + 12|0);
      HEAP32[$1056>>2] = $635;
      HEAP32[$1051>>2] = $635;
      $1057 = ((($635)) + 8|0);
      HEAP32[$1057>>2] = $1052;
      $1058 = ((($635)) + 12|0);
      HEAP32[$1058>>2] = $T$0$lcssa$i$i;
      $1059 = ((($635)) + 24|0);
      HEAP32[$1059>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1060 = HEAP32[(22106212)>>2]|0;
  $1061 = ($1060>>>0)>($nb$0>>>0);
  if ($1061) {
   $1062 = (($1060) - ($nb$0))|0;
   HEAP32[(22106212)>>2] = $1062;
   $1063 = HEAP32[(22106224)>>2]|0;
   $1064 = (($1063) + ($nb$0)|0);
   HEAP32[(22106224)>>2] = $1064;
   $1065 = $1062 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1066 = (($1063) + ($$sum$i32)|0);
   HEAP32[$1066>>2] = $1065;
   $1067 = $nb$0 | 3;
   $1068 = ((($1063)) + 4|0);
   HEAP32[$1068>>2] = $1067;
   $1069 = ((($1063)) + 8|0);
   $mem$0 = $1069;
   return ($mem$0|0);
  }
 }
 $1070 = (___errno_location()|0);
 HEAP32[$1070>>2] = 12;
 $mem$0 = 0;
 return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
 var $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0;
 var $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(22106216)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[(22106220)>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[(22106208)>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum20 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum20)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum30 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum30)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum31 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum31)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = (22106240 + ($25<<2)|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = ((($22)) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[22106200>>2]|0;
     $36 = $35 & $34;
     HEAP32[22106200>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre60 = ((($24)) + 8|0);
     $$pre$phi61Z2D = $$pre60;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = ((($24)) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi61Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = ((($22)) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi61Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum22 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum22)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum23 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum23)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum25 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum25)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum24 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum24)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = ((($R$0)) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = ((($R$0)) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0$lcssa>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum29)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = ((($49)) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = ((($46)) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum26 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum26)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (22106504 + ($72<<2)|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[(22106204)>>2]|0;
      $79 = $78 & $77;
      HEAP32[(22106204)>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[(22106216)>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = ((($44)) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = ((($44)) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[(22106216)>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = ((($R$1)) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum27 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum27)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = ((($R$1)) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = ((($91)) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum28)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[(22106216)>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = ((($R$1)) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = ((($97)) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum19 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum19)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[(22106224)>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[(22106212)>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[(22106212)>>2] = $120;
   HEAP32[(22106224)>>2] = $p$0;
   $121 = $120 | 1;
   $122 = ((($p$0)) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[(22106220)>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    return;
   }
   HEAP32[(22106220)>>2] = 0;
   HEAP32[(22106208)>>2] = 0;
   return;
  }
  $125 = HEAP32[(22106220)>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[(22106208)>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[(22106208)>>2] = $128;
   HEAP32[(22106220)>>2] = $p$0;
   $129 = $128 | 1;
   $130 = ((($p$0)) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum1718 = $8 | 4;
    $138 = (($mem) + ($$sum1718)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = (22106240 + ($140<<2)|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[(22106216)>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = ((($137)) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[22106200>>2]|0;
     $152 = $151 & $150;
     HEAP32[22106200>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre58 = ((($139)) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $154 = HEAP32[(22106216)>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = ((($139)) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi59Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = ((($137)) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi59Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = ((($R7$0)) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = ((($R7$0)) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[(22106216)>>2]|0;
      $188 = ($RP9$0$lcssa>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[(22106216)>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = ((($166)) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = ((($163)) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum12 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum12)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (22106504 + ($191<<2)|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond47 = ($R7$1|0)==(0|0);
      if ($cond47) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[(22106204)>>2]|0;
       $198 = $197 & $196;
       HEAP32[(22106204)>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[(22106216)>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = ((($161)) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = ((($161)) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[(22106216)>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = ((($R7$1)) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum13 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum13)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = ((($R7$1)) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = ((($210)) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum14 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum14)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[(22106216)>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = ((($R7$1)) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = ((($216)) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = ((($p$0)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[(22106220)>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[(22106208)>>2] = $133;
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = ((($p$0)) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = (22106240 + ($233<<2)|0);
  $235 = HEAP32[22106200>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[22106200>>2] = $239;
   $$pre = (($233) + 2)|0;
   $$pre57 = (22106240 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre57;$F16$0 = $234;
  } else {
   $$sum11 = (($233) + 2)|0;
   $240 = (22106240 + ($$sum11<<2)|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[(22106216)>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = ((($F16$0)) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = ((($p$0)) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = ((($p$0)) + 12|0);
  HEAP32[$246>>2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = (22106504 + ($I18$0<<2)|0);
 $273 = ((($p$0)) + 28|0);
 HEAP32[$273>>2] = $I18$0;
 $274 = ((($p$0)) + 16|0);
 $275 = ((($p$0)) + 20|0);
 HEAP32[$275>>2] = 0;
 HEAP32[$274>>2] = 0;
 $276 = HEAP32[(22106204)>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[(22106204)>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = ((($p$0)) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = ((($p$0)) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = ((($p$0)) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ((($284)) + 4|0);
   $286 = HEAP32[$285>>2]|0;
   $287 = $286 & -8;
   $288 = ($287|0)==($psize$1|0);
   L202: do {
    if ($288) {
     $T$0$lcssa = $284;
    } else {
     $289 = ($I18$0|0)==(31);
     $290 = $I18$0 >>> 1;
     $291 = (25 - ($290))|0;
     $292 = $289 ? 0 : $291;
     $293 = $psize$1 << $292;
     $K19$052 = $293;$T$051 = $284;
     while(1) {
      $300 = $K19$052 >>> 31;
      $301 = (((($T$051)) + 16|0) + ($300<<2)|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       $$lcssa = $301;$T$051$lcssa = $T$051;
       break;
      }
      $294 = $K19$052 << 1;
      $295 = ((($296)) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L202;
      } else {
       $K19$052 = $294;$T$051 = $296;
      }
     }
     $303 = HEAP32[(22106216)>>2]|0;
     $304 = ($$lcssa>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$lcssa>>2] = $p$0;
      $305 = ((($p$0)) + 24|0);
      HEAP32[$305>>2] = $T$051$lcssa;
      $306 = ((($p$0)) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = ((($p$0)) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = ((($T$0$lcssa)) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[(22106216)>>2]|0;
   $311 = ($309>>>0)>=($310>>>0);
   $not$ = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = $311 & $not$;
   if ($312) {
    $313 = ((($309)) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = ((($p$0)) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = ((($p$0)) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = ((($p$0)) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[(22106232)>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[(22106232)>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = (22106656);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = ((($sp$0$i)) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[(22106232)>>2] = -1;
 return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$0 = $1;
  return ($mem$0|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $4 = ($bytes>>>0)<(11);
 $5 = (($bytes) + 11)|0;
 $6 = $5 & -8;
 $7 = $4 ? 16 : $6;
 $8 = ((($oldmem)) + -8|0);
 $9 = (_try_realloc_chunk($8,$7)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($9)) + 8|0);
  $mem$0 = $11;
  return ($mem$0|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$0 = 0;
  return ($mem$0|0);
 }
 $14 = ((($oldmem)) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$0 = $12;
 return ($mem$0|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $cond = 0, $newp$0 = 0, $notlhs = 0;
 var $notrhs = 0, $or$cond$not = 0, $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[(22106216)>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[(22106680)>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $30 = HEAP32[(22106224)>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[(22106212)>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[(22106224)>>2] = $36;
  HEAP32[(22106212)>>2] = $35;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $42 = HEAP32[(22106220)>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[(22106208)>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[(22106208)>>2] = $storemerge21;
  HEAP32[(22106220)>>2] = $storemerge;
  $newp$0 = $p;
  return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = (22106240 + ($77<<2)|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = ((($74)) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[22106200>>2]|0;
    $88 = $87 & $86;
    HEAP32[22106200>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = ((($76)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($76)) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = ((($74)) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $113;$RP$0 = $112;
      }
     } else {
      $R$0 = $110;$RP$0 = $109;
     }
     while(1) {
      $115 = ((($R$0)) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if (!($117)) {
       $R$0 = $116;$RP$0 = $115;
       continue;
      }
      $118 = ((($R$0)) + 16|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if ($120) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $119;$RP$0 = $118;
      }
     }
     $121 = ($RP$0$lcssa>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = ((($101)) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = ((($98)) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (22106504 + ($124<<2)|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[(22106204)>>2]|0;
      $131 = $130 & $129;
      HEAP32[(22106204)>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[(22106216)>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = ((($96)) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = ((($96)) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[(22106216)>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = ((($R$1)) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = ((($R$1)) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = ((($143)) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[(22106216)>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = ((($R$1)) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = ((($149)) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  return ($newp$0|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi50Z2D = 0, $$pre$phi52Z2D = 0, $$pre$phiZ2D = 0, $$pre48 = 0, $$pre49 = 0, $$pre51 = 0, $$sum = 0, $$sum1 = 0, $$sum10 = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum16 = 0, $$sum17 = 0;
 var $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum7 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $K20$043 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$042 = 0, $T$042$lcssa = 0, $cond = 0;
 var $cond39 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[(22106216)>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[(22106220)>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[(22106208)>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum14 = (4 - ($5))|0;
    $105 = (($p) + ($$sum14)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum24 = (8 - ($5))|0;
    $17 = (($p) + ($$sum24)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum25 = (12 - ($5))|0;
    $19 = (($p) + ($$sum25)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = (22106240 + ($21<<2)|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = ((($18)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[22106200>>2]|0;
     $32 = $31 & $30;
     HEAP32[22106200>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre51 = ((($20)) + 8|0);
     $$pre$phi52Z2D = $$pre51;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = ((($20)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi52Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = ((($18)) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi52Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum16 = (24 - ($5))|0;
   $39 = (($p) + ($$sum16)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum17 = (12 - ($5))|0;
   $41 = (($p) + ($$sum17)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum18 = (16 - ($5))|0;
     $$sum19 = (($$sum18) + 4)|0;
     $53 = (($p) + ($$sum19)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum18)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = ((($R$0)) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = ((($R$0)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $R$0$lcssa = $R$0;$RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0$lcssa>>2] = 0;
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum23 = (8 - ($5))|0;
     $44 = (($p) + ($$sum23)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = ((($45)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = ((($42)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum20 = (28 - ($5))|0;
    $67 = (($p) + ($$sum20)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (22106504 + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[(22106204)>>2]|0;
      $75 = $74 & $73;
      HEAP32[(22106204)>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[(22106216)>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = ((($40)) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = ((($40)) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[(22106216)>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($R$1)) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum21 = (16 - ($5))|0;
    $86 = (($p) + ($$sum21)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = ((($R$1)) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = ((($87)) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum22 = (($$sum21) + 4)|0;
    $92 = (($p) + ($$sum22)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[(22106216)>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = ((($R$1)) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = ((($93)) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[(22106216)>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[(22106224)>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[(22106212)>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[(22106212)>>2] = $115;
   HEAP32[(22106224)>>2] = $$0;
   $116 = $115 | 1;
   $117 = ((($$0)) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[(22106220)>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    return;
   }
   HEAP32[(22106220)>>2] = 0;
   HEAP32[(22106208)>>2] = 0;
   return;
  }
  $120 = HEAP32[(22106220)>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(22106208)>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[(22106208)>>2] = $123;
   HEAP32[(22106220)>>2] = $$0;
   $124 = $123 | 1;
   $125 = ((($$0)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum12 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum12)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum13 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum13)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = (22106240 + ($135<<2)|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = ((($132)) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[22106200>>2]|0;
     $146 = $145 & $144;
     HEAP32[22106200>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre49 = ((($134)) + 8|0);
     $$pre$phi50Z2D = $$pre49;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = ((($134)) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi50Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = ((($132)) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi50Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;$RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;$RP9$0 = $167;
      }
      while(1) {
       $173 = ((($R7$0)) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if (!($175)) {
        $R7$0 = $174;$RP9$0 = $173;
        continue;
       }
       $176 = ((($R7$0)) + 16|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if ($178) {
        $R7$0$lcssa = $R7$0;$RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $177;$RP9$0 = $176;
       }
      }
      $179 = ($RP9$0$lcssa>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0$lcssa>>2] = 0;
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $$sum11 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum11)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = ((($159)) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = ((($156)) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum8 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum8)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = (22106504 + ($182<<2)|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond39 = ($R7$1|0)==(0|0);
      if ($cond39) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[(22106204)>>2]|0;
       $189 = $188 & $187;
       HEAP32[(22106204)>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[(22106216)>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = ((($154)) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = ((($154)) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[(22106216)>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = ((($R7$1)) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum9 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum9)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = ((($R7$1)) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = ((($201)) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum10 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum10)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[(22106216)>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = ((($R7$1)) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = ((($207)) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = ((($$0)) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[(22106220)>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[(22106208)>>2] = $128;
   return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = ((($$0)) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = (22106240 + ($224<<2)|0);
  $226 = HEAP32[22106200>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[22106200>>2] = $230;
   $$pre = (($224) + 2)|0;
   $$pre48 = (22106240 + ($$pre<<2)|0);
   $$pre$phiZ2D = $$pre48;$F16$0 = $225;
  } else {
   $$sum7 = (($224) + 2)|0;
   $231 = (22106240 + ($$sum7<<2)|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[(22106216)>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = ((($F16$0)) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = ((($$0)) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = ((($$0)) + 12|0);
  HEAP32[$237>>2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = (22106504 + ($I19$0<<2)|0);
 $264 = ((($$0)) + 28|0);
 HEAP32[$264>>2] = $I19$0;
 $265 = ((($$0)) + 16|0);
 $266 = ((($$0)) + 20|0);
 HEAP32[$266>>2] = 0;
 HEAP32[$265>>2] = 0;
 $267 = HEAP32[(22106204)>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[(22106204)>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = ((($$0)) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = ((($$0)) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = ((($$0)) + 8|0);
  HEAP32[$274>>2] = $$0;
  return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ((($275)) + 4|0);
 $277 = HEAP32[$276>>2]|0;
 $278 = $277 & -8;
 $279 = ($278|0)==($$1|0);
 L191: do {
  if ($279) {
   $T$0$lcssa = $275;
  } else {
   $280 = ($I19$0|0)==(31);
   $281 = $I19$0 >>> 1;
   $282 = (25 - ($281))|0;
   $283 = $280 ? 0 : $282;
   $284 = $$1 << $283;
   $K20$043 = $284;$T$042 = $275;
   while(1) {
    $291 = $K20$043 >>> 31;
    $292 = (((($T$042)) + 16|0) + ($291<<2)|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     $$lcssa = $292;$T$042$lcssa = $T$042;
     break;
    }
    $285 = $K20$043 << 1;
    $286 = ((($287)) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $T$0$lcssa = $287;
     break L191;
    } else {
     $K20$043 = $285;$T$042 = $287;
    }
   }
   $294 = HEAP32[(22106216)>>2]|0;
   $295 = ($$lcssa>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$$lcssa>>2] = $$0;
   $296 = ((($$0)) + 24|0);
   HEAP32[$296>>2] = $T$042$lcssa;
   $297 = ((($$0)) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = ((($$0)) + 8|0);
   HEAP32[$298>>2] = $$0;
   return;
  }
 } while(0);
 $299 = ((($T$0$lcssa)) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[(22106216)>>2]|0;
 $302 = ($300>>>0)>=($301>>>0);
 $not$ = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = $302 & $not$;
 if (!($303)) {
  _abort();
  // unreachable;
 }
 $304 = ((($300)) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = ((($$0)) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = ((($$0)) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = ((($$0)) + 24|0);
 HEAP32[$307>>2] = 0;
 return;
}
function runPostSets() {
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&7](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_vd(index,a1) {
  index = index|0;
  a1=+a1;
  FUNCTION_TABLE_vd[index&3](+a1);
}


function dynCall_vid(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=+a2;
  FUNCTION_TABLE_vid[index&3](a1|0,+a2);
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&31](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&63](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&15](a1|0)|0;
}


function dynCall_viddd(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4;
  FUNCTION_TABLE_viddd[index&3](a1|0,+a2,+a3,+a4);
}


function dynCall_vidd(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3;
  FUNCTION_TABLE_vidd[index&3](a1|0,+a2,+a3);
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&7](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
  FUNCTION_TABLE_viiiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&31](a1|0,a2|0,a3|0);
}


function dynCall_vidddd(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=+a2; a3=+a3; a4=+a4; a5=+a5;
  FUNCTION_TABLE_vidddd[index&3](a1|0,+a2,+a3,+a4,+a5);
}


function dynCall_vdi(index,a1,a2) {
  index = index|0;
  a1=+a1; a2=a2|0;
  FUNCTION_TABLE_vdi[index&1](+a1,a2|0);
}


function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
  FUNCTION_TABLE_viiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
}


function dynCall_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
  FUNCTION_TABLE_viiiiiiiii[index&3](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&3](a1|0,a2|0)|0;
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&3]()|0;
}


function dynCall_vdddddd(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=+a1; a2=+a2; a3=+a3; a4=+a4; a5=+a5; a6=+a6;
  FUNCTION_TABLE_vdddddd[index&1](+a1,+a2,+a3,+a4,+a5,+a6);
}


function dynCall_vdddd(index,a1,a2,a3,a4) {
  index = index|0;
  a1=+a1; a2=+a2; a3=+a3; a4=+a4;
  FUNCTION_TABLE_vdddd[index&3](+a1,+a2,+a3,+a4);
}


function dynCall_vdd(index,a1,a2) {
  index = index|0;
  a1=+a1; a2=+a2;
  FUNCTION_TABLE_vdd[index&3](+a1,+a2);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&7]();
}


function dynCall_viid(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=+a3;
  FUNCTION_TABLE_viid[index&1](a1|0,a2|0,+a3);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&31](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; abort(0);
}
function _emscripten_glUniform4i__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; _emscripten_glUniform4i(p0|0,p1|0,p2|0,p3|0,p4|0);
}
function _emscripten_glFramebufferTexture2D__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; _emscripten_glFramebufferTexture2D(p0|0,p1|0,p2|0,p3|0,p4|0);
}
function _emscripten_glShaderBinary__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; _emscripten_glShaderBinary(p0|0,p1|0,p2|0,p3|0,p4|0);
}
function _emscripten_glDrawElementsInstanced__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; _emscripten_glDrawElementsInstanced(p0|0,p1|0,p2|0,p3|0,p4|0);
}
function b1(p0) {
 p0 = +p0; abort(1);
}
function _emscripten_glClearDepth__wrapper(p0) {
 p0 = +p0; _emscripten_glClearDepth(+p0);
}
function _emscripten_glClearDepthf__wrapper(p0) {
 p0 = +p0; _emscripten_glClearDepthf(+p0);
}
function _emscripten_glLineWidth__wrapper(p0) {
 p0 = +p0; _emscripten_glLineWidth(+p0);
}
function b2(p0,p1) {
 p0 = p0|0;p1 = +p1; abort(2);
}
function _emscripten_glUniform1f__wrapper(p0,p1) {
 p0 = p0|0;p1 = +p1; _emscripten_glUniform1f(p0|0,+p1);
}
function _emscripten_glVertexAttrib1f__wrapper(p0,p1) {
 p0 = p0|0;p1 = +p1; _emscripten_glVertexAttrib1f(p0|0,+p1);
}
function b3(p0) {
 p0 = p0|0; abort(3);
}
function _emscripten_glDeleteShader__wrapper(p0) {
 p0 = p0|0; _emscripten_glDeleteShader(p0|0);
}
function _emscripten_glCompileShader__wrapper(p0) {
 p0 = p0|0; _emscripten_glCompileShader(p0|0);
}
function _emscripten_glDeleteProgram__wrapper(p0) {
 p0 = p0|0; _emscripten_glDeleteProgram(p0|0);
}
function _emscripten_glLinkProgram__wrapper(p0) {
 p0 = p0|0; _emscripten_glLinkProgram(p0|0);
}
function _emscripten_glUseProgram__wrapper(p0) {
 p0 = p0|0; _emscripten_glUseProgram(p0|0);
}
function _emscripten_glValidateProgram__wrapper(p0) {
 p0 = p0|0; _emscripten_glValidateProgram(p0|0);
}
function _emscripten_glDeleteObjectARB__wrapper(p0) {
 p0 = p0|0; _emscripten_glDeleteObjectARB(p0|0);
}
function _emscripten_glEnableClientState__wrapper(p0) {
 p0 = p0|0; _emscripten_glEnableClientState(p0|0);
}
function _emscripten_glClientActiveTexture__wrapper(p0) {
 p0 = p0|0; _emscripten_glClientActiveTexture(p0|0);
}
function _emscripten_glBindVertexArray__wrapper(p0) {
 p0 = p0|0; _emscripten_glBindVertexArray(p0|0);
}
function _emscripten_glMatrixMode__wrapper(p0) {
 p0 = p0|0; _emscripten_glMatrixMode(p0|0);
}
function _emscripten_glLoadMatrixf__wrapper(p0) {
 p0 = p0|0; _emscripten_glLoadMatrixf(p0|0);
}
function _emscripten_glEnableVertexAttribArray__wrapper(p0) {
 p0 = p0|0; _emscripten_glEnableVertexAttribArray(p0|0);
}
function _emscripten_glDisableVertexAttribArray__wrapper(p0) {
 p0 = p0|0; _emscripten_glDisableVertexAttribArray(p0|0);
}
function _emscripten_glDepthFunc__wrapper(p0) {
 p0 = p0|0; _emscripten_glDepthFunc(p0|0);
}
function _emscripten_glEnable__wrapper(p0) {
 p0 = p0|0; _emscripten_glEnable(p0|0);
}
function _emscripten_glDisable__wrapper(p0) {
 p0 = p0|0; _emscripten_glDisable(p0|0);
}
function _emscripten_glFrontFace__wrapper(p0) {
 p0 = p0|0; _emscripten_glFrontFace(p0|0);
}
function _emscripten_glCullFace__wrapper(p0) {
 p0 = p0|0; _emscripten_glCullFace(p0|0);
}
function _emscripten_glClear__wrapper(p0) {
 p0 = p0|0; _emscripten_glClear(p0|0);
}
function _emscripten_glClearStencil__wrapper(p0) {
 p0 = p0|0; _emscripten_glClearStencil(p0|0);
}
function _emscripten_glDepthMask__wrapper(p0) {
 p0 = p0|0; _emscripten_glDepthMask(p0|0);
}
function _emscripten_glStencilMask__wrapper(p0) {
 p0 = p0|0; _emscripten_glStencilMask(p0|0);
}
function _emscripten_glGenerateMipmap__wrapper(p0) {
 p0 = p0|0; _emscripten_glGenerateMipmap(p0|0);
}
function _emscripten_glActiveTexture__wrapper(p0) {
 p0 = p0|0; _emscripten_glActiveTexture(p0|0);
}
function _emscripten_glBlendEquation__wrapper(p0) {
 p0 = p0|0; _emscripten_glBlendEquation(p0|0);
}
function b4(p0,p1) {
 p0 = p0|0;p1 = p1|0; abort(4);
}
function _emscripten_glPixelStorei__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glPixelStorei(p0|0,p1|0);
}
function _emscripten_glGetIntegerv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGetIntegerv(p0|0,p1|0);
}
function _emscripten_glGetFloatv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGetFloatv(p0|0,p1|0);
}
function _emscripten_glGetBooleanv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGetBooleanv(p0|0,p1|0);
}
function _emscripten_glGenTextures__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGenTextures(p0|0,p1|0);
}
function _emscripten_glDeleteTextures__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDeleteTextures(p0|0,p1|0);
}
function _emscripten_glBindTexture__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBindTexture(p0|0,p1|0);
}
function _emscripten_glGenBuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGenBuffers(p0|0,p1|0);
}
function _emscripten_glDeleteBuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDeleteBuffers(p0|0,p1|0);
}
function _emscripten_glGenRenderbuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGenRenderbuffers(p0|0,p1|0);
}
function _emscripten_glDeleteRenderbuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDeleteRenderbuffers(p0|0,p1|0);
}
function _emscripten_glBindRenderbuffer__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBindRenderbuffer(p0|0,p1|0);
}
function _emscripten_glUniform1i__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glUniform1i(p0|0,p1|0);
}
function _emscripten_glBindBuffer__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBindBuffer(p0|0,p1|0);
}
function _emscripten_glVertexAttrib1fv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glVertexAttrib1fv(p0|0,p1|0);
}
function _emscripten_glVertexAttrib2fv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glVertexAttrib2fv(p0|0,p1|0);
}
function _emscripten_glVertexAttrib3fv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glVertexAttrib3fv(p0|0,p1|0);
}
function _emscripten_glVertexAttrib4fv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glVertexAttrib4fv(p0|0,p1|0);
}
function _emscripten_glAttachShader__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glAttachShader(p0|0,p1|0);
}
function _emscripten_glDetachShader__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDetachShader(p0|0,p1|0);
}
function _emscripten_glBindFramebuffer__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBindFramebuffer(p0|0,p1|0);
}
function _emscripten_glGenFramebuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGenFramebuffers(p0|0,p1|0);
}
function _emscripten_glDeleteFramebuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDeleteFramebuffers(p0|0,p1|0);
}
function _emscripten_glBindProgramARB__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBindProgramARB(p0|0,p1|0);
}
function _emscripten_glGetPointerv__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGetPointerv(p0|0,p1|0);
}
function _emscripten_glGenVertexArrays__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glGenVertexArrays(p0|0,p1|0);
}
function _emscripten_glDeleteVertexArrays__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDeleteVertexArrays(p0|0,p1|0);
}
function _emscripten_glVertexAttribDivisor__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glVertexAttribDivisor(p0|0,p1|0);
}
function _emscripten_glBlendFunc__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBlendFunc(p0|0,p1|0);
}
function _emscripten_glBlendEquationSeparate__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glBlendEquationSeparate(p0|0,p1|0);
}
function _emscripten_glStencilMaskSeparate__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glStencilMaskSeparate(p0|0,p1|0);
}
function _emscripten_glHint__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glHint(p0|0,p1|0);
}
function _emscripten_glDrawBuffers__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_glDrawBuffers(p0|0,p1|0);
}
function b5(p0) {
 p0 = p0|0; abort(5);return 0;
}
function _emscripten_glGetString__wrapper(p0) {
 p0 = p0|0; return _emscripten_glGetString(p0|0)|0;
}
function _emscripten_glIsTexture__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsTexture(p0|0)|0;
}
function _emscripten_glIsBuffer__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsBuffer(p0|0)|0;
}
function _emscripten_glIsRenderbuffer__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsRenderbuffer(p0|0)|0;
}
function _emscripten_glCreateShader__wrapper(p0) {
 p0 = p0|0; return _emscripten_glCreateShader(p0|0)|0;
}
function _emscripten_glIsShader__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsShader(p0|0)|0;
}
function _emscripten_glIsProgram__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsProgram(p0|0)|0;
}
function _emscripten_glIsFramebuffer__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsFramebuffer(p0|0)|0;
}
function _emscripten_glCheckFramebufferStatus__wrapper(p0) {
 p0 = p0|0; return _emscripten_glCheckFramebufferStatus(p0|0)|0;
}
function _emscripten_glIsEnabled__wrapper(p0) {
 p0 = p0|0; return _emscripten_glIsEnabled(p0|0)|0;
}
function b6(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3; abort(6);
}
function _emscripten_glUniform3f__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3; _emscripten_glUniform3f(p0|0,+p1,+p2,+p3);
}
function _emscripten_glVertexAttrib3f__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3; _emscripten_glVertexAttrib3f(p0|0,+p1,+p2,+p3);
}
function b7(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; abort(7);
}
function _emscripten_glUniform2f__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; _emscripten_glUniform2f(p0|0,+p1,+p2);
}
function _emscripten_glVertexAttrib2f__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = +p1;p2 = +p2; _emscripten_glVertexAttrib2f(p0|0,+p1,+p2);
}
function b8(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(8);return 0;
}
function b9(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; abort(9);
}
function _emscripten_glCompressedTexImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; _emscripten_glCompressedTexImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0);
}
function _emscripten_glCopyTexImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; _emscripten_glCopyTexImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0);
}
function _emscripten_glCopyTexSubImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; _emscripten_glCopyTexSubImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0);
}
function b10(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; abort(10);
}
function _emscripten_glDrawRangeElements__wrapper(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; _emscripten_glDrawRangeElements(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0);
}
function _emscripten_glVertexAttribPointer__wrapper(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; _emscripten_glVertexAttribPointer(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0);
}
function b11(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; abort(11);
}
function _emscripten_glGetTexParameterfv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetTexParameterfv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetTexParameteriv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetTexParameteriv(p0|0,p1|0,p2|0);
}
function _emscripten_glTexParameterfv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glTexParameterfv(p0|0,p1|0,p2|0);
}
function _emscripten_glTexParameteriv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glTexParameteriv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetBufferParameteriv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetBufferParameteriv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetRenderbufferParameteriv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetRenderbufferParameteriv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetUniformfv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetUniformfv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetUniformiv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetUniformiv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetVertexAttribfv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetVertexAttribfv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetVertexAttribiv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetVertexAttribiv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetVertexAttribPointerv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetVertexAttribPointerv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform2i__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform2i(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform1iv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform1iv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform2iv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform2iv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform3iv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform3iv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform4iv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform4iv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform1fv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform1fv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform2fv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform2fv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform3fv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform3fv(p0|0,p1|0,p2|0);
}
function _emscripten_glUniform4fv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glUniform4fv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetShaderiv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetShaderiv(p0|0,p1|0,p2|0);
}
function _emscripten_glGetProgramiv__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetProgramiv(p0|0,p1|0,p2|0);
}
function _emscripten_glBindAttribLocation__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glBindAttribLocation(p0|0,p1|0,p2|0);
}
function _emscripten_glGetObjectParameterivARB__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glGetObjectParameterivARB(p0|0,p1|0,p2|0);
}
function _emscripten_glNormalPointer__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glNormalPointer(p0|0,p1|0,p2|0);
}
function _emscripten_glDrawArrays__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glDrawArrays(p0|0,p1|0,p2|0);
}
function _emscripten_glTexParameteri__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glTexParameteri(p0|0,p1|0,p2|0);
}
function _emscripten_glStencilFunc__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glStencilFunc(p0|0,p1|0,p2|0);
}
function _emscripten_glStencilOp__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; _emscripten_glStencilOp(p0|0,p1|0,p2|0);
}
function b12(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4; abort(12);
}
function _emscripten_glUniform4f__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4; _emscripten_glUniform4f(p0|0,+p1,+p2,+p3,+p4);
}
function _emscripten_glVertexAttrib4f__wrapper(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4; _emscripten_glVertexAttrib4f(p0|0,+p1,+p2,+p3,+p4);
}
function b13(p0,p1) {
 p0 = +p0;p1 = p1|0; abort(13);
}
function _emscripten_glSampleCoverage__wrapper(p0,p1) {
 p0 = +p0;p1 = p1|0; _emscripten_glSampleCoverage(+p0,p1|0);
}
function b14(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; abort(14);
}
function _emscripten_glReadPixels__wrapper(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; _emscripten_glReadPixels(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0);
}
function _emscripten_glGetActiveUniform__wrapper(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; _emscripten_glGetActiveUniform(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0);
}
function _emscripten_glGetActiveAttrib__wrapper(p0,p1,p2,p3,p4,p5,p6) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; _emscripten_glGetActiveAttrib(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0);
}
function b15(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; abort(15);
}
function _emscripten_glCompressedTexSubImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; _emscripten_glCompressedTexSubImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0,p8|0);
}
function _emscripten_glTexImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; _emscripten_glTexImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0,p8|0);
}
function _emscripten_glTexSubImage2D__wrapper(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; _emscripten_glTexSubImage2D(p0|0,p1|0,p2|0,p3|0,p4|0,p5|0,p6|0,p7|0,p8|0);
}
function b16(p0,p1) {
 p0 = p0|0;p1 = p1|0; abort(16);return 0;
}
function _emscripten_glGetUniformLocation__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; return _emscripten_glGetUniformLocation(p0|0,p1|0)|0;
}
function _emscripten_glGetAttribLocation__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; return _emscripten_glGetAttribLocation(p0|0,p1|0)|0;
}
function b17() {
 ; abort(17);return 0;
}
function _emscripten_glCreateProgram__wrapper() {
 ; return _emscripten_glCreateProgram()|0;
}
function _emscripten_glGetError__wrapper() {
 ; return _emscripten_glGetError()|0;
}
function b18(p0,p1,p2,p3,p4,p5) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4;p5 = +p5; abort(18);
}
function _emscripten_glFrustum__wrapper(p0,p1,p2,p3,p4,p5) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4;p5 = +p5; _emscripten_glFrustum(+p0,+p1,+p2,+p3,+p4,+p5);
}
function b19(p0,p1,p2,p3) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3; abort(19);
}
function _emscripten_glRotatef__wrapper(p0,p1,p2,p3) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3; _emscripten_glRotatef(+p0,+p1,+p2,+p3);
}
function _emscripten_glClearColor__wrapper(p0,p1,p2,p3) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3; _emscripten_glClearColor(+p0,+p1,+p2,+p3);
}
function _emscripten_glBlendColor__wrapper(p0,p1,p2,p3) {
 p0 = +p0;p1 = +p1;p2 = +p2;p3 = +p3; _emscripten_glBlendColor(+p0,+p1,+p2,+p3);
}
function b20(p0,p1) {
 p0 = +p0;p1 = +p1; abort(20);
}
function _emscripten_glDepthRange__wrapper(p0,p1) {
 p0 = +p0;p1 = +p1; _emscripten_glDepthRange(+p0,+p1);
}
function _emscripten_glDepthRangef__wrapper(p0,p1) {
 p0 = +p0;p1 = +p1; _emscripten_glDepthRangef(+p0,+p1);
}
function _emscripten_glPolygonOffset__wrapper(p0,p1) {
 p0 = +p0;p1 = +p1; _emscripten_glPolygonOffset(+p0,+p1);
}
function b21() {
 ; abort(21);
}
function _emscripten_glLoadIdentity__wrapper() {
 ; _emscripten_glLoadIdentity();
}
function _emscripten_glReleaseShaderCompiler__wrapper() {
 ; _emscripten_glReleaseShaderCompiler();
}
function _emscripten_glFinish__wrapper() {
 ; _emscripten_glFinish();
}
function _emscripten_glFlush__wrapper() {
 ; _emscripten_glFlush();
}
function b22(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = +p2; abort(22);
}
function _emscripten_glTexParameterf__wrapper(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = +p2; _emscripten_glTexParameterf(p0|0,p1|0,+p2);
}
function b23(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; abort(23);
}
function _emscripten_glBufferData__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glBufferData(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glBufferSubData__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glBufferSubData(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glUniform3i__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glUniform3i(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glUniformMatrix2fv__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glUniformMatrix2fv(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glUniformMatrix3fv__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glUniformMatrix3fv(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glUniformMatrix4fv__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glUniformMatrix4fv(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetAttachedShaders__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetAttachedShaders(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glShaderSource__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glShaderSource(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetShaderSource__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetShaderSource(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetShaderInfoLog__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetShaderInfoLog(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetShaderPrecisionFormat__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetShaderPrecisionFormat(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetProgramInfoLog__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetProgramInfoLog(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glFramebufferRenderbuffer__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glFramebufferRenderbuffer(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetFramebufferAttachmentParameteriv__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetFramebufferAttachmentParameteriv(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glGetInfoLogARB__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glGetInfoLogARB(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glVertexPointer__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glVertexPointer(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glTexCoordPointer__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glTexCoordPointer(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glColorPointer__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glColorPointer(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glDrawElements__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glDrawElements(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glDrawArraysInstanced__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glDrawArraysInstanced(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glViewport__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glViewport(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glScissor__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glScissor(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glColorMask__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glColorMask(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glRenderbufferStorage__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glRenderbufferStorage(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glBlendFuncSeparate__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glBlendFuncSeparate(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glStencilFuncSeparate__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glStencilFuncSeparate(p0|0,p1|0,p2|0,p3|0);
}
function _emscripten_glStencilOpSeparate__wrapper(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; _emscripten_glStencilOpSeparate(p0|0,p1|0,p2|0,p3|0);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_viiiii = [b0,_emscripten_glUniform4i__wrapper,_emscripten_glFramebufferTexture2D__wrapper,_emscripten_glShaderBinary__wrapper,_emscripten_glDrawElementsInstanced__wrapper,b0,b0,b0];
var FUNCTION_TABLE_vd = [b1,_emscripten_glClearDepth__wrapper,_emscripten_glClearDepthf__wrapper,_emscripten_glLineWidth__wrapper];
var FUNCTION_TABLE_vid = [b2,_emscripten_glUniform1f__wrapper,_emscripten_glVertexAttrib1f__wrapper,b2];
var FUNCTION_TABLE_vi = [b3,_emscripten_glDeleteShader__wrapper,_emscripten_glCompileShader__wrapper,_emscripten_glDeleteProgram__wrapper,_emscripten_glLinkProgram__wrapper,_emscripten_glUseProgram__wrapper,_emscripten_glValidateProgram__wrapper,_emscripten_glDeleteObjectARB__wrapper,_emscripten_glEnableClientState__wrapper,_emscripten_glClientActiveTexture__wrapper,_emscripten_glBindVertexArray__wrapper,_emscripten_glMatrixMode__wrapper,_emscripten_glLoadMatrixf__wrapper,_emscripten_glEnableVertexAttribArray__wrapper,_emscripten_glDisableVertexAttribArray__wrapper,_emscripten_glDepthFunc__wrapper,_emscripten_glEnable__wrapper,_emscripten_glDisable__wrapper,_emscripten_glFrontFace__wrapper,_emscripten_glCullFace__wrapper,_emscripten_glClear__wrapper,_emscripten_glClearStencil__wrapper,_emscripten_glDepthMask__wrapper,_emscripten_glStencilMask__wrapper,_emscripten_glGenerateMipmap__wrapper,_emscripten_glActiveTexture__wrapper,_emscripten_glBlendEquation__wrapper,_cleanup521,_cleanup526
,b3,b3,b3];
var FUNCTION_TABLE_vii = [b4,_nsvg__endElement,_nsvg__content,_emscripten_glPixelStorei__wrapper,_emscripten_glGetIntegerv__wrapper,_emscripten_glGetFloatv__wrapper,_emscripten_glGetBooleanv__wrapper,_emscripten_glGenTextures__wrapper,_emscripten_glDeleteTextures__wrapper,_emscripten_glBindTexture__wrapper,_emscripten_glGenBuffers__wrapper,_emscripten_glDeleteBuffers__wrapper,_emscripten_glGenRenderbuffers__wrapper,_emscripten_glDeleteRenderbuffers__wrapper,_emscripten_glBindRenderbuffer__wrapper,_emscripten_glUniform1i__wrapper,_emscripten_glBindBuffer__wrapper,_emscripten_glVertexAttrib1fv__wrapper,_emscripten_glVertexAttrib2fv__wrapper,_emscripten_glVertexAttrib3fv__wrapper,_emscripten_glVertexAttrib4fv__wrapper,_emscripten_glAttachShader__wrapper,_emscripten_glDetachShader__wrapper,_emscripten_glBindFramebuffer__wrapper,_emscripten_glGenFramebuffers__wrapper,_emscripten_glDeleteFramebuffers__wrapper,_emscripten_glBindProgramARB__wrapper,_emscripten_glGetPointerv__wrapper,_emscripten_glGenVertexArrays__wrapper,_emscripten_glDeleteVertexArrays__wrapper,_emscripten_glVertexAttribDivisor__wrapper,_emscripten_glBlendFunc__wrapper,_emscripten_glBlendEquationSeparate__wrapper,_emscripten_glStencilMaskSeparate__wrapper,_emscripten_glHint__wrapper,_emscripten_glDrawBuffers__wrapper,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_ii = [b5,___stdio_close,_emscripten_glGetString__wrapper,_emscripten_glIsTexture__wrapper,_emscripten_glIsBuffer__wrapper,_emscripten_glIsRenderbuffer__wrapper,_emscripten_glCreateShader__wrapper,_emscripten_glIsShader__wrapper,_emscripten_glIsProgram__wrapper,_emscripten_glIsFramebuffer__wrapper,_emscripten_glCheckFramebufferStatus__wrapper,_emscripten_glIsEnabled__wrapper,b5,b5,b5,b5];
var FUNCTION_TABLE_viddd = [b6,_emscripten_glUniform3f__wrapper,_emscripten_glVertexAttrib3f__wrapper,b6];
var FUNCTION_TABLE_vidd = [b7,_emscripten_glUniform2f__wrapper,_emscripten_glVertexAttrib2f__wrapper,b7];
var FUNCTION_TABLE_iiii = [b8,___stdio_write,___stdio_seek,___stdout_write,_app_emscripten_resize,_do_read,___stdio_read,b8];
var FUNCTION_TABLE_viiiiiiii = [b9,_emscripten_glCompressedTexImage2D__wrapper,_emscripten_glCopyTexImage2D__wrapper,_emscripten_glCopyTexSubImage2D__wrapper];
var FUNCTION_TABLE_viiiiii = [b10,_emscripten_glDrawRangeElements__wrapper,_emscripten_glVertexAttribPointer__wrapper,b10];
var FUNCTION_TABLE_viii = [b11,_nsvg__startElement,_emscripten_glGetTexParameterfv__wrapper,_emscripten_glGetTexParameteriv__wrapper,_emscripten_glTexParameterfv__wrapper,_emscripten_glTexParameteriv__wrapper,_emscripten_glGetBufferParameteriv__wrapper,_emscripten_glGetRenderbufferParameteriv__wrapper,_emscripten_glGetUniformfv__wrapper,_emscripten_glGetUniformiv__wrapper,_emscripten_glGetVertexAttribfv__wrapper,_emscripten_glGetVertexAttribiv__wrapper,_emscripten_glGetVertexAttribPointerv__wrapper,_emscripten_glUniform2i__wrapper,_emscripten_glUniform1iv__wrapper,_emscripten_glUniform2iv__wrapper,_emscripten_glUniform3iv__wrapper,_emscripten_glUniform4iv__wrapper,_emscripten_glUniform1fv__wrapper,_emscripten_glUniform2fv__wrapper,_emscripten_glUniform3fv__wrapper,_emscripten_glUniform4fv__wrapper,_emscripten_glGetShaderiv__wrapper,_emscripten_glGetProgramiv__wrapper,_emscripten_glBindAttribLocation__wrapper,_emscripten_glGetObjectParameterivARB__wrapper,_emscripten_glNormalPointer__wrapper,_emscripten_glDrawArrays__wrapper,_emscripten_glTexParameteri__wrapper,_emscripten_glStencilFunc__wrapper,_emscripten_glStencilOp__wrapper,b11];
var FUNCTION_TABLE_vidddd = [b12,_emscripten_glUniform4f__wrapper,_emscripten_glVertexAttrib4f__wrapper,b12];
var FUNCTION_TABLE_vdi = [b13,_emscripten_glSampleCoverage__wrapper];
var FUNCTION_TABLE_viiiiiii = [b14,_emscripten_glReadPixels__wrapper,_emscripten_glGetActiveUniform__wrapper,_emscripten_glGetActiveAttrib__wrapper];
var FUNCTION_TABLE_viiiiiiiii = [b15,_emscripten_glCompressedTexSubImage2D__wrapper,_emscripten_glTexImage2D__wrapper,_emscripten_glTexSubImage2D__wrapper];
var FUNCTION_TABLE_iii = [b16,_nsvg__cmpEdge,_emscripten_glGetUniformLocation__wrapper,_emscripten_glGetAttribLocation__wrapper];
var FUNCTION_TABLE_i = [b17,_emscripten_glCreateProgram__wrapper,_emscripten_glGetError__wrapper,b17];
var FUNCTION_TABLE_vdddddd = [b18,_emscripten_glFrustum__wrapper];
var FUNCTION_TABLE_vdddd = [b19,_emscripten_glRotatef__wrapper,_emscripten_glClearColor__wrapper,_emscripten_glBlendColor__wrapper];
var FUNCTION_TABLE_vdd = [b20,_emscripten_glDepthRange__wrapper,_emscripten_glDepthRangef__wrapper,_emscripten_glPolygonOffset__wrapper];
var FUNCTION_TABLE_v = [b21,_app_emscripten_draw,_emscripten_glLoadIdentity__wrapper,_emscripten_glReleaseShaderCompiler__wrapper,_emscripten_glFinish__wrapper,_emscripten_glFlush__wrapper,b21,b21];
var FUNCTION_TABLE_viid = [b22,_emscripten_glTexParameterf__wrapper];
var FUNCTION_TABLE_viiii = [b23,_emscripten_glBufferData__wrapper,_emscripten_glBufferSubData__wrapper,_emscripten_glUniform3i__wrapper,_emscripten_glUniformMatrix2fv__wrapper,_emscripten_glUniformMatrix3fv__wrapper,_emscripten_glUniformMatrix4fv__wrapper,_emscripten_glGetAttachedShaders__wrapper,_emscripten_glShaderSource__wrapper,_emscripten_glGetShaderSource__wrapper,_emscripten_glGetShaderInfoLog__wrapper,_emscripten_glGetShaderPrecisionFormat__wrapper,_emscripten_glGetProgramInfoLog__wrapper,_emscripten_glFramebufferRenderbuffer__wrapper,_emscripten_glGetFramebufferAttachmentParameteriv__wrapper,_emscripten_glGetInfoLogARB__wrapper,_emscripten_glVertexPointer__wrapper,_emscripten_glTexCoordPointer__wrapper,_emscripten_glColorPointer__wrapper,_emscripten_glDrawElements__wrapper,_emscripten_glDrawArraysInstanced__wrapper,_emscripten_glViewport__wrapper,_emscripten_glScissor__wrapper,_emscripten_glColorMask__wrapper,_emscripten_glRenderbufferStorage__wrapper,_emscripten_glBlendFuncSeparate__wrapper,_emscripten_glStencilFuncSeparate__wrapper,_emscripten_glStencilOpSeparate__wrapper,b23
,b23,b23,b23];

  return { _i64Subtract: _i64Subtract, _fflush: _fflush, _main: _main, _i64Add: _i64Add, _strstr: _strstr, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _bitshift64Lshr: _bitshift64Lshr, _free: _free, _emscripten_GetProcAddress: _emscripten_GetProcAddress, ___errno_location: ___errno_location, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_viiiii: dynCall_viiiii, dynCall_vd: dynCall_vd, dynCall_vid: dynCall_vid, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viddd: dynCall_viddd, dynCall_vidd: dynCall_vidd, dynCall_iiii: dynCall_iiii, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viii: dynCall_viii, dynCall_vidddd: dynCall_vidddd, dynCall_vdi: dynCall_vdi, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_iii: dynCall_iii, dynCall_i: dynCall_i, dynCall_vdddddd: dynCall_vdddddd, dynCall_vdddd: dynCall_vdddd, dynCall_vdd: dynCall_vdd, dynCall_v: dynCall_v, dynCall_viid: dynCall_viid, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _main = Module["_main"] = asm["_main"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _strstr = Module["_strstr"] = asm["_strstr"];
var _memset = Module["_memset"] = asm["_memset"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _free = Module["_free"] = asm["_free"];
var _emscripten_GetProcAddress = Module["_emscripten_GetProcAddress"] = asm["_emscripten_GetProcAddress"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vd = Module["dynCall_vd"] = asm["dynCall_vd"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viddd = Module["dynCall_viddd"] = asm["dynCall_viddd"];
var dynCall_vidd = Module["dynCall_vidd"] = asm["dynCall_vidd"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_vidddd = Module["dynCall_vidddd"] = asm["dynCall_vidddd"];
var dynCall_vdi = Module["dynCall_vdi"] = asm["dynCall_vdi"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vdddddd = Module["dynCall_vdddddd"] = asm["dynCall_vdddddd"];
var dynCall_vdddd = Module["dynCall_vdddd"] = asm["dynCall_vdddd"];
var dynCall_vdd = Module["dynCall_vdd"] = asm["dynCall_vdd"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_viid = Module["dynCall_viid"] = asm["dynCall_viid"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();


    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    return;
  }

  if (Module['noExitRuntime']) {
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



